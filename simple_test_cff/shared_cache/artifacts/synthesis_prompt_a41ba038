You are conducting a comprehensive computational social science analysis. Your task is to produce an academic-quality research report that extracts maximum insights from the provided data.

# RESEARCH CONTEXT

**Experiment Metadata:**
**Experiment Metadata**: Available in experiment configuration

**Framework Specification:**
# Cohesive Flourishing Framework (CFF) v10.1

---

## Part 1: The Scholarly Document

### Section 1: Abstract & *Raison d'Ãªtre*

**What is this framework?**
The Cohesive Flourishing Framework (CFF) is a comprehensive tool for analyzing political and social discourse to understand its impact on community cohesion and democratic health. It moves beyond simple sentiment analysis to reveal sophisticated patterns in how language builds or undermines social solidarity, trust, and constructive civic engagement.

**What problem does it solve?**
CFF addresses a critical gap in discourse analysis by providing a methodology that preserves complex rhetorical information. Traditional analysis often forces artificial choices (e.g., a text is "hopeful" or "fearful"), losing nuance when sophisticated communication employs competing appeals simultaneously. CFF's independent scoring of opposing dimensions (e.g., Hope vs. Fear) captures this complexity, enabling a more accurate and insightful analysis of...

**Experiment Configuration:**
Research objectives not specified.

**Complete Research Data:**
Complete Statistical Results (format into Markdown tables as instructed):
{
  "status": "completed",
  "stats_hash": "306a6acc3d8e0ccb3fb963fc42d5096bc8907e619ec8ffa7b8073609c2504d74",
  "functions_generated": 5,
  "statistical_results": {
    "generation_metadata": {
      "status": "success",
      "functions_generated": 5,
      "output_file": "automatedstatisticalanalysisagent_functions.py",
      "module_size": 19004,
      "function_code_content": "\"\"\"\nAutomated Statistical Analysis Functions\n========================================\n\nGenerated by AutomatedStatisticalAnalysisAgent for experiment: simple_test\nDescription: Statistical analysis experiment\nGenerated: 2025-08-24T21:09:36.433552+00:00\n\nThis module contains automatically generated statistical analysis functions\nfor comprehensive data analysis including ANOVA, correlations, reliability,\nand hypothesis testing as appropriate for the research questions.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nfrom typing import Dict, Any, Optional, List, Tuple\nimport warnings\n\n# Suppress common statistical warnings for cleaner output\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\n\n\ndef calculate_descriptive_statistics(data, **kwargs):\n    \"\"\"\n    Calculates descriptive statistics (mean, std, min, max, count) for all raw\n    score and salience dimensions in the dataset.\n\n    This function provides a foundational overview of the data distribution for each\n    primary dimension measured by the Cohesive Flourishing Framework, allowing\n    researchers to understand the central tendency and dispersion of scores across\n    the corpus before calculating composite metrics.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame containing the analysis data with\n                             columns matching the framework specification.\n        **kwargs: Additional keyword arguments (not used in this function).\n\n    Returns:\n        dict: A nested dictionary where each key is a dimension name (e.g.,\n              'tribal_dominance_raw') and the value is a dictionary of its\n              descriptive statistics. Returns None if the input data is invalid\n              or an error occurs.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        results = {}\n        # Select only columns ending with _raw or _salience for analysis\n        score_columns = [col for col in data.columns if col.endswith('_raw') or col.endswith('_salience')]\n\n        if not score_columns:\n            return None\n\n        for col in score_columns:\n            if pd.api.types.is_numeric_dtype(data[col]):\n                # Ensure data is clean for JSON serialization\n                mean = data[col].mean()\n                std = data[col].std()\n                count = data[col].count()\n                min_val = data[col].min()\n                max_val = data[col].max()\n\n                results[col] = {\n                    'mean': float(mean) if pd.notna(mean) else None,\n                    'std': float(std) if pd.notna(std) else None,\n                    'count': int(count) if pd.notna(count) else 0,\n                    'min': float(min_val) if pd.notna(min_val) else None,\n                    'max': float(max_val) if pd.notna(max_val) else None\n                }\n\n        return results\n\n    except Exception:\n        return None\n\ndef calculate_derived_metrics(data, **kwargs):\n    \"\"\"\n    Calculates all derived metrics as defined by the Cohesive Flourishing Framework v10.1.\n\n    This function implements the formulas for Tension Indices, the Strategic\n    Contradiction Index, and the three Salience-Weighted Cohesion Indices. It\n    appends these calculated metrics as new columns to the input DataFrame. This is\n    the core function for answering research questions about baseline cohesion and\n    tension scores.\n\n    Methodology:\n    - Tension Indices: Calculated using the formula `min(Score_A, Score_B) * |Salience_A - Salience_B|`\n      for each opposing pair of dimensions.\n    - Strategic Contradiction Index: The arithmetic mean of the five tension indices.\n    - Salience-Weighted Cohesion Indices: Calculated by summing the salience-weighted\n      scores of cohesive dimensions and subtracting the sum of salience-weighted scores\n      of fragmentative dimensions, then normalizing by the total salience of all\n      included dimensions (plus a small epsilon to prevent division by zero).\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with columns for all raw and salience scores.\n        **kwargs: Additional keyword arguments (not used in this function).\n\n    Returns:\n        pd.DataFrame: The original DataFrame with new columns for each derived metric.\n                      Returns None if required columns are missing or an error occurs.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        df = data.copy()\n\n        # --- 1. Calculate Tension Indices ---\n        df['identity_tension'] = np.minimum(df['tribal_dominance_raw'], df['individual_dignity_raw']) * np.abs(df['tribal_dominance_salience'] - df['individual_dignity_salience'])\n        df['emotional_tension'] = np.minimum(df['fear_raw'], df['hope_raw']) * np.abs(df['fear_salience'] - df['hope_salience'])\n        df['success_tension'] = np.minimum(df['envy_raw'], df['compersion_raw']) * np.abs(df['envy_salience'] - df['compersion_salience'])\n        df['relational_tension'] = np.minimum(df['enmity_raw'], df['amity_raw']) * np.abs(df['enmity_salience'] - df['amity_salience'])\n        df['goal_tension'] = np.minimum(df['fragmentative_goals_raw'], df['cohesive_goals_raw']) * np.abs(df['fragmentative_goals_salience'] - df['cohesive_goals_salience'])\n\n        # --- 2. Calculate Strategic Contradiction Index ---\n        tension_cols = ['identity_tension', 'emotional_tension', 'success_tension', 'relational_tension', 'goal_tension']\n        df['strategic_contradiction_index'] = df[tension_cols].mean(axis=1)\n\n        # --- 3. Calculate Salience-Weighted Cohesion Indices ---\n        epsilon = 0.001\n\n        # Numerator components\n        identity_comp = (df['individual_dignity_raw'] * df['individual_dignity_salience']) - (df['tribal_dominance_raw'] * df['tribal_dominance_salience'])\n        emotional_comp = (df['hope_raw'] * df['hope_salience']) - (df['fear_raw'] * df['fear_salience'])\n        success_comp = (df['compersion_raw'] * df['compersion_salience']) - (df['envy_raw'] * df['envy_salience'])\n        relational_comp = (df['amity_raw'] * df['amity_salience']) - (df['enmity_raw'] * df['enmity_salience'])\n        goal_comp = (df['cohesive_goals_raw'] * df['cohesive_goals_salience']) - (df['fragmentative_goals_raw'] * df['fragmentative_goals_salience'])\n\n        # Denominator (salience totals)\n        descriptive_salience_total = df['hope_salience'] + df['fear_salience'] + df['compersion_salience'] + df['envy_salience'] + df['amity_salience'] + df['enmity_salience']\n        motivational_salience_total = descriptive_salience_total + df['cohesive_goals_salience'] + df['fragmentative_goals_salience']\n        full_salience_total = motivational_salience_total + df['individual_dignity_salience'] + df['tribal_dominance_salience']\n\n        # Descriptive Cohesion Index\n        numerator_desc = emotional_comp + success_comp + relational_comp\n        df['descriptive_cohesion_index'] = numerator_desc / (descriptive_salience_total + epsilon)\n\n        # Motivational Cohesion Index\n        numerator_motiv = numerator_desc + goal_comp\n        df['motivational_cohesion_index'] = numerator_motiv / (motivational_salience_total + epsilon)\n\n        # Full Cohesion Index\n        numerator_full = numerator_motiv + identity_comp\n        df['full_cohesion_index'] = numerator_full / (full_salience_total + epsilon)\n        \n        # Clip results to the theoretical -1.0 to 1.0 range\n        cohesion_indices = ['descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index']\n        for col in cohesion_indices:\n            df[col] = df[col].clip(-1.0, 1.0)\n\n        return df\n\n    except (KeyError, Exception):\n        # KeyError if a required column is missing\n        return None\n\ndef summarize_corpus_metrics(data, **kwargs):\n    \"\"\"\n    Calculates and summarizes the key derived metrics for the entire corpus.\n\n    This function first computes the derived metrics (Tension, Cohesion, etc.)\n    for each document and then provides descriptive statistics (mean, std, min, max)\n    for these high-level indicators across the whole dataset. This directly addresses\n    the research question about baseline cohesion and tension scores for the corpus.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with columns for all raw and salience scores.\n        **kwargs: Additional keyword arguments (not used in this function).\n\n    Returns:\n        dict: A nested dictionary of descriptive statistics for each derived metric.\n              Returns None if the input data is invalid or an error occurs.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        # First, calculate the derived metrics using the dedicated function\n        metrics_df = calculate_derived_metrics(data)\n\n        if metrics_df is None:\n            # This happens if calculate_derived_metrics fails (e.g., missing columns)\n            return None\n\n        derived_metric_columns = [\n            'identity_tension', 'emotional_tension', 'success_tension',\n            'relational_tension', 'goal_tension', 'strategic_contradiction_index',\n            'descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index'\n        ]\n\n        # Calculate descriptive statistics for the derived metrics\n        summary = metrics_df[derived_metric_columns].describe().transpose()\n        summary.rename(columns={'25%': 'q1', '50%': 'median', '75%': 'q3'}, inplace=True)\n        \n        # Convert to a JSON-serializable dictionary\n        results = summary.to_dict('index')\n        \n        # Ensure all values are standard Python floats, not numpy types\n        for metric, stats in results.items():\n            for stat_name, value in stats.items():\n                stats[stat_name] = float(value) if pd.notna(value) else None\n        \n        return results\n\n    except Exception:\n        return None\n\ndef calculate_correlation_matrix(data, **kwargs):\n    \"\"\"\n    Computes the Pearson correlation matrix for raw scores and derived metrics.\n\n    This analysis helps reveal relationships between different rhetorical strategies.\n    For example, it can show if 'fear_raw' scores are positively correlated with\n    'enmity_raw' scores, or how the 'full_cohesion_index' relates to individual\n    dimensions. The function calculates derived metrics first to include them in\n    the correlation analysis.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with raw and salience scores.\n        **kwargs: Additional keyword arguments (not used in this function).\n\n    Returns:\n        dict: A dictionary representing the correlation matrix, suitable for JSON\n              serialization. Returns None if data is insufficient or an error occurs.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty or len(data) < 2:\n            return None\n\n        # Calculate derived metrics to include them in the correlation\n        metrics_df = calculate_derived_metrics(data)\n        if metrics_df is None:\n            return None\n\n        # Select columns for correlation: all raw scores and all derived metrics\n        raw_score_cols = [col for col in metrics_df.columns if col.endswith('_raw')]\n        derived_metric_cols = [\n            'identity_tension', 'emotional_tension', 'success_tension',\n            'relational_tension', 'goal_tension', 'strategic_contradiction_index',\n            'descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index'\n        ]\n        \n        cols_to_correlate = raw_score_cols + derived_metric_cols\n        \n        # Ensure all selected columns exist in the dataframe\n        cols_to_correlate = [col for col in cols_to_correlate if col in metrics_df.columns]\n\n        correlation_matrix = metrics_df[cols_to_correlate].corr(method='pearson')\n\n        # Convert NaN to None for JSON compatibility\n        correlation_matrix = correlation_matrix.where(pd.notna(correlation_matrix), None)\n\n        return correlation_matrix.to_dict('index')\n\n    except Exception:\n        return None\n\ndef identify_outlier_documents(data, **kwargs):\n    \"\"\"\n    Identifies documents with the highest and lowest scores for key derived metrics.\n\n    This function is useful for qualitative analysis, allowing researchers to\n    easily find and examine the most extreme examples of cohesive, fragmentative,\n    or contradictory rhetoric within the corpus. It identifies the top and bottom N\n    documents for the 'full_cohesion_index' and 'strategic_contradiction_index'.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with raw and salience scores.\n        **kwargs:\n            n (int): The number of top/bottom documents to return. Defaults to 5.\n\n    Returns:\n        dict: A dictionary containing lists of the top and bottom N documents\n              for key metrics, including their scores. Returns None on error.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        n = kwargs.get('n', 5)\n        if not isinstance(n, int) or n < 1:\n            n = 5\n\n        metrics_df = calculate_derived_metrics(data)\n        if metrics_df is None:\n            return None\n        \n        # Ensure n is not larger than the number of documents\n        n = min(n, len(metrics_df))\n\n        results = {}\n        metrics_to_analyze = ['full_cohesion_index', 'strategic_contradiction_index']\n\n        for metric in metrics_to_analyze:\n            if metric in metrics_df.columns:\n                # Sort ascending for 'lowest' and descending for 'highest'\n                lowest = metrics_df.nsmallest(n, metric)[['document_name', metric]]\n                highest = metrics_df.nlargest(n, metric)[['document_name', metric]]\n\n                results[metric] = {\n                    'lowest_scoring_documents': lowest.to_dict('records'),\n                    'highest_scoring_documents': highest.to_dict('records')\n                }\n\n        return results if results else None\n\n    except Exception:\n        return None\n\ndef run_complete_statistical_analysis(data: pd.DataFrame, alpha: float = 0.05) -> Dict[str, Any]:\n    \"\"\"\n    Run complete statistical analysis suite on the dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores\n        alpha: Significance level for hypothesis tests (default: 0.05)\n        \n    Returns:\n        Dictionary with all statistical analysis results\n    \"\"\"\n    results = {\n        'analysis_metadata': {\n            'timestamp': pd.Timestamp.now().isoformat(),\n            'sample_size': len(data),\n            'alpha_level': alpha,\n            'variables_analyzed': list(data.select_dtypes(include=[np.number]).columns)\n        }\n    }\n    \n    # Get all analysis functions from this module\n    import inspect\n    current_module = inspect.getmodule(inspect.currentframe())\n    \n    for name, obj in inspect.getmembers(current_module):\n        if (inspect.isfunction(obj) and \n            name.startswith(('calculate_', 'perform_', 'test_')) and \n            name != 'run_complete_statistical_analysis'):\n            try:\n                # Pass alpha parameter to functions that might need it\n                if 'alpha' in inspect.signature(obj).parameters:\n                    results[name] = obj(data, alpha=alpha)\n                else:\n                    results[name] = obj(data)\n            except Exception as e:\n                results[name] = {'error': f'Analysis failed: {str(e)}'}\n                \n    return results\n\n\ndef perform_statistical_analysis(data: pd.DataFrame) -> Dict[str, Any]:\n    \"\"\"\n    Template-compatible wrapper function for statistical analysis.\n    \n    This function is called by the universal notebook template and performs\n    comprehensive statistical analysis on the provided dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores and derived metrics\n        \n    Returns:\n        Dictionary containing all statistical analysis results\n    \"\"\"\n    return run_complete_statistical_analysis(data)\n\n\ndef generate_statistical_summary_report(analysis_results: Dict[str, Any]) -> str:\n    \"\"\"\n    Generate a human-readable summary report from statistical analysis results.\n    \n    Args:\n        analysis_results: Results from run_complete_statistical_analysis()\n        \n    Returns:\n        String containing formatted statistical report\n    \"\"\"\n    report_lines = []\n    report_lines.append(\"STATISTICAL ANALYSIS SUMMARY REPORT\")\n    report_lines.append(\"=\" * 50)\n    \n    metadata = analysis_results.get('analysis_metadata', {})\n    report_lines.append(f\"Analysis Timestamp: {metadata.get('timestamp', 'Unknown')}\")\n    report_lines.append(f\"Sample Size: {metadata.get('sample_size', 'Unknown')}\")\n    report_lines.append(f\"Alpha Level: {metadata.get('alpha_level', 'Unknown')}\")\n    report_lines.append(f\"Variables: {len(metadata.get('variables_analyzed', []))}\")\n    report_lines.append(\"\")\n    \n    # Summarize key findings\n    for analysis_name, result in analysis_results.items():\n        if analysis_name != 'analysis_metadata' and isinstance(result, dict):\n            if 'error' not in result:\n                report_lines.append(f\"{analysis_name.replace('_', ' ').title()}:\")\n                \n                # Extract key statistics based on analysis type\n                if 'p_value' in result:\n                    p_val = result['p_value']\n                    significance = \"significant\" if p_val < metadata.get('alpha_level', 0.05) else \"not significant\"\n                    report_lines.append(f\"  - p-value: {p_val:.4f} ({significance})\")\n                \n                if 'effect_size' in result:\n                    report_lines.append(f\"  - Effect size: {result['effect_size']:.4f}\")\n                \n                if 'correlation_matrix' in result:\n                    report_lines.append(f\"  - Correlation matrix generated with {len(result['correlation_matrix'])} variables\")\n                \n                if 'cronbach_alpha' in result:\n                    alpha_val = result['cronbach_alpha']\n                    reliability = \"excellent\" if alpha_val > 0.9 else \"good\" if alpha_val > 0.8 else \"acceptable\" if alpha_val > 0.7 else \"questionable\"\n                    report_lines.append(f\"  - Cronbach's \u03b1: {alpha_val:.3f} ({reliability})\")\n                \n                report_lines.append(\"\")\n            else:\n                report_lines.append(f\"{analysis_name}: ERROR - {result['error']}\")\n                report_lines.append(\"\")\n    \n    return \"\\n\".join(report_lines)\n",
      "cached_with_code": true
    },
    "statistical_data": {
      "calculate_correlation_matrix": {
        "tribal_dominance_raw": {
          "tribal_dominance_raw": 1.0,
          "individual_dignity_raw": -0.6726915834767423,
          "fear_raw": 0.9906911047183067,
          "hope_raw": -0.7601986084377158,
          "envy_raw": 0.9154172965460301,
          "compersion_raw": -0.9925232596048371,
          "enmity_raw": 0.9801019455042927,
          "amity_raw": -0.5496570794849577,
          "fragmentative_goals_raw": 1.0,
          "cohesive_goals_raw": -0.5968194129500576,
          "identity_tension": 1.0,
          "emotional_tension": -0.5128430524972404,
          "success_tension": NaN,
          "relational_tension": 0.5109727978163674,
          "goal_tension": 0.523204564926355,
          "strategic_contradiction_index": 0.40745489375226346,
          "descriptive_cohesion_index": -0.9525258606731638,
          "motivational_cohesion_index": -0.9447586663531482,
          "full_cohesion_index": -0.9528443270025629
        },
        "individual_dignity_raw": {
          "tribal_dominance_raw": -0.6726915834767423,
          "individual_dignity_raw": 1.0,
          "fear_raw": -0.6311687442672025,
          "hope_raw": 0.535303379031311,
          "envy_raw": -0.408248290463863,
          "compersion_raw": 0.5773502691896258,
          "enmity_raw": -0.5298129428260175,
          "amity_raw": 0.7071067811865478,
          "fragmentative_goals_raw": -0.6726915834767423,
          "cohesive_goals_raw": 0.7427813527082077,
          "identity_tension": -0.672691583476742,
          "emotional_tension": 0.9801960588196069,
          "success_tension": NaN,
          "relational_tension": 0.06637233115999727,
          "goal_tension": 1.3273584801215731e-16,
          "strategic_contradiction_index": 0.3866223365135297,
          "descriptive_cohesion_index": 0.6356136667012724,
          "motivational_cohesion_index": 0.6803923773776975,
          "full_cohesion_index": 0.7340126844693368
        },
        "fear_raw": {
          "tribal_dominance_raw": 0.9906911047183067,
          "individual_dignity_raw": -0.6311687442672025,
          "fear_raw": 1.0,
          "hope_raw": -0.8343240438156556,
          "envy_raw": 0.8834522085987724,
          "compersion_raw": -0.9891004919611718,
          "enmity_raw": 0.9673753912650249,
          "amity_raw": -0.6120736445408048,
          "fragmentative_goals_raw": 0.9906911047183069,
          "cohesive_goals_raw": -0.6529998061608359,
          "identity_tension": 0.9906911047183069,
          "emotional_tension": -0.4671583117651183,
          "success_tension": NaN,
          "relational_tension": 0.44884436691795376,
          "goal_tension": 0.6311687442672027,
          "strategic_contradiction_index": 0.4706175882398711,
          "descriptive_cohesion_index": -0.9828030074403216,
          "motivational_cohesion_index": -0.9741487449294917,
          "full_cohesion_index": -0.9731992554854755
        },
        "hope_raw": {
          "tribal_dominance_raw": -0.7601986084377158,
          "individual_dignity_raw": 0.535303379031311,
          "fear_raw": -0.8343240438156556,
          "hope_raw": 1.0,
          "envy_raw": -0.4995124328435701,
          "compersion_raw": 0.7505683356701915,
          "enmity_raw": -0.6786397901000866,
          "amity_raw": 0.8868104355148352,
          "fragmentative_goals_raw": -0.7601986084377158,
          "cohesive_goals_raw": 0.8946300779688405,
          "identity_tension": -0.7601986084377157,
          "emotional_tension": 0.4176201680321031,
          "success_tension": NaN,
          "relational_tension": 0.05583180922649258,
          "goal_tension": -0.8411910241920597,
          "strategic_contradiction_index": -0.40505076158314535,
          "descriptive_cohesion_index": 0.9213908737209086,
          "motivational_cohesion_index": 0.9291774192468408,
          "full_cohesion_index": 0.9076262590930456
        },
        "envy_raw": {
          "tribal_dominance_raw": 0.9154172965460301,
          "individual_dignity_raw": -0.408248290463863,
          "fear_raw": 0.8834522085987724,
          "hope_raw": -0.4995124328435701,
          "envy_raw": 1.0,
          "compersion_raw": -0.9428090415820634,
          "enmity_raw": 0.973328526784575,
          "amity_raw": -0.17320508075688767,
          "fragmentative_goals_raw": 0.9154172965460301,
          "cohesive_goals_raw": -0.22742941307367104,
          "identity_tension": 0.9154172965460302,
          "emotional_tension": -0.2286647801900117,
          "success_tension": NaN,
          "relational_tension": 0.8128917219051074,
          "goal_tension": 0.4082482904638631,
          "strategic_contradiction_index": 0.5682164685724538,
          "descriptive_cohesion_index": -0.7860416303983129,
          "motivational_cohesion_index": -0.7548568355933731,
          "full_cohesion_index": -0.7572525474800123
        },
        "compersion_raw": {
          "tribal_dominance_raw": -0.9925232596048371,
          "individual_dignity_raw": 0.5773502691896258,
          "fear_raw": -0.9891004919611718,
          "hope_raw": 0.7505683356701915,
          "envy_raw": -0.9428090415820634,
          "compersion_raw": 1.0,
          "enmity_raw": -0.9941348467724342,
          "amity_raw": 0.48989794855663565,
          "fragmentative_goals_raw": -0.9925232596048371,
          "cohesive_goals_raw": 0.5360562674188976,
          "identity_tension": -0.9925232596048371,
          "emotional_tension": 0.4042260417272217,
          "success_tension": NaN,
          "relational_tension": -0.5748012489295105,
          "goal_tension": -0.5773502691896258,
          "strategic_contradiction_index": -0.513397973139859,
          "descriptive_cohesion_index": 0.9462523584623697,
          "motivational_cohesion_index": 0.9302947765127986,
          "full_cohesion_index": 0.9303721540251412
        },
        "enmity_raw": {
          "tribal_dominance_raw": 0.9801019455042927,
          "individual_dignity_raw": -0.5298129428260175,
          "fear_raw": 0.9673753912650249,
          "hope_raw": -0.6786397901000866,
          "envy_raw": 0.973328526784575,
          "compersion_raw": -0.9941348467724342,
          "enmity_raw": 1.0,
          "amity_raw": -0.3933660408643115,
          "fragmentative_goals_raw": 0.9801019455042927,
          "cohesive_goals_raw": -0.44272707114895365,
          "identity_tension": 0.9801019455042927,
          "emotional_tension": -0.3523960932472829,
          "success_tension": NaN,
          "relational_tension": 0.6593422517643955,
          "goal_tension": 0.5298129428260175,
          "strategic_contradiction_index": 0.5376984844100727,
          "descriptive_cohesion_index": -0.9062811184324951,
          "motivational_cohesion_index": -0.8851806738493566,
          "full_cohesion_index": -0.8860112002794349
        },
        "amity_raw": {
          "tribal_dominance_raw": -0.5496570794849577,
          "individual_dignity_raw": 0.7071067811865478,
          "fear_raw": -0.6120736445408048,
          "hope_raw": 0.8868104355148352,
          "envy_raw": -0.17320508075688767,
          "compersion_raw": 0.48989794855663565,
          "enmity_raw": -0.3933660408643115,
          "amity_raw": 1.0,
          "fragmentative_goals_raw": -0.5496570794849577,
          "cohesive_goals_raw": 0.9979288897338915,
          "identity_tension": -0.5496570794849573,
          "emotional_tension": 0.6733003292241385,
          "success_tension": NaN,
          "relational_tension": 0.4317773941068175,
          "goal_tension": -0.5656854249492378,
          "strategic_contradiction_index": 0.0492089896632429,
          "descriptive_cohesion_index": 0.7334586805398083,
          "motivational_cohesion_index": 0.7724137285346926,
          "full_cohesion_index": 0.7743959814594011
        },
        "fragmentative_goals_raw": {
          "tribal_dominance_raw": 1.0,
          "individual_dignity_raw": -0.6726915834767423,
          "fear_raw": 0.9906911047183069,
          "hope_raw": -0.7601986084377158,
          "envy_raw": 0.9154172965460301,
          "compersion_raw": -0.9925232596048371,
          "enmity_raw": 0.9801019455042927,
          "amity_raw": -0.5496570794849577,
          "fragmentative_goals_raw": 1.0,
          "cohesive_goals_raw": -0.5968194129500576,
          "identity_tension": 1.0,
          "emotional_tension": -0.5128430524972404,
          "success_tension": NaN,
          "relational_tension": 0.5109727978163674,
          "goal_tension": 0.523204564926355,
          "strategic_contradiction_index": 0.40745489375226346,
          "descriptive_cohesion_index": -0.9525258606731638,
          "motivational_cohesion_index": -0.9447586663531482,
          "full_cohesion_index": -0.9528443270025629
        },
        "cohesive_goals_raw": {
          "tribal_dominance_raw": -0.5968194129500576,
          "individual_dignity_raw": 0.7427813527082077,
          "fear_raw": -0.6529998061608359,
          "hope_raw": 0.8946300779688405,
          "envy_raw": -0.22742941307367104,
          "compersion_raw": 0.5360562674188976,
          "enmity_raw": -0.44272707114895365,
          "amity_raw": 0.9979288897338915,
          "fragmentative_goals_raw": -0.5968194129500576,
          "cohesive_goals_raw": 1.0,
          "identity_tension": -0.5968194129500571,
          "emotional_tension": 0.702068806114664,
          "success_tension": NaN,
          "relational_tension": 0.38207600689100363,
          "goal_tension": -0.5570860145311551,
          "strategic_contradiction_index": 0.04307637931540935,
          "descriptive_cohesion_index": 0.7651142633640498,
          "motivational_cohesion_index": 0.8032928802581368,
          "full_cohesion_index": 0.8080004655961094
        },
        "identity_tension": {
          "tribal_dominance_raw": 1.0,
          "individual_dignity_raw": -0.672691583476742,
          "fear_raw": 0.9906911047183069,
          "hope_raw": -0.7601986084377157,
          "envy_raw": 0.9154172965460302,
          "compersion_raw": -0.9925232596048371,
          "enmity_raw": 0.9801019455042927,
          "amity_raw": -0.5496570794849573,
          "fragmentative_goals_raw": 1.0,
          "cohesive_goals_raw": -0.5968194129500571,
          "identity_tension": 1.0,
          "emotional_tension": -0.5128430524972398,
          "success_tension": NaN,
          "relational_tension": 0.5109727978163678,
          "goal_tension": 0.5232045649263554,
          "strategic_contradiction_index": 0.40745489375226407,
          "descriptive_cohesion_index": -0.9525258606731638,
          "motivational_cohesion_index": -0.9447586663531481,
          "full_cohesion_index": -0.9528443270025629
        },
        "emotional_tension": {
          "tribal_dominance_raw": -0.5128430524972404,
          "individual_dignity_raw": 0.9801960588196069,
          "fear_raw": -0.4671583117651183,
          "hope_raw": 0.4176201680321031,
          "envy_raw": -0.2286647801900117,
          "compersion_raw": 0.4042260417272217,
          "enmity_raw": -0.3523960932472829,
          "amity_raw": 0.6733003292241385,
          "fragmentative_goals_raw": -0.5128430524972404,
          "cohesive_goals_raw": 0.702068806114664,
          "identity_tension": -0.5128430524972398,
          "emotional_tension": 1.0,
          "success_tension": NaN,
          "relational_tension": 0.2137616629438683,
          "goal_tension": 0.1400280084028012,
          "strategic_contradiction_index": 0.5576209445960788,
          "descriptive_cohesion_index": 0.48252981969247205,
          "motivational_cohesion_index": 0.5365622912036003,
          "full_cohesion_index": 0.5966102828961911
        },
        "success_tension": {
          "tribal_dominance_raw": NaN,
          "individual_dignity_raw": NaN,
          "fear_raw": NaN,
          "hope_raw": NaN,
          "envy_raw": NaN,
          "compersion_raw": NaN,
          "enmity_raw": NaN,
          "amity_raw": NaN,
          "fragmentative_goals_raw": NaN,
          "cohesive_goals_raw": NaN,
          "identity_tension": NaN,
          "emotional_tension": NaN,
          "success_tension": NaN,
          "relational_tension": NaN,
          "goal_tension": NaN,
          "strategic_contradiction_index": NaN,
          "descriptive_cohesion_index": NaN,
          "motivational_cohesion_index": NaN,
          "full_cohesion_index": NaN
        },
        "relational_tension": {
          "tribal_dominance_raw": 0.5109727978163674,
          "individual_dignity_raw": 0.06637233115999727,
          "fear_raw": 0.44884436691795376,
          "hope_raw": 0.05583180922649258,
          "envy_raw": 0.8128917219051074,
          "compersion_raw": -0.5748012489295105,
          "enmity_raw": 0.6593422517643955,
          "amity_raw": 0.4317773941068175,
          "fragmentative_goals_raw": 0.5109727978163674,
          "cohesive_goals_raw": 0.38207600689100363,
          "identity_tension": 0.5109727978163678,
          "emotional_tension": 0.2137616629438683,
          "success_tension": NaN,
          "relational_tension": 1.0,
          "goal_tension": 0.06637233115999748,
          "strategic_contradiction_index": 0.5773730794408768,
          "descriptive_cohesion_index": -0.2905742374724683,
          "motivational_cohesion_index": -0.23749882920483756,
          "full_cohesion_index": -0.23571825246056824
        },
        "goal_tension": {
          "tribal_dominance_raw": 0.523204564926355,
          "individual_dignity_raw": 1.3273584801215731e-16,
          "fear_raw": 0.6311687442672027,
          "hope_raw": -0.8411910241920597,
          "envy_raw": 0.4082482904638631,
          "compersion_raw": -0.5773502691896258,
          "enmity_raw": 0.5298129428260175,
          "amity_raw": -0.5656854249492378,
          "fragmentative_goals_raw": 0.523204564926355,
          "cohesive_goals_raw": -0.5570860145311551,
          "identity_tension": 0.5232045649263554,
          "emotional_tension": 0.1400280084028012,
          "success_tension": NaN,
          "relational_tension": 0.06637233115999748,
          "goal_tension": 1.0,
          "strategic_contradiction_index": 0.7732446730270591,
          "descriptive_cohesion_index": -0.7168997455148984,
          "motivational_cohesion_index": -0.6932291844387695,
          "full_cohesion_index": -0.6340086492196251
        },
        "strategic_contradiction_index": {
          "tribal_dominance_raw": 0.40745489375226346,
          "individual_dignity_raw": 0.3866223365135297,
          "fear_raw": 0.4706175882398711,
          "hope_raw": -0.40505076158314535,
          "envy_raw": 0.5682164685724538,
          "compersion_raw": -0.513397973139859,
          "enmity_raw": 0.5376984844100727,
          "amity_raw": 0.0492089896632429,
          "fragmentative_goals_raw": 0.40745489375226346,
          "cohesive_goals_raw": 0.04307637931540935,
          "identity_tension": 0.40745489375226407,
          "emotional_tension": 0.5576209445960788,
          "success_tension": NaN,
          "relational_tension": 0.5773730794408768,
          "goal_tension": 0.7732446730270591,
          "strategic_contradiction_index": 1.0,
          "descriptive_cohesion_index": -0.45256568555973725,
          "motivational_cohesion_index": -0.39244917036695826,
          "full_cohesion_index": -0.3288084843905882
        },
        "descriptive_cohesion_index": {
          "tribal_dominance_raw": -0.9525258606731638,
          "individual_dignity_raw": 0.6356136667012724,
          "fear_raw": -0.9828030074403216,
          "hope_raw": 0.9213908737209086,
          "envy_raw": -0.7860416303983129,
          "compersion_raw": 0.9462523584623697,
          "enmity_raw": -0.9062811184324951,
          "amity_raw": 0.7334586805398083,
          "fragmentative_goals_raw": -0.9525258606731638,
          "cohesive_goals_raw": 0.7651142633640498,
          "identity_tension": -0.9525258606731638,
          "emotional_tension": 0.48252981969247205,
          "success_tension": NaN,
          "relational_tension": -0.2905742374724683,
          "goal_tension": -0.7168997455148984,
          "strategic_contradiction_index": -0.45256568555973725,
          "descriptive_cohesion_index": 1.0,
          "motivational_cohesion_index": 0.9975291268013384,
          "full_cohesion_index": 0.9907982802180594
        },
        "motivational_cohesion_index": {
          "tribal_dominance_raw": -0.9447586663531482,
          "individual_dignity_raw": 0.6803923773776975,
          "fear_raw": -0.9741487449294917,
          "hope_raw": 0.9291774192468408,
          "envy_raw": -0.7548568355933731,
          "compersion_raw": 0.9302947765127986,
          "enmity_raw": -0.8851806738493566,
          "amity_raw": 0.7724137285346926,
          "fragmentative_goals_raw": -0.9447586663531482,
          "cohesive_goals_raw": 0.8032928802581368,
          "identity_tension": -0.9447586663531481,
          "emotional_tension": 0.5365622912036003,
          "success_tension": NaN,
          "relational_tension": -0.23749882920483756,
          "goal_tension": -0.6932291844387695,
          "strategic_contradiction_index": -0.39244917036695826,
          "descriptive_cohesion_index": 0.9975291268013384,
          "motivational_cohesion_index": 1.0,
          "full_cohesion_index": 0.9967924546268615
        },
        "full_cohesion_index": {
          "tribal_dominance_raw": -0.9528443270025629,
          "individual_dignity_raw": 0.7340126844693368,
          "fear_raw": -0.9731992554854755,
          "hope_raw": 0.9076262590930456,
          "envy_raw": -0.7572525474800123,
          "compersion_raw": 0.9303721540251412,
          "enmity_raw": -0.8860112002794349,
          "amity_raw": 0.7743959814594011,
          "fragmentative_goals_raw": -0.9528443270025629,
          "cohesive_goals_raw": 0.8080004655961094,
          "identity_tension": -0.9528443270025629,
          "emotional_tension": 0.5966102828961911,
          "success_tension": NaN,
          "relational_tension": -0.23571825246056824,
          "goal_tension": -0.6340086492196251,
          "strategic_contradiction_index": -0.3288084843905882,
          "descriptive_cohesion_index": 0.9907982802180594,
          "motivational_cohesion_index": 0.9967924546268615,
          "full_cohesion_index": 1.0
        }
      },
      "calculate_derived_metrics": {
        "type": "dataframe",
        "data": [
          {
            "document_name": "john_mccain_2008_concession.txt",
            "tribal_dominance_raw": 0.0,
            "tribal_dominance_salience": 0.1,
            "tribal_dominance_confidence": 1.0,
            "individual_dignity_raw": 0.8,
            "individual_dignity_salience": 0.9,
            "individual_dignity_confidence": 1.0,
            "fear_raw": 0.2,
            "fear_salience": 0.3,
            "fear_confidence": 0.9,
            "hope_raw": 0.9,
            "hope_salience": 0.9,
            "hope_confidence": 1.0,
            "envy_raw": 0.0,
            "envy_salience": 0.0,
            "envy_confidence": 1.0,
            "compersion_raw": 0.9,
            "compersion_salience": 1.0,
            "compersion_confidence": 1.0,
            "enmity_raw": 0.0,
            "enmity_salience": 0.1,
            "enmity_confidence": 1.0,
            "amity_raw": 0.9,
            "amity_salience": 1.0,
            "amity_confidence": 1.0,
            "fragmentative_goals_raw": 0.0,
            "fragmentative_goals_salience": 0.0,
            "fragmentative_goals_confidence": 1.0,
            "cohesive_goals_raw": 0.9,
            "cohesive_goals_salience": 0.9,
            "cohesive_goals_confidence": 1.0,
            "identity_tension": 0.0,
            "emotional_tension": 0.12000000000000002,
            "success_tension": 0.0,
            "relational_tension": 0.0,
            "goal_tension": 0.0,
            "strategic_contradiction_index": 0.024000000000000004,
            "descriptive_cohesion_index": 0.7724931838836715,
            "motivational_cohesion_index": 0.7998095691502022,
            "full_cohesion_index": 0.7844645260526821
          },
          {
            "document_name": "steve_king_2017_house_floor.txt",
            "tribal_dominance_raw": 0.8,
            "tribal_dominance_salience": 0.9,
            "tribal_dominance_confidence": 0.95,
            "individual_dignity_raw": 0.1,
            "individual_dignity_salience": 0.1,
            "individual_dignity_confidence": 0.9,
            "fear_raw": 0.9,
            "fear_salience": 0.9,
            "fear_confidence": 0.95,
            "hope_raw": 0.0,
            "hope_salience": 0.0,
            "hope_confidence": 0.9,
            "envy_raw": 0.6,
            "envy_salience": 0.6,
            "envy_confidence": 0.85,
            "compersion_raw": 0.0,
            "compersion_salience": 0.0,
            "compersion_confidence": 0.9,
            "enmity_raw": 0.8,
            "enmity_salience": 0.8,
            "enmity_confidence": 0.9,
            "amity_raw": 0.0,
            "amity_salience": 0.0,
            "amity_confidence": 0.9,
            "fragmentative_goals_raw": 0.8,
            "fragmentative_goals_salience": 0.9,
            "fragmentative_goals_confidence": 0.95,
            "cohesive_goals_raw": 0.2,
            "cohesive_goals_salience": 0.2,
            "cohesive_goals_confidence": 0.8,
            "identity_tension": 0.08000000000000002,
            "emotional_tension": 0.0,
            "success_tension": 0.0,
            "relational_tension": 0.0,
            "goal_tension": 0.13999999999999999,
            "strategic_contradiction_index": 0.044,
            "descriptive_cohesion_index": -0.7866145154280749,
            "motivational_cohesion_index": -0.7321376065862982,
            "full_cohesion_index": -0.7271074755737331
          },
          {
            "document_name": "bernie_sanders_2025_fighting_oligarchy.txt",
            "tribal_dominance_raw": 0.8,
            "tribal_dominance_salience": 0.9,
            "tribal_dominance_confidence": 1.0,
            "individual_dignity_raw": 0.1,
            "individual_dignity_salience": 0.1,
            "individual_dignity_confidence": 0.9,
            "fear_raw": 0.8,
            "fear_salience": 0.8,
            "fear_confidence": 1.0,
            "hope_raw": 0.6,
            "hope_salience": 0.8,
            "hope_confidence": 1.0,
            "envy_raw": 0.9,
            "envy_salience": 0.9,
            "envy_confidence": 1.0,
            "compersion_raw": 0.0,
            "compersion_salience": 0.0,
            "compersion_confidence": 1.0,
            "enmity_raw": 0.9,
            "enmity_salience": 0.9,
            "enmity_confidence": 1.0,
            "amity_raw": 0.7,
            "amity_salience": 0.8,
            "amity_confidence": 1.0,
            "fragmentative_goals_raw": 0.8,
            "fragmentative_goals_salience": 0.8,
            "fragmentative_goals_confidence": 0.95,
            "cohesive_goals_raw": 0.7,
            "cohesive_goals_salience": 0.8,
            "cohesive_goals_confidence": 1.0,
            "identity_tension": 0.08000000000000002,
            "emotional_tension": 0.0,
            "success_tension": 0.0,
            "relational_tension": 0.06999999999999998,
            "goal_tension": 0.0,
            "strategic_contradiction_index": 0.03,
            "descriptive_cohesion_index": -0.2904070459414425,
            "motivational_cohesion_index": -0.22409929322530603,
            "full_cohesion_index": -0.2955447728275254
          },
          {
            "document_name": "alexandria_ocasio_cortez_2025_fighting_oligarchy.txt",
            "tribal_dominance_raw": 0.7,
            "tribal_dominance_salience": 0.8,
            "tribal_dominance_confidence": 0.95,
            "individual_dignity_raw": 0.8,
            "individual_dignity_salience": 0.7,
            "individual_dignity_confidence": 0.95,
            "fear_raw": 0.8,
            "fear_salience": 0.8,
            "fear_confidence": 0.9,
            "hope_raw": 0.4,
            "hope_salience": 0.4,
            "hope_confidence": 0.9,
            "envy_raw": 0.9,
            "envy_salience": 0.9,
            "envy_confidence": 0.95,
            "compersion_raw": 0.0,
            "compersion_salience": 0.0,
            "compersion_confidence": 1.0,
            "enmity_raw": 0.9,
            "enmity_salience": 0.9,
            "enmity_confidence": 0.95,
            "amity_raw": 0.8,
            "amity_salience": 0.8,
            "amity_confidence": 0.95,
            "fragmentative_goals_raw": 0.7,
            "fragmentative_goals_salience": 0.6,
            "fragmentative_goals_confidence": 0.9,
            "cohesive_goals_raw": 0.8,
            "cohesive_goals_salience": 0.8,
            "cohesive_goals_confidence": 0.95,
            "identity_tension": 0.07000000000000006,
            "emotional_tension": 0.16000000000000003,
            "success_tension": 0.0,
            "relational_tension": 0.07999999999999999,
            "goal_tension": 0.14000000000000004,
            "strategic_contradiction_index": 0.09000000000000001,
            "descriptive_cohesion_index": -0.38410944488292553,
            "motivational_cohesion_index": -0.23841568929052098,
            "full_cohesion_index": -0.18504700790926723
          }
        ],
        "columns": [
          "document_name",
          "tribal_dominance_raw",
          "tribal_dominance_salience",
          "tribal_dominance_confidence",
          "individual_dignity_raw",
          "individual_dignity_salience",
          "individual_dignity_confidence",
          "fear_raw",
          "fear_salience",
          "fear_confidence",
          "hope_raw",
          "hope_salience",
          "hope_confidence",
          "envy_raw",
          "envy_salience",
          "envy_confidence",
          "compersion_raw",
          "compersion_salience",
          "compersion_confidence",
          "enmity_raw",
          "enmity_salience",
          "enmity_confidence",
          "amity_raw",
          "amity_salience",
          "amity_confidence",
          "fragmentative_goals_raw",
          "fragmentative_goals_salience",
          "fragmentative_goals_confidence",
          "cohesive_goals_raw",
          "cohesive_goals_salience",
          "cohesive_goals_confidence",
          "identity_tension",
          "emotional_tension",
          "success_tension",
          "relational_tension",
          "goal_tension",
          "strategic_contradiction_index",
          "descriptive_cohesion_index",
          "motivational_cohesion_index",
          "full_cohesion_index"
        ],
        "index": [
          0,
          1,
          2,
          3
        ],
        "shape": [
          4,
          40
        ]
      },
      "calculate_descriptive_statistics": {
        "tribal_dominance_raw": {
          "mean": 0.575,
          "std": 0.38622100754188227,
          "count": 4,
          "min": 0.0,
          "max": 0.8
        },
        "tribal_dominance_salience": {
          "mean": 0.675,
          "std": 0.38622100754188227,
          "count": 4,
          "min": 0.1,
          "max": 0.9
        },
        "individual_dignity_raw": {
          "mean": 0.45,
          "std": 0.40414518843273806,
          "count": 4,
          "min": 0.1,
          "max": 0.8
        },
        "individual_dignity_salience": {
          "mean": 0.45,
          "std": 0.41231056256176607,
          "count": 4,
          "min": 0.1,
          "max": 0.9
        },
        "fear_raw": {
          "mean": 0.675,
          "std": 0.32015621187164245,
          "count": 4,
          "min": 0.2,
          "max": 0.9
        },
        "fear_salience": {
          "mean": 0.7,
          "std": 0.27080128015453203,
          "count": 4,
          "min": 0.3,
          "max": 0.9
        },
        "hope_raw": {
          "mean": 0.475,
          "std": 0.37749172176353746,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "hope_salience": {
          "mean": 0.525,
          "std": 0.41129875597510224,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "envy_raw": {
          "mean": 0.6,
          "std": 0.42426406871192857,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "envy_salience": {
          "mean": 0.6,
          "std": 0.42426406871192857,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "compersion_raw": {
          "mean": 0.225,
          "std": 0.45000000000000007,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "compersion_salience": {
          "mean": 0.25,
          "std": 0.5,
          "count": 4,
          "min": 0.0,
          "max": 1.0
        },
        "enmity_raw": {
          "mean": 0.65,
          "std": 0.4358898943540674,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "enmity_salience": {
          "mean": 0.675,
          "std": 0.38622100754188227,
          "count": 4,
          "min": 0.1,
          "max": 0.9
        },
        "amity_raw": {
          "mean": 0.6000000000000001,
          "std": 0.408248290463863,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "amity_salience": {
          "mean": 0.65,
          "std": 0.443471156521669,
          "count": 4,
          "min": 0.0,
          "max": 1.0
        },
        "fragmentative_goals_raw": {
          "mean": 0.575,
          "std": 0.38622100754188227,
          "count": 4,
          "min": 0.0,
          "max": 0.8
        },
        "fragmentative_goals_salience": {
          "mean": 0.5750000000000001,
          "std": 0.4031128874149275,
          "count": 4,
          "min": 0.0,
          "max": 0.9
        },
        "cohesive_goals_raw": {
          "mean": 0.65,
          "std": 0.3109126351029605,
          "count": 4,
          "min": 0.2,
          "max": 0.9
        },
        "cohesive_goals_salience": {
          "mean": 0.675,
          "std": 0.32015621187164245,
          "count": 4,
          "min": 0.2,
          "max": 0.9
        }
      },
      "generate_statistical_summary_report": "STATISTICAL ANALYSIS SUMMARY REPORT\n==================================================\nAnalysis Timestamp: Unknown\nSample Size: Unknown\nAlpha Level: Unknown\nVariables: 0\n",
      "identify_outlier_documents": {
        "full_cohesion_index": {
          "lowest_scoring_documents": [
            {
              "document_name": "steve_king_2017_house_floor.txt",
              "full_cohesion_index": -0.7271074755737331
            },
            {
              "document_name": "bernie_sanders_2025_fighting_oligarchy.txt",
              "full_cohesion_index": -0.2955447728275254
            },
            {
              "document_name": "alexandria_ocasio_cortez_2025_fighting_oligarchy.txt",
              "full_cohesion_index": -0.18504700790926723
            },
            {
              "document_name": "john_mccain_2008_concession.txt",
              "full_cohesion_index": 0.7844645260526821
            }
          ],
          "highest_scoring_documents": [
            {
              "document_name": "john_mccain_2008_concession.txt",
              "full_cohesion_index": 0.7844645260526821
            },
            {
              "document_name": "alexandria_ocasio_cortez_2025_fighting_oligarchy.txt",
              "full_cohesion_index": -0.18504700790926723
            },
            {
              "document_name": "bernie_sanders_2025_fighting_oligarchy.txt",
              "full_cohesion_index": -0.2955447728275254
            },
            {
              "document_name": "steve_king_2017_house_floor.txt",
              "full_cohesion_index": -0.7271074755737331
            }
          ]
        },
        "strategic_contradiction_index": {
          "lowest_scoring_documents": [
            {
              "document_name": "john_mccain_2008_concession.txt",
              "strategic_contradiction_index": 0.024000000000000004
            },
            {
              "document_name": "bernie_sanders_2025_fighting_oligarchy.txt",
              "strategic_contradiction_index": 0.03
            },
            {
              "document_name": "steve_king_2017_house_floor.txt",
              "strategic_contradiction_index": 0.044
            },
            {
              "document_name": "alexandria_ocasio_cortez_2025_fighting_oligarchy.txt",
              "strategic_contradiction_index": 0.09000000000000001
            }
          ],
          "highest_scoring_documents": [
            {
              "document_name": "alexandria_ocasio_cortez_2025_fighting_oligarchy.txt",
              "strategic_contradiction_index": 0.09000000000000001
            },
            {
              "document_name": "steve_king_2017_house_floor.txt",
              "strategic_contradiction_index": 0.044
            },
            {
              "document_name": "bernie_sanders_2025_fighting_oligarchy.txt",
              "strategic_contradiction_index": 0.03
            },
            {
              "document_name": "john_mccain_2008_concession.txt",
              "strategic_contradiction_index": 0.024000000000000004
            }
          ]
        }
      },
      "perform_statistical_analysis": {
        "analysis_metadata": {
          "timestamp": "2025-08-24T18:45:23.827050",
          "sample_size": 4,
          "alpha_level": 0.05,
          "variables_analyzed": [
            "tribal_dominance_raw",
            "tribal_dominance_salience",
            "tribal_dominance_confidence",
            "individual_dignity_raw",
            "individual_dignity_salience",
            "individual_dignity_confidence",
            "fear_raw",
            "fear_salience",
            "fear_confidence",
            "hope_raw",
            "hope_salience",
            "hope_confidence",
            "envy_raw",
            "envy_salience",
            "envy_confidence",
            "compersion_raw",
            "compersion_salience",
            "compersion_confidence",
            "enmity_raw",
            "enmity_salience",
            "enmity_confidence",
            "amity_raw",
            "amity_salience",
            "amity_confidence",
            "fragmentative_goals_raw",
            "fragmentative_goals_salience",
            "fragmentative_goals_confidence",
            "cohesive_goals_raw",
            "cohesive_goals_salience",
            "cohesive_goals_confidence"
          ]
        }
      },
      "run_complete_statistical_analysis": {
        "analysis_metadata": {
          "timestamp": "2025-08-24T18:45:23.830034",
          "sample_size": 4,
          "alpha_level": 0.05,
          "variables_analyzed": [
            "tribal_dominance_raw",
            "tribal_dominance_salience",
            "tribal_dominance_confidence",
            "individual_dignity_raw",
            "individual_dignity_salience",
            "individual_dignity_confidence",
            "fear_raw",
            "fear_salience",
            "fear_confidence",
            "hope_raw",
            "hope_salience",
            "hope_confidence",
            "envy_raw",
            "envy_salience",
            "envy_confidence",
            "compersion_raw",
            "compersion_salience",
            "compersion_confidence",
            "enmity_raw",
            "enmity_salience",
            "enmity_confidence",
            "amity_raw",
            "amity_salience",
            "amity_confidence",
            "fragmentative_goals_raw",
            "fragmentative_goals_salience",
            "fragmentative_goals_confidence",
            "cohesive_goals_raw",
            "cohesive_goals_salience",
            "cohesive_goals_confidence"
          ]
        }
      },
      "summarize_corpus_metrics": {
        "identity_tension": {
          "count": 4.0,
          "mean": 0.05750000000000002,
          "std": 0.03862210075418824,
          "min": 0.0,
          "q1": 0.05250000000000005,
          "median": 0.07500000000000004,
          "q3": 0.08000000000000002,
          "max": 0.08000000000000002
        },
        "emotional_tension": {
          "count": 4.0,
          "mean": 0.07,
          "std": 0.08246211251235323,
          "min": 0.0,
          "q1": 0.0,
          "median": 0.06000000000000001,
          "q3": 0.13000000000000003,
          "max": 0.16000000000000003
        },
        "success_tension": {
          "count": 4.0,
          "mean": 0.0,
          "std": 0.0,
          "min": 0.0,
          "q1": 0.0,
          "median": 0.0,
          "q3": 0.0,
          "max": 0.0
        },
        "relational_tension": {
          "count": 4.0,
          "mean": 0.03749999999999999,
          "std": 0.043493294502332955,
          "min": 0.0,
          "q1": 0.0,
          "median": 0.03499999999999999,
          "q3": 0.07249999999999998,
          "max": 0.07999999999999999
        },
        "goal_tension": {
          "count": 4.0,
          "mean": 0.07,
          "std": 0.08082903768654762,
          "min": 0.0,
          "q1": 0.0,
          "median": 0.06999999999999999,
          "q3": 0.14,
          "max": 0.14000000000000004
        },
        "strategic_contradiction_index": {
          "count": 4.0,
          "mean": 0.047,
          "std": 0.029866369046136158,
          "min": 0.024000000000000004,
          "q1": 0.0285,
          "median": 0.037,
          "q3": 0.0555,
          "max": 0.09000000000000001
        },
        "descriptive_cohesion_index": {
          "count": 4.0,
          "mean": -0.17215945559219287,
          "std": 0.66553961074464,
          "min": -0.7866145154280749,
          "q1": -0.4847357125192129,
          "median": -0.337258245412184,
          "q3": -0.024681988485164008,
          "max": 0.7724931838836715
        },
        "motivational_cohesion_index": {
          "count": 4.0,
          "mean": -0.09871075498798076,
          "std": 0.6438964987752076,
          "min": -0.7321376065862982,
          "q1": -0.3618461686144653,
          "median": -0.2312574912579135,
          "q3": 0.03187792236857101,
          "max": 0.7998095691502022
        },
        "full_cohesion_index": {
          "count": 4.0,
          "mean": -0.10580868256446091,
          "std": 0.6379334009983604,
          "min": -0.7271074755737331,
          "q1": -0.4034354485140773,
          "median": -0.24029589036839633,
          "q3": 0.0573308755812201,
          "max": 0.7844645260526821
        }
      }
    },
    "status": "success_with_data",
    "validation_passed": true
  }
}

**Available Evidence for Citation:**
You have access to 1710 pieces of textual evidence extracted during analysis. Use semantic queries to find relevant evidence for each statistical finding.

# ANALYTICAL REQUIREMENTS

## Level 1: Basic Statistical Interpretation
- Interpret descriptive statistics for all measured dimensions
- Identify patterns in means, standard deviations, and distributions
- Note significant correlations and their strength
- Assess measurement quality using framework-appropriate validation:
  * For oppositional frameworks: Interpret negative correlations as validation (opposing constructs should be negatively correlated)
  * For unidimensional frameworks: Interpret traditional reliability metrics (Cronbach's Alpha)

## Level 2: Advanced Pattern Recognition  
- Analyze cross-dimensional relationships and interaction effects
- Identify statistical outliers and anomalous patterns
- Examine confidence patterns and analytical uncertainty
- Detect framework-specific insights from derived metrics

## Level 3: Cross-Dimensional Network Analysis
- Map dimensional clustering and meta-strategies
- Identify universal patterns across all cases
- Analyze tension patterns and strategic contradictions
- Assess variance decomposition and discriminatory power

## Level 4: Temporal and Archetypal Analysis
- Examine temporal progression patterns (when applicable)
- Identify rhetorical archetypes and speaker clustering
- Analyze normative layer gradients and trajectories
- Assess framework effectiveness and limitations

## Level 5: Meta-Analysis and Theoretical Integration
- Connect findings to relevant theoretical frameworks
- Identify methodological implications and innovations
- Generate testable hypotheses for future research
- Assess broader implications for the field

# REPORT STRUCTURE REQUIREMENTS

## 0. Experiment Provenance Header (REQUIRED FIRST)
Start every report with available experiment metadata:

```
# [Framework Name] Analysis Report

**Experiment**: [experiment_name]  
**Run ID**: [run_id]  
**Date**: [completion_date]  
**Framework**: [framework_filename]  
**Corpus**: [corpus_filename] ([document_count] documents)  

---
```

Use only metadata that is actually available in the experiment_metadata. This header enables traceability of results.

## 1. Executive Summary (2-3 paragraphs)
- Key findings with statistical support
- Primary insights and their significance
- Framework effectiveness assessment

## 2. Opening Framework: Key Insights (Bullet points)
- 4-6 primary insights from the analysis
- Each supported by specific statistical evidence
- Clear, accessible language for broad audience

## 3. Literature Review and Theoretical Framework (Optional)
- Connect framework to relevant academic literature
- Position analysis within scholarly discourse
- Identify theoretical foundations

## 4. Methodology
- Framework description and analytical approach
- Data structure and corpus description
- Statistical methods and analytical constraints
- Acknowledge limitations and methodological choices

## 5. Comprehensive Results
### 5.1 Descriptive Statistics
- Present all statistical results in properly formatted Markdown tables
- Include significance indicators: * p<0.05, ** p<0.01, *** p<0.001
- Add effect size interpretations (Small/Medium/Large based on Cohen's conventions)
- Use consistent decimal precision (2-3 places)
- Dimensional means, distributions, and patterns with statistical interpretation

### 5.2 Advanced Metric Analysis
- Derived metrics interpretation
- Tension patterns and strategic contradictions
- Confidence-weighted analysis

### 5.3 Correlation and Interaction Analysis
- Cross-dimensional relationships with theoretical interpretation
- Network effects and clustering patterns
- Meta-strategy identification

### 5.4 Pattern Recognition and Theoretical Insights
- Identify the strongest correlations and explain their practical significance
- Connect statistical patterns to theoretical frameworks and literature
- Explain what correlation patterns reveal about the framework's construct validity
- Highlight unexpected findings and their implications
- Assess framework-corpus fit based on statistical patterns

### 5.5 Framework Effectiveness Assessment
- Discriminatory power analysis
- Framework-corpus fit evaluation
- Methodological insights

## 6. Discussion
- Theoretical implications of findings
- Comparative analysis and archetypal patterns
- Broader significance for the field
- Limitations and future directions

## 7. Conclusion
- Summary of key contributions
- Methodological validation
- Research implications

## 8. Evidence Citations
- Complete attribution for all quoted evidence
- Organized by source document
- Substantial quotes with context

# CRITICAL REQUIREMENTS

## Evidence Integration Standards
- **Mandatory Citation**: For every major statistical finding or interpretation presented, you MUST cite at least one supporting textual quote retrieved from the RAG evidence database. Do not make claims without direct textual support.
- **Qualify, Don't Omit**: If the retrieved evidence is weak or indirect, you must still cite it and then explicitly state the weakness in your analysis (e.g., "While the textual evidence is not a direct confirmation, it suggests..."). Do not simply omit evidence and write meta-commentary about its absence.
- **Attribution format**: 'As [Speaker] stated: "[exact quote]" (Source: [document_name])'
- **Substantial quotes**: Full sentences, not fragments
- **Quality check**: Every Results paragraph contains at least one direct quote

## Statistical Interpretation Standards
- **No calculations**: Interpret provided statistics as definitive facts
- **Verbatim Data Integrity**: You MUST use the exact numerical values for all statistics (means, correlations, etc.) as they appear in the `Complete Research Data` input. Do NOT round, truncate, or alter these numbers in any way. Present them with the same precision as provided.
- **Transparency**: State analytical approach clearly (descriptive vs. inferential)
- **Appropriate conclusions**: Draw strongest evidence-based conclusions possible
- **Uncertainty acknowledgment**: Note limitations while maximizing insights

## Framework Agnosticism Standards
- **Dynamic adaptation**: Work with any framework's dimensional structure
- **No assumptions**: Don't assume specific dimension names or relationships
- **Flexible analysis**: Adapt analytical depth to available data richness
- **Universal patterns**: Look for insights applicable across frameworks

## Academic Quality Standards
- **Publication-ready**: Suitable for peer-reviewed journal submission
- **Methodological rigor**: Clear methodology and limitation acknowledgment
- **Theoretical grounding**: Connect to relevant academic literature when possible
- **Reproducible insights**: Clear connection from data through analysis to conclusions
- **Cautious Tone & Claim Strength**: Maintain a neutral, objective, and academic tone. Avoid promotional language, superlatives, and grandiose claims (e.g., "powerful," "profound," "demonstrates conclusively," "validates the framework"). All claims must be proportional to the evidence. Given the small sample size of this pilot study (N=4), all findings should be presented as "preliminary," "suggestive," or "indicative" rather than "validated" or "proven." State findings factually and let the data speak for itself.

# OUTPUT INSTRUCTIONS

Generate a comprehensive academic report following the structure above. Use the complete research data and evidence to extract maximum insights while maintaining scientific rigor. The report should demonstrate the analytical sophistication possible through computational social science methods.

**Target Length**: 3000-5000 words for comprehensive analysis
**Writing Style**: Academic but accessible, suitable for computational social science journals
**Evidence Integration**: Seamless weaving of statistical and textual evidence throughout
