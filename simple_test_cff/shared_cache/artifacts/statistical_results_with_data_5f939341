{
  "generation_metadata": {
    "status": "success",
    "functions_generated": 4,
    "output_file": "automatedstatisticalanalysisagent_functions.py",
    "module_size": 20556,
    "function_code_content": "\"\"\"\nAutomated Statistical Analysis Functions\n========================================\n\nGenerated by AutomatedStatisticalAnalysisAgent for experiment: simple_test\nDescription: Statistical analysis experiment\nGenerated: 2025-08-24T01:07:33.593135+00:00\n\nThis module contains automatically generated statistical analysis functions\nfor comprehensive data analysis including ANOVA, correlations, reliability,\nand hypothesis testing as appropriate for the research questions.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nfrom typing import Dict, Any, Optional, List, Tuple\nimport warnings\n\n# Suppress common statistical warnings for cleaner output\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\n\n\ndef calculate_descriptive_statistics(data, **kwargs):\n    \"\"\"\n    Calculates descriptive statistics for all raw score, salience, and confidence dimensions.\n\n    This function provides a baseline understanding of the data distribution across the corpus.\n    It computes the mean, standard deviation, count, min, and max for each primary\n    numeric column provided by the CFF analysis. This helps identify central tendencies,\n    variance, and the range of scores for each rhetorical dimension.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame containing the analysis data with columns\n                             matching the CFF specification (e.g., 'tribal_dominance_raw',\n                             'tribal_dominance_salience').\n        **kwargs: Additional parameters (not used in this function).\n\n    Returns:\n        dict: A nested dictionary where each key is a column name and the value is a\n              dictionary of its descriptive statistics (mean, std, count, min, max).\n              Returns None if the input data is invalid or an error occurs.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        results = {}\n        numeric_columns = data.select_dtypes(include=[np.number]).columns\n\n        for col in numeric_columns:\n            # Ensure we only process the expected CFF columns\n            if col.endswith(('_raw', '_salience', '_confidence')):\n                # Drop NaN values for calculation to avoid errors and get accurate counts\n                col_data = data[col].dropna()\n                if not col_data.empty:\n                    results[col] = {\n                        'mean': float(col_data.mean()),\n                        'std': float(col_data.std()),\n                        'count': int(col_data.count()),\n                        'min': float(col_data.min()),\n                        'max': float(col_data.max())\n                    }\n                else:\n                    results[col] = {\n                        'mean': None, 'std': None, 'count': 0, 'min': None, 'max': None\n                    }\n        \n        return results if results else None\n\n    except Exception as e:\n        # In a real environment, you might log the error e\n        return None\n\ndef calculate_tension_indices(data, **kwargs):\n    \"\"\"\n    Calculates the five Rhetorical Tension Indices and the Strategic Contradiction Index.\n\n    This function implements the CFF's methodology for measuring rhetorical incoherence.\n    Each tension index quantifies the strategic contradiction between opposing conceptual\n    anchors (e.g., Hope vs. Fear). A high tension score indicates that a text strongly\n    appeals to both opposing concepts but emphasizes one over the other, a sophisticated\n    rhetorical strategy. The Strategic Contradiction Index provides an overall measure\n    of the text's rhetorical coherence.\n\n    Methodology:\n    - Tension = min(Score_A, Score_B) * |Salience_A - Salience_B|\n    - Strategic Contradiction Index = Average of the five tension indices.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with CFF scores.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A dictionary containing descriptive statistics (mean, std, etc.) for each\n              calculated tension index and the overall strategic contradiction index.\n              Returns None on error or if essential columns are missing.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        df = data.copy()\n\n        # Define required columns to check for their existence\n        required_cols = [\n            'tribal_dominance_raw', 'individual_dignity_raw', 'tribal_dominance_salience', 'individual_dignity_salience',\n            'fear_raw', 'hope_raw', 'fear_salience', 'hope_salience',\n            'envy_raw', 'compersion_raw', 'envy_salience', 'compersion_salience',\n            'enmity_raw', 'amity_raw', 'enmity_salience', 'amity_salience',\n            'fragmentative_goals_raw', 'cohesive_goals_raw', 'fragmentative_goals_salience', 'cohesive_goals_salience'\n        ]\n        if not all(col in df.columns for col in required_cols):\n            return None # Or raise an error indicating missing columns\n\n        # Calculate Tension Indices\n        df['identity_tension'] = np.minimum(df['tribal_dominance_raw'], df['individual_dignity_raw']) * \\\n                                 abs(df['tribal_dominance_salience'] - df['individual_dignity_salience'])\n\n        df['emotional_tension'] = np.minimum(df['fear_raw'], df['hope_raw']) * \\\n                                  abs(df['fear_salience'] - df['hope_salience'])\n\n        df['success_tension'] = np.minimum(df['envy_raw'], df['compersion_raw']) * \\\n                                abs(df['envy_salience'] - df['compersion_salience'])\n\n        df['relational_tension'] = np.minimum(df['enmity_raw'], df['amity_raw']) * \\\n                                   abs(df['enmity_salience'] - df['amity_salience'])\n\n        df['goal_tension'] = np.minimum(df['fragmentative_goals_raw'], df['cohesive_goals_raw']) * \\\n                             abs(df['fragmentative_goals_salience'] - df['cohesive_goals_salience'])\n\n        # Calculate Strategic Contradiction Index\n        tension_cols = ['identity_tension', 'emotional_tension', 'success_tension', 'relational_tension', 'goal_tension']\n        df['strategic_contradiction_index'] = df[tension_cols].mean(axis=1)\n\n        # Prepare results\n        results = {}\n        index_cols = tension_cols + ['strategic_contradiction_index']\n        for col in index_cols:\n            col_data = df[col].dropna()\n            if not col_data.empty:\n                results[col] = {\n                    'mean': float(col_data.mean()),\n                    'std': float(col_data.std()),\n                    'count': int(col_data.count()),\n                    'min': float(col_data.min()),\n                    'max': float(col_data.max())\n                }\n        \n        return results if results else None\n\n    except Exception as e:\n        return None\n\ndef calculate_cohesion_indices(data, **kwargs):\n    \"\"\"\n    Calculates the three Salience-Weighted Cohesion Indices from the CFF.\n\n    This function computes the core composite metrics of the CFF, which evaluate the\n    overall cohesive or fragmentative thrust of a text. The indices are normalized\n    by the total salience of their constituent dimensions, ensuring that the final\n    score reflects the rhetorical emphasis of the discourse. Scores range from\n    -1.0 (highly fragmentative) to +1.0 (highly cohesive).\n\n    Indices Calculated:\n    - Descriptive Cohesion Index: Focuses on immediate emotional and relational climate.\n    - Motivational Cohesion Index: Adds goal orientation to assess behavioral implications.\n    - Full Cohesion Index: The most comprehensive measure, including all 5 axes to evaluate\n      the overall impact on democratic health and social solidarity.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with CFF scores.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A dictionary containing descriptive statistics (mean, std, etc.) for each\n              of the three calculated cohesion indices. Returns None on error or if\n              essential columns are missing.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty:\n            return None\n\n        df = data.copy()\n        epsilon = 0.001\n\n        # Define required columns\n        required_cols = [\n            'tribal_dominance_raw', 'individual_dignity_raw', 'tribal_dominance_salience', 'individual_dignity_salience',\n            'fear_raw', 'hope_raw', 'fear_salience', 'hope_salience',\n            'envy_raw', 'compersion_raw', 'envy_salience', 'compersion_salience',\n            'enmity_raw', 'amity_raw', 'enmity_salience', 'amity_salience',\n            'fragmentative_goals_raw', 'cohesive_goals_raw', 'fragmentative_goals_salience', 'cohesive_goals_salience'\n        ]\n        if not all(col in df.columns for col in required_cols):\n            return None\n\n        # Calculate Cohesion Components (Numerators)\n        identity_comp = (df['individual_dignity_raw'] * df['individual_dignity_salience']) - (df['tribal_dominance_raw'] * df['tribal_dominance_salience'])\n        emotional_comp = (df['hope_raw'] * df['hope_salience']) - (df['fear_raw'] * df['fear_salience'])\n        success_comp = (df['compersion_raw'] * df['compersion_salience']) - (df['envy_raw'] * df['envy_salience'])\n        relational_comp = (df['amity_raw'] * df['amity_salience']) - (df['enmity_raw'] * df['enmity_salience'])\n        goal_comp = (df['cohesive_goals_raw'] * df['cohesive_goals_salience']) - (df['fragmentative_goals_raw'] * df['fragmentative_goals_salience'])\n\n        # Calculate Salience Totals (Denominators)\n        descriptive_salience = df['hope_salience'] + df['fear_salience'] + df['compersion_salience'] + df['envy_salience'] + df['amity_salience'] + df['enmity_salience']\n        motivational_salience = descriptive_salience + df['cohesive_goals_salience'] + df['fragmentative_goals_salience']\n        full_salience = motivational_salience + df['individual_dignity_salience'] + df['tribal_dominance_salience']\n\n        # Calculate Final Indices\n        df['descriptive_cohesion_index'] = (emotional_comp + success_comp + relational_comp) / (descriptive_salience + epsilon)\n        df['motivational_cohesion_index'] = (emotional_comp + success_comp + relational_comp + goal_comp) / (motivational_salience + epsilon)\n        df['full_cohesion_index'] = (identity_comp + emotional_comp + success_comp + relational_comp + goal_comp) / (full_salience + epsilon)\n        \n        # Clip values to be strictly within [-1.0, 1.0] as per spec\n        index_cols = ['descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index']\n        for col in index_cols:\n            df[col] = df[col].clip(-1.0, 1.0)\n\n        # Prepare results\n        results = {}\n        for col in index_cols:\n            col_data = df[col].dropna()\n            if not col_data.empty:\n                results[col] = {\n                    'mean': float(col_data.mean()),\n                    'std': float(col_data.std()),\n                    'count': int(col_data.count()),\n                    'min': float(col_data.min()),\n                    'max': float(col_data.max())\n                }\n        \n        return results if results else None\n\n    except Exception as e:\n        return None\n\ndef calculate_full_correlation_matrix(data, **kwargs):\n    \"\"\"\n    Calculates and returns a full correlation matrix including raw scores and derived indices.\n\n    This function provides a comprehensive view of the relationships between all primary\n    and derived metrics in the CFF. It first calculates all tension and cohesion indices,\n    adds them to the dataset, and then computes a Pearson correlation matrix. This can\n    reveal important patterns, such as which rhetorical dimensions are commonly used\n    together and how individual dimensions relate to the overall cohesion or tension scores.\n\n    Args:\n        data (pd.DataFrame): A pandas DataFrame with CFF scores.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A JSON-serializable nested dictionary representing the correlation matrix.\n              Returns None on error or if data is insufficient.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data is None or data.empty or len(data) < 2:\n            return None\n\n        df = data.copy()\n        epsilon = 0.001\n\n        # --- Calculate Tension Indices ---\n        df['identity_tension'] = np.minimum(df['tribal_dominance_raw'], df['individual_dignity_raw']) * abs(df['tribal_dominance_salience'] - df['individual_dignity_salience'])\n        df['emotional_tension'] = np.minimum(df['fear_raw'], df['hope_raw']) * abs(df['fear_salience'] - df['hope_salience'])\n        df['success_tension'] = np.minimum(df['envy_raw'], df['compersion_raw']) * abs(df['envy_salience'] - df['compersion_salience'])\n        df['relational_tension'] = np.minimum(df['enmity_raw'], df['amity_raw']) * abs(df['enmity_salience'] - df['amity_salience'])\n        df['goal_tension'] = np.minimum(df['fragmentative_goals_raw'], df['cohesive_goals_raw']) * abs(df['fragmentative_goals_salience'] - df['cohesive_goals_salience'])\n        tension_cols = ['identity_tension', 'emotional_tension', 'success_tension', 'relational_tension', 'goal_tension']\n        df['strategic_contradiction_index'] = df[tension_cols].mean(axis=1)\n\n        # --- Calculate Cohesion Indices ---\n        identity_comp = (df['individual_dignity_raw'] * df['individual_dignity_salience']) - (df['tribal_dominance_raw'] * df['tribal_dominance_salience'])\n        emotional_comp = (df['hope_raw'] * df['hope_salience']) - (df['fear_raw'] * df['fear_salience'])\n        success_comp = (df['compersion_raw'] * df['compersion_salience']) - (df['envy_raw'] * df['envy_salience'])\n        relational_comp = (df['amity_raw'] * df['amity_salience']) - (df['enmity_raw'] * df['enmity_salience'])\n        goal_comp = (df['cohesive_goals_raw'] * df['cohesive_goals_salience']) - (df['fragmentative_goals_raw'] * df['fragmentative_goals_salience'])\n        \n        descriptive_salience = df['hope_salience'] + df['fear_salience'] + df['compersion_salience'] + df['envy_salience'] + df['amity_salience'] + df['enmity_salience']\n        motivational_salience = descriptive_salience + df['cohesive_goals_salience'] + df['fragmentative_goals_salience']\n        full_salience = motivational_salience + df['individual_dignity_salience'] + df['tribal_dominance_salience']\n\n        df['descriptive_cohesion_index'] = ((emotional_comp + success_comp + relational_comp) / (descriptive_salience + epsilon)).clip(-1, 1)\n        df['motivational_cohesion_index'] = ((emotional_comp + success_comp + relational_comp + goal_comp) / (motivational_salience + epsilon)).clip(-1, 1)\n        df['full_cohesion_index'] = ((identity_comp + emotional_comp + success_comp + relational_comp + goal_comp) / (full_salience + epsilon)).clip(-1, 1)\n\n        # --- Generate Correlation Matrix ---\n        raw_score_cols = [col for col in df.columns if col.endswith('_raw')]\n        derived_cols = tension_cols + ['strategic_contradiction_index', 'descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index']\n        \n        cols_for_corr = raw_score_cols + derived_cols\n        \n        # Ensure all columns exist before trying to create correlation matrix\n        final_cols = [col for col in cols_for_corr if col in df.columns]\n        \n        corr_matrix = df[final_cols].corr(method='pearson')\n        \n        # Convert to dictionary and handle NaNs for JSON serialization\n        corr_dict = corr_matrix.where(pd.notnull(corr_matrix), None).to_dict()\n\n        return corr_dict\n\n    except Exception as e:\n        return None\n\ndef run_complete_statistical_analysis(data: pd.DataFrame, alpha: float = 0.05) -> Dict[str, Any]:\n    \"\"\"\n    Run complete statistical analysis suite on the dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores\n        alpha: Significance level for hypothesis tests (default: 0.05)\n        \n    Returns:\n        Dictionary with all statistical analysis results\n    \"\"\"\n    results = {\n        'analysis_metadata': {\n            'timestamp': pd.Timestamp.now().isoformat(),\n            'sample_size': len(data),\n            'alpha_level': alpha,\n            'variables_analyzed': list(data.select_dtypes(include=[np.number]).columns)\n        }\n    }\n    \n    # Get all analysis functions from this module\n    import inspect\n    current_module = inspect.getmodule(inspect.currentframe())\n    \n    for name, obj in inspect.getmembers(current_module):\n        if (inspect.isfunction(obj) and \n            name.startswith(('calculate_', 'perform_', 'test_')) and \n            name != 'run_complete_statistical_analysis'):\n            try:\n                # Pass alpha parameter to functions that might need it\n                if 'alpha' in inspect.signature(obj).parameters:\n                    results[name] = obj(data, alpha=alpha)\n                else:\n                    results[name] = obj(data)\n            except Exception as e:\n                results[name] = {'error': f'Analysis failed: {str(e)}'}\n                \n    return results\n\n\ndef perform_statistical_analysis(data: pd.DataFrame) -> Dict[str, Any]:\n    \"\"\"\n    Template-compatible wrapper function for statistical analysis.\n    \n    This function is called by the universal notebook template and performs\n    comprehensive statistical analysis on the provided dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores and derived metrics\n        \n    Returns:\n        Dictionary containing all statistical analysis results\n    \"\"\"\n    return run_complete_statistical_analysis(data)\n\n\ndef generate_statistical_summary_report(analysis_results: Dict[str, Any]) -> str:\n    \"\"\"\n    Generate a human-readable summary report from statistical analysis results.\n    \n    Args:\n        analysis_results: Results from run_complete_statistical_analysis()\n        \n    Returns:\n        String containing formatted statistical report\n    \"\"\"\n    report_lines = []\n    report_lines.append(\"STATISTICAL ANALYSIS SUMMARY REPORT\")\n    report_lines.append(\"=\" * 50)\n    \n    metadata = analysis_results.get('analysis_metadata', {})\n    report_lines.append(f\"Analysis Timestamp: {metadata.get('timestamp', 'Unknown')}\")\n    report_lines.append(f\"Sample Size: {metadata.get('sample_size', 'Unknown')}\")\n    report_lines.append(f\"Alpha Level: {metadata.get('alpha_level', 'Unknown')}\")\n    report_lines.append(f\"Variables: {len(metadata.get('variables_analyzed', []))}\")\n    report_lines.append(\"\")\n    \n    # Summarize key findings\n    for analysis_name, result in analysis_results.items():\n        if analysis_name != 'analysis_metadata' and isinstance(result, dict):\n            if 'error' not in result:\n                report_lines.append(f\"{analysis_name.replace('_', ' ').title()}:\")\n                \n                # Extract key statistics based on analysis type\n                if 'p_value' in result:\n                    p_val = result['p_value']\n                    significance = \"significant\" if p_val < metadata.get('alpha_level', 0.05) else \"not significant\"\n                    report_lines.append(f\"  - p-value: {p_val:.4f} ({significance})\")\n                \n                if 'effect_size' in result:\n                    report_lines.append(f\"  - Effect size: {result['effect_size']:.4f}\")\n                \n                if 'correlation_matrix' in result:\n                    report_lines.append(f\"  - Correlation matrix generated with {len(result['correlation_matrix'])} variables\")\n                \n                if 'cronbach_alpha' in result:\n                    alpha_val = result['cronbach_alpha']\n                    reliability = \"excellent\" if alpha_val > 0.9 else \"good\" if alpha_val > 0.8 else \"acceptable\" if alpha_val > 0.7 else \"questionable\"\n                    report_lines.append(f\"  - Cronbach's \u03b1: {alpha_val:.3f} ({reliability})\")\n                \n                report_lines.append(\"\")\n            else:\n                report_lines.append(f\"{analysis_name}: ERROR - {result['error']}\")\n                report_lines.append(\"\")\n    \n    return \"\\n\".join(report_lines)\n",
    "cached_with_code": true
  },
  "statistical_data": {
    "calculate_cohesion_indices": {
      "descriptive_cohesion_index": {
        "mean": -0.1961491010225681,
        "std": 0.6783473026529359,
        "count": 4,
        "min": -0.7849829351535837,
        "max": 0.7811921510551647
      },
      "motivational_cohesion_index": {
        "mean": -0.13858482840321684,
        "std": 0.6619747641190775,
        "count": 4,
        "min": -0.6915765322844969,
        "max": 0.813293704404215
      },
      "full_cohesion_index": {
        "mean": -0.14861338850789751,
        "std": 0.6695554541466394,
        "count": 4,
        "min": -0.7162743609212859,
        "max": 0.801978069232423
      }
    },
    "calculate_descriptive_statistics": {
      "tribal_dominance_raw": {
        "mean": 0.575,
        "std": 0.38622100754188227,
        "count": 4,
        "min": 0.0,
        "max": 0.8
      },
      "tribal_dominance_salience": {
        "mean": 0.6875,
        "std": 0.425,
        "count": 4,
        "min": 0.05,
        "max": 0.9
      },
      "tribal_dominance_confidence": {
        "mean": 0.9374999999999999,
        "std": 0.024999999999999967,
        "count": 4,
        "min": 0.9,
        "max": 0.95
      },
      "individual_dignity_raw": {
        "mean": 0.42500000000000004,
        "std": 0.4349329450233297,
        "count": 4,
        "min": 0.0,
        "max": 0.8
      },
      "individual_dignity_salience": {
        "mean": 0.425,
        "std": 0.44253060157839175,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "individual_dignity_confidence": {
        "mean": 0.9125,
        "std": 0.024999999999999967,
        "count": 4,
        "min": 0.9,
        "max": 0.95
      },
      "fear_raw": {
        "mean": 0.65,
        "std": 0.36968455021364727,
        "count": 4,
        "min": 0.1,
        "max": 0.9
      },
      "fear_salience": {
        "mean": 0.675,
        "std": 0.32015621187164245,
        "count": 4,
        "min": 0.2,
        "max": 0.9
      },
      "fear_confidence": {
        "mean": 0.9249999999999999,
        "std": 0.04999999999999999,
        "count": 4,
        "min": 0.9,
        "max": 1.0
      },
      "hope_raw": {
        "mean": 0.475,
        "std": 0.33040379335998343,
        "count": 4,
        "min": 0.0,
        "max": 0.7
      },
      "hope_salience": {
        "mean": 0.425,
        "std": 0.28722813232690136,
        "count": 4,
        "min": 0.0,
        "max": 0.6
      },
      "hope_confidence": {
        "mean": 0.9125,
        "std": 0.024999999999999967,
        "count": 4,
        "min": 0.9,
        "max": 0.95
      },
      "envy_raw": {
        "mean": 0.55,
        "std": 0.4358898943540674,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "envy_salience": {
        "mean": 0.525,
        "std": 0.45,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "envy_confidence": {
        "mean": 0.9375,
        "std": 0.09464847243000454,
        "count": 4,
        "min": 0.8,
        "max": 1.0
      },
      "compersion_raw": {
        "mean": 0.225,
        "std": 0.45000000000000007,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "compersion_salience": {
        "mean": 0.225,
        "std": 0.45000000000000007,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "compersion_confidence": {
        "mean": 0.9875,
        "std": 0.025000000000000022,
        "count": 4,
        "min": 0.95,
        "max": 1.0
      },
      "enmity_raw": {
        "mean": 0.65,
        "std": 0.4358898943540674,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "enmity_salience": {
        "mean": 0.6625,
        "std": 0.44229515032385336,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "enmity_confidence": {
        "mean": 0.975,
        "std": 0.028867513459481315,
        "count": 4,
        "min": 0.95,
        "max": 1.0
      },
      "amity_raw": {
        "mean": 0.55,
        "std": 0.40414518843273806,
        "count": 4,
        "min": 0.0,
        "max": 0.9
      },
      "amity_salience": {
        "mean": 0.575,
        "std": 0.43493294502332963,
        "count": 4,
        "min": 0.0,
        "max": 1.0
      },
      "amity_confidence": {
        "mean": 0.9249999999999999,
        "std": 0.06454972243679027,
        "count": 4,
        "min": 0.85,
        "max": 1.0
      },
      "fragmentative_goals_raw": {
        "mean": 0.6000000000000001,
        "std": 0.4,
        "count": 4,
        "min": 0.0,
        "max": 0.8
      },
      "fragmentative_goals_salience": {
        "mean": 0.575,
        "std": 0.38622100754188227,
        "count": 4,
        "min": 0.0,
        "max": 0.8
      },
      "fragmentative_goals_confidence": {
        "mean": 0.9249999999999999,
        "std": 0.04999999999999999,
        "count": 4,
        "min": 0.9,
        "max": 1.0
      },
      "cohesive_goals_raw": {
        "mean": 0.55,
        "std": 0.3511884584284246,
        "count": 4,
        "min": 0.2,
        "max": 0.9
      },
      "cohesive_goals_salience": {
        "mean": 0.625,
        "std": 0.3774917217635375,
        "count": 4,
        "min": 0.3,
        "max": 1.0
      },
      "cohesive_goals_confidence": {
        "mean": 0.8749999999999999,
        "std": 0.06454972243679026,
        "count": 4,
        "min": 0.8,
        "max": 0.95
      }
    },
    "calculate_full_correlation_matrix": {
      "tribal_dominance_raw": {
        "tribal_dominance_raw": 1.0,
        "individual_dignity_raw": -0.6697216282059185,
        "fear_raw": 0.9922028767223467,
        "hope_raw": -0.4767170630185753,
        "envy_raw": 0.8019015917762395,
        "compersion_raw": -0.9925232596048371,
        "enmity_raw": 0.9801019455042927,
        "amity_raw": -0.6513362951124013,
        "fragmentative_goals_raw": 0.992523259604837,
        "cohesive_goals_raw": -0.7495531911819148,
        "identity_tension": 0.45011598164182504,
        "emotional_tension": 0.3173637178413603,
        "success_tension": NaN,
        "relational_tension": 0.502225514856491,
        "goal_tension": 0.8693249952147825,
        "strategic_contradiction_index": 0.5848464835385848,
        "descriptive_cohesion_index": -0.9750536579781535,
        "motivational_cohesion_index": -0.9808658868228957,
        "full_cohesion_index": -0.9750693765667869
      },
      "individual_dignity_raw": {
        "tribal_dominance_raw": -0.6697216282059185,
        "individual_dignity_raw": 1.0,
        "fear_raw": -0.6323026151969598,
        "hope_raw": 0.5161089973624002,
        "envy_raw": -0.2197807505881318,
        "compersion_raw": 0.5748012489295106,
        "enmity_raw": -0.5186825713879912,
        "amity_raw": 0.9007673514571047,
        "fragmentative_goals_raw": -0.5748012489295105,
        "cohesive_goals_raw": 0.9929505065297407,
        "identity_tension": 0.2983702655929018,
        "emotional_tension": 0.2663063908505863,
        "success_tension": NaN,
        "relational_tension": -0.283803478645734,
        "goal_tension": -0.6594490633800509,
        "strategic_contradiction_index": -0.10271157055542429,
        "descriptive_cohesion_index": 0.7168538875271102,
        "motivational_cohesion_index": 0.7611079070131354,
        "full_cohesion_index": 0.7943883758810804
      },
      "fear_raw": {
        "tribal_dominance_raw": 0.9922028767223467,
        "individual_dignity_raw": -0.6323026151969598,
        "fear_raw": 1.0,
        "hope_raw": -0.5594435621549693,
        "envy_raw": 0.7653716435003121,
        "compersion_raw": -0.9918365981341754,
        "enmity_raw": 0.9722288444463424,
        "amity_raw": -0.6693161223797403,
        "fragmentative_goals_raw": 0.9918365981341755,
        "cohesive_goals_raw": -0.7188946323483354,
        "identity_tension": 0.43713402460329165,
        "emotional_tension": 0.2615976389370424,
        "success_tension": NaN,
        "relational_tension": 0.4006728959722634,
        "goal_tension": 0.8015789404628348,
        "strategic_contradiction_index": 0.5139950882042604,
        "descriptive_cohesion_index": -0.9876365793515729,
        "motivational_cohesion_index": -0.9829038753072581,
        "full_cohesion_index": -0.9725376424333766
      },
      "hope_raw": {
        "tribal_dominance_raw": -0.4767170630185753,
        "individual_dignity_raw": 0.5161089973624002,
        "fear_raw": -0.5594435621549693,
        "hope_raw": 1.0,
        "envy_raw": 0.08100745054825756,
        "compersion_raw": 0.4539899450747865,
        "enmity_raw": -0.3587472809994258,
        "amity_raw": 0.8362595970898506,
        "fragmentative_goals_raw": -0.4539899450747863,
        "cohesive_goals_raw": 0.560180642266663,
        "identity_tension": 0.31865842673084105,
        "emotional_tension": 0.6024137988640355,
        "success_tension": NaN,
        "relational_tension": 0.5016777139304055,
        "goal_tension": -0.03702700550649916,
        "strategic_contradiction_index": 0.4208531438384635,
        "descriptive_cohesion_index": 0.6591341136456446,
        "motivational_cohesion_index": 0.617901629890541,
        "full_cohesion_index": 0.6108637311087013
      },
      "envy_raw": {
        "tribal_dominance_raw": 0.8019015917762395,
        "individual_dignity_raw": -0.2197807505881318,
        "fear_raw": 0.7653716435003121,
        "hope_raw": 0.08100745054825756,
        "envy_raw": 1.0,
        "compersion_raw": -0.8411910241920596,
        "enmity_raw": 0.894736842105263,
        "amity_raw": -0.07568756326085968,
        "fragmentative_goals_raw": 0.8411910241920599,
        "cohesive_goals_raw": -0.30485248941653953,
        "identity_tension": 0.8650593353444259,
        "emotional_tension": 0.8203836363299346,
        "success_tension": NaN,
        "relational_tension": 0.7929051722634599,
        "goal_tension": 0.854466161261774,
        "strategic_contradiction_index": 0.9324789664980134,
        "descriptive_cohesion_index": -0.6597006229263055,
        "motivational_cohesion_index": -0.6702462056122228,
        "full_cohesion_index": -0.6529575860097593
      },
      "compersion_raw": {
        "tribal_dominance_raw": -0.9925232596048371,
        "individual_dignity_raw": 0.5748012489295106,
        "fear_raw": -0.9918365981341754,
        "hope_raw": 0.4539899450747865,
        "envy_raw": -0.8411910241920596,
        "compersion_raw": 1.0,
        "enmity_raw": -0.9941348467724342,
        "amity_raw": 0.5773502691896257,
        "fragmentative_goals_raw": -1.0000000000000002,
        "cohesive_goals_raw": 0.6644105970267494,
        "identity_tension": -0.5386723175618309,
        "emotional_tension": -0.38233634727573806,
        "success_tension": NaN,
        "relational_tension": -0.4937419311010188,
        "goal_tension": -0.8427772341319072,
        "strategic_contradiction_index": -0.6166083514401313,
        "descriptive_cohesion_index": 0.9605121626787801,
        "motivational_cohesion_index": 0.9586251968120905,
        "full_cohesion_index": 0.9464901444216363
      },
      "enmity_raw": {
        "tribal_dominance_raw": 0.9801019455042927,
        "individual_dignity_raw": -0.5186825713879912,
        "fear_raw": 0.9722288444463424,
        "hope_raw": -0.3587472809994258,
        "envy_raw": 0.894736842105263,
        "compersion_raw": -0.9941348467724342,
        "enmity_raw": 1.0,
        "amity_raw": -0.49196916119558765,
        "fragmentative_goals_raw": 0.9941348467724344,
        "cohesive_goals_raw": -0.6097049788330791,
        "identity_tension": 0.6178995252460187,
        "emotional_tension": 0.47984703257033934,
        "success_tension": NaN,
        "relational_tension": 0.5663608373310428,
        "goal_tension": 0.8669401198203402,
        "strategic_contradiction_index": 0.6957505601424807,
        "descriptive_cohesion_index": -0.9252238942784511,
        "motivational_cohesion_index": -0.9257745720428914,
        "full_cohesion_index": -0.9122945491034291
      },
      "amity_raw": {
        "tribal_dominance_raw": -0.6513362951124013,
        "individual_dignity_raw": 0.9007673514571047,
        "fear_raw": -0.6693161223797403,
        "hope_raw": 0.8362595970898506,
        "envy_raw": -0.07568756326085968,
        "compersion_raw": 0.5773502691896257,
        "enmity_raw": -0.49196916119558765,
        "amity_raw": 1.0,
        "fragmentative_goals_raw": -0.5773502691896257,
        "cohesive_goals_raw": 0.9159372149869908,
        "identity_tension": 0.37562652600113,
        "emotional_tension": 0.49527825324795827,
        "success_tension": NaN,
        "relational_tension": 0.08726388882593228,
        "goal_tension": -0.4237934484132101,
        "strategic_contradiction_index": 0.16813946829604093,
        "descriptive_cohesion_index": 0.7767507897014534,
        "motivational_cohesion_index": 0.7846081959904367,
        "full_cohesion_index": 0.8031510650069732
      },
      "fragmentative_goals_raw": {
        "tribal_dominance_raw": 0.992523259604837,
        "individual_dignity_raw": -0.5748012489295105,
        "fear_raw": 0.9918365981341755,
        "hope_raw": -0.4539899450747863,
        "envy_raw": 0.8411910241920599,
        "compersion_raw": -1.0000000000000002,
        "enmity_raw": 0.9941348467724344,
        "amity_raw": -0.5773502691896257,
        "fragmentative_goals_raw": 1.0,
        "cohesive_goals_raw": -0.6644105970267493,
        "identity_tension": 0.538672317561831,
        "emotional_tension": 0.38233634727573806,
        "success_tension": NaN,
        "relational_tension": 0.4937419311010188,
        "goal_tension": 0.8427772341319071,
        "strategic_contradiction_index": 0.6166083514401313,
        "descriptive_cohesion_index": -0.9605121626787803,
        "motivational_cohesion_index": -0.9586251968120905,
        "full_cohesion_index": -0.9464901444216364
      },
      "cohesive_goals_raw": {
        "tribal_dominance_raw": -0.7495531911819148,
        "individual_dignity_raw": 0.9929505065297407,
        "fear_raw": -0.7188946323483354,
        "hope_raw": 0.560180642266663,
        "envy_raw": -0.30485248941653953,
        "compersion_raw": 0.6644105970267494,
        "enmity_raw": -0.6097049788330791,
        "amity_raw": 0.9159372149869908,
        "fragmentative_goals_raw": -0.6644105970267493,
        "cohesive_goals_raw": 1.0,
        "identity_tension": 0.2091621016245032,
        "emotional_tension": 0.2113344853369029,
        "success_tension": NaN,
        "relational_tension": -0.3012679939775218,
        "goal_tension": -0.7044533834295221,
        "strategic_contradiction_index": -0.1576615400127881,
        "descriptive_cohesion_index": 0.7944312387933871,
        "motivational_cohesion_index": 0.8324242210312078,
        "full_cohesion_index": 0.8604745480562405
      },
      "identity_tension": {
        "tribal_dominance_raw": 0.45011598164182504,
        "individual_dignity_raw": 0.2983702655929018,
        "fear_raw": 0.43713402460329165,
        "hope_raw": 0.31865842673084105,
        "envy_raw": 0.8650593353444259,
        "compersion_raw": -0.5386723175618309,
        "enmity_raw": 0.6178995252460187,
        "amity_raw": 0.37562652600113,
        "fragmentative_goals_raw": 0.538672317561831,
        "cohesive_goals_raw": 0.2091621016245032,
        "identity_tension": 1.0,
        "emotional_tension": 0.9284450657216513,
        "success_tension": NaN,
        "relational_tension": 0.6113743444642107,
        "goal_tension": 0.4912577789338122,
        "strategic_contradiction_index": 0.8485535121233213,
        "descriptive_cohesion_index": -0.2915279846829459,
        "motivational_cohesion_index": -0.2767796592249546,
        "full_cohesion_index": -0.24171796763097644
      },
      "emotional_tension": {
        "tribal_dominance_raw": 0.3173637178413603,
        "individual_dignity_raw": 0.2663063908505863,
        "fear_raw": 0.2615976389370424,
        "hope_raw": 0.6024137988640355,
        "envy_raw": 0.8203836363299346,
        "compersion_raw": -0.38233634727573806,
        "enmity_raw": 0.47984703257033934,
        "amity_raw": 0.49527825324795827,
        "fragmentative_goals_raw": 0.38233634727573806,
        "cohesive_goals_raw": 0.2113344853369029,
        "identity_tension": 0.9284450657216513,
        "emotional_tension": 1.0,
        "success_tension": NaN,
        "relational_tension": 0.804278753126509,
        "goal_tension": 0.5447854136911618,
        "strategic_contradiction_index": 0.931403509893997,
        "descriptive_cohesion_index": -0.11171672775662897,
        "motivational_cohesion_index": -0.12697235151121855,
        "full_cohesion_index": -0.1074148165110367
      },
      "success_tension": {
        "tribal_dominance_raw": NaN,
        "individual_dignity_raw": NaN,
        "fear_raw": NaN,
        "hope_raw": NaN,
        "envy_raw": NaN,
        "compersion_raw": NaN,
        "enmity_raw": NaN,
        "amity_raw": NaN,
        "fragmentative_goals_raw": NaN,
        "cohesive_goals_raw": NaN,
        "identity_tension": NaN,
        "emotional_tension": NaN,
        "success_tension": NaN,
        "relational_tension": NaN,
        "goal_tension": NaN,
        "strategic_contradiction_index": NaN,
        "descriptive_cohesion_index": NaN,
        "motivational_cohesion_index": NaN,
        "full_cohesion_index": NaN
      },
      "relational_tension": {
        "tribal_dominance_raw": 0.502225514856491,
        "individual_dignity_raw": -0.283803478645734,
        "fear_raw": 0.4006728959722634,
        "hope_raw": 0.5016777139304055,
        "envy_raw": 0.7929051722634599,
        "compersion_raw": -0.4937419311010188,
        "enmity_raw": 0.5663608373310428,
        "amity_raw": 0.08726388882593228,
        "fragmentative_goals_raw": 0.4937419311010188,
        "cohesive_goals_raw": -0.3012679939775218,
        "identity_tension": 0.6113743444642107,
        "emotional_tension": 0.804278753126509,
        "success_tension": NaN,
        "relational_tension": 1.0,
        "goal_tension": 0.8456519652032446,
        "strategic_contradiction_index": 0.9346384964321824,
        "descriptive_cohesion_index": -0.30724188753464393,
        "motivational_cohesion_index": -0.36637614448725003,
        "full_cohesion_index": -0.3779590622183723
      },
      "goal_tension": {
        "tribal_dominance_raw": 0.8693249952147825,
        "individual_dignity_raw": -0.6594490633800509,
        "fear_raw": 0.8015789404628348,
        "hope_raw": -0.03702700550649916,
        "envy_raw": 0.854466161261774,
        "compersion_raw": -0.8427772341319072,
        "enmity_raw": 0.8669401198203402,
        "amity_raw": -0.4237934484132101,
        "fragmentative_goals_raw": 0.8427772341319071,
        "cohesive_goals_raw": -0.7044533834295221,
        "identity_tension": 0.4912577789338122,
        "emotional_tension": 0.5447854136911618,
        "success_tension": NaN,
        "relational_tension": 0.8456519652032446,
        "goal_tension": 1.0,
        "strategic_contradiction_index": 0.8118245163530379,
        "descriptive_cohesion_index": -0.7577009104458424,
        "motivational_cohesion_index": -0.8020790053463929,
        "full_cohesion_index": -0.8123562557853017
      },
      "strategic_contradiction_index": {
        "tribal_dominance_raw": 0.5848464835385848,
        "individual_dignity_raw": -0.10271157055542429,
        "fear_raw": 0.5139950882042604,
        "hope_raw": 0.4208531438384635,
        "envy_raw": 0.9324789664980134,
        "compersion_raw": -0.6166083514401313,
        "enmity_raw": 0.6957505601424807,
        "amity_raw": 0.16813946829604093,
        "fragmentative_goals_raw": 0.6166083514401313,
        "cohesive_goals_raw": -0.1576615400127881,
        "identity_tension": 0.8485535121233213,
        "emotional_tension": 0.931403509893997,
        "success_tension": NaN,
        "relational_tension": 0.9346384964321824,
        "goal_tension": 0.8118245163530379,
        "strategic_contradiction_index": 1.0,
        "descriptive_cohesion_index": -0.39115557549872054,
        "motivational_cohesion_index": -0.4230042555577688,
        "full_cohesion_index": -0.4150345208242885
      },
      "descriptive_cohesion_index": {
        "tribal_dominance_raw": -0.9750536579781535,
        "individual_dignity_raw": 0.7168538875271102,
        "fear_raw": -0.9876365793515729,
        "hope_raw": 0.6591341136456446,
        "envy_raw": -0.6597006229263055,
        "compersion_raw": 0.9605121626787801,
        "enmity_raw": -0.9252238942784511,
        "amity_raw": 0.7767507897014534,
        "fragmentative_goals_raw": -0.9605121626787803,
        "cohesive_goals_raw": 0.7944312387933871,
        "identity_tension": -0.2915279846829459,
        "emotional_tension": -0.11171672775662897,
        "success_tension": NaN,
        "relational_tension": -0.30724188753464393,
        "goal_tension": -0.7577009104458424,
        "strategic_contradiction_index": -0.39115557549872054,
        "descriptive_cohesion_index": 1.0,
        "motivational_cohesion_index": 0.9960777894775685,
        "full_cohesion_index": 0.9904453526028373
      },
      "motivational_cohesion_index": {
        "tribal_dominance_raw": -0.9808658868228957,
        "individual_dignity_raw": 0.7611079070131354,
        "fear_raw": -0.9829038753072581,
        "hope_raw": 0.617901629890541,
        "envy_raw": -0.6702462056122228,
        "compersion_raw": 0.9586251968120905,
        "enmity_raw": -0.9257745720428914,
        "amity_raw": 0.7846081959904367,
        "fragmentative_goals_raw": -0.9586251968120905,
        "cohesive_goals_raw": 0.8324242210312078,
        "identity_tension": -0.2767796592249546,
        "emotional_tension": -0.12697235151121855,
        "success_tension": NaN,
        "relational_tension": -0.36637614448725003,
        "goal_tension": -0.8020790053463929,
        "strategic_contradiction_index": -0.4230042555577688,
        "descriptive_cohesion_index": 0.9960777894775685,
        "motivational_cohesion_index": 1.0,
        "full_cohesion_index": 0.9985120937306571
      },
      "full_cohesion_index": {
        "tribal_dominance_raw": -0.9750693765667869,
        "individual_dignity_raw": 0.7943883758810804,
        "fear_raw": -0.9725376424333766,
        "hope_raw": 0.6108637311087013,
        "envy_raw": -0.6529575860097593,
        "compersion_raw": 0.9464901444216363,
        "enmity_raw": -0.9122945491034291,
        "amity_raw": 0.8031510650069732,
        "fragmentative_goals_raw": -0.9464901444216364,
        "cohesive_goals_raw": 0.8604745480562405,
        "identity_tension": -0.24171796763097644,
        "emotional_tension": -0.1074148165110367,
        "success_tension": NaN,
        "relational_tension": -0.3779590622183723,
        "goal_tension": -0.8123562557853017,
        "strategic_contradiction_index": -0.4150345208242885,
        "descriptive_cohesion_index": 0.9904453526028373,
        "motivational_cohesion_index": 0.9985120937306571,
        "full_cohesion_index": 1.0
      }
    },
    "calculate_tension_indices": {
      "identity_tension": {
        "mean": 0.055000000000000014,
        "std": 0.06806859285554047,
        "count": 4,
        "min": 0.0,
        "max": 0.14000000000000004
      },
      "emotional_tension": {
        "mean": 0.08250000000000002,
        "std": 0.07410578025138571,
        "count": 4,
        "min": 0.0,
        "max": 0.15000000000000002
      },
      "success_tension": {
        "mean": 0.0,
        "std": 0.0,
        "count": 4,
        "min": 0.0,
        "max": 0.0
      },
      "relational_tension": {
        "mean": 0.07,
        "std": 0.09451631252505216,
        "count": 4,
        "min": 0.0,
        "max": 0.2
      },
      "goal_tension": {
        "mean": 0.07749999999999999,
        "std": 0.0613052471924984,
        "count": 4,
        "min": 0.0,
        "max": 0.15
      },
      "strategic_contradiction_index": {
        "mean": 0.057,
        "std": 0.05297798284822354,
        "count": 4,
        "min": 0.008,
        "max": 0.11400000000000002
      }
    },
    "generate_statistical_summary_report": "STATISTICAL ANALYSIS SUMMARY REPORT\n==================================================\nAnalysis Timestamp: Unknown\nSample Size: Unknown\nAlpha Level: Unknown\nVariables: 0\n",
    "perform_statistical_analysis": {
      "analysis_metadata": {
        "timestamp": "2025-08-23T22:51:32.947302",
        "sample_size": 4,
        "alpha_level": 0.05,
        "variables_analyzed": [
          "tribal_dominance_raw",
          "tribal_dominance_salience",
          "tribal_dominance_confidence",
          "individual_dignity_raw",
          "individual_dignity_salience",
          "individual_dignity_confidence",
          "fear_raw",
          "fear_salience",
          "fear_confidence",
          "hope_raw",
          "hope_salience",
          "hope_confidence",
          "envy_raw",
          "envy_salience",
          "envy_confidence",
          "compersion_raw",
          "compersion_salience",
          "compersion_confidence",
          "enmity_raw",
          "enmity_salience",
          "enmity_confidence",
          "amity_raw",
          "amity_salience",
          "amity_confidence",
          "fragmentative_goals_raw",
          "fragmentative_goals_salience",
          "fragmentative_goals_confidence",
          "cohesive_goals_raw",
          "cohesive_goals_salience",
          "cohesive_goals_confidence"
        ]
      }
    },
    "run_complete_statistical_analysis": {
      "analysis_metadata": {
        "timestamp": "2025-08-23T22:51:32.950948",
        "sample_size": 4,
        "alpha_level": 0.05,
        "variables_analyzed": [
          "tribal_dominance_raw",
          "tribal_dominance_salience",
          "tribal_dominance_confidence",
          "individual_dignity_raw",
          "individual_dignity_salience",
          "individual_dignity_confidence",
          "fear_raw",
          "fear_salience",
          "fear_confidence",
          "hope_raw",
          "hope_salience",
          "hope_confidence",
          "envy_raw",
          "envy_salience",
          "envy_confidence",
          "compersion_raw",
          "compersion_salience",
          "compersion_confidence",
          "enmity_raw",
          "enmity_salience",
          "enmity_confidence",
          "amity_raw",
          "amity_salience",
          "amity_confidence",
          "fragmentative_goals_raw",
          "fragmentative_goals_salience",
          "fragmentative_goals_confidence",
          "cohesive_goals_raw",
          "cohesive_goals_salience",
          "cohesive_goals_confidence"
        ]
      }
    }
  },
  "status": "success_with_data",
  "validation_passed": true
}