{"log_type":"llm_interaction","interaction_hash":"2fea3da0cfc272c0","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\nIyBDb25zdGl0dXRpb25hbCBIZWFsdGggRnJhbWV3b3JrIChDSEYpIHY3LjMKClRoZSBDb25zdGl0dXRpb25hbCBIZWFsdGggRnJhbWV3b3JrIHByb3ZpZGVzIGEgc3lzdGVtYXRpYyBhcHByb2FjaCB0byBldmFsdWF0aW5nIGhvdyBwb2xpdGljYWwgZGlzY291cnNlIGFmZmVjdHMgY29uc3RpdHV0aW9uYWwgc3lzdGVtIGhlYWx0aCB0aHJvdWdoIGFuYWx5c2lzIG9mIHByb2NlZHVyYWwgbGVnaXRpbWFjeSwgaW5zdGl0dXRpb25hbCByZXNwZWN0LCBhbmQgc3lzdGVtaWMgY29udGludWl0eSBwYXR0ZXJucy4KCiMjIFJhaXNvbiBkJ8OKdHJlCgpDb25zdGl0dXRpb25hbCBkZW1vY3JhY3kgZGVwZW5kcyBvbiBkaXNjb3Vyc2UgdGhhdCByZWluZm9yY2VzIHJhdGhlciB0aGFuIHVuZGVybWluZXMgZnVuZGFtZW50YWwgZGVtb2NyYXRpYyBpbnN0aXR1dGlvbnMgYW5kIHByb2Nlc3Nlcy4gUG9saXRpY2FsIGNvbW11bmljYXRpb24gY2FuIGVpdGhlciBzdHJlbmd0aGVuIGNvbnN0aXR1dGlvbmFsIG5vcm1zIG9yIGNvbnRyaWJ1dGUgdG8gZGVtb2NyYXRpYyBlcm9zaW9uIHRocm91Z2ggcHJvY2VkdXJhbCByZWplY3Rpb24sIGluc3RpdHV0aW9uYWwgc3VidmVyc2lvbiwgYW5kIHN5c3RlbWljIHJlcGxhY2VtZW50IHJoZXRvcmljLiBUaGlzIGZyYW1ld29yayBwcm92aWRlcyBhIHJpZ29yb3VzIG1ldGhvZG9sb2d5IGZvciBhc3Nlc3NpbmcgdGhlIGNvbnN0aXR1dGlvbmFsIGltcGxpY2F0aW9ucyBvZiBwb2xpdGljYWwgZGlzY291cnNlLgoKIyMgUmVzZWFyY2ggRm91bmRhdGlvbnMKClRoaXMgZnJhbWV3b3JrIGlzIGdyb3VuZGVkIGluOgotICoqQ29uc3RpdHV0aW9uYWwgVGhlb3J5Kio6IFByaW5jaXBsZXMgb2YgZGVtb2NyYXRpYyBnb3Zlcm5hbmNlLCBzZXBhcmF0aW9uIG9mIHBvd2VycywgYW5kIHJ1bGUgb2YgbGF3Ci0gKipJbnN0aXR1dGlvbmFsIEFuYWx5c2lzKio6IEhvdyBkaXNjb3Vyc2UgYWZmZWN0cyBpbnN0aXR1dGlvbmFsIGxlZ2l0aW1hY3kgYW5kIGVmZmVjdGl2ZW5lc3MKLSAqKkRlbW9jcmF0aWMgRXJvc2lvbiBTdHVkaWVzKio6IFBhdHRlcm5zIG9mIGNvbnN0aXR1dGlvbmFsIGJyZWFrZG93biBhbmQgZGVtb2NyYXRpYyBiYWNrc2xpZGluZwotICoqUG9saXRpY2FsIENvbW11bmljYXRpb24gVGhlb3J5Kio6IFN0cmF0ZWdpYyBkZXBsb3ltZW50IG9mIHByb2NlZHVyYWwgYW5kIGluc3RpdHV0aW9uYWwgYXBwZWFscwoKIyMgRGltZW5zaW9ucyBhbmQgQXhlcwoKVGhlIGZyYW1ld29yayBldmFsdWF0ZXMgcG9saXRpY2FsIGRpc2NvdXJzZSBhY3Jvc3MgdGhyZWUgYmlwb2xhciBheGVzIHRoYXQgZm9ybSB0aGUgZm91bmRhdGlvbiBvZiBjb25zdGl0dXRpb25hbCBoZWFsdGg6CgojIyMgUHJvY2VkdXJhbCBBeGlzOiBQcm9jZWR1cmFsIExlZ2l0aW1hY3kg4oaUIFByb2NlZHVyYWwgUmVqZWN0aW9uCi0gKipQcm9jZWR1cmFsIExlZ2l0aW1hY3kgKDAuMC0xLjApKio6IFN1cHBvcnQgZm9yIGVzdGFibGlzaGVkIHByb2NlZHVyZXMgZm9yIHBvbGl0aWNhbCBjaGFuZ2UgYW5kIGdvdmVybmFuY2UsIHJlc3BlY3QgZm9yIGNvbnN0aXR1dGlvbmFsIHByb2Nlc3NlcywgYWRoZXJlbmNlIHRvIGRlbW9jcmF0aWMgbm9ybXMKLSAqKlByb2NlZHVyYWwgUmVqZWN0aW9uICgwLjAtMS4wKSoqOiBSZWplY3RpbmcgZXN0YWJsaXNoZWQgcHJvY2VkdXJlcyBpbiBmYXZvciBvZiBjaXJjdW12ZW50aW9uIG9yIGV4dHJhLWNvbnN0aXR1dGlvbmFsIGFjdGlvbiwgZW1lcmdlbmN5IHBvd2VyIGNsYWltcywgcHJvY2VzcyBieXBhc3NpbmcKCiMjIyBJbnN0aXR1dGlvbmFsIEF4aXM6IEluc3RpdHV0aW9uYWwgUmVzcGVjdCDihpQgSW5zdGl0dXRpb25hbCBTdWJ2ZXJzaW9uICAKLSAqKkluc3RpdHV0aW9uYWwgUmVzcGVjdCAoMC4wLTEuMCkqKjogUmVjb2duaXRpb24gb2YgaW5zdGl0dXRpb25hbCBhdXRob3JpdHksIGV4cGVydGlzZSwgYW5kIGxlZ2l0aW1hdGUgZ292ZXJuYW5jZSByb2xlLCBzdXBwb3J0IGZvciBjaGVja3MgYW5kIGJhbGFuY2VzCi0gKipJbnN0aXR1dGlvbmFsIFN1YnZlcnNpb24gKDAuMC0xLjApKio6IEF0dGFja2luZyBpbnN0aXR1dGlvbmFsIGF1dGhvcml0eSwgZXhwZXJ0aXNlLCBvciBsZWdpdGltYXRlIGdvdmVybmFuY2Ugcm9sZSwgZGVsZWdpdGltaXppbmcgZGVtb2NyYXRpYyBpbnN0aXR1dGlvbnMKCiMjIyBTeXN0ZW1pYyBBeGlzOiBTeXN0ZW1pYyBDb250aW51aXR5IOKGlCBTeXN0ZW1pYyBSZXBsYWNlbWVudAotICoqU3lzdGVtaWMgQ29udGludWl0eSAoMC4wLTEuMCkqKjogU3VwcG9ydCBmb3IgbWFpbnRhaW5pbmcgYW5kIGltcHJvdmluZyBleGlzdGluZyBjb25zdGl0dXRpb25hbCBmcmFtZXdvcmssIGdyYWR1YWwgcmVmb3JtIGFwcHJvYWNoZXMKLSAqKlN5c3RlbWljIFJlcGxhY2VtZW50ICgwLjAtMS4wKSoqOiBBZHZvY2F0aW5nIGZ1bmRhbWVudGFsIHJlcGxhY2VtZW50IHJhdGhlciB0aGFuIHJlZm9ybSBvZiBjb25zdGl0dXRpb25hbCBmcmFtZXdvcmssIHJldm9sdXRpb25hcnkgY2hhbmdlIHJoZXRvcmljCgojIyBMaW5ndWlzdGljIE1hcmtlcnMKCioqQ3JpdGljYWwgTm90ZSoqOiBUaGVzZSBtYXJrZXJzIHJlcHJlc2VudCBzZW1hbnRpYyBzcGFjZXMgYW5kIGNvbmNlcHR1YWwgcGF0dGVybnMsIG5vdCBrZXl3b3JkIGxpc3RzLiBBbmFseXN0cyBzaG91bGQgbG9vayBmb3IgdGhlIHVuZGVybHlpbmcgY29uY2VwdHMgYW5kIG1lYW5pbmdzIGV4cHJlc3NlZCB0aHJvdWdoIHZhcmlvdXMgbGluZ3Vpc3RpYyBmb3Jtcywgbm90IGp1c3QgbGl0ZXJhbCB3b3JkIG1hdGNoZXMuCgojIyMgUHJvY2VkdXJhbCBMZWdpdGltYWN5IE1hcmtlcnMKTG9vayBmb3IgcHJvY2VkdXJhbCBsZWdpdGltYWN5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gUHJvY2VzcyBsYW5ndWFnZTogImNvbnN0aXR1dGlvbmFsIHByb2Nlc3MsIiAiZXN0YWJsaXNoZWQgcHJvY2VkdXJlLCIgImR1ZSBwcm9jZXNzLCIgInByb3BlciBjaGFubmVscyIKLSBOb3JtIGFkaGVyZW5jZTogImZvbGxvd2luZyBwcm90b2NvbCwiICJjb25zdGl0dXRpb25hbCByZXF1aXJlbWVudHMsIiAibGVnYWwgZnJhbWV3b3JrIgotIERlbW9jcmF0aWMgcHJvY2VzczogImVsZWN0b3JhbCBtYW5kYXRlLCIgImxlZ2lzbGF0aXZlIHByb2Nlc3MsIiAianVkaWNpYWwgcmV2aWV3IgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2Ygc3VwcG9ydCBmb3IgZXN0YWJsaXNoZWQgZGVtb2NyYXRpYyBwcm9jZWR1cmVzIHJlZ2FyZGxlc3Mgb2YgdGhlIGV4YWN0IGxhbmd1YWdlIHVzZWQuKgoKIyMjIFByb2NlZHVyYWwgUmVqZWN0aW9uIE1hcmtlcnMKTG9vayBmb3IgcHJvY2VkdXJhbCByZWplY3Rpb24gY29uY2VwdHMgc3VjaCBhczoKLSBCeXBhc3MgbGFuZ3VhZ2U6ICJieXBhc3MgdGhlIHN5c3RlbSwiICJnbyBhcm91bmQsIiAiY2lyY3VtdmVudCwiICJlbmQgcnVuIgotIEVtZXJnZW5jeSByaGV0b3JpYzogImVtZXJnZW5jeSBwb3dlcnMsIiAiZXh0cmFvcmRpbmFyeSBtZWFzdXJlcywiICJjcmlzaXMgcmVxdWlyZXMiCi0gUHJvY2VzcyBkaXNtaXNzYWw6ICJicm9rZW4gc3lzdGVtLCIgImZhaWxlZCBwcm9jZWR1cmVzLCIgInJlZCB0YXBlIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBjb25jZXB0cyBvZiByZWplY3RpbmcgZXN0YWJsaXNoZWQgZGVtb2NyYXRpYyBwcm9jZWR1cmVzIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgcHJvY2Vzc2VzIG1lbnRpb25lZC4qCgojIyMgSW5zdGl0dXRpb25hbCBSZXNwZWN0IE1hcmtlcnMKTG9vayBmb3IgaW5zdGl0dXRpb25hbCByZXNwZWN0IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQXV0aG9yaXR5IHJlY29nbml0aW9uOiAiaW5zdGl0dXRpb25hbCBhdXRob3JpdHksIiAiZXhwZXJ0IGFuYWx5c2lzLCIgInNlcGFyYXRpb24gb2YgcG93ZXJzLCIgImNvbnN0aXR1dGlvbmFsIGR1dHkiCi0gRXhwZXJ0aXNlIGRlZmVyZW5jZTogInByb2Zlc3Npb25hbCBqdWRnbWVudCwiICJpbnN0aXR1dGlvbmFsIGtub3dsZWRnZSwiICJzcGVjaWFsaXplZCBleHBlcnRpc2UiCi0gU3lzdGVtIHN1cHBvcnQ6ICJjaGVja3MgYW5kIGJhbGFuY2VzLCIgImluc3RpdHV0aW9uYWwgaW50ZWdyaXR5LCIgImRlbW9jcmF0aWMgaW5zdGl0dXRpb25zIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBjb25jZXB0cyBvZiBzdXBwb3J0aW5nIGVzdGFibGlzaGVkIGluc3RpdHV0aW9uYWwgYXV0aG9yaXR5IHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgaW5zdGl0dXRpb25zIHJlZmVyZW5jZWQuKgoKIyMjIEluc3RpdHV0aW9uYWwgU3VidmVyc2lvbiBNYXJrZXJzCkxvb2sgZm9yIGluc3RpdHV0aW9uYWwgc3VidmVyc2lvbiBjb25jZXB0cyBzdWNoIGFzOgotIEF1dGhvcml0eSBhdHRhY2tzOiAiY29ycnVwdCBpbnN0aXR1dGlvbnMsIiAiaWxsZWdpdGltYXRlIGF1dGhvcml0eSwiICJmYWlsZWQgZXN0YWJsaXNobWVudCwiICJiaWFzZWQgc3lzdGVtIgotIEV4cGVydGlzZSBkaXNtaXNzYWw6ICJzby1jYWxsZWQgZXhwZXJ0cywiICJpbnN0aXR1dGlvbmFsIGJpYXMsIiAib3V0IG9mIHRvdWNoIGVsaXRlcyIKLSBTeXN0ZW0gZGVsZWdpdGltaXphdGlvbjogInJpZ2dlZCBzeXN0ZW0sIiAiZGVlcCBzdGF0ZSwiICJpbnN0aXR1dGlvbmFsIGNvbnNwaXJhY3kiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIHVuZGVybWluaW5nIGluc3RpdHV0aW9uYWwgYXV0aG9yaXR5IGFuZCBleHBlcnRpc2UgcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyB0YXJnZXRzLioKCiMjIyBTeXN0ZW1pYyBDb250aW51aXR5IE1hcmtlcnMKTG9vayBmb3Igc3lzdGVtaWMgY29udGludWl0eSBjb25jZXB0cyBzdWNoIGFzOgotIFN0YWJpbGl0eSBsYW5ndWFnZTogImNvbnN0aXR1dGlvbmFsIHN0YWJpbGl0eSwiICJkZW1vY3JhdGljIHRyYWRpdGlvbiwiICJpbnN0aXR1dGlvbmFsIGNvbnRpbnVpdHksIiAiZ3JhZHVhbCByZWZvcm0iCi0gSW1wcm92ZW1lbnQgZm9jdXM6ICJzdHJlbmd0aGVuIGluc3RpdHV0aW9ucywiICJyZWZvcm0gd2l0aGluIHN5c3RlbSwiICJjb25zdGl0dXRpb25hbCBldm9sdXRpb24iCi0gSGVyaXRhZ2UgcmVzcGVjdDogImZvdW5kaW5nIHByaW5jaXBsZXMsIiAiY29uc3RpdHV0aW9uYWwgd2lzZG9tLCIgImRlbW9jcmF0aWMgaGVyaXRhZ2UiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIG1haW50YWluaW5nIGFuZCBpbXByb3ZpbmcgZXhpc3RpbmcgY29uc3RpdHV0aW9uYWwgZnJhbWV3b3JrIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgcmVmb3JtIGFwcHJvYWNoZXMuKgoKIyMjIFN5c3RlbWljIFJlcGxhY2VtZW50IE1hcmtlcnMKTG9vayBmb3Igc3lzdGVtaWMgcmVwbGFjZW1lbnQgY29uY2VwdHMgc3VjaCBhczoKLSBSZXZvbHV0aW9uIHJoZXRvcmljOiAibmV3IHN5c3RlbSwiICJyYWRpY2FsIHRyYW5zZm9ybWF0aW9uLCIgImNvbXBsZXRlIG92ZXJoYXVsLCIgInJldm9sdXRpb25hcnkgY2hhbmdlIgotIFN5c3RlbSByZWplY3Rpb246ICJ0ZWFyIGl0IGRvd24sIiAic3RhcnQgb3ZlciwiICJmdW5kYW1lbnRhbCByZXN0cnVjdHVyaW5nIgotIFJlcGxhY2VtZW50IGNhbGxzOiAibmV3IGNvbnN0aXR1dGlvbiwiICJkaWZmZXJlbnQgc3lzdGVtLCIgInRvdGFsIHJlZm9ybSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgZnVuZGFtZW50YWwgc3lzdGVtIHJlcGxhY2VtZW50IHJhdGhlciB0aGFuIHJlZm9ybSByZWdhcmRsZXNzIG9mIHNwZWNpZmljIHJlcGxhY2VtZW50IHByb3Bvc2Fscy4qCgojIyBBbmFseXNpcyBNZXRob2RvbG9neQoKVGhlIGZyYW1ld29yayBlbXBsb3lzIHNlcXVlbnRpYWwgY2hhaW4tb2YtdGhvdWdodCBhbmFseXNpcywgZXhhbWluaW5nIGVhY2ggY29uc3RpdHV0aW9uYWwgYXhpcyBpbmRlcGVuZGVudGx5IGJlZm9yZSBpbnRlZ3JhdGlvbi4gVGhpcyBhcHByb2FjaCBpbXByb3ZlcyBhbmFseXRpY2FsIGNvbnNpc3RlbmN5IGFuZCBldmlkZW5jZSBxdWFsaXR5IGJ5IGZvY3VzaW5nIGF0dGVudGlvbiBvbiBzcGVjaWZpYyBpbnN0aXR1dGlvbmFsIHBhdHRlcm5zIGJlZm9yZSBzeW50aGVzaXMuCgojIyBXZWlnaHRpbmcgU2NoZW1lCgoqKkR5bmFtaWMgU2FsaWVuY2UgV2VpZ2h0aW5nKio6IEVhY2ggZGltZW5zaW9uIHJlY2VpdmVzIGEgc2FsaWVuY2Ugd2VpZ2h0ICgwLjAtMS4wKSBiYXNlZCBvbiBpdHMgY2VudHJhbGl0eSB0byB0aGUgc3BlY2lmaWMgdGV4dCBiZWluZyBhbmFseXplZC4gVGhpcyBhbGxvd3MgdGhlIGZyYW1ld29yayB0byBhZGFwdCB0byBkaWZmZXJlbnQgdHlwZXMgb2YgY29uc3RpdHV0aW9uYWwgZGlzY291cnNlIHdoaWxlIG1haW50YWluaW5nIGFuYWx5dGljYWwgcmlnb3IuCgojIyBDYWxjdWxhdGVkIE1ldHJpY3MKCiMjIyBIZWFsdGggU2NvcmVzCi0gKipQcm9jZWR1cmFsIEhlYWx0aCBTY29yZSoqOiAocHJvY2VkdXJhbF9sZWdpdGltYWN5IC0gcHJvY2VkdXJhbF9yZWplY3Rpb24pCi0gKipJbnN0aXR1dGlvbmFsIEhlYWx0aCBTY29yZSoqOiAoaW5zdGl0dXRpb25hbF9yZXNwZWN0IC0gaW5zdGl0dXRpb25hbF9zdWJ2ZXJzaW9uKSAgCi0gKipTeXN0ZW1pYyBIZWFsdGggU2NvcmUqKjogKHN5c3RlbWljX2NvbnRpbnVpdHkgLSBzeXN0ZW1pY19yZXBsYWNlbWVudCkKCiMjIyBDb21wb3NpdGUgSW5kaWNlcwotICoqQ29uc3RpdHV0aW9uYWwgRGlyZWN0aW9uIEluZGV4Kio6IEF2ZXJhZ2Ugb2YgYWxsIGhlYWx0aCBzY29yZXMKLSAqKlNhbGllbmNlLVdlaWdodGVkIENvbnN0aXR1dGlvbmFsIERpcmVjdGlvbiBJbmRleCoqOiBIZWFsdGggc2NvcmVzIHdlaWdodGVkIGJ5IGRpbWVuc2lvbiBzYWxpZW5jZQotICoqTGVnaXRpbWFjeSBJbmRleCoqOiBBdmVyYWdlIG9mIHBvc2l0aXZlIGRpbWVuc2lvbiBzY29yZXMgKHByb2NlZHVyYWxfbGVnaXRpbWFjeSwgaW5zdGl0dXRpb25hbF9yZXNwZWN0LCBzeXN0ZW1pY19jb250aW51aXR5KQotICoqUGF0aG9sb2d5IEluZGV4Kio6IEF2ZXJhZ2Ugb2YgbmVnYXRpdmUgZGltZW5zaW9uIHNjb3JlcyAocHJvY2VkdXJhbF9yZWplY3Rpb24sIGluc3RpdHV0aW9uYWxfc3VidmVyc2lvbiwgc3lzdGVtaWNfcmVwbGFjZW1lbnQpCgojIyBQYXR0ZXJuIENsYXNzaWZpY2F0aW9ucwoKIyMjIENvbnN0aXR1dGlvbmFsIEhlYWx0aCBQcm9maWxlcwotICoqQ29uc3RpdHV0aW9uYWwgUmVpbmZvcmNlbWVudCoqICjiiaUwLjc1KTogU3Ryb25nIHN1cHBvcnQgZm9yIGRlbW9jcmF0aWMgaW5zdGl0dXRpb25zIGFuZCBwcm9jZXNzZXMKLSAqKk1peGVkIENvbnN0aXR1dGlvbmFsIEltcGFjdCoqICgwLjUwLTAuNzQpOiBCYWxhbmNlIG9mIHN1cHBvcnRpdmUgYW5kIHVuZGVybWluaW5nIGVsZW1lbnRzCi0gKipDb25zdGl0dXRpb25hbCBTdHJlc3MqKiAoMC4yNS0wLjQ5KTogUHJlZG9taW5hbnRseSB1bmRlcm1pbmluZyB3aXRoIGxpbWl0ZWQgaW5zdGl0dXRpb25hbCBzdXBwb3J0Ci0gKipDb25zdGl0dXRpb25hbCBFcm9zaW9uKiogKDwwLjI1KTogU3lzdGVtYXRpYyBpbnN0aXR1dGlvbmFsIGRlbGVnaXRpbWl6YXRpb24gYW5kIHByb2Nlc3MgcmVqZWN0aW9uCgojIyMgU3RyYXRlZ2ljIFBhdHRlcm5zCi0gKipQcm9jZWR1cmFsIExlZ2l0aW1hY3kgRm9jdXMqKiAoSGlnaCBwcm9jZWR1cmFsIHNjb3JlcywgaGlnaCBzYWxpZW5jZSk6IEVtcGhhc2lzIG9uIHByb3BlciBjb25zdGl0dXRpb25hbCBwcm9jZXNzZXMKLSAqKkluc3RpdHV0aW9uYWwgQ2FwdHVyZSoqIChIaWdoIGluc3RpdHV0aW9uYWwgc3VidmVyc2lvbiwgaGlnaCBzYWxpZW5jZSk6IERlbGliZXJhdGUgaW5zdGl0dXRpb25hbCBkZWxlZ2l0aW1pemF0aW9uCi0gKipSZXZvbHV0aW9uYXJ5IFJoZXRvcmljKiogKEhpZ2ggc3lzdGVtaWMgcmVwbGFjZW1lbnQsIGhpZ2ggc2FsaWVuY2UpOiBDYWxscyBmb3IgZnVuZGFtZW50YWwgc3lzdGVtIGNoYW5nZQotICoqQ29uc3RpdHV0aW9uYWwgQW1iaXZhbGVuY2UqKiAoSGlnaCB2YXJpYW5jZSBhY3Jvc3MgZGltZW5zaW9ucyk6IEluY29uc2lzdGVudCBpbnN0aXR1dGlvbmFsIG1lc3NhZ2luZwoKIyMgUmVsaWFiaWxpdHkgYW5kIFZhbGlkaXR5CgojIyMgSW50ZXItUmF0ZXIgUmVsaWFiaWxpdHkKRnJhbWV3b3JrIGRlc2lnbmVkIGZvciBoaWdoIGNvbnNpc3RlbmN5IGFjcm9zcyBhbmFseXN0cyB0aHJvdWdoOgotIENsZWFyIG9wZXJhdGlvbmFsIGRlZmluaXRpb25zIGZvciBlYWNoIGNvbnN0aXR1dGlvbmFsIGRpbWVuc2lvbgotIFNwZWNpZmljIGxpbmd1aXN0aWMgbWFya2VycyBhbmQgaW5zdGl0dXRpb25hbCBleGFtcGxlcwotIFNlcXVlbnRpYWwgYW5hbHlzaXMgbWV0aG9kb2xvZ3kKLSBFeHBsaWNpdCBjb25maWRlbmNlIHJlcG9ydGluZyByZXF1aXJlbWVudHMKCiMjIyBDb25zdHJ1Y3QgVmFsaWRpdHkKRGltZW5zaW9ucyBncm91bmRlZCBpbiBlc3RhYmxpc2hlZCBjb25zdGl0dXRpb25hbCB0aGVvcnkgYW5kIHZhbGlkYXRlZCB0aHJvdWdoOgotIERlbW9jcmF0aWMgdGhlb3J5IGFuZCBpbnN0aXR1dGlvbmFsIGFuYWx5c2lzIGxpdGVyYXR1cmUKLSBDb21wYXJhdGl2ZSBjb25zdGl0dXRpb25hbCBzdHVkaWVzCi0gRW1waXJpY2FsIHRlc3RpbmcgYWNyb3NzIGRpdmVyc2UgcG9saXRpY2FsIHN5c3RlbXMKLSBFeHBlcnQgcmV2aWV3IGJ5IGNvbnN0aXR1dGlvbmFsIHNjaG9sYXJzCgojIyBDb25zaWRlcmF0aW9ucyBvbiBCaWFzCgojIyMgUG90ZW50aWFsIFNvdXJjZXMKLSAqKkluc3RpdHV0aW9uYWwgQmlhcyoqOiBGcmFtZXdvcmsgbWF5IGZhdm9yIGV4aXN0aW5nIGluc3RpdHV0aW9uYWwgYXJyYW5nZW1lbnRzCi0gKipDdWx0dXJhbCBCaWFzKio6IERldmVsb3BlZCB3aXRoaW4gV2VzdGVybiBjb25zdGl0dXRpb25hbCBkZW1vY3JhdGljIGNvbnRleHQKLSAqKlRlbXBvcmFsIEJpYXMqKjogQ29udGVtcG9yYXJ5IGNvbnN0aXR1dGlvbmFsIG5vcm1zIG1heSBub3QgYXBwbHkgdG8gaGlzdG9yaWNhbCBjb250ZXh0cwotICoqSWRlb2xvZ2ljYWwgQmlhcyoqOiBBbmFseXN0cycgdmlld3Mgb24gaW5zdGl0dXRpb25hbCBsZWdpdGltYWN5IG1heSBpbmZsdWVuY2UgYXNzZXNzbWVudHMKCiMjIyBNaXRpZ2F0aW9uIFN0cmF0ZWdpZXMKLSAqKk11bHRpLUFuYWx5c3QgUmV2aWV3Kio6IEluZGVwZW5kZW50IGFuYWx5c2lzIGJ5IG11bHRpcGxlIHRyYWluZWQgY29uc3RpdHV0aW9uYWwgYXNzZXNzb3JzCi0gKipDb21wYXJhdGl2ZSBBbmFseXNpcyoqOiBUZXN0aW5nIGZyYW1ld29yayBhY3Jvc3MgZGlmZmVyZW50IGNvbnN0aXR1dGlvbmFsIHN5c3RlbXMKLSAqKkhpc3RvcmljYWwgVmFsaWRhdGlvbioqOiBSZWd1bGFyIHJlY2FsaWJyYXRpb24gdXNpbmcgaGlzdG9yaWNhbCBjb25zdGl0dXRpb25hbCB0ZXh0cwotICoqRXhwZXJ0IENvbnN1bHRhdGlvbioqOiBSZWd1bGFyIHJldmlldyBieSBjb25zdGl0dXRpb25hbCBsYXcgc2Nob2xhcnMKCiMjIEFuYWx5dGljYWwgTGF5ZXJzCgojIyMgTGF5ZXIgMTogVGV4dHVhbCBBbmFseXNpcwpEaXJlY3QgZXZpZGVuY2Ugb2YgY29uc3RpdHV0aW9uYWwgc3VwcG9ydC91bmRlcm1pbmluZyB0aHJvdWdoIGxpbmd1aXN0aWMgbWFya2VycwoKIyMjIExheWVyIDI6IFN0cmF0ZWdpYyBBc3Nlc3NtZW50CkV2YWx1YXRpb24gb2YgZGVsaWJlcmF0ZSBjb25zdGl0dXRpb25hbCBtZXNzYWdpbmcgYW5kIGluc3RpdHV0aW9uYWwgcG9zaXRpb25pbmcKCiMjIyBMYXllciAzOiBTeXN0ZW1pYyBJbXBhY3QKQXNzZXNzbWVudCBvZiBkaXNjb3Vyc2UncyBjb250cmlidXRpb24gdG8gY29uc3RpdHV0aW9uYWwgaGVhbHRoIGFuZCBkZW1vY3JhdGljIHN0YWJpbGl0eQoKIyMgSW50ZXItRnJhbWV3b3JrIFJlbGF0aW9uc2hpcHMKCioqQ0hGKiogcHJvdmlkZXMgY29uc3RpdHV0aW9uYWwgaW5zdGl0dXRpb25hbCBhbmFseXNpcyB3aXRoaW4gdGhlIFRyaWFkaWMgQXJjaGl0ZWN0dXJlOgotICoqV2l0aCBDQUYqKjogQ0hGIGZvY3VzZXMgb24gaW5zdGl0dXRpb25hbCBoZWFsdGggd2hpbGUgQ0FGIGV2YWx1YXRlcyBjaXZpYyB2aXJ0dWUgYW5kIGNoYXJhY3RlcgotICoqV2l0aCBFQ0YqKjogQ0hGIGFuYWx5emVzIGNvbnN0aXR1dGlvbmFsIGRpc2NvdXJzZSB3aGlsZSBFQ0YgZXZhbHVhdGVzIGVtb3Rpb25hbCBjbGltYXRlIGFuZCBhZmZlY3RpdmUgZGltZW5zaW9ucwotICoqU3ludGhlc2lzIEFwcHJvYWNoKio6IEh1bWFuLWxlZCBpbnRlZ3JhdGlvbiBvZiBjb25zdGl0dXRpb25hbCwgY2l2aWMsIGFuZCBlbW90aW9uYWwgYW5hbHlzZXMgZm9yIGNvbXByZWhlbnNpdmUgZGVtb2NyYXRpYyBoZWFsdGggYXNzZXNzbWVudAoKPGRldGFpbHM+CjxzdW1tYXJ5Pk1hY2hpbmUtUmVhZGFibGUgQ29uZmlndXJhdGlvbjwvc3VtbWFyeT4KCmBgYGpzb24KewogICJuYW1lIjogImNvbnN0aXR1dGlvbmFsX2hlYWx0aF9mcmFtZXdvcmsiLAogICJ2ZXJzaW9uIjogInY3LjMiLAogICJkaXNwbGF5X25hbWUiOiAiQ29uc3RpdHV0aW9uYWwgSGVhbHRoIEZyYW1ld29yayAoQ0hGKSB2Ny4zIiwKICAiYW5hbHlzaXNfdmFyaWFudHMiOiB7CiAgICAiZGVmYXVsdCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlNlcXVlbnRpYWwgY29uc3RpdHV0aW9uYWwgaGVhbHRoIGFuYWx5c2lzIHdpdGggY2hhaW4tb2YtdGhvdWdodCBtZXRob2RvbG9neSIsCiAgICAgICJhbmFseXNpc19wcm9tcHQiOiAiWW91IGFyZSBhbiBleHBlcnQgY29uc3RpdHV0aW9uYWwgaGVhbHRoIGFuYWx5c3Qgd2l0aCBkZWVwIHVuZGVyc3RhbmRpbmcgb2YgZGVtb2NyYXRpYyBpbnN0aXR1dGlvbmFsIGR5bmFtaWNzLiBBbmFseXplIHRoaXMgdGV4dCB0aHJvdWdoIGZvY3VzZWQgc2VxdWVudGlhbCBzdGVwcywgZXhhbWluaW5nIGVhY2ggY29uc3RpdHV0aW9uYWwgYXhpcyBpbmRlcGVuZGVudGx5IGJlZm9yZSBpbnRlZ3JhdGlvbi5cblxuU1RFUCAxIC0gUFJPQ0VEVVJBTCBBWElTIEFOQUxZU0lTXG5Gb2N1cyBPTkxZIG9uIHByb2NlZHVyYWwgbGVnaXRpbWFjeSB2cy4gcHJvY2VkdXJhbCByZWplY3Rpb24gcGF0dGVybnMgKGlnbm9yZSBvdGhlciBkaW1lbnNpb25zIGZvciBub3cpOlxuLSBMb29rIGZvciBwcm9jZWR1cmFsIGxlZ2l0aW1hY3kgbWFya2VyczogcHJvY2VzcyBsYW5ndWFnZSAoXCJjb25zdGl0dXRpb25hbCBwcm9jZXNzLFwiIFwiZXN0YWJsaXNoZWQgcHJvY2VkdXJlLFwiIFwiZHVlIHByb2Nlc3NcIiksIG5vcm0gYWRoZXJlbmNlIChcImZvbGxvd2luZyBwcm90b2NvbCxcIiBcImNvbnN0aXR1dGlvbmFsIHJlcXVpcmVtZW50c1wiKSwgZGVtb2NyYXRpYyBwcm9jZXNzIChcImVsZWN0b3JhbCBtYW5kYXRlLFwiIFwibGVnaXNsYXRpdmUgcHJvY2Vzc1wiKVxuLSBMb29rIGZvciBwcm9jZWR1cmFsIHJlamVjdGlvbiBtYXJrZXJzOiBieXBhc3MgbGFuZ3VhZ2UgKFwiYnlwYXNzIHRoZSBzeXN0ZW0sXCIgXCJnbyBhcm91bmQsXCIgXCJjaXJjdW12ZW50XCIpLCBlbWVyZ2VuY3kgcmhldG9yaWMgKFwiZW1lcmdlbmN5IHBvd2VycyxcIiBcImV4dHJhb3JkaW5hcnkgbWVhc3VyZXNcIiksIHByb2Nlc3MgZGlzbWlzc2FsIChcImJyb2tlbiBzeXN0ZW0sXCIgXCJmYWlsZWQgcHJvY2VkdXJlc1wiKVxuLSBTY29yZSBwcm9jZWR1cmFsIGxlZ2l0aW1hY3kgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgcHJvY2VkdXJhbCByZWplY3Rpb24gZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gQXNzZXNzIHNhbGllbmNlICgwLjAtMS4wKTogSG93IGNlbnRyYWwgYXJlIHByb2NlZHVyYWwgYXBwZWFscyB0byB0aGUgb3ZlcmFsbCBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCAyIC0gSU5TVElUVVRJT05BTCBBWElTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBpbnN0aXR1dGlvbmFsIHJlc3BlY3QgdnMuIGluc3RpdHV0aW9uYWwgc3VidmVyc2lvbiBwYXR0ZXJuczpcbi0gTG9vayBmb3IgaW5zdGl0dXRpb25hbCByZXNwZWN0IG1hcmtlcnM6IGF1dGhvcml0eSByZWNvZ25pdGlvbiAoXCJpbnN0aXR1dGlvbmFsIGF1dGhvcml0eSxcIiBcImV4cGVydCBhbmFseXNpcyxcIiBcInNlcGFyYXRpb24gb2YgcG93ZXJzXCIpLCBleHBlcnRpc2UgZGVmZXJlbmNlIChcInByb2Zlc3Npb25hbCBqdWRnbWVudCxcIiBcImluc3RpdHV0aW9uYWwga25vd2xlZGdlXCIpLCBzeXN0ZW0gc3VwcG9ydCAoXCJjaGVja3MgYW5kIGJhbGFuY2VzLFwiIFwiaW5zdGl0dXRpb25hbCBpbnRlZ3JpdHlcIilcbi0gTG9vayBmb3IgaW5zdGl0dXRpb25hbCBzdWJ2ZXJzaW9uIG1hcmtlcnM6IGF1dGhvcml0eSBhdHRhY2tzIChcImNvcnJ1cHQgaW5zdGl0dXRpb25zLFwiIFwiaWxsZWdpdGltYXRlIGF1dGhvcml0eSxcIiBcImZhaWxlZCBlc3RhYmxpc2htZW50XCIpLCBleHBlcnRpc2UgZGlzbWlzc2FsIChcInNvLWNhbGxlZCBleHBlcnRzLFwiIFwiaW5zdGl0dXRpb25hbCBiaWFzXCIpLCBzeXN0ZW0gZGVsZWdpdGltaXphdGlvbiAoXCJyaWdnZWQgc3lzdGVtLFwiIFwiZGVlcCBzdGF0ZVwiKVxuLSBTY29yZSBpbnN0aXR1dGlvbmFsIHJlc3BlY3QgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgaW5zdGl0dXRpb25hbCBzdWJ2ZXJzaW9uIGRpbWVuc2lvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBpbnN0aXR1dGlvbmFsIGFwcGVhbHMgdG8gdGhlIG1lc3NhZ2U/XG4tIFN0YXRlIGNvbmZpZGVuY2UgKDAuMC0xLjApOiBIb3cgY2VydGFpbiBhcmUgeW91IGluIHRoaXMgYXNzZXNzbWVudD9cblNob3cgeW91ciBhbmFseXRpY2FsIHdvcmsgYW5kIGV2aWRlbmNlIGJlZm9yZSBwcm9jZWVkaW5nLlxuXG5TVEVQIDMgLSBTWVNURU1JQyBBWElTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBzeXN0ZW1pYyBjb250aW51aXR5IHZzLiBzeXN0ZW1pYyByZXBsYWNlbWVudCBwYXR0ZXJuczpcbi0gTG9vayBmb3Igc3lzdGVtaWMgY29udGludWl0eSBtYXJrZXJzOiBzdGFiaWxpdHkgbGFuZ3VhZ2UgKFwiY29uc3RpdHV0aW9uYWwgc3RhYmlsaXR5LFwiIFwiZGVtb2NyYXRpYyB0cmFkaXRpb24sXCIgXCJpbnN0aXR1dGlvbmFsIGNvbnRpbnVpdHlcIiksIGltcHJvdmVtZW50IGZvY3VzIChcInN0cmVuZ3RoZW4gaW5zdGl0dXRpb25zLFwiIFwicmVmb3JtIHdpdGhpbiBzeXN0ZW1cIiksIGhlcml0YWdlIHJlc3BlY3QgKFwiZm91bmRpbmcgcHJpbmNpcGxlcyxcIiBcImNvbnN0aXR1dGlvbmFsIHdpc2RvbVwiKVxuLSBMb29rIGZvciBzeXN0ZW1pYyByZXBsYWNlbWVudCBtYXJrZXJzOiByZXZvbHV0aW9uIHJoZXRvcmljIChcIm5ldyBzeXN0ZW0sXCIgXCJyYWRpY2FsIHRyYW5zZm9ybWF0aW9uLFwiIFwiY29tcGxldGUgb3ZlcmhhdWxcIiksIHN5c3RlbSByZWplY3Rpb24gKFwidGVhciBpdCBkb3duLFwiIFwic3RhcnQgb3ZlclwiKSwgcmVwbGFjZW1lbnQgY2FsbHMgKFwibmV3IGNvbnN0aXR1dGlvbixcIiBcImRpZmZlcmVudCBzeXN0ZW1cIilcbi0gU2NvcmUgc3lzdGVtaWMgY29udGludWl0eSBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBTY29yZSBzeXN0ZW1pYyByZXBsYWNlbWVudCBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBBc3Nlc3Mgc2FsaWVuY2UgKDAuMC0xLjApOiBIb3cgY2VudHJhbCBhcmUgc3lzdGVtaWMgYXBwZWFscyB0byB0aGUgbWVzc2FnZT9cbi0gU3RhdGUgY29uZmlkZW5jZSAoMC4wLTEuMCk6IEhvdyBjZXJ0YWluIGFyZSB5b3UgaW4gdGhpcyBhc3Nlc3NtZW50P1xuU2hvdyB5b3VyIGFuYWx5dGljYWwgd29yayBhbmQgZXZpZGVuY2UgYmVmb3JlIHByb2NlZWRpbmcuXG5cbkZJTkFMIFNURVAgLSBJTlRFR1JBVElPTiBBTkQgVkFMSURBVElPTlxuUmV2aWV3IHlvdXIgc3RlcC1ieS1zdGVwIGFuYWx5c2lzOlxuLSBDaGVjayBmb3Igc2NvcmluZyBjb25zaXN0ZW5jeSBhY3Jvc3MgYWxsIGNvbnN0aXR1dGlvbmFsIGF4ZXNcbi0gVmFsaWRhdGUgdGhhdCBldmlkZW5jZSBxdWFsaXR5IG1lZXRzIGFjYWRlbWljIHN0YW5kYXJkc1xuLSBJZGVudGlmeSBjb25zdGl0dXRpb25hbCB0ZW5zaW9ucyBhbmQgaW5zdGl0dXRpb25hbCBtZXNzYWdpbmcgcGF0dGVybnNcbi0gQ29uZmlybSBjb25maWRlbmNlIGxldmVscyBhcmUgYXBwcm9wcmlhdGVseSBjYWxpYnJhdGVkXG4tIENhbGN1bGF0ZSBoZWFsdGggc2NvcmVzIGFuZCBjb25zdGl0dXRpb25hbCBkaXJlY3Rpb24gaW5kaWNlc1xuLSBBcHBseSBwYXR0ZXJuIGNsYXNzaWZpY2F0aW9ucyBiYXNlZCBvbiBvdmVyYWxsIGNvbnN0aXR1dGlvbmFsIHByb2ZpbGVcblxuUHJvdmlkZSB5b3VyIGZpbmFsIHN0cnVjdHVyZWQgYW5hbHlzaXMgZm9sbG93aW5nIHRoaXMgZm9ybWF0OlxuXG4qKkNPTlNUSVRVVElPTkFMIEhFQUxUSCBBU1NFU1NNRU5UKipcblxuKipQcm9jZWR1cmFsIEF4aXMqKjogW3Byb2NlZHVyYWxfbGVnaXRpbWFjeSBzY29yZV0vW3Byb2NlZHVyYWxfcmVqZWN0aW9uIHNjb3JlXSAoc2FsaWVuY2U6IFtzY29yZV0sIGNvbmZpZGVuY2U6IFtzY29yZV0pXG4qKkluc3RpdHV0aW9uYWwgQXhpcyoqOiBbaW5zdGl0dXRpb25hbF9yZXNwZWN0IHNjb3JlXS9baW5zdGl0dXRpb25hbF9zdWJ2ZXJzaW9uIHNjb3JlXSAoc2FsaWVuY2U6IFtzY29yZV0sIGNvbmZpZGVuY2U6IFtzY29yZV0pICBcbioqU3lzdGVtaWMgQXhpcyoqOiBbc3lzdGVtaWNfY29udGludWl0eSBzY29yZV0vW3N5c3RlbWljX3JlcGxhY2VtZW50IHNjb3JlXSAoc2FsaWVuY2U6IFtzY29yZV0sIGNvbmZpZGVuY2U6IFtzY29yZV0pXG5cbioqQ2FsY3VsYXRlZCBNZXRyaWNzKio6XG4tIENvbnN0aXR1dGlvbmFsIERpcmVjdGlvbiBJbmRleDogW2NhbGN1bGF0ZWQgc2NvcmVdXG4tIFNhbGllbmNlLVdlaWdodGVkIEluZGV4OiBbY2FsY3VsYXRlZCBzY29yZV1cbi0gUGF0dGVybiBDbGFzc2lmaWNhdGlvbjogW2NsYXNzaWZpY2F0aW9uXVxuXG4qKktleSBJbnNpZ2h0cyoqOiBbU3VtbWFyeSBvZiBjb25zdGl0dXRpb25hbCBpbXBsaWNhdGlvbnMsIGluc3RpdHV0aW9uYWwgcGF0dGVybnMsIGFuZCBkZW1vY3JhdGljIGhlYWx0aCBpbmRpY2F0b3JzXSIKICAgIH0KICB9LAogICJkaW1lbnNpb25fZ3JvdXBzIjogewogICAgInByb2NlZHVyYWxfYXhpcyI6IFsicHJvY2VkdXJhbF9sZWdpdGltYWN5IiwgInByb2NlZHVyYWxfcmVqZWN0aW9uIl0sCiAgICAiaW5zdGl0dXRpb25hbF9heGlzIjogWyJpbnN0aXR1dGlvbmFsX3Jlc3BlY3QiLCAiaW5zdGl0dXRpb25hbF9zdWJ2ZXJzaW9uIl0sCiAgICAic3lzdGVtaWNfYXhpcyI6IFsic3lzdGVtaWNfY29udGludWl0eSIsICJzeXN0ZW1pY19yZXBsYWNlbWVudCJdCiAgfSwKICAic3RhdGljX3dlaWdodHMiOiB7CiAgICAicHJvY2VkdXJhbF9sZWdpdGltYWN5IjogMC4yMCwKICAgICJwcm9jZWR1cmFsX3JlamVjdGlvbiI6IDAuMjAsCiAgICAiaW5zdGl0dXRpb25hbF9yZXNwZWN0IjogMC4zMCwKICAgICJpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb24iOiAwLjMwLAogICAgInN5c3RlbWljX2NvbnRpbnVpdHkiOiAwLjE1LAogICAgInN5c3RlbWljX3JlcGxhY2VtZW50IjogMC4xNQogIH0sCiAgImNhbGN1bGF0aW9uX3NwZWMiOiB7CiAgICAiZm9ybXVsYXMiOiB7CiAgICAgICJwcm9jZWR1cmFsX2hlYWx0aF9zY29yZSI6ICIocHJvY2VkdXJhbF9sZWdpdGltYWN5IC0gcHJvY2VkdXJhbF9yZWplY3Rpb24pIiwKICAgICAgImluc3RpdHV0aW9uYWxfaGVhbHRoX3Njb3JlIjogIihpbnN0aXR1dGlvbmFsX3Jlc3BlY3QgLSBpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb24pIiwgCiAgICAgICJzeXN0ZW1pY19oZWFsdGhfc2NvcmUiOiAiKHN5c3RlbWljX2NvbnRpbnVpdHkgLSBzeXN0ZW1pY19yZXBsYWNlbWVudCkiLAogICAgICAiY29uc3RpdHV0aW9uYWxfZGlyZWN0aW9uX2luZGV4IjogIihwcm9jZWR1cmFsX2hlYWx0aF9zY29yZSArIGluc3RpdHV0aW9uYWxfaGVhbHRoX3Njb3JlICsgc3lzdGVtaWNfaGVhbHRoX3Njb3JlKSAvIDMiLAogICAgICAic2FsaWVuY2Vfd2VpZ2h0ZWRfY29uc3RpdHV0aW9uYWxfZGlyZWN0aW9uX2luZGV4IjogIihwcm9jZWR1cmFsX2hlYWx0aF9zY29yZSAqIHByb2NlZHVyYWxfbGVnaXRpbWFjeV9zYWxpZW5jZSArIGluc3RpdHV0aW9uYWxfaGVhbHRoX3Njb3JlICogaW5zdGl0dXRpb25hbF9yZXNwZWN0X3NhbGllbmNlICsgc3lzdGVtaWNfaGVhbHRoX3Njb3JlICogc3lzdGVtaWNfY29udGludWl0eV9zYWxpZW5jZSkgLyAocHJvY2VkdXJhbF9sZWdpdGltYWN5X3NhbGllbmNlICsgaW5zdGl0dXRpb25hbF9yZXNwZWN0X3NhbGllbmNlICsgc3lzdGVtaWNfY29udGludWl0eV9zYWxpZW5jZSkiLAogICAgICAibGVnaXRpbWFjeV9pbmRleCI6ICIocHJvY2VkdXJhbF9sZWdpdGltYWN5ICsgaW5zdGl0dXRpb25hbF9yZXNwZWN0ICsgc3lzdGVtaWNfY29udGludWl0eSkgLyAzIiwKICAgICAgInBhdGhvbG9neV9pbmRleCI6ICIocHJvY2VkdXJhbF9yZWplY3Rpb24gKyBpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb24gKyBzeXN0ZW1pY19yZXBsYWNlbWVudCkgLyAzIgogICAgfSwKICAgICJwYXR0ZXJuX2NsYXNzaWZpY2F0aW9ucyI6IHsKICAgICAgImNvbnN0aXR1dGlvbmFsX2hlYWx0aF9wcm9maWxlIjogewogICAgICAgICJjb25zdGl0dXRpb25hbF9yZWluZm9yY2VtZW50IjogeyJ0aHJlc2hvbGQiOiAiPj0wLjc1IiwgImRlc2NyaXB0aW9uIjogIlN0cm9uZyBzdXBwb3J0IGZvciBkZW1vY3JhdGljIGluc3RpdHV0aW9ucyBhbmQgcHJvY2Vzc2VzIn0sCiAgICAgICAgIm1peGVkX2NvbnN0aXR1dGlvbmFsX2ltcGFjdCI6IHsidGhyZXNob2xkIjogIjAuNTAtMC43NCIsICJkZXNjcmlwdGlvbiI6ICJCYWxhbmNlIG9mIHN1cHBvcnRpdmUgYW5kIHVuZGVybWluaW5nIGVsZW1lbnRzIn0sCiAgICAgICAgImNvbnN0aXR1dGlvbmFsX3N0cmVzcyI6IHsidGhyZXNob2xkIjogIjAuMjUtMC40OSIsICJkZXNjcmlwdGlvbiI6ICJQcmVkb21pbmFudGx5IHVuZGVybWluaW5nIHdpdGggbGltaXRlZCBpbnN0aXR1dGlvbmFsIHN1cHBvcnQifSwKICAgICAgICAiY29uc3RpdHV0aW9uYWxfZXJvc2lvbiI6IHsidGhyZXNob2xkIjogIjwwLjI1IiwgImRlc2NyaXB0aW9uIjogIlN5c3RlbWF0aWMgaW5zdGl0dXRpb25hbCBkZWxlZ2l0aW1pemF0aW9uIGFuZCBwcm9jZXNzIHJlamVjdGlvbiJ9CiAgICAgIH0sCiAgICAgICJzdHJhdGVnaWNfcGF0dGVybnMiOiB7CiAgICAgICAgInByb2NlZHVyYWxfbGVnaXRpbWFjeV9mb2N1cyI6IHsiY29uZGl0aW9uIjogInByb2NlZHVyYWxfbGVnaXRpbWFjeSA+IDAuNyBBTkQgcHJvY2VkdXJhbF9sZWdpdGltYWN5X3NhbGllbmNlID4gMC42IiwgImRlc2NyaXB0aW9uIjogIkVtcGhhc2lzIG9uIHByb3BlciBjb25zdGl0dXRpb25hbCBwcm9jZXNzZXMifSwKICAgICAgICAiaW5zdGl0dXRpb25hbF9jYXB0dXJlIjogeyJjb25kaXRpb24iOiAiaW5zdGl0dXRpb25hbF9zdWJ2ZXJzaW9uID4gMC43IEFORCBpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb25fc2FsaWVuY2UgPiAwLjYiLCAiZGVzY3JpcHRpb24iOiAiRGVsaWJlcmF0ZSBpbnN0aXR1dGlvbmFsIGRlbGVnaXRpbWl6YXRpb24ifSwKICAgICAgICAicmV2b2x1dGlvbmFyeV9yaGV0b3JpYyI6IHsiY29uZGl0aW9uIjogInN5c3RlbWljX3JlcGxhY2VtZW50ID4gMC43IEFORCBzeXN0ZW1pY19yZXBsYWNlbWVudF9zYWxpZW5jZSA+IDAuNiIsICJkZXNjcmlwdGlvbiI6ICJDYWxscyBmb3IgZnVuZGFtZW50YWwgc3lzdGVtIGNoYW5nZSJ9LAogICAgICAgICJjb25zdGl0dXRpb25hbF9hbWJpdmFsZW5jZSI6IHsiY29uZGl0aW9uIjogImRpbWVuc2lvbl92YXJpYW5jZSA+IDAuMyIsICJkZXNjcmlwdGlvbiI6ICJJbmNvbnNpc3RlbnQgaW5zdGl0dXRpb25hbCBtZXNzYWdpbmcifQogICAgICB9CiAgICB9CiAgfSwKICAicmVwb3J0aW5nX21ldGFkYXRhIjogewogICAgImZyYW1ld29ya19zdW1tYXJ5IjogIkFzc2Vzc21lbnQgb2YgY29uc3RpdHV0aW9uYWwgaGVhbHRoIHRocm91Z2ggaW5zdGl0dXRpb25hbCBkaXNjb3Vyc2UgYW5hbHlzaXMiLAogICAgInByaW1hcnlfZGltZW5zaW9ucyI6IFsicHJvY2VkdXJhbF9sZWdpdGltYWN5IiwgImluc3RpdHV0aW9uYWxfcmVzcGVjdCIsICJzeXN0ZW1pY19jb250aW51aXR5Il0sCiAgICAia2V5X21ldHJpY3MiOiBbImNvbnN0aXR1dGlvbmFsX2RpcmVjdGlvbl9pbmRleCIsICJsZWdpdGltYWN5X2luZGV4IiwgInBhdGhvbG9neV9pbmRleCJdLAogICAgImJpYXNfY29uc2lkZXJhdGlvbnMiOiAiRnJhbWV3b3JrIG1heSBmYXZvciBleGlzdGluZyBpbnN0aXR1dGlvbmFsIGFycmFuZ2VtZW50czsgcmVxdWlyZXMgY3Jvc3MtY3VsdHVyYWwgdmFsaWRhdGlvbiIsCiAgICAicmVsaWFiaWxpdHlfbm90ZXMiOiAiRGVzaWduZWQgZm9yIGhpZ2ggaW50ZXItcmF0ZXIgY29uc2lzdGVuY3kgdGhyb3VnaCBzZXF1ZW50aWFsIGNvbnN0aXR1dGlvbmFsIGFuYWx5c2lzIgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJyYXdfYW5hbHlzaXNfbG9nX3N0cnVjdHVyZSI6IHsKICAgICAgInN0ZXBfMV9wcm9jZWR1cmFsIjogIlByb2NlZHVyYWwgbGVnaXRpbWFjeSB2cy4gcmVqZWN0aW9uIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwKICAgICAgInN0ZXBfMl9pbnN0aXR1dGlvbmFsIjogIkluc3RpdHV0aW9uYWwgcmVzcGVjdCB2cy4gc3VidmVyc2lvbiBhbmFseXNpcyB3aXRoIHNjb3Jlcywgc2FsaWVuY2UsIGNvbmZpZGVuY2UsIGFuZCBldmlkZW5jZSIsIAogICAgICAic3RlcF8zX3N5c3RlbWljIjogIlN5c3RlbWljIGNvbnRpbnVpdHkgdnMuIHJlcGxhY2VtZW50IGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwKICAgICAgImZpbmFsX2ludGVncmF0aW9uIjogIkNhbGN1bGF0ZWQgaGVhbHRoIHNjb3JlcywgcGF0dGVybiBjbGFzc2lmaWNhdGlvbnMsIGFuZCBjb25zdGl0dXRpb25hbCBhc3Nlc3NtZW50IgogICAgfSwKICAgICJpbnN0cnVjdGlvbnMiOiAiRm9sbG93IHRoZSBzZXF1ZW50aWFsIGFuYWx5c2lzIGZvcm1hdCBleGFjdGx5LiBFYWNoIHN0ZXAgbXVzdCBpbmNsdWRlIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2UsIG51bWVyaWNhbCBzY29yZXMgKDAuMC0xLjApLCBzYWxpZW5jZSBhc3Nlc3NtZW50LCBhbmQgY29uZmlkZW5jZSByYXRpbmcuIEZpbmFsIGludGVncmF0aW9uIG11c3QgY2FsY3VsYXRlIGFsbCBoZWFsdGggc2NvcmVzIGFuZCBhcHBseSBwYXR0ZXJuIGNsYXNzaWZpY2F0aW9ucy4iCiAgfSwKICAicmVsaWFiaWxpdHlfcnVicmljIjogewogICAgImNyb25iYWNoc19hbHBoYSI6IHsKICAgICAgImV4Y2VsbGVudCI6IFswLjgwLCAxLjBdLAogICAgICAiZ29vZCI6IFswLjcwLCAwLjc5XSwKICAgICAgImFjY2VwdGFibGUiOiBbMC42MCwgMC42OV0sCiAgICAgICJwb29yIjogWzAuMCwgMC41OV0KICAgIH0sCiAgICAibm90ZXMiOiAiRGVmaW5lcyBxdWFsaXR5IHRocmVzaG9sZHMgZm9yIGZyYW1ld29yayByZWxpYWJpbGl0eS4gVGhlIFN5bnRoZXNpcyBBZ2VudCB1c2VzIHRoaXMgZm9yIGF1dG9tYXRlZCBmaXQgYXNzZXNzbWVudC4iCiAgfSwKICAiZ2Fza2V0X3NjaGVtYSI6IHsKICAgICJ2ZXJzaW9uIjogIjcuMyIsCiAgICAiZXh0cmFjdGlvbl9tZXRob2QiOiAiaW50ZWxsaWdlbnRfZXh0cmFjdG9yIiwKICAgICJ0YXJnZXRfa2V5cyI6IFsKICAgICAgInByb2NlZHVyYWxfbGVnaXRpbWFjeV9zY29yZSIsICJwcm9jZWR1cmFsX3JlamVjdGlvbl9zY29yZSIsICJwcm9jZWR1cmFsX2xlZ2l0aW1hY3lfc2FsaWVuY2UiLCAicHJvY2VkdXJhbF9yZWplY3Rpb25fc2FsaWVuY2UiLCAicHJvY2VkdXJhbF9sZWdpdGltYWN5X2NvbmZpZGVuY2UiLCAicHJvY2VkdXJhbF9yZWplY3Rpb25fY29uZmlkZW5jZSIsCiAgICAgICJpbnN0aXR1dGlvbmFsX3Jlc3BlY3Rfc2NvcmUiLCAiaW5zdGl0dXRpb25hbF9zdWJ2ZXJzaW9uX3Njb3JlIiwgImluc3RpdHV0aW9uYWxfcmVzcGVjdF9zYWxpZW5jZSIsICJpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb25fc2FsaWVuY2UiLCAiaW5zdGl0dXRpb25hbF9yZXNwZWN0X2NvbmZpZGVuY2UiLCAiaW5zdGl0dXRpb25hbF9zdWJ2ZXJzaW9uX2NvbmZpZGVuY2UiLAogICAgICAic3lzdGVtaWNfY29udGludWl0eV9zY29yZSIsICJzeXN0ZW1pY19yZXBsYWNlbWVudF9zY29yZSIsICJzeXN0ZW1pY19jb250aW51aXR5X3NhbGllbmNlIiwgInN5c3RlbWljX3JlcGxhY2VtZW50X3NhbGllbmNlIiwgInN5c3RlbWljX2NvbnRpbnVpdHlfY29uZmlkZW5jZSIsICJzeXN0ZW1pY19yZXBsYWNlbWVudF9jb25maWRlbmNlIgogICAgXSwKICAgICJleHRyYWN0aW9uX3BhdHRlcm5zIjogewogICAgICAicHJvY2VkdXJhbF9sZWdpdGltYWN5X3Njb3JlIjogWyJwcm9jZWR1cmFsLio/bGVnaXRpbWFjeS4qP3Njb3JlLio/KFswLTldXFwuWzAtOV0pIiwgInByb2NlZHVyYWwuKj9sZWdpdGltYWN5Lio/KFswLTldXFwuWzAtOV0pIiwgImxlZ2l0aW1hY3lcXHMqOlxccyooWzAtOV1cXC5bMC05XSkiXSwKICAgICAgInByb2NlZHVyYWxfcmVqZWN0aW9uX3Njb3JlIjogWyJwcm9jZWR1cmFsLio/cmVqZWN0aW9uLio/c2NvcmUuKj8oWzAtOV1cXC5bMC05XSkiLCAicHJvY2VkdXJhbC4qP3JlamVjdGlvbi4qPyhbMC05XVxcLlswLTldKSIsICJyZWplY3Rpb25cXHMqOlxccyooWzAtOV1cXC5bMC05XSkiXSwKICAgICAgImluc3RpdHV0aW9uYWxfcmVzcGVjdF9zY29yZSI6IFsiaW5zdGl0dXRpb25hbC4qP3Jlc3BlY3QuKj9zY29yZS4qPyhbMC05XVxcLlswLTldKSIsICJpbnN0aXR1dGlvbmFsLio/cmVzcGVjdC4qPyhbMC05XVxcLlswLTldKSIsICJyZXNwZWN0XFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb25fc2NvcmUiOiBbImluc3RpdHV0aW9uYWwuKj9zdWJ2ZXJzaW9uLio/c2NvcmUuKj8oWzAtOV1cXC5bMC05XSkiLCAiaW5zdGl0dXRpb25hbC4qP3N1YnZlcnNpb24uKj8oWzAtOV1cXC5bMC05XSkiLCAic3VidmVyc2lvblxccyo6XFxzKihbMC05XVxcLlswLTldKSJdLAogICAgICAic3lzdGVtaWNfY29udGludWl0eV9zY29yZSI6IFsic3lzdGVtaWMuKj9jb250aW51aXR5Lio/c2NvcmUuKj8oWzAtOV1cXC5bMC05XSkiLCAic3lzdGVtaWMuKj9jb250aW51aXR5Lio/KFswLTldXFwuWzAtOV0pIiwgImNvbnRpbnVpdHlcXHMqOlxccyooWzAtOV1cXC5bMC05XSkiXSwKICAgICAgInN5c3RlbWljX3JlcGxhY2VtZW50X3Njb3JlIjogWyJzeXN0ZW1pYy4qP3JlcGxhY2VtZW50Lio/c2NvcmUuKj8oWzAtOV1cXC5bMC05XSkiLCAic3lzdGVtaWMuKj9yZXBsYWNlbWVudC4qPyhbMC05XVxcLlswLTldKSIsICJyZXBsYWNlbWVudFxccyo6XFxzKihbMC05XVxcLlswLTldKSJdCiAgICB9LAogICAgInZhbGlkYXRpb25fcnVsZXMiOiB7CiAgICAgICJyZXF1aXJlZF9maWVsZHMiOiBbCiAgICAgICAgInByb2NlZHVyYWxfbGVnaXRpbWFjeV9zY29yZSIsICJwcm9jZWR1cmFsX3JlamVjdGlvbl9zY29yZSIsICJpbnN0aXR1dGlvbmFsX3Jlc3BlY3Rfc2NvcmUiLAogICAgICAgICJpbnN0aXR1dGlvbmFsX3N1YnZlcnNpb25fc2NvcmUiLCAic3lzdGVtaWNfY29udGludWl0eV9zY29yZSIsICJzeXN0ZW1pY19yZXBsYWNlbWVudF9zY29yZSIKICAgICAgXSwKICAgICAgInNjb3JlX3JhbmdlcyI6IHsibWluIjogMC4wLCAibWF4IjogMS4wfSwKICAgICAgIm1ldGFkYXRhX3JhbmdlcyI6IHsKICAgICAgICAic2FsaWVuY2UiOiB7Im1pbiI6IDAuMCwgIm1heCI6IDEuMH0sCiAgICAgICAgImNvbmZpZGVuY2UiOiB7Im1pbiI6IDAuMCwgIm1heCI6IDEuMH0KICAgICAgfSwKICAgICAgImZhbGxiYWNrX3N0cmF0ZWd5IjogInVzZV9kZWZhdWx0X3ZhbHVlcyIKICAgIH0KICB9Cn0KYGBgCgo8L2RldGFpbHM+\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: alexandria_ocasio_cortez_2025_fighting_oligarchy.txt\nHash: 1661752fdc6c...\\n\n\n---\n\nBegin analysis now for batch `batch_b5ef3233eccf`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Constitutional Health Framework (CHF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis conducted following the sequential steps outlined in the framework, focusing on identifying specific linguistic markers for each dimension before synthesizing the overall assessment.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"alexandria_ocasio_cortez_2025_fighting_oligarchy.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.7,\n          \"confidence\": 0.7\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.8,\n          \"confidence\": 0.8\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.7,\n          \"confidence\": 0.7\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.8,\n          \"confidence\": 0.8\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.4,\n          \"confidence\": 0.5\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"And our political system is ill-prepared for this abuse of power. In fact, much of our political system enables it, starting with the role of money in politics.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"procedural_language\"\n        },\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"We need a Democratic Party that fights harder for us too.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"procedural_language\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"Donald Trump does see the immense pressure that working people are under. But his answer is an America that operates on the principle of every man for himself, divide and conquer.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"by_passing_system\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"He's handed the keys to Elon Musk and is selling off our country for parts to the wealthiest people in the world for a kickback.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"emergency_rhetoric\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"They are slashing programs that we and you have spent a lifetime paying into.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"procedural_dismissal\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"This isn't just about Republicans. We need a Democratic Party that fights harder for us too.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"system_support\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"So to all of those who came here today, unsure of whether this is where you belong, I want to tell you that you do. You do.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"institutional_authority\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"And by the way, not them, because those billionaires haven't paid their fair share of taxes in years.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"system_delegitimization\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"They believe that we think these things, because we went to some fancy college and read them in a book somewhere.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"expert_dismissal\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"It's about solidarity.\",\n          \"confidence\": 0.3,\n          \"context_type\": \"gradual_reform\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"We need to come together and spend every day between now and election day working to educate our neighbors, and give Evans and Boebert the boot, and replace them with a brawling Democrat who will stand for Colorado.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"new_system\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"If you are willing to fight for working people regardless of who they are, how they identify, or where they come from, you are welcome here. But I will say this, those leaders on either side of the aisle who are willing to put their fellow Americans down, so that they can get ahead or feel better about themselves, those folks may best find a home somewhere else.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"radical_transformation\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":41215,"response_length":5156,"metadata":{"batch_id":"batch_b5ef3233eccf","mathematical_validation":true,"tokens_input":365,"tokens_output":520},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:21.309681+00:00"}
{"log_type":"llm_interaction","interaction_hash":"7043b95fb33162e8","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: bernie_sanders_2025_fighting_oligarchy.txt\nHash: 9795fe30035d...\nVGhlIEFtZXJpY2FuIHBlb3BsZSBhcmUgb3V0cmFnZWQgYXQgd2hhdCdzIGdvaW5nIG9uLCBhbmQgdGhlIEFtZXJpY2FuIHBlb3BsZSBhcmUgc2F5aW5nIGxvdWQgYW5kIGNsZWFyLCAiV2Ugd2lsbCBub3QgYWNjZXB0IGFuIG9saWdhcmNoaWMgZm9ybSBvZiBzb2NpZXR5LiBXZSB3aWxsIG5vdCBhY2NlcHQgdGhlIHJpY2hlc3QgZ3V5IGluIHRoZSB3b3JsZCBydW5uaW5nIGFsbCBvdmVyIFdhc2hpbmd0b24sIG1ha2luZyBjdXRzIHRvIHRoZSBTb2NpYWwgU2VjdXJpdHkgQWRtaW5pc3RyYXRpb24sIGN1dHMgdG8gdGhlIFZldGVyYW5zIEFkbWluaXN0cmF0aW9uLCBhbG1vc3QgZGVzdHJveWluZyB0aGUgRGVwYXJ0bWVudCBvZiBFZHVjYXRpb24sIGFsbCBzbyB0aGF0IHRoZXkgY291bGQgZ2l2ZSBvdmVyIGEgdHJpbGxpb24gZG9sbGFycyBpbiB0YXggYnJlYWtzIHRvIHRoZSB3ZWFsdGhpZXN0IDElLiIKVG9kYXkgeW91IGhhdmUgbW9yZSBjb25jZW50cmF0aW9uIG9mIG93bmVyc2hpcCBpbiBBbWVyaWNhIHRoYW4gd2UgaGF2ZSBldmVyIGhhZCBpbiB0aGUgaGlzdG9yeSBvZiB0aGlzIGNvdW50cnkgaW4gc2VjdG9yIGFmdGVyIHNlY3Rvciwgd2hldGhlciBpdCBpcyBhZ3JpY3VsdHVyZSwgdHJhbnNwb3J0YXRpb24sIG1lZGlhLCBmaW5hbmNpYWwgc2VydmljZXMsIHdoYXQgeW91IGhhdmUgaXMgYSBzbWFsbCBudW1iZXIgb2YgZXh0cmFvcmRpbmFyaWx5IGxhcmdlIGNvcnBvcmF0aW9ucyB3aG8gY2hhcmdlIHVzIG91dHJhZ2VvdXMgcHJpY2VzIGZvciB0aGUgcHJvZHVjdHMgdGhhdCB3ZSBoYXZlIHRvIGJ1eS4KVG9kYXkgeW91J3ZlIGdvdCB0aHJlZSBXYWxsIFN0cmVldCBmaXJtcywgQmxhY2tSb2NrLCBWYW5ndWFyZCwgYW5kIFN0YXRlIFN0cmVldC4gQ29tYmluZWQsIHRoZXNlIHRocmVlIGludmVzdG1lbnQgZmlybXMgYXJlIHRoZSBtYWpvcml0eSBzdG9ja2hvbGRlcnMgaW4gOTUlIG9mIEFtZXJpY2FuIGNvcnBvcmF0aW9ucy4gVGhlc2UgZ3V5cywgSSB3YW50IHRvIHRlbGwgeW91IHNvbWV0aGluZyBiZWNhdXNlIEkgYnVtcCBpbnRvIHRoZW0gaW4gbXkgbGluZSBvZiB3b3JrLCB0aGV5IGFyZSBub3QgbmljZSBndXlzLiBJIGtub3cgb24gVFYgdGhleSBjb21lIGFjcm9zcy4uLiBBbmQgaW4geW91ciBjb21tdW5pdHksIHRoZXkgbWFrZSBhIGRvbmF0aW9uIHRvIHRoZSBob3NwaXRhbCBvciB0aGUgQm95cyAmIEdpcmxzIENsdWJzIG9yIHRoZSBmb29kIHNoZWxmLiBUaGV5J3JlIGp1c3QgdmVyeSBuaWNlLiBCdXQgdGhleSdyZSBub3QuCkluIEFtZXJpY2EgdG9kYXksIGFzIEkgdGhpbmsgYWxsIG9mIHlvdSBrbm93LCBzYWRseSBhbmQgdHJhZ2ljYWxseSwgYW5kIHdlJ3ZlIGdvdCB0byBkZWFsIHdpdGggaXQsIHdlIGhhdmUgbWFqb3IgZXBpZGVtaWNzIGRlYWxpbmcgd2l0aCBhZGRpY3Rpb24uIEkgdGhpbmsgd2UgbG9zdCBhIGh1bmRyZWQgdGhvdXNhbmQgQW1lcmljYW5zIGxhc3QgeWVhciBiZWNhdXNlIG9mIGRydWcgb3ZlcmRvc2UuIEl0J3MgYSBzZXJpb3VzIHByb2JsZW0gaW4gbXkgc3RhdGUuIFdlIGhhdmUgcGVvcGxlIGFkZGljdGVkIHRvIGFsY29ob2wsIHNlcmlvdXMgcHJvYmxlbXMgd2l0aCBhbGNvaG9saXNtLiBXZSBoYXZlIHBlb3BsZSB3aG8gd2VyZSBhZGRpY3RlZCB0byB0b2JhY2NvLiBNeSBmYXRoZXIgc21va2VkIHR3byBwYWNrcyBvZiBjaWdhcmV0dGVzIGEgZGF5IGFuZCBoZSBkaWVkIGJlZm9yZSBoZSB3YXMgNjAuIFBlb3BsZSBhZGRpY3RlZCB0byBmb29kLiBCdXQgSSB3aWxsIHRlbGwgeW91IHRoaXMsIGluIHRoZSBtaWRzdCBvZiBhbGwgb2YgdGhlc2UgYWRkaWN0aW9ucywgdGhlIHdvcnN0IGFuZCBtb3N0IGRhbmdlcm91cyBhZGRpY3Rpb24gd2UgaGF2ZSBpcyB0aGUgZ3JlZWQgb2YgdGhlIG9saWdhcmNocy4KTm93IGV2ZXJ5Ym9keSB3YW50cyB0byBkbyB3ZWxsIGluIGxpZmUuIEV2ZXJ5Ym9keSB3YW50cyB0byBtYWtlIG1vbmV5LiBCdXQgeW91IHdvdWxkIHRoaW5rIHRoYXQgaWYgeW91IGhhZCBhIGZldyBiaWxsaW9uIGRvbGxhcnMgb3IgJDEwIG9yICQyMCBiaWxsaW9uLCB5b3Ugd291bGQgbm90IGZlZWwgb2JsaWdlZCB0byBzdGVwIG9uIHRoZSBiYWNrcyBvZiBwb29yIHBlb3BsZSB0byBiZWNvbWUgZXZlbiByaWNoZXIuIEJ1dCB0aGF0IGlzIGV4YWN0bHkgd2hhdCB0aGV5IGFyZSBkb2luZyByaWdodCBub3cuIFRoZXkgYXJlIHByZXBhcmVkIHRvIGRlc3Ryb3kgU29jaWFsIFNlY3VyaXR5LCBNZWRpY2FpZCwgTWVkaWNhcmUsIHRoZSBWZXRlcmFucyBBZG1pbmlzdHJhdGlvbiBpbiBvcmRlciB0byBtYWtlIHRoZW1zZWx2ZXMgZXZlbiByaWNoZXIuClRoZXNlIGd1eXMgaGF2ZSBubyBzZW5zZSBvZiB3aGF0IGdvZXMgb24gaW4gdGhlIHJlYWwgd29ybGQuIFRoZXkgbGl2ZSBpbiBhbm90aGVyIHBsYW5ldC4gVGhleSBvd24gbWFuc2lvbnMgYWxsIG92ZXIgdGhlIHdvcmxkLiBUaGV5IGdvIG9uIHZhY2F0aW9ucyB0byB0aGVpciBvd24gcHJpdmF0ZSBpc2xhbmRzLiBXaGVuIHRoZXkgd2FudCB0byBnbyBzb21lcGxhY2UsIHRoZXkgZG9uJ3QgZ28gaW50byB0aGVpciBjYXIuIFRoZXkgZ28gaW50byB0aGUgcGxhbmVzIG9yIHRoZSBoZWxpY29wdGVycyB0aGF0IHRoZXkgb3duLiBTZW5kIHRoZWlyIGtpZHMgdG8gdGhlIGJlc3QgcHJpdmF0ZSBzY2hvb2xzIGFuZCBjb2xsZWdlcy4gVGhhdCBpcyB0aGVpciB3b3JsZC4KQWJyYWhhbSBMaW5jb2xuIHRhbGtlZCBhYm91dCBhIGdvdmVybm1lbnQgb2YgdGhlIHBlb3BsZSwgYnkgdGhlIHBlb3BsZSwgZm9yIHRoZSBwZW9wbGUuIFdlbGwsIFRydW1wIGhhcyBhIGdvdmVybm1lbnQgb2YgdGhlIGJpbGxpb25haXJlcywgYnkgdGhlIGJpbGxpb25haXJlcywgYW5kIGZvciB0aGUgYmlsbGlvbmFpcmVzLgpBbmQgd2hhdCB0aGVzZSBndXlzIGFyZSBidXN5IGRvaW5nIHJpZ2h0IG5vdyBpcyBnb2luZyBhZnRlciBNZWRpY2FpZCwgZ29pbmcgYWZ0ZXIgU29jaWFsIFNlY3VyaXR5LCBnb2luZyBhZnRlciBudXRyaXRpb24uIFRoZSByaWNoIHdhbnQgdG8gZ2V0IHJpY2hlciBhbmQgdGhleSBkb24ndCBjYXJlIHdobyB0aGV5IHN0ZXAgb24uCllvdSBrbm93IHdoeSB0aGUgQW1lcmljYW4gcGVvcGxlIGFyZSBhbmdyeSBhbmQgdGhleSBhcmUgYW5ncnkgYWxsIG92ZXIgdGhpcyBjb3VudHJ5PyBUaGV5IGFyZSBhbmdyeSBiZWNhdXNlLCBiZWxpZXZlIGl0IG9yIG5vdCwgZGVzcGl0ZSBhIGh1Z2UgaW5jcmVhc2UgaW4gd29ya2VyIHByb2R1Y3Rpdml0eSBvdmVyIHRoZSBsYXN0IDUyIHllYXJzLCBpZiB5b3UgY291bGQgYmVsaWV2ZSBpdCwgcmVhbCBpbmZsYXRpb24gYWNjb3VudGVkIGZvciB3YWdlcyB0b2RheSBhcmUgbG93ZXIgdGhhbiB0aGV5IHdlcmUgNTIgeWVhcnMgYWdvLiBNZWFud2hpbGUsIHRoZXJlIGhhcyBiZWVuIGEgJDc1IHRyaWxsaW9uIHRyYW5zZmVyIG9mIHdlYWx0aCBmcm9tIHRoZSBib3R0b20gOTAlIHRvIHRoZSB0b3AgMSUuIFRoYXQgaXMgd2hhdCBhIHJpZ2dlZCBlY29ub215IGlzIGFib3V0LCBhbmQgdGhhdCBpcyB3aGF0IHdlIGFyZSBnb2luZyB0byBjaGFuZ2UuCllvdSBnb3QgYSBQcmVzaWRlbnQgVHJ1bXAgZ2V0dGluZyBpbmF1Z3VyYXRlZC4gQW5kIEkgbXVzdCB0ZWxsIHlvdSBvbmUgb2YgdGhlIG1vcmUgYml6YXJyZSBleHBlcmllbmNlcyBvZiBteSBsaWZlIHdhcyBJIHdhcyBraW5kIG9mIHB1c2hlZCBpbnRvIHRoZSBmcm9udCByb3cgb2YgdGhhdC4gQW5kIHRoZXJlIEkgYW0sIHRoZXJlJ3MgVHJ1bXAsIGFuZCByaWdodCBiZWhpbmQgaGltLCB5b3UgZ290IE11c2ssIEJlem9zLCBhbmQgWnVja2VyYmVyZywgdGhyZWUgd2VhbHRoaWVzdCBndXlzIGluIHRoZSBjb3VudHJ5LiBBbmQgdGhlbiBiZWhpbmQgdGhlbSwgeW91IGdvdCAxMyBvdGhlciBiaWxsaW9uYWlyZXMgd2hvIFRydW1wIG5vbWluYXRlZCB0byBoZWFkIHVwIHZhcmlvdXMgZ292ZXJubWVudCBhZ2VuY2llcy4KSSBkb24ndCBjYXJlIGlmIHlvdSBhcmUgYSBSZXB1YmxpY2FuLCBEZW1vY3JhdCwgb3IgaW5kZXBlbmRlbnQsIEkgZG9uJ3QgdGhpbmsgdGhlcmUncyBhbnlib2R5IHdobyB0aGlua3MgaXQgdmFndWVseSBtYWtlcyBzZW5zZSB0aGF0IHRoZSByaWNoZXN0IGd1eSBpbiB0aGUgd29ybGQgY291bGQgc3BlbmQgJDI3MCBtaWxsaW9uIHRvIGdldCBUcnVtcCBlbGVjdGVkIGFuZCB0aGVuIGJlY29tZSB0aGUgbW9zdCBwb3dlcmZ1bCBwZXJzb24gaW4gdGhlIGdvdmVybm1lbnQuIFRoYXQncyBub3QganVzdCBSZXB1YmxpY2Fucy4gTGV0J3MgYmUgY2xlYXIuIEJpbGxpb25haXJlcyBhcmUgZnVuZGluZyB0aGUgRGVtb2NyYXRpYyBQYXJ0eSBhbmQgcHJldmVudGluZyB0aGF0IHBhcnR5IGZyb20gc3RhbmRpbmcgdXAgZm9yIHdvcmtpbmcgZmFtaWxpZXMuCkkgZG9uJ3QgaGF2ZSBhIFBoRCBpbiBtYXRoZW1hdGljcywgYnV0IEkgZG8ga25vdyB0aGlzLCB0aGF0IDk5JSBpcyBhIGhlbGwgb2YgYSBsb3QgbGFyZ2VyIG51bWJlciB0aGFuIDElLiBTbyBpZiB3ZSBzdGFuZCB0b2dldGhlciwgYXJlIHN0cm9uZywgYXJlIGRpc2NpcGxpbmVkLCBhcmUgc21hcnQsIEkgaGF2ZSBldmVyeSByZWFzb24gdG8gYmVsaWV2ZSBkZWVwbHkgaW4gbXkgaGVhcnQgdGhhdCBub3Qgb25seSB3aWxsIHdlIGRlZmVhdCBUcnVtcGlzbSwgYnV0IHdlIGNhbiBjcmVhdGUgdGhlIGtpbmQgb2YgbmF0aW9uIHRoYXQgd2UgZGVzZXJ2ZS4g\n\n\n---\n\nBegin analysis now for batch `batch_cecdd374cde7`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Constitutional Health Framework (CHF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis conducted following the sequential steps outlined in the framework, focusing on each dimensional axis independently before integration. Evidence extraction prioritized direct quotes supporting the identified dimensional concepts.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"bernie_sanders_2025_fighting_oligarchy.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.7,\n          \"confidence\": 0.7\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.8,\n          \"confidence\": 0.8\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.5,\n          \"confidence\": 0.6\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.3,\n          \"confidence\": 0.5\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"We will not accept an oligarchic form of society. We will not accept the richest guy in the world running all over Washington, making cuts to the Social Security Administration, cuts to the Veterans Administration, almost destroying the Department of Education, all so that they could give over a trillion dollars in tax breaks to the wealthiest!\",\n          \"confidence\": 0.9,\n          \"context_type\": \"procedural_rejection\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"What these guys are busy doing right now is going after Medicaid, going after Social Security, going after nutrition. The rich want to get richer and they don't care who they step on.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"institutional_subversion\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"Abraham Lincoln talked about a government of the people, by the people, for the people. Well, Trump has a government of the billionaires, by the billionaires, and for the billionaires.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"systemic_replacement\"\n        },\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"In America today, as I think all of you know, sadly and tragically, and we've got to deal with it, we have major epidemics dealing with addiction. I think we lost a hundred thousand Americans last year because of drug overdoses. It's a serious problem in my state.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"procedural_legitimacy\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":39049,"response_length":3171,"metadata":{"batch_id":"batch_cecdd374cde7","mathematical_validation":true,"tokens_input":365,"tokens_output":320},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:24.278094+00:00"}
{"log_type":"llm_interaction","interaction_hash":"024b765d52df2380","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: cory_booker_2018_first_step_act.txt\nHash: c17e2dffe9d2...\\n\n\n---\n\nBegin analysis now for batch `batch_0fb914303f8d`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Constitutional Health Framework (CHF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis conducted sequentially across the three axes (Procedural, Institutional, Systemic) as per the framework's methodology. Evidence extraction focused on direct quotes aligning with defined markers for each dimension.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"cory_booker_2018_first_step_act.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.4,\n          \"confidence\": 0.7\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.5,\n          \"confidence\": 0.7\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.3,\n          \"confidence\": 0.6\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.3,\n          \"confidence\": 0.6\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.2,\n          \"confidence\": 0.5\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"This bill takes an important step, but still incomplete step, in reforming the way women are treated behind bars. This bill will ensure incarcerated women have access to free sanitary products and ban the shackling of pregnant incarcerated women.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"Our criminal justice system, as it stands right now, is a gaping, self-inflicted wound. This bill is a step - a step towards healing.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"Because 90% of those folks right now in state prisons will come back to our communities. And the question is, will they come out further harmed by the system, or better able to start again, better able to avoid more criminality, or will they be people that actually helped to make us safer and stronger, to be elevated towards that ideal of full citizenship?\",\n          \"confidence\": 0.7,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"Our criminal justice system violates those values. We have criminalized the United States population - about a third of Americans have a criminal record.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"I want to thank my colleagues for their incredible work and leadership, and especially recognize the chairman of the Judiciary Committee, Senator Chuck Grassley. I want to thank Senator Dick Durbin, who has been a hero of mine on issues of criminal justice reform, as well as Mike Lee, who's been a champion.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"My community does not mistake wealth with worth. I live in an inner-city community, and when I go home at the end of most weeks, I draw strength from my community. I see the evidence of incredible growth that's occurred when good people in a city pull together, work together, and can accomplish things that other people who are disrespecting, disregarding, or just plain dismissing them don't think as possible.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"This legislation is a product of compromise. This legislation is just one step in the right direction, but if we pass this legislation, it is a step in the right direction, and I hope momentum for greater, urgently needed reforms that are supported by conservatives in this country and progressives.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"We know that our nation's history - bills and debates we've seen in this very body - we know our nation's history is scarred by many wretched injustices: slavery and the denial of universal suffrage, Jim Crow and segregation. But like people, individuals who've done wrong in the past, like people, our nation has demonstrated the capacity to change. We as a nation have demonstrated the capacity to improve. Like people, we have demonstrated as a nation the capacity to redeem ourselves.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"quote\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":60042,"response_length":5143,"metadata":{"batch_id":"batch_0fb914303f8d","mathematical_validation":true,"tokens_input":365,"tokens_output":594},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:28.888271+00:00"}
{"log_type":"llm_interaction","interaction_hash":"71b30913e0b08346","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: jd_vance_2022_natcon_conference.txt\nHash: 9528fee13b53...\\n\n\n---\n\nBegin analysis now for batch `batch_3d687430ba24`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"constitutional_health_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis performed by AI model. Following sequential analysis steps as defined in framework for each document.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"jd_vance_2022_natcon_conference.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.25,\n          \"salience\": 0.60,\n          \"confidence\": 0.70\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.55,\n          \"salience\": 0.80,\n          \"confidence\": 0.85\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.35,\n          \"salience\": 0.70,\n          \"confidence\": 0.75\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.45,\n          \"salience\": 0.75,\n          \"confidence\": 0.80\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.30,\n          \"salience\": 0.50,\n          \"confidence\": 0.70\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.40,\n          \"salience\": 0.60,\n          \"confidence\": 0.75\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"And so I think that the real threat to American democracy, it's not certainly not Donald Trump, it's not even some foreign dictator who does't like America or our values. The real threat to American democracy is that American voters keep on voting for less immigration and our politicians keep on rewarding us with more.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"claim\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"But my Tory friends, I have to say, you guys have got to get, you got to get a handle on this. But neither here nor there, the reason I'm most optimistic about the future of this movement and the future of our country is because for the first time in a very long time, it is clear that the leader of the Republican party is not some donor who's desperate for cheap labor and it's not some random person who claims to speak for this or that constituency. The leader of the Republican party is a guy who actually plans to put American citizens first, and that's Donald Trump.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"statement_of_principle\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"We've lost some elections in 2022 that I think that we should have won. Of course, like I said earlier, not every foreign policy debate has gone in our direction. But by and large, the national conservative movement is winning the debate and we're changing the conversation.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"assessment\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"But the dumpness of all possible foreign policy solutions and answers for our country is that we should let China make all of our stuff and we should fight a war with China. Okay? We should, we should, in my view, not fight a war with China if we can avoid it. We should also not let the Chinese make all of our stuff. And yet, I've, I've seen the Wall Street Journal editorial page for the last couple of years saying we can indefinitely send munitions and weapons of war to Ukraine after for the past two generations abdicating that we ship our industrial base overseas. It doesn't make any sense. It's sort of the perfect encapsulation of the dumpness way to govern our country.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"criticism\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"The Constitution, of course, had this incredible influence and that's why it has stood the test of time. But America is not just an idea. Though we were founded on great ideas, America is a nation. It is a group of people with a common history and a common future.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"ideological_affirmation\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"You know, in my home state of Ohio, we've had a couple of ballot referenda that have not gone the right way. We lost some elections in 2022 that I think that we should have won.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"observation\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"And my interest is not in protecting the good people of another country. I'm a senator for the state of Ohio. Our leaders have to protect the interests of the citizens of this country. And the fact, and the fact that this has happened is evidence that they're not.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"accusation\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"And that's what this entire movement is all about. And I think that's what the Trump presidency will be about if we give him another shot, as I expect that we will.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"projection\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"But, but my friends, I have to say, you guys have got to get, you got to get a handle on this. But neither here nor there, the reason I'm most optimistic about the future of this movement and the future of our country is because for the first time in a very long time, it is clear that the leader of the Republican party is not some donor who's desperate for cheap labor and it's not some random person who claims to speak for this or that constituency. The leader of the Republican party is a guy who actually plans to put American citizens first, and that's Donald Trump.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"endorsement\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":55366,"response_length":6170,"metadata":{"batch_id":"batch_3d687430ba24","mathematical_validation":true,"tokens_input":365,"tokens_output":797},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:34.307053+00:00"}
{"log_type":"llm_interaction","interaction_hash":"87b2a44b1365f092","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_lewis_1963_march_on_washington.txt\nHash: 5d90554fc13f...\nV2UgY29tZSBoZXJlIHRvZGF5IHdpdGggYSBncmVhdCBzZW5zZSBvZiBtaXNnaXZpbmcuIEl0IGlzIHRydWUgdGhhdCB3ZSBzdXBwb3J0IHRoZSBhZG1pbmlzdHJhdGlvbidzIGNpdmlsIHJpZ2h0cyBiaWxsLiBXZSBzdXBwb3J0IGl0IHdpdGggZ3JlYXQgcmVzZXJ2YXRpb25zLCBob3dldmVyLiBVbmxlc3MgVGl0bGUgVGhyZWUgaXMgcHV0IGluIHRoaXMgYmlsbCwgdGhlcmUncyBub3RoaW5nIHRvIHByb3RlY3QgdGhlIHlvdW5nIGNoaWxkcmVuIGFuZCBvbGQgd29tZW4gd2hvIG11c3QgZmFjZSBwb2xpY2UgZG9ncyBhbmQgZmlyZSBob3NlcyBpbiB0aGUgU291dGggd2hpbGUgdGhleSBlbmdhZ2UgaW4gcGVhY2VmdWwgZGVtb25zdHJhdGlvbnMuIEluIGl0cyBwcmVzZW50IGZvcm0sIHRoaXMgYmlsbCB3aWxsIG5vdCBwcm90ZWN0IHRoZSBjaXRpemVucyBvZiBEYW52aWxsZSwgVmlyZ2luaWEsIHdobyBtdXN0IGxpdmUgaW4gY29uc3RhbnQgZmVhciBvZiBhIHBvbGljZSBzdGF0ZS4gSXQgd2lsbCBub3QgcHJvdGVjdCB0aGUgaHVuZHJlZHMgYW5kIHRob3VzYW5kcyBvZiBwZW9wbGUgd2hvIGhhdmUgYmVlbiBhcnJlc3RlZCB1cG9uIHRydW1wZWQtdXAgY2hhcmdlcy4KV2hhdCBhYm91dCB0aGUgdGhyZWUgeW91bmcgbWVuIC0gU05DQyBmaWVsZCBzZWNyZXRhcmllcyBpbiBBbWVyaWN1cywgR2VvcmdpYSAtIHdobyBmYWNlIHRoZSBkZWF0aCBwZW5hbHR5IGZvciBlbmdhZ2luZyBpbiBwZWFjZWZ1bCBwcm90ZXN0PyBBcyBpdCBzdGFuZHMgbm93LCB0aGUgdm90aW5nIHNlY3Rpb24gb2YgdGhpcyBiaWxsIHdpbGwgbm90IGhlbHAgdGhlIHRob3VzYW5kcyBvZiBibGFjayBwZW9wbGUgd2hvIHdhbnQgdG8gdm90ZS4gSXQgd2lsbCBub3QgaGVscCB0aGUgY2l0aXplbnMgb2YgTWlzc2lzc2lwcGksIG9mIEFsYWJhbWEsIGFuZCBHZW9yZ2lhLCB3aG8gYXJlIHF1YWxpZmllZCB0byB2b3RlIGJ1dCBsYWNrIGEgc2l4dGgtZ3JhZGUgZWR1Y2F0aW9uLgpXZSBtdXN0IGhhdmUgbGVnaXNsYXRpb24gdGhhdCB3aWxsIHByb3RlY3QgdGhlIE1pc3Npc3NpcHBpIHNoYXJlY3JvcHBlciB3aG8gaXMgcHV0IG9mZiBvZiBoaXMgZmFybSBiZWNhdXNlIGhlIGRhcmVzIHRvIHJlZ2lzdGVyIHRvIHZvdGUuIFdlIG5lZWQgYSBiaWxsIHRoYXQgd2lsbCBwcm92aWRlIGZvciB0aGUgaG9tZWxlc3MgYW5kIHN0YXJ2aW5nIHBlb3BsZSBvZiB0aGlzIG5hdGlvbi4gV2UgbmVlZCBhIGJpbGwgdG8gZW5zdXJlIHRoZSBlcXVhbGl0eSBvZiBhIG1haWQgd2hvIGVhcm5zIGZpdmUgZG9sbGFycyBhIHdlZWsgaW4gdGhlIGhvbWUgb2YgYSBmYW1pbHkgd2hvc2UgdG90YWwgaW5jb21lIGlzIG9uZSBodW5kcmVkIHRob3VzYW5kIGRvbGxhcnMgYSB5ZWFyLiBXZSBtdXN0IGhhdmUgYSBnb29kIEZFUEMgYmlsbC4KTXkgZnJpZW5kcywgbGV0IHVzIG5vdCBmb3JnZXQgdGhhdCB3ZSBhcmUgaW52b2x2ZWQgaW4gYSBzZXJpb3VzIHNvY2lhbCByZXZvbHV0aW9uLiBCeSBhbmQgbGFyZ2UsIEFtZXJpY2FuIHBvbGl0aWNzIGlzIGRvbWluYXRlZCBieSBwb2xpdGljaWFucyB3aG8gYnVpbGQgdGhlaXIgY2FyZWVycyBvbiBpbW1vcmFsIGNvbXByb21pc2VzIGFuZCBhbGx5IHRoZW1zZWx2ZXMgd2l0aCBvcGVuIGZvcm1zIG9mIHBvbGl0aWNhbCwgZWNvbm9taWMsIGFuZCBzb2NpYWwgZXhwbG9pdGF0aW9uLiBUaGVyZSBhcmUgZXhjZXB0aW9ucywgb2YgY291cnNlIC0gd2Ugc2FsdXRlIHRob3NlIC0gYnV0IHdoYXQgcG9saXRpY2FsIGxlYWRlciBjYW4gc3RhbmQgdXAgYW5kIHNheSwgIk15IHBhcnR5IGlzIHRoZSBwYXJ0eSBvZiBwcmluY2lwbGVzIj8gRm9yIHRoZSBwYXJ0eSBvZiBLZW5uZWR5IGlzIGFsc28gdGhlIHBhcnR5IG9mIEVhc3RsYW5kLiBUaGUgcGFydHkgb2YgSmF2aXRzIGlzIGFsc28gdGhlIHBhcnR5IG9mIEdvbGR3YXRlci4KV2hlcmUgaXMgb3VyIHBhcnR5PyBXaGVyZSBpcyB0aGUgcG9saXRpY2FsIHBhcnR5IHRoYXQgd2lsbCBtYWtlIGl0IHVubmVjZXNzYXJ5IHRvIG1hcmNoIG9uIFdhc2hpbmd0b24/IFdoZXJlIGlzIHRoZSBwb2xpdGljYWwgcGFydHkgdGhhdCB3aWxsIG1ha2UgaXQgdW5uZWNlc3NhcnkgdG8gbWFyY2ggaW4gdGhlIHN0cmVldHMgb2YgQmlybWluZ2hhbT8gV2hlcmUgaXMgdGhlIHBvbGl0aWNhbCBwYXJ0eSB0aGF0IHdpbGwgcHJvdGVjdCB0aGUgY2l0aXplbnMgb2YgQWxiYW55LCBHZW9yZ2lhPyBEbyB5b3Uga25vdyB0aGF0IGluIEFsYmFueSwgR2VvcmdpYSwgbmluZSBvZiBvdXIgbGVhZGVycyBoYXZlIGJlZW4gaW5kaWN0ZWQsIG5vdCBieSBEaXhpZWNyYXRzLCBidXQgYnkgdGhlIGZlZGVyYWwgZ292ZXJubWVudCBmb3IgcGVhY2VmdWwgcHJvdGVzdD8KQnV0IHdoYXQgZGlkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgZG8gd2hlbiBBbGJhbnkgcG9saWNlIGRlcHV0aWVzIGJlYXQgQXR0b3JuZXkgQy5CLiBLaW5nIGFuZCBsZWZ0IGhpbSBoYWxmLWRlYWQ/IFdoYXQgZGlkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgZG8gd2hlbiBsb2NhbCBwb2xpY2Ugb2ZmaWNpYWxzIGtpY2tlZCBhbmQgYXNzYXVsdGVkIHRoZSBwcmVnbmFudCB3aWZlIG9mIFNsYXRlciBLaW5nLCBhbmQgc2hlIGxvc3QgaGVyIGJhYnk/IFRvIHRob3NlIHdobyBoYXZlIHNhaWQsICJCZSBwYXRpZW50IGFuZCB3YWl0LCIgd2UgbXVzdCBzYXkgdGhhdCB3ZSBjYW5ub3QgYmUgcGF0aWVudC4gV2UgZG8gbm90IHdhbnQgb3VyIGZyZWVkb20gZ3JhZHVhbGx5LCBidXQgd2Ugd2FudCB0byBiZSBmcmVlIG5vdyEKW0FwcGxhdXNlXSBbTXVzaWNdIFtBcHBsYXVzZV0gCldlIGFyZSB0aXJlZCEgV2UgYXJlIHRpcmVkIG9mIGJlaW5nIGJlYXRlbiBieSBwb2xpY2VtZW4uIFdlIGFyZSB0aXJlZCBvZiBzZWVpbmcgb3VyIHBlb3BsZSBsb2NrZWQgdXAgaW4gamFpbHMgb3ZlciBhbmQgb3ZlciBhZ2Fpbi4gQW5kIHRoZW4geW91IGhvbGxlciwgIkJlIHBhdGllbnQuIiBIb3cgbG9uZyBjYW4gd2UgYmUgcGF0aWVudD8gV2Ugd2FudCBvdXIgZnJlZWRvbSBhbmQgd2Ugd2FudCBpdCBub3chCltBcHBsYXVzZV0gCldlIGRvIG5vdCB3YW50IHRvIGdvIHRvIGphaWwsIGJ1dCB3ZSB3aWxsIGdvIHRvIGphaWwgaWYgdGhpcyBpcyB0aGUgcHJpY2Ugd2UgbXVzdCBwYXkgZm9yIGxvdmUsIGJyb3RoZXJob29kLCBhbmQgdHJ1ZSBwZWFjZS4gSSBhcHBlYWwgdG8gYWxsIG9mIHlvdSB0byBnZXQgaW4gdGhpcyBncmVhdCByZXZvbHV0aW9uIHRoYXQgaXMgc3dlZXBpbmcgdGhpcyBuYXRpb24uIEdldCBpbiBhbmQgc3RheSBpbiB0aGUgc3RyZWV0cyBvZiBldmVyeSBjaXR5LCBldmVyeSB2aWxsYWdlIGFuZCBoYW1sZXQgb2YgdGhpcyBuYXRpb24gdW50aWwgdHJ1ZSBmcmVlZG9tIGNvbWVzLCB1bnRpbCB0aGUgcmV2b2x1dGlvbiBvZiAxNzc2IGlzIGNvbXBsZXRlLgpXZSBtdXN0IGdldCBpbiB0aGlzIHJldm9sdXRpb24gYW5kIGNvbXBsZXRlIHRoZSByZXZvbHV0aW9uLiBGb3IgaW4gdGhlIERlbHRhIG9mIE1pc3Npc3NpcHBpLCBpbiBzb3V0aHdlc3QgR2VvcmdpYSwgaW4gdGhlIEJsYWNrIEJlbHQgb2YgQWxhYmFtYSwgaW4gSGFybGVtLCBpbiBDaGljYWdvLCBEZXRyb2l0LCBQaGlsYWRlbHBoaWEsIGFuZCBhbGwgb3ZlciB0aGlzIG5hdGlvbiwgdGhlIGJsYWNrIG1hc3NlcyBhcmUgb24gdGhlIG1hcmNoIGZvciBqb2JzIGFuZCBmcmVlZG9tLgpUaGV5J3JlIHRhbGtpbmcgYWJvdXQgc2xvdyBkb3duIGFuZCBzdG9wLiBXZSB3aWxsIG5vdCBzdG9wISBBbGwgb2YgdGhlIGZvcmNlcyBvZiBFYXN0bGFuZCwgQmFybmV0dCwgV2FsbGFjZSwgYW5kIFRodXJtb25kIHdpbGwgbm90IHN0b3AgdGhpcyByZXZvbHV0aW9uIQpbQXBwbGF1c2VdIApJZiB3ZSBkbyBub3QgZ2V0IG1lYW5pbmdmdWwgbGVnaXNsYXRpb24gb3V0IG9mIHRoaXMgQ29uZ3Jlc3MsIHRoZSB0aW1lIHdpbGwgY29tZSB3aGVuIHdlIHdpbGwgbm90IGNvbmZpbmUgb3VyIG1hcmNoaW5nIHRvIFdhc2hpbmd0b24uIFdlIHdpbGwgbWFyY2ggdGhyb3VnaCB0aGUgU291dGgsIHRocm91Z2ggdGhlIHN0cmVldHMgb2YgSmFja3NvbiwgdGhyb3VnaCB0aGUgc3RyZWV0cyBvZiBEYW52aWxsZSwgdGhyb3VnaCB0aGUgc3RyZWV0cyBvZiBDYW1icmlkZ2UsIHRocm91Z2ggdGhlIHN0cmVldHMgb2YgQmlybWluZ2hhbS4gQnV0IHdlIHdpbGwgbWFyY2ggd2l0aCB0aGUgc3Bpcml0IG9mIGxvdmUgYW5kIHdpdGggdGhlIHNwaXJpdCBvZiBkaWduaXR5IHRoYXQgd2UgaGF2ZSBzaG93biBoZXJlIHRvZGF5LgpbTXVzaWNdIFtBcHBsYXVzZV0gCkJ5IHRoZSBmb3JjZXMgb2Ygb3VyIGRlbWFuZHMsIG91ciBkZXRlcm1pbmF0aW9uLCBhbmQgb3VyIG51bWJlcnMsIHdlIHNoYWxsIHNwbGludGVyIHRoZSBzZWdyZWdhdGVkIFNvdXRoIGludG8gYSB0aG91c2FuZCBwaWVjZXMgYW5kIHB1dCB0aGVtIHRvZ2V0aGVyIGluIHRoZSBpbWFnZSBvZiBHb2QgYW5kIGRlbW9jcmFjeS4gV2UgbXVzdCBzYXk6IFdha2UgdXAgQW1lcmljYSEgV2FrZSB1cCEgRm9yIHdlIGNhbm5vdCBzdG9wLCBhbmQgd2Ugd2lsbCBub3QgYW5kIGNhbm5vdCBiZSBwYXRpZW50IQpbQXBwbGF1c2VdIA==\n\n\n---\n\nBegin analysis now for batch `batch_583da5b6e6bc`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"constitutional_health_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis conducted following the sequential steps outlined in the framework, focusing on each constitutional axis independently before integration. Evidence extraction prioritized direct quotes supporting identified dimensions.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_lewis_1963_march_on_washington.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.4,\n          \"confidence\": 0.7\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.8,\n          \"confidence\": 0.85\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.5,\n          \"confidence\": 0.6\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.7,\n          \"confidence\": 0.75\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.2,\n          \"confidence\": 0.5\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"We must have legislation that will protect the sharecropper who is put off of his farm because he dares to register to vote.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"identifying_markers\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"But what did the federal government do when Albany police deputies beat Attorney C.B. King and left him half-dead? What did the federal government do when local police officials kicked and assaulted the pregnant wife of Slater King, and she lost her baby?\",\n          \"confidence\": 0.8,\n          \"context_type\": \"identifying_markers\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"To those who have said, 'Be patient and wait,' we must say that we can not be patient. We do not want our freedom gradually, but we want to be free now!\",\n          \"confidence\": 0.9,\n          \"context_type\": \"identifying_markers\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"We come here today with a great sense of misgiving. It is true that we support the administration's civil rights bill. We support it with great reservations, however.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"identifying_markers\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"Do you know that in Albany, Georgia, nine of our leaders have been indicted, not by Dixiecrats, but by the federal government for peaceful protest?\",\n          \"confidence\": 0.75,\n          \"context_type\": \"identifying_markers\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"If we do not get meaningful legislation out of this Congress, the time will come when we will not confine our marching to Washington. We will march through the South, through the streets of Jackson, through the streets of Danville, through the streets of Cambridge, through the streets of Birmingham.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"identifying_markers\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"By the forces of our demands, our determination, and our numbers, we shall splinter the segregated South into a thousand pieces and put them together in the image of God and democracy.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"identifying_markers\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":38866,"response_length":4015,"metadata":{"batch_id":"batch_583da5b6e6bc","mathematical_validation":true,"tokens_input":365,"tokens_output":407},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:37.823297+00:00"}
{"log_type":"llm_interaction","interaction_hash":"a5cb88f34ae7e4dc","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_mccain_2008_concession.txt\nHash: 0639fa78ebb5...\\n\n\n---\n\nBegin analysis now for batch `batch_b212ad548592`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Constitutional Health Framework (CHF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis of a concession speech. Focused on identifying language related to established procedures, institutional respect, and systemic continuity, while also noting any indicators of procedural circumvention, institutional subversion, or systemic replacement.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_mccain_2008_concession.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.7,\n          \"confidence\": 0.9\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.0,\n          \"salience\": 0.1,\n          \"confidence\": 0.95\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.1,\n          \"confidence\": 0.95\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.6,\n          \"confidence\": 0.85\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.2,\n          \"confidence\": 0.9\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"My friends, we have come to the end of a long journey. The American people have spoken, and they have spoken clearly. A little while ago, I had the honor of calling Senator Barack Obama to congratulate him - please - to congratulate him on being elected the next president of the country that we both love.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"procedural_language\"\n        },\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"In a contest as long and as difficult as this campaign has been, his success alone commands my respect for his ability and perseverance.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"procedural_language\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"This is a historic election, and I recognize the special significance it has for African-Americans and for the special pride that must be theirs tonight.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"institutional_recognition\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"I applaud him for it, and offer him my sinceer sympathy that his beloved grandmother did not live to see this day, though our faith assures us she is at rest in the presence of her Creator and so very proud of the good man she helped raise.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"institutional_support\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"I urge all Americans - I urge all Americans who supported me to join me in not just congratulating him, but offering our next president our good will and earnest effort to find ways to come together, to find the necessary compromises to bridge our differences and help restore our prosperity, defend our security in a dangerous world, and leave our children and grandchildren a stronger, better country than we inherited.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"systemic_improvement\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"Whatever our differences, we are fellow Americans, and please believe me when I say no association has ever meant more to me than that.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"systemic_unity\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":41454,"response_length":3942,"metadata":{"batch_id":"batch_b212ad548592","mathematical_validation":true,"tokens_input":365,"tokens_output":422},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:40.859538+00:00"}
{"log_type":"llm_interaction","interaction_hash":"34775f45079874cb","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: mitt_romney_2020_impeachment.txt\nHash: f9b2e86ae9bc...\\n\n\n---\n\nBegin analysis now for batch `batch_7627e7b99fb9`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Constitutional Health Framework (CHF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis performed sequentially according to the framework's stepped approach, focusing on textual evidence for each dimension before integration.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"mitt_romney_2020_impeachment.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.5,\n          \"salience\": 0.7,\n          \"confidence\": 0.75\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.5,\n          \"confidence\": 0.65\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.5,\n          \"salience\": 0.5,\n          \"confidence\": 0.7\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.3,\n          \"confidence\": 0.5\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.3,\n          \"confidence\": 0.5\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"The Constitution is at the foundation of our Republic's success, and we each strive not to lose sight of our promise to defend it. The Constitution established the vehicle of impeachment that has occupied both houses of our Congress these many days. We have labored to faithfully execute our responsibilities to it.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"procedural_language\"\n        },\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"We've come to different conclusions, fellow senators, but I trust we have all followed the dictates of our conscience. I will tell my children and their children that I did my duty to the best of my ability, believing that my country expected it of me.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"norm_adherence\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"The president's counsel also notes that Vice President Biden appeared to have a conflict of interest when he undertook an effort to remove the Ukrainian prosecutor general. If he knew of the exhorbitant compensation his son was receiving from a company actually under investigation, the Vice President should have recused himself. While ignoring a conflict of interest is not a crime, it is surely very wrong.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"process_dismissal\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"The defense argues that the Senate should leave the impeachment decision to the voters. While that logic is appealing to our democratic instinctions, it is inconsistent with the Constitution's requirement that the Senate, not the voters, try the president.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"process_bypass\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"As a senator-juror, I swore an oath before God to exercise impartial justice. I am profoundly religious. My faith is at the heart of who I am. I take an oath before God as enormously consequential.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"authority_recognition\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"I believe that our Constitution was inspired by Providence. I'm convinced that freedom itself is dependent on the strength and vitality of our national character.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"system_support\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"The president's purpose was personal and political. Accordingly, the president is guilty of an appalling abuse of public trust.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"authority_attacks\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"Corrupting an election to keep oneself in office is perhaps the most abusive and destructive violation of one's oath of office that I can imagine.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"system_delegitimization\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"As it is with each senator, my vote is an act of conviction. We've come to different conclusions, fellow senators, but I trust we have all followed the dictates of our conscience.\",\n          \"confidence\": 0.5,\n          \"context_type\": \"gradual_reform\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"My vote will likely be in the minority in the Senate. But irrespective of these things, with my vote, I will tell my children and their children that I did my duty to the best of my ability, believing that my country expected it of me.\",\n          \"confidence\": 0.5,\n          \"context_type\": \"system_rejection\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":41979,"response_length":5389,"metadata":{"batch_id":"batch_7627e7b99fb9","mathematical_validation":true,"tokens_input":365,"tokens_output":582},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:44.676378+00:00"}
{"log_type":"llm_interaction","interaction_hash":"3ce94f2515b74250","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: steve_king_2017_house_floor.txt\nHash: 6d762d9a0ecb...\nVGhhbmsgeW91LCBNci4gU3BlYWtlci4gSXQncyBteSBwcml2aWxlZ2UgdG8gaGF2ZSB0aGUgb3Bwb3J0dW5pdHkgdG8gYWRkcmVzcyB5b3UgaGVyZSBvbiB0aGUgZmxvb3Igb2YgdGhlIFVuaXRlZCBTdGF0ZXMgSG91c2Ugb2YgUmVwcmVzZW50YXRpdmVzLiBJIGhhdmUgbGlzdGVuZWQgdG8gYSBsb3Qgb2YgZGlzY3Vzc2lvbiBoZXJlIHdpdGggd2hpY2ggSSBkaXNhZ3JlZSwgb2YgY291cnNlLCBhbmQgdWgsIGJ1dCBJIGtlZXAgaGVhcmluZyB0aGlzIHRlcm0sICJkbyB5b3VyIGpvYiwgZG8geW91ciBqb2IuIiBJdCBzZWVtcyB0byBlY2hvIG91dCBvZiB0aGUgbGVmdCBjb25zdGFudGx5LCAiZG8geW91ciBqb2IuIiBBbmQgdWgsIHRoZSBhcmd1bWVudCBpcyB0aGF0IG9uZSBvZiB0aGUgYXJndW1lbnRzIGlzIHRoYXQgdGhlIFByZXNpZGVudCBvZiB0aGUgVW5pdGVkIFN0YXRlcyBoYXMgYSBjb25zdGl0dXRpb25hbCByaWdodCB0byBub21pbmF0ZSB0byB0aGUgU3VwcmVtZSBDb3VydC4gV2VsbCwgaGUgZG9lcywgdGhhdCdzIHByZXR0eSBjbGVhciBpbiB0aGUgQ29uc3RpdHV0aW9uLiBIb3dldmVyLCB0aGUgU2VuYXRlIGRldGVybWluZXMgd2hhdCBhZHZpY2UgaXMgYW5kIHRoZSBTZW5hdGUgZGV0ZXJtaW5lcyB0aGF0IHdoaWNoIGlzIGNvbnNlbnQuIEFuZCBubyBub21pbmF0aW9uIHRvIHRoZSBmZWRlcmFsIGNvdXJ0IGNhbiBtb3ZlIGZvcndhcmQgd2l0aG91dCB0aGUgU2VuYXRlJ3MgYWR2aWNlIGFuZCBjb25zZW50LiBJdCdzIHRoZSBTZW5hdGUncyBqb2IgdGhlbiB0byBldmFsdWF0ZSB0aGUgbm9taW5hdGlvbnMgb2YgdGhlIFByZXNpZGVudC4gQW5kIHRoZXkgY2FuIGRvIHNvIHdpdGggb3Igd2l0aG91dCBoZWFyaW5ncywgd2l0aCBvciB3aXRob3V0IGludGVydmlld3MuIFRoZSBTZW5hdGUgd3JpdGVzIGl0cyBvd24gcnVsZXMganVzdCBsaWtlIHRoZSBIb3VzZSB3cml0ZXMgaXRzIG93biBydWxlcywgTXIuIFNwZWFrZXIuIEFuZCBzbyBJJ2QgbGlrZSB0byBwdXQgdGhpcyBiYWNrIGluIHBlcnNwZWN0aXZlIGhlcmUuIFdlIGhhdmUgYSBsYW1lIGR1Y2sgUHJlc2lkZW50IHdobyBoYXMgbWFkZSBhcHBvaW50bWVudHMgdG8gdGhlIFN1cHJlbWUgQ291cnQgd2hvIHNlZW0gdG8gYmVsaWV2ZSB0aGF0IHRoZSBDb25zdGl0dXRpb24gbWVhbnMgd2hhdCB0aGV5IHdhbnQgaXQgdG8gbWVhbiBhbmQgdGhleSB3YW50IHRvIHJlYWQgaXQgdWggdG8gc2F5IHdoYXQgdGhleSB3YW50IGl0IHRvIHNheSByYXRoZXIgdGhhbiB3aGF0IGl0IGFjdHVhbGx5IHNheXMgYW5kIHJhdGhlciB0aGFuIHdoYXQgaXQgYWN0dWFsbHkgd2FzIHVuZGVyc3Rvb2QgdG8gbWVhbiBhdCB0aGUgdGltZSBvZiBpdHMgcmF0aWZpY2F0aW9uLiBBbmQgd2hlbiB5b3UgaGF2ZSBqdXN0aWNlcyB0byB0aGUgU3VwcmVtZSBDb3VydCB0aGF0LCB0aGF0IGVtYm9keSB0aGF0IGJlbGllZiBhbmQgYWN0IG9uIHRoYXQgYmVsaWVmLCB0aGVuIHdlIGhlcmUgd2hvIHRha2UgYW4gb2F0aCB0byBzdXBwb3J0IGFuZCBkZWZlbmQgdGhlIENvbnN0aXR1dGlvbuKAlGFuZCB0aGF0J3MgYWN0dWFsbHkgYWxsIG9mIHVzIGhlcmUgaW4gdGhlIEhvdXNlIG9mIFJlcHJlc2VudGF0aXZlcywgTXIuIFNwZWFrZXIsIGFuZCBldmVyeW9uZSBpbiB0aGUgVW5pdGVkIFN0YXRlcyBTZW5hdGUgZm9yIHRoYXQgbWF0dGVy4oCUd2UgcmVjb2duaXplIHRoYXQgaWYgd2UncmUgZ29pbmcgdG8gc3VwcG9ydCBhbmQgZGVmZW5kIHRoZSBDb25zdGl0dXRpb24sIGVuY291cmFnaW5nIHRoZSwgdGhlIG5vbWluYXRpb24gYW5kIHRoZSBhZHZpY2UgYW5kIHRoZSBjb25zZW50LCB0aGUgY29uZmlybWF0aW9uIG9mIHRoZSBTZW5hdGUgYW5kIGVuY291cmFnaW5nIHRoZW4gYSBwcmVzaWRlbnRpYWwgYXBwb2ludG1lbnQgdG8gdGhlIFN1cHJlbWUgQ291cnQgb2Ygc29tZW9uZSB3aG9tIHRoZSBQcmVzaWRlbnQgaXMgaW5jYXBhYmxlIG9mIG5vbWluYXRpbmcgYW55b25lIHRvIHRoZSBTdXByZW1lIENvdXJ0IHRoYXQgd2hhdCB0aGUgQ29uc3RpdHV0aW9uIHNheXMgYW5kIHdoYXQgd2FzIHVuZGVyc3Rvb2QgdG8gbWVhbiBhdCB0aGUgdGltZSBvZiBpdHMgcmF0aWZpY2F0aW9uLCBoZSdzIGRlbW9uc3RyYXRlZCB0aGF0IGluIHRoZSBwYXN0IHdpdGggaGlzIGFwcG9pbnRtZW50cyB0byB0aGUgY291cnQuIEhlIHdpbGwgZGVtb25zdHJhdGUgdGhhdCBhZ2Fpbi4gV2UgaGF2ZSBhIENvbnN0aXR1dGlvbiB0byBwcmVzZXJ2ZSwgcHJvdGVjdCwgZGVmZW5kLCBhbmQgc3VwcG9ydCBhbmQgZGVmZW5kLiBBbmQgc28gb3VyIG9ibGlnYXRpb24gdGhlbiBpcyB0byBzYXksICJNci4gUHJlc2lkZW50LCB5b3UncmUgbGFtZSBkdWNrLiBMZXQncyBzdGljayB3aXRoIHRoZSB0cmFkaXRpb24uIExldCdzIHN0aWNrIHdpdGggdGhlIHByYWN0aWNlLiBMZXQncyBzdGljayB3aXRoIHRoZSBzdGF0ZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIG1hZGUgYnkgYSBudW1iZXIgb2YgRGVtb2NyYXRzIGluIHRoZSBwYXN0IHdoZW4gdGhlIHNob2Ugd2FzIG9uIHRoZSBvdGhlciBmb290LiBQZW9wbGUgbGlrZSBKb2UgQmlkZW4gYW5kIEhhcnJ5IFJlaWQgYW5kIENodWNrIFNjaHVtZXIgYWxsIHdvdWxkIGFncmVlIHdpdGggU2VuYXRvciBDaHVjayBHcmFzc2xleS4gTm8gaGVhcmluZywgbm8sIG5vIGNvbmZpcm1hdGlvbiBpbiB0aGUgU2VuYXRlLCBubyB2b3RlIGluIHRoZSBpbiB0aGUgSnVkaWNpYXJ5IENvbW1pdHRlZSwgYW5kIG5vIHZvdGUgb24gdGhlIGZsb29yIG9mIHRoZSBTZW5hdGUgZm9yIHRoaXMgbGFtZSBkdWNrIFByZXNpZGVudCdzIGFwcG9pbnRtZW50cyBiZWNhdXNlIHdlIGhhdmUgYSBDb25zdGl0dXRpb24gdGhhdCdzIGdvdCB0byBiZSByZXN0b3JlZC4gQW5kIGluc3RlYWQgb2YgYmVpbmcgcmVzdG9yZWQsIGl0IHdvdWxkIGJlIGRlc3Ryb3llZCBieSBhbm90aGVyIHByZXNpZGVudGlhbCBhcHBvaW50bWVudC4KV2Ugd2VyZSBzaXR0aW5nIHdpdGggYSBkZWFkbG9ja2VkIGNvdXJ0IHRoYXQgc2F0IGZvdXIgYW5kIGEgaGFsZiB0byBmb3VyIGFuZCBhIGhhbGYgb3V0IG9mIGEgbmluZS1tZW1iZXIgY291cnQuIEFuZCB5b3UgY291bGQga2luZCBvZiB0b3NzIGEgY29pbiBvbiB3aGV0aGVyIHlvdSB3b3VsZCBnZXQgYSBkZWNpc2lvbiB0aGF0IGNhbWUgZG93biBvbiB3aGF0IHRoZSBDb25zdGl0dXRpb24gc2FpZCBhbmQgd2hhdCB0aGUgbGF3IHNhaWQgb3Igd2hhdCB0aGV5IHByZWZlcnJlZCB0aGUgcG9saWN5IHdhcy4gQW4gZXhhbXBsZSBvZiB0aGF0LiBHb3QgYSBjb3VwbGUgb2YgYmFkIGV4YW1wbGVzLiBUaGlzIGlzIGV2ZW4gd2l0aCB0aGUgU3RlbGxhciBKdXN0aWNlIFNjYWxpYSBzaXR0aW5nIG9uIHRoZSBiZW5jaCBub3QgZXZlbiBhIHllYXIgYWdvLCBKdW5lIDI0dGggYW5kIEp1bmUgMjV0aC4gT24gdGhlIDI0dGggb2YgSnVuZSwgdGhlIGNvdXJ0IGNhbWUgZG93biB3aXRoIGEgZGVjaXNpb24gS2luZyB2ZXJzdXMgQnVyd2VsbCB3aGVyZSB0aGUgQ2hpZWYgSnVzdGljZSBvZiB0aGUgU3VwcmVtZSBDb3VydCBkZWNpZGVkIHRoYXQgaGUgY291bGQgd3JpdGUgd29yZHMgaW50byBPYmFtYWNhcmUgdGhhdCBkaWRuJ3QgZXhpc3QuIFRoZXkgd2VyZSBub3QgcGFzc2VkIGJ5IHRoaXMgQ29uZ3Jlc3MsIG5vdCBieSBlaXRoZXIgY2hhbWJlciBvZiB0aGlzIENvbmdyZXNzLiBBcyBhIG1hdHRlciBvZiBmYWN0LCBpdCB3YXNuJ3QgYSBwaHJhc2UgdGhhdCB3YXMsIHRoYXQgd2FzIGNvbmZlcmVuY2VkIG91dCBvciBzb21ldGhpbmcgdGhhdCB3YXMgY29udGVzdGVkLiBJdCBuZXZlciB3YXMgaW4gdGhlIGJpbGwuIFRoZSBwaHJhc2UgdGhhdCBzYWlkLCAib3IgZmVkZXJhbCBnb3Zlcm5tZW50LiIgQW5kIHRoYXQncyB0aGUsIHRoYXQncyB0aGUgY29tcG9uZW50IHRoYXQgaGFkIGl0IGJlZW4gaW4gT2JhbWFjYXJlLCB0aGVuIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgY291bGQgaGF2ZSBnb25lIGludG8gdGhlIHN0YXRlcyBhbmQgZXN0YWJsaXNoZWQgdGhlIGV4Y2hhbmdlcyBpbiB0aGUgc3RhdGVzIHRoYXQgcmVmIGVzdGFibGlzaCBleGNoYW5nZXMgdG8gY29tcGx5IHdpdGggdGhlIHN1Z2dlc3Rpb24gdGhhdCBjYW1lIGZyb20gdGhpcyBDb25ncmVzcywgYnkgdGhlIHdheSwgdGhhdCBjYW1lIGZyb20gdGhpcyBDb25ncmVzcyBieSBob29rLCBieSBjcm9vaywgYnkgbGVnaXNsYXRpdmUgc2hlbmFuaWdhbiwganVzdCB0byBxdW90ZSBzb21lIERlbW9jcmF0cyB0aGF0IGxhbWVudGVkIGF0IHRoZSBtZXRob2RvbG9neSB0aGV5IGhhZCB0byBnbyB0aHJvdWdoIHRvIHB1c2ggT2JhbWFjYXJlIGRvd24gdGhlIHRocm9hdHMgb2YgdGhlIEFtZXJpY2FuIHBlb3BsZS4gQnV0IGluIGFueSBjYXNlLCB0aGUgbGF3IG5ldmVyIHNhaWQgYW5kIG5ldmVyLCBuZXZlciBlbmFibGVkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgdG8gZXN0YWJsaXNoIGV4Y2hhbmdlcyBpbiB0aGUgc3RhdGVzLiBBbmQgdGhlIENvbnN0aXR1dGlvbiBkb2Vzbid0IGFsbG93IHRoYXQgYXV0aG9yaXR5LCBpbiBteSBvcGluaW9uLiBUaGVyZSdzIG5vIGVudW1lcmF0ZWQgcG93ZXIgZm9yIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgdG8gdG8gY3JlYXRlIGV4Y2hhbmdlcyBmb3IsIGZvciBpbnN1cmFuY2UgaGVhbHRoIGluc3VyYW5jZSBwb2xpY2llcyB3aXRoaW4gdGhlIHN0YXRlcy4gQnV0IHRoZSBTdXByZW1lIENvdXJ0IHJ1bGVkIHdpdGggdGhlIG1ham9yaXR5IG9waW5pb24gd3JpdHRlbiBieSB0aGUgQ2hpZWYgSnVzdGljZSBvZiB0aGUgU3VwcmVtZSBDb3VydCwgYnV0IHRoZXkgY291bGQgYWRkIHdvcmRzIGludG8gdGhlIE9iYW1hY2FyZSB3aGVyZSBpdCBzYXlzLCAidGhlIHN0YXRlcyBtYXkgZXN0YWJsaXNoIGV4Y2hhbmdlcy4iIFRoZXksIHRoZXkgYWRkZWQsICJ0aGUgc3RhdGVzIG9yIGZlZGVyYWwgZ292ZXJubWVudCBtYXkgZXN0YWJsaXNoIGV4Y2hhbmdlcy4iIFRoZXkgbWFkZSBpdCB1cC4gQW5kIHRoZXkgd3JhcHBlZCB0aGVtc2VsdmVzIGluIHRoZSBjbG9hayBvZiBjb25zdGl0dXRpb25hbCBhdXRob3JpdHkgaW4gTWFyYmVycnkgdmVyc3VzIE1hZGlzb24gYW5kIGEgd2hvbGUgc2VyaWVzIG9mIHByZXN1bWFibHkgcHJlY2VkZW50IGNhc2VzIGFsb25nIHRoZSBsaW5lLiBBbmQgdGhhdCB3YXMgSnVuZSAyNHRoIG9uIFRodXJzZGF5IGFuZCBpdCB3b3VsZCBraWNrIHRoZSBicmVhdGggb3V0IG9mIHlvdXIgZ3V0IHRvIGhlYXIgdGhhdCBpZiB5b3UncmUgYSBjb25zdGl0dXRpb25pc3QuIEFuZCBpdCBicmluZyB5b3UgdG8gYSBzYWQgc3RhdGUgb2YgbW91cm4uIEFuZCB5b3UnZCBsYXkgeW91ciBoZWFkIGRvd24gb24gdGhlIHBpbGxvdyBhdCBuaWdodCBoYXZpbmcgdHJvdWJsZSB0byBzbGVlcCwgdGhpbmtpbmcsICJXaGF0IGFtIEkgZ29pbmcgdG8gZG8gdG9tb3Jyb3c/IEkgY291bGRuJ3QgcmVhY3QgdG9kYXkuIFdoYXQgYW0gSSBnb2luZyB0byBkbyB0b21vcnJvdz8gTG9yZCwgd2FrZSBtZSB1cCB3aXRoIGFuIGlkZWEgb24gaG93IHRvLCBob3cgdG8gcHJlc2VydmUgb3VyIENvbnN0aXR1dGlvbiwiIGlmIHRoZSBTdXByZW1lIENvdXJ0IG9mIHRoZSBVbml0ZWQgU3RhdGVzIGJlbGlldmVzIHRoYXQgdGhleSBjYW4gd3JpdGUgbGF3LiBXaGVuIGhlcmUgaW4gb3VyIENvbnN0aXR1dGlvbiwgTXIuIFNwZWFrZXIsIEFydGljbGUgb25lIG9mIG91ciBDb25zdGl0dXRpb24gc2F5cywgIkFsbCBsZWdpc2xhdGl2ZSBwb3dlciwgcG93ZXIsIGFsbCBsZWdpc2xhdGl2ZSwgYWxsIGxlZ2lzbGF0aXZlIHBvd2VycyBoZXJlaW4gZ3JhbnRlZCBzaGFsbCBiZSB2ZXN0ZWQgaW4gYSBDb25ncmVzcyBvZiB0aGUgVW5pdGVkIFN0YXRlcy4iIFRoYXQncyBoZXJlLiBUaGUgSG91c2UgYW5kIHRoZSBTZW5hdGUuIEFydGljbGUgb25lLCBmaXJzdCB3b3JkcyBvZiBvdXIgQ29uc3RpdHV0aW9uLCBhbGwgbGVnaXNsYXRpdmUgcG93ZXJzLiBCdXQgdGhlIFN1cHJlbWUgQ291cnQsIHdyYXBwZWQgaW4gdGhlIGNsb2FrIG9mIE1hcmJ1cnkgdmVyc3VzIE1hZGlzb24gYW5kIHRoZWlyIGltYWdpbmF0aW9uIG9mIHdoYXQgcHJlY2VkZW50cyBhbmQgc3RhciBkZWNpc2lzIG1pZ2h0IG1lYW4gdG8gdGhlbSwgZGVjaWRlcyB0aGF0IHRoZXkgY2FuIHdyaXRlIHdvcmRzIGludG8gdGhlIGxhdy4gQSBTdXByZW1lIENvdXJ0IHdyaXRpbmcgbGF3LiBBbmQgdGhlbiB0aGUgbmV4dCBtb3JuaW5nLCB0aGF0IG1vcm5pbmcgdGhhdCBJIHdhcyBob3BlZnVsIHRoYXQgSSB3b3VsZCB3YWtlIHVwIHdpdGggYW4gaWRlYSBhbmQgaG93IHRvIGFkZHJlc3MgdGhlIFN1cHJlbWUgQ291cnQgdGhhdCdzIG92ZXJyZWFjaGVkLCBoZXJlIGNhbWUgdGhlIG5leHQgZGVjaXNpb24sIG15IHRpbWUgREMgdGltZSwgYW5kIHRoYXQgd2FzIGRlY2lzaW9uIG9mIE9iZXJnZmVsbCB3aGVyZSB0aGUgU3VwcmVtZSBDb3VydCBjcmVhdGVkIGEgbmV3IGNvbW1hbmQgaW4gdGhlIENvbnN0aXR1dGlvbi4gTm90IGp1c3QgZGlzY292ZXJlZCBhIHJpZ2h0IHRoYXQgbmV2ZXIgZXhpc3RlZC4gVGhleSBtYW51ZmFjdHVyZWQgYSBjb21tYW5kLiBUaGVyZSdzIG5vIHJpZ2h0IGluIHRoZSBDb25zdGl0dXRpb24gZm9yIGEgc2FtZS1zZXggbWFycmlhZ2UuIFRoZXJlJ3Mgbm8gcmVmZXJlbmNlIGluIHRoZXJlIGF0IGFsbC4gVGhlcmUncyBub3Qgb25lIHNpbmdsZSBGb3VuZGluZyBGYXRoZXIgdGhhdCB3b3VsZCBoYXZlIGV2ZXIgYWNjZXB0ZWQgYW4gaWRlYSB0aGF0IHRoZXkgaGFkLCB0aGV5IGhhZCBmb3VuZGVkIGEgbmF0aW9uIGFuZCBlbWJvZGllZCB3aXRoaW4gb3VyIGRlY2xhcmF0aW9uIG9yIG91ciByYXRpZmllZCBDb25zdGl0dXRpb24gb3IgdGhlIHN1YnNlcXVlbnQgYW1lbmRtZW50cyB0aGF0IHRoZXJlIHdhcyBzb21lIHJpZ2h0LCBsZXQgYWxvbmUgYSBjb21tYW5kLCBzYW1lLXNleCBtYXJyaWFnZS4gSXQncyBhIGNvbXBsZXRlIG1hbnVmYWN0dXJlZCwgbm90IGp1c3QgYSByaWdodCwgYnV0IGEgY29tbWFuZCBieSB0aGUgU3VwcmVtZSBDb3VydCBvZiB0aGUgVW5pdGVkIFN0YXRlcy4gQW5kIEkgaGF2ZSBzb21lIGhpc3Rvcnkgd2l0aCB0aGlzLiBUaGUgU3VwcmVtZSBDb3VydCBvZiB0aGUgc3RhdGUgb2YgSW93YSBkaWQgdGhlIHNhbWUgdGhpbmcgdG8gSW93YW5zIGluIDIwMDkuIEkgc2F0IGluIHRoZSBsZWdpc2xhdHVyZSBhbmQgd2FzIGFuIGF1dGhvciBvZiB0aGUgRGVmZW5zZSBvZiBNYXJyaWFnZSBBY3QgaW4gYWJvdXQgMTk5OC4gQW5kIG9uZSBvZiB0aGUgcGllY2VzIG9mIHRoZSBkZWJhdGUgd2FzLCAiV2h5IGRvIHdlIG5lZWQgdG8gYm90aGVyIHRvIGRvIHRoaXM/IiBZZXMsIGl0IHdvdWxkIG1ha2Ugc2Vuc2UgaWYgbWFycmlhZ2Ugd2VyZSB0aHJlYXRlbmVkLCBidXQgaXQgd2FzIHNvIGZhciBiZXlvbmQgdGhlIHBhbGUgdGhhdCB3aHkgd291bGQgd2UgYm90aGVyIHRvIGRvIHRoaXM/IFdlbGwsIHdlIHNhdyBsaXRpZ2F0aW9uIGNvbWluZyBpbiBIYXdhaWkgYXQgdGhhdCBwZXJpb2Qgb2YgdGltZSB0aGF0IHdhcyB0cnlpbmcgdG8gZm9yY2Ugc2FtZS1zZXggbWFycmlhZ2Ugb24gQW1lcmljYS4gV2Ugd3JvdGUgYW5kLCBhbmQgSSB3YXMsIEksIGFzIG9uZSBvZiB0aGUgYXV0aG9ycyBvZiBpdCwgd3JvdGUgdGhlIERlZmVuc2Ugb2YgTWFycmlhZ2UgQWN0LCBwdXQgaXQgaW50byBJb3dhIGxhdy4gQW5kIHNvIGZyb20gMTk5OCwgMTEgeWVhcnMgbGF0ZXIsIHRoZSBTdXByZW1lIENvdXJ0IG9mIHRoZSBVbml0ZWQsIG9yIGV4Y3VzZSwgU3VwcmVtZSBDb3VydCBvZiB0aGUgc3RhdGUgb2YgSW93YSBjcmVhdGVkIGEgZm9yIHNhbWUtc2V4IG1hcnJpYWdlIGluIElvd2EuIEFuZCBJb3dhbnMgcm9zZSB1cCBhbmQgdGhyZXcgdGhyZWUgb2YgdGhlbSBvZmYgdGhlIGJlbmNoIHRoZSBmb2xsb3dpbmcgZWxlY3Rpb24gaW4gTm92ZW1iZXIgb2YgMjAxMC4gTm90IGJlY2F1c2Ugb2YgdGhlIHBvbGljeSBkZWNpc2lvbiwgYnV0IGJlY2F1c2UgdGhleSBoYWQgbm90IGtlcHQgdGhlaXIgb2F0aCBvZiBvZmZpY2UgdG8gc3VwcG9ydCBhbmQgZGVmZW5kIHRoZSBDb25zdGl0dXRpb24uIFRoZXkncmUgb2JsaWdhdGVkIHRvIHJlYWQgYW5kIHVuZGVyc3RhbmQgYW5kIGJlbGlldmUgdGhlIENvbnN0aXR1dGlvbiBhbmQgdGhlbiBpc3N1ZSB0aGVpciBqdWRnbWVudHMgYmFzZWQgdXBvbiB0aGUgbGF3LCB0aGUgdGV4dCBvZiB0aGUgbGF3LCBhbmQgYXMgYW4gYW5jaWxsYXJ5IGNvbXBvbmVudCBvZiB0aGlzLCB0aGUgaW50ZW50IG9mIHRoZSBsZWdpc2xhdHVyZSBpdHNlbGYuIEJlY2F1c2UgYWZ0ZXIgYWxsLCB0aGUgbGVnaXNsYXR1cmUgaXMgdGhlIHZvaWNlIG9mIHRoZSBwZW9wbGUuIFRoZSBqdWRnZXMgYXJlIG5vdC4gVGhleSdyZSB1bmVsZWN0ZWQuIFRoZXkncmUgYXBwb2ludGVkIGZvciBsaWZlLiBUaGV5J3JlIHVuYWNjb3VudGFibGUuIEFuZCBzbyB0aGVyZSBpdCB3YXMuIEp1bmUgMjV0aCBvZiAyMDE1IG9uIEZyaWRheSwgdGhlIFN1cHJlbWUgQ291cnQgbWFudWZhY3R1cmVkIGEgY29tbWFuZCBmb3Igc2FtZS1zZXggbWFycmlhZ2UuIE5vdyB0aGlzIGlzIGFwcGFsbGluZyB0byBtZSwgTXIuIFNwZWFrZXIsIGJlY2F1c2UgSSBjYW4gcmVhZCB0aGlzIENvbnN0aXR1dGlvbiBhbmQgdW5kZXJzdGFuZCB3aGF0IGl0IG1lYW5zLiBBbmQgSSBjYW4gcmVhZCB0aGUgcHJlY2VkZW50IGNhc2VzIGFsb25nIHRoZSB3YXkgdGhhdCBoYXZlIGZsb3dlZCBmcm9tIE1hcmJlcnJ5IG9uIGRvd24gdG8gdG9kYXkuIEJ1dCBpdCdzIG5vIGxvbmdlciBwb3NzaWJsZSB0byBsb29rIGF0IHRoaXMgU3VwcmVtZSBDb3VydCBhbmQgZGlzY2VybiB3aGF0IGEgbGlrZWx5IGRlY2lzaW9uIG9mIHRoZSBDb3VydCBtaWdodCBiZSBieSBzdHVkeWluZyB0aGUgdGV4dCBvZiB0aGUgQ29uc3RpdHV0aW9uIGFuZCB0aGUgdGV4dCBvZiB0aGUgbGF3IGJlY2F1c2Ugd2UgaGF2ZSBhIGNvdXJ0IHRoYXQgd2lsbCB3cml0ZSwgbWFrZSBpdCB1cCBhcyB0aGV5IGdvIGFsb25nLCB3cml0ZSBsYXdzLiBUaGV5IGdvIGFuZCBkaXNjb3ZlciB3aGF0IHRoZXkgd291bGQgY2FsbCBhIG5ldyByaWdodCBpbiB0aGUgMTR0aCBBbWVuZG1lbnQgdG8gdGhlIENvbnN0aXR1dGlvbiwgZXF1YWwgcHJvdGVjdGlvbiB1bmRlciB0aGUgbGF3LiBUaGVyZSBpcyBlcXVhbCBwcm90ZWN0aW9uIGFscmVhZHkuIFRoZXJlJ3MgbG9uZyBiZWVuIGVxdWFsIHByb3RlY3Rpb24gdGhhdCB3YXMgYWJvdXQgbWFraW5nIHN1cmUgdGhhdCBiYWJpZXMgdGhhdCB3ZXJlIGJvcm4gdG8gdGhlIG5ld2x5IGZyZWUgc2xhdmUgcG9zdCBDaXZpbCBXYXIgd291bGQgYmUgQW1lcmljYW4gY2l0aXplbnMgYW5kIHRoZXkgd291bGQgZW5qb3kgYWxsIG9mIHRoZSByaWdodHMgYW5kIGFsbCB0aGUgcHJpdiBvZiBiZWluZyBhIGNpdGl6ZW4sIGEgcGVyc29uIHRoYXQgZW5qb3llZCBwZXJzb25ob29kIGluIGdvb2Qgc3RhbmRpbmcuIFRoYXQncyB3aGF0IHRoZSAxM3RoLCAxM3RoIEFtZW5kbWVudCBlbmRlZCBzbGF2ZXJ5IGFuZCB0aGUgMTR0aCBBbWVuZG1lbnQgZ3VhcmFudGVlZCBlcXVhbCByaWdodHMuIEFuZCBub3cgdGhpcyBjb3VydCBoYXMgdHdpc3RlZCBpdCBpbnRvIGEgY29tbWFuZCB0aGF0IHRoZXJlJ3Mgbm90IGEgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgbWFuIGFuZCBhIHdvbWFuIHdoZW4gaXQgY29tZXMgdG8gam9pbmluZyB0aGVtIHRvZ2V0aGVyIGluIG1hdHJpbW9ueS4gV2VsbCwgdGhlcmUgaXMgYSBkaWZmZXJlbmNlLiBBbmQgaXQncyBiZWVuIGh1c2JhbmQgYW5kIHdpZmUgaW4gZXZlcnkgb25lIG9mIHRoZXNlIHN0YXRlcyB1bnRpbCBzdWNoIHRpbWUgYXMgdGhlIGFjdGl2aXN0cyBnb3QgYnVzeS4gVGhvc2UgYXJlIHRoZSBraW5kIG9mIHRoaW5ncyB0aGF0IGlmIHRoZSBzdGF0ZXMgd2FudCB0byBlc3RhYmxpc2ggc2FtZS1zZXggbWFycmlhZ2UsIHNvIGJlIGl0LiBUaGF0J3MgYSB2b2ljZSBvZiB0aGUgcGVvcGxlLiBJdCdzIGNvbnN0aXR1dGlvbmFsIGFuZCBpdCBmaXRzIHRoZSBzdHJ1Y3R1cmUgb2Ygb3VyIG91ciBVbml0ZWQgU3RhdGVzIENvbnN0aXR1dGlvbiBhbG9uZyB3aXRoIHRoZSB2YXJpb3VzIHN0YXRlIGNvbnN0aXR1dGlvbnMgYW5kIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHJ1bGUgb2YgbGF3LiBCdXQgaWYgYSBjb3VydCB3YW50cyB0byBtYW51ZmFjdHVyZSBhIG5ldyByaWdodCwgbGV0IGFsb25lIGEgbmV3IGNvbW1hbmQsIHRoYXQncyB3cm9uZy4gQW5kIHRoaXMgQ29uZ3Jlc3Mgb3VnaHQgdG8gc3BlYWsgdXAgYW5kIHdlIG5lZWQgYSBwcmVzaWRlbnQgdGhhdCB3aWxsIGFwcG9pbnQganVzdGljZXMgdG8gdGhlIFN1cHJlbWUgQ291cnQgdGhhdCB3aWxsIHJ1bGUgb24gdGhlIHRleHQgb2YgdGhlIENvbnN0aXR1dGlvbiwgaXRzIG9yaWdpbmFsIG1lYW5pbmcsIGFuZCBvbiB0aGUgdW5kZXJzdGFuZGluZyBvZiB3aGF0IHRoZSB0ZXh0IG9mIHRoYXQgQ29uc3RpdHV0aW9uIHNheXMuClNvIEkgd291bGQgYmFjayB1cCB0byB0aGUgS2luZyB2ZXJzdXMgQnVyd2VsbCBkZWNpc2lvbiwgTXIuIFNwZWFrZXIsIGFuZCBhZGQgdGhpcywgdWgsIGZvciB0aGUgYmVuZWZpdCBvZiB0aG9zZSBmb2xrcyB0aGF0IGFyZSBsaXN0ZW5pbmcgaW4sIGFuZCBtYXliZSB0aGVyZSBpcyBzb21lIHN0YWZmIG9mIHRoZSBTdXByZW1lIENvdXJ0IHRoYXQgYXJlIGxpc3RlbmluZy4gSWYgeW91IGRpc2NvdmVyIGEgbGF3LCBpZiBpdCdzIGEsIGlmIGl0J3MgYSBsYXcgbGlrZSBPYmFtYWNhcmUgdGhhdCBjb21lcyBiZWZvcmUgdGhlIFN1cHJlbWUgQ291cnQgYW5kIHlvdSByZWFkIHRoZSB0ZXh0IG9mIHRoYXQgYW5kIGl0IGRvZXNuJ3QgaW5jbHVkZSAib3IgZmVkZXJhbCBnb3Zlcm5tZW50LCIgYW5kIHlvdSBiZWxpZXZlIHRoYXQgQ29uZ3Jlc3Mgd2FudGVkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgdG8gYmUgYWJsZSB0byBlc3RhYmxpc2ggdGhlIGV4Y2hhbmdlcyBvciBpbnRlbmRlZCB0byB3cml0ZSB0aGF0IGludG8gdGhlIGxhdywgeW91IGRvbid0IGdldCB0byBqdXN0IHdyaXRlIGl0IGluIGFuZCBzYXkgdGhhdCdzIHdoYXQgdGhleSByZWFsbHkgbWVhbnQuIFlvdSBoYXZlIHRvIHJlbWFuZCBpdCBiYWNrIHRvIENvbmdyZXNzIGFuZCB0ZWxsIHVzIHRoaXMgaXMgd2hhdCB0aGUgbGF3IHNheXMuIFNvIHRoZXJlZm9yZSwgaWYgQ29uZ3Jlc3Mgd2FudHMgdGhlIGxhdyB0byBzYXkgc29tZXRoaW5nIGRpZmZlcmVudCwgd2UgaGF2ZSB0byBhbWVuZCBpdCBoZXJlIGluIHRoZSBIb3VzZSBhbmQgdGhlIFNlbmF0ZSBhbmQgZ2V0IGEgcHJlc2lkZW50aWFsIHNpZ25hdHVyZSBvbiBpdC4gVGhhdCBpcyB0aGUgY29uc3RpdHV0aW9uYWwgc3RydWN0dXJlIG9mIHRoaXMgZ292ZXJubWVudCB0aGF0IHdlIGhhdmUsIE1yLiBTcGVha2VyLCBhbmQgaXQncywgaXQncyBhIGJpdCB1bSwgZnJ1c3RyYXRpbmcgZm9yIG1lIHRvIGxpc3RlbiB0byB0aGUgZGlhbG9ndWUgb3RoZXJ3aXNlIHRoYXQgdGhlIFNlbmF0ZSdzIG5vdCBkb2luZyB0aGVpciBqb2IgYmVjYXVzZSB0aGV5IHdpdGhob2xkIGEgY29uZmlybWF0aW9uLCB1aCwgdGhhdCBvZiBhIHByZXNpZGVudGlhbCBhcHBvaW50bWVudCB3aGVuIHdlIGhhdmUgYSBwcmVzaWRlbnQgdGhhdCBoYXMgcHJvdmVuIHRoYXQgaGUncyBub3QgZ29pbmcgdG8gcHV0IHVwIGFuIGFwcG9pbnRtZW50IHRoYXQgd2lsbCBwcm90ZWN0IG91ciBDb25zdGl0dXRpb24uIFRoaXMgaXMgdGhlIHRpbWUgd2UgbXVzdCBkZWZlbmQgb3VyIENvbnN0aXR1dGlvbiBhbmQgd2UgbXVzdCBub21pbmF0ZSBhbmQgZWxlY3QgYSBwcmVzaWRlbnQgb2YgdGhlIFVuaXRlZCBTdGF0ZXMgd2hvIHdpbGwgbWFrZSB0aG9zZSBhcHBvaW50bWVudHMgdG8gdGhlIFN1cHJlbWUgQ291cnQgd2hvIGJlbGlldmUgdGhlIENvbnN0aXR1dGlvbiBtZWFucyB3aGF0IGl0IHNheXMuCkJ1dCBNci4gU3BlYWtlciwgSSBkaWRuJ3QgYWN0dWFsbHkgY29tZSBoZXJlIHRvIHRhbGsgYWJvdXQgdGhhdC4gVW0sIHRoYXQncyBteSByZWJ1dHRhbCB0byB3aGF0IEkndmUgbGlzdGVuZWQgdG8gZm9yIHRoZSBsYXN0IDQwIG1pbnV0ZXMgb3Igc28uIEkgY2FtZSBoZXJlIHRvIHRhbGsgYWJvdXQgdGhlIHJ1bGUgb2YgbGF3IGZvciBzdXJlLiBBbmQgcGFydCBvZiB0aGlzIGlzIHN0aW11bGF0ZWQgYnkgYW4gaW1taWdyYXRpb24gaGVhcmluZyB0aGF0IHdlIGhhZCB5ZXN0ZXJkYXkgaW4gdGhlIHN1YmNvbW1pdHRlZSwgSG91c2UgSnVkaWNpYXJ5LiBUaGlzIGlzIGEgdHlwZSBvZiBoZWFyaW5nIHRoYXQgSSBoYXZlIGxpc3RlbmVkIHRvIHRvbyBtYW55IHRpbWVzLCBvbmUgb2YgdGhlIGhhcmRlc3QgaGVhcmluZ3MgdGhhdCBJIGhhdmUgc2F0IHRocm91Z2ggaW4gbXkgdGltZSBoZXJlIGluIHRoaXMgQ29uZ3Jlc3MsIE1yLiBTcGVha2VyLiBUaGlzIHdhcyBhIGhlYXJpbmcgdGhhdCBoYWQgd2l0bmVzc2VzLCB1bSwgYSBmaW5lIFNoZXJpZmYgSmVua2lucyBmcm9tIEZyZWRlcmljayBDb3VudHksIE1hcnlsYW5kLCB3aG8gaGFzIGJlZW4gZW5mb3JjaW5nIGltbWlncmF0aW9uIGxhdywgc3RhbmRpbmcgdXAgZm9yIHRoZSBydWxlIG9mIGxhdy4gSGUncyBiZWVuIHBydWRlbnRseSB1c2luZyB0aGUgbGVnYWwgYW5kIGp1c3RpZmlhYmxlLCB1aCwgZXZpZGVuY2UgdGhhdCBoZSBoYWQgYmVmb3JlIGhpbSwgYW5kIGhlJ3MgYmVlbiBjcml0aWNpemVkIGZvciBoaXMgZWZmZWN0aXZlbmVzcyBieSB0aGUgcGVvcGxlIHRoYXQgZG9uJ3Qgd2FudCB0byBlbmZvcmNlIHRoZSBsYXcuIEl0J3MgYSBnb29kIHdpdG5lc3MsIHVoLCBTaGVyaWZmIEplbmtpbnMuIEJ1dCBhZGRpdGlvbmFsbHkgdGhlcmUgYWxzbyB3ZSBoYWQsIHdlIGhhZCB3aXRuZXNzZXMgZnJvbSB0d28gZmFtaWxpZXMgdGhhdCB3ZXJlIHN1ZmZlcmluZyB0cmFnaWNhbGx5LiBPbmUgb2YgdGhlbSB3YXMgYSBtb3RoZXIgb2YgSm9zaHVhIFdpbGtlcnNvbiwgaGVyIG5hbWUgaXMgTGF1cmEgV2lsa2Vyc29uLiBTaGUncyB0ZXN0aWZpZWQgYmVmb3JlIHRoZSBKdWRpY2lhcnkgQ29tbWl0dGVlIGluIHRoZSBwYXN0IGF0IGxlYXN0IG9uY2UsIGFuZCBJIGhhdmUgbWV0IGhlciBhdCBhbiBpbW1pZ3JhdGlvbiBldmVudCBpbiBSaWNobW9uZCwgVmlyZ2luaWEgb24gYW5vdGhlciBvY2Nhc2lvbiBhbmQgbGlzdGVuIHRvIHRoZSB0cmFnaWMsIHRyYWdpYyBzdG9yeSBvZiBoZXIgc29uIEpvc2h1YSwgd2hvIHdhcywgdW0sIGVzc2VudGlhbGx5IGFiZHVjdGVkIGZyb20gaGlzIHNjaG9vbCBhdCwgdW0sIGFzIGFib3V0IGEgc29waG9tb3JlIGluIGhpZ2ggc2Nob29sIG9yIHNvIGFuZCBoYXVsZWQgb3V0IGludG8gb3V0c2lkZSBvZiB0b3duIHdoZXJlIGhlIHdhcyBiZWF0ZW4gbWVyY2lsZXNzbHkgYW5kIGJsdWRnZW9uZWQgYW5kIGZpbmFsbHkgbXVyZGVyZWQgYW5kIGhhZCBhbmQgdGhlbiB0aGUgcGVycGV0cmF0b3IsIGFuIGlsbGVnYWwgYWxpZW4gd2hvbSB0aGUgbGF3IGVuZm9yY2VtZW50IGhhZCBlbmNvdW50ZXJlZCBhbmQgcmVsZWFzZWQgb250byB0aGUgc3RyZWV0cyBvZiBBbWVyaWNhLCB3aG8gaGFkIG5vIGJ1c2luZXNzIGJlaW5nIGluIEFtZXJpY2EgaW4gdGhlIGZpcnN0IHBsYWNlLCBhbmQgd2hvbSBsYXcgZW5mb3JjZW1lbnQgYWxyZWFkeSBoYWQgcGlja2VkIHVwIGF0IGxlYXN0IG9uY2UuIFRoaXMgaWxsZWdhbCBhbGllbiBiZWF0IHRoaXMgYm95IHRvIGRlYXRoIGFuZCB0aGVuIGhlIHdlbnQgYW5kIGJvdWdodCBnYXNvbGluZSBhbmQgYnVybmVkIGhpcyBib2R5LiBIZSBoYXVsZWQgaGlzIGJvZHkgb3V0IGFuZCBhbmQgcHV0IGdhcyBhbmQgcG91cmVkIGdhc29saW5lIG9uIGl0IGFuZCBidXJuZWQgdGhpcyBKb3NodWEgV2lsa2Vyc29uJ3MgYm9keSBhbmQgdGhlbiBoZSB3ZW50IGFuZCB0b29rIGEgc2hvd2VyIGFuZCB3ZW50IHRvIGEgbW92aWUgYXMgaWYgaXQgd2FzIGp1c3QgYW5vdGhlciBkYXkgaW4gdGhlIGxpZmUgb2YuIFdlbGwsIE1yLiBTcGVha2VyLCBpdCB3YXMgYW5vdGhlciBkYXkgaW4sIGluIHRoZSBsaWZlIG9mIEFtZXJpY2EgYW5kIEFtZXJpY2Fucy4gSXQncyBhbm90aGVyIGxpZmUgbG9zcyB0byBhbiwgYW4gaWxsZWdhbCBjcmltaW5hbCBhbGllbiB3aG8gd2FzIHVubGF3ZnVsbHkgcHJlc2VudCBpbiBBbWVyaWNhLCB3aG8gaGFkIG5vIGJ1c2luZXNzIHRvIGJlIGhlcmUsIG9uZSB3aG8gaGFkIGJlZW4gZW5jb3VudGVyZWQgYnkgbGF3IGVuZm9yY2VtZW50IG9mZmljZXJzIGluIHRoZSBwYXN0LCBvbmUgd2hvbSBJIGJlbGlldmUgSUNFIGRlY2xpbmVkLCB1aCwgdG8gcGljayB1cCBhbmQgcGxhY2UgaW50byByZW1vdmFsIHByb2NlZWRpbmdzLiBUaGlzIGhhcHBlbnMgZXZlcnkgZGF5IGluIHRoaXMgY291bnRyeS4gSXQgaGFwcGVucyBodW5kcmVkcyBvZiB0aW1lcyBpbiB0aGlzIGNvdW50cnkgZWFjaCB5ZWFyLiBUaGVzZSBpbmNpZGVudHMgb2YgaWxsZWdhbCBhbGllbnMgdGhhdCBhcmUsIHRoYXQgYXJlIGFycmVzdGVkIGFuZCB0dXJuZWQgbG9vc2Ugb24gdGhlIHN0cmVldCBiZWNhdXNlIHRoZSBQcmVzaWRlbnQgaGFzIHRoaXMgaWRlYSBvZiBwcmlvcml0aXphdGlvbiBvciBwcm9zZWN1dG9yaWFsIGRpc2NyZXRpb24gaXMgY29zdGluZyBsaXZlcyBpbiBBbWVyaWNhLiBBbmQgaXQncyBjb3N0aW5nLCBpdCdzIGNvc3RpbmcgaW4gdGhlIGVuZCB0aG91c2FuZHMgb2YgbGl2ZXMgaW4gQW1lcmljYS4gQW5kIHRoZSBzYWQsIHNhZCBzdG9yeSB0b2xkIGJ5IExhdXJhIFdpbGtlcnNvbiB5ZXN0ZXJkYXkgdGhhdCBzaGUgaGFzIHRoZSBjb3VyYWdlIGFuZCB0aGUgaGVhcnQgdG8gY29tZSBoZXJlIGFuZCBzaGFyZSBoZXIgc3Rvcnkgd2l0aCB1cyBhbmQgdG8gcGxhY2UgdGhhdCBhd2Z1bCwgYnJ1dGFsLCBnaGFzdGx5IG1lbW9yeSBhZ2FpbiBpbnRvIGhlciBtaW5kJ3MgZXllIGFuZCBwb3VyIHRoYXQgZm9ydGggaW50byB0aGUgQ29uZ3Jlc3Npb25hbCBSZWNvcmQgc28gdGhhdCBzb21lIG9mIHVzLCBzb21lIG9mIHVzIHdpbGwgc29hayB0aGF0IHVwIGFuZCBiZSBtb2JpbGl6ZWQgdG8gZG8gc29tZXRoaW5nLCBzb21ldGhpbmcgbW9yZSB0byByZXNpc3QgdGhlIFByZXNpZGVudCdzIHBvbGljeSBvZiBhbW5lc3R5LCBkZSBmYWN0byBhbW5lc3R5LCBhbW5lc3R5IGJ5IGV4ZWN1dGl2ZSBlZGljdCwgdGhhdCBoYXMgYmVlbiBwYXJ0IGFuZCBwYXJjZWwgb2YgdGhlIE9iYW1hIHBvbGljeSBzaW5jZSB0aGUgYmVnaW5uaW5nIG9mIGhpcyB0aW1lIGhlcmUgaW4gb2ZmaWNlLiBBbmQgaXQncyBiZWVuIGdldHRpbmcgd29yc2UgYW5kIHdvcnNlIGV2ZXJ5IG1vbnRoLiBJIHRoYW5rIEdvZCBmb3IgTGF1cmEgV2lsa2Vyc29uIGFuZCBJIGFzayBHb2QgdG8gYmxlc3MgdGhlIGxpZmUgYW5kIHRoZSBtZW1vcnkgYW5kIHRoZSBzb3VsIG9mIEpvc2h1YSBXaWxrZXJzb24gd2hvIGhhcyBwYWlkIGEgdHJlbWVuZG91c2x5IGhpZ2ggcHJpY2UgYmVjYXVzZSB3ZSBoYXZlIGFuIGlkZW9sb2dpY2FsIHByZXNpZGVudCB3aG8sIEknZCBzYXkgdG8gdGhlIG90aGVyIHNpZGUgb2YgdGhlIGFpc2xlLCB3aG8ncyBub3QgZG9pbmcgaGlzIGpvYi4gSW4gZmFjdCwgaGUncyBvcmRlcmluZyBsYXcgZW5mb3JjZW1lbnQgb2ZmaWNlcnMgbm90IHRvIGRvIHRoZWlyIGpvYi4gRmVkZXJhbCBsYXcgcmVxdWlyZXMgdGhhdCB3aGVuIGltbWlncmF0aW9uIGxhdyBlbmZvcmNlbWVudCBvZmZpY2VycyBlbmNvdW50ZXIgYW4gaW5kaXZpZHVhbCBpcyB1bmxhd2Z1bGx5IHByZXNlbnQgaW4gdGhlIFVuaXRlZCBTdGF0ZXMsIHF1b3RlLCAiaGUgc2hhbGwgYmUgcGxhY2VkIGluIHJlbW92YWJsZSBwcm9jZWVkaW5ncywiIGNsb3NlIHF1b3RlLiBUaGF0J3MgdGhlIGxhdy4gQW5kIG91ciwgYW5kIG91ciBCb3JkZXIgUGF0cm9sIG9mZmljZXJzIGluY2x1ZGVkIGFyZSB0b2xkLCAiSWYgeW91J3JlIGhlcmUgdG8gZW5mb3JjZSB0aGUgbGF3IGFuZCB5b3UncmUgZGV0ZXJtaW5lZCB0byBkbyBzbywgeW91J3JlIGJldHRlciBnZXQgeW91cnNlbGYgYW5vdGhlciBqb2IuIiBUaGV5J3ZlIGJlY29tZSB0aGUgV2VsY29tZSBXYWdvbiBvbiB0aGUgc291dGhlcm4gYm9yZGVyLiBBbmQgbm93IG1vc3QgYW55Ym9keSB0aGF0IGNyb3NzZXMgdGhhdCBib3JkZXIgYW5kIG1ha2VzIGl0IGFjcm9zcyB0aGUgUmlvIEdyYW5kZSBSaXZlciwgYWNyb3NzIHRoZSBsYW5kIGJvcmRlciB0aGF0IHN0cmV0Y2hlcyBmcm9tIFRleGFzIGFsbCB0aGUgd2F5LCB1aCwgYWNyb3NzIHRocm91Z2ggTmV3IE1leGljbywgQXJpem9uYSwgYW5kIENhbGlmb3JuaWEgdG8gdGhlIFBhY2lmaWMgT2NlYW4uIE1vc3QgYW55Ym9keSB0aGF0IGdldHMgYWNyb3NzIHRoZXJlIGtub3dzLCAiSWYgeW91IGp1c3QgY2xhaW0gYXN5bHVtLCB1aCwgeW91IGNhbiBiZSwgeW91IGNhbiBiZSBhIHJlZnVnZWUgYW5kIHRoaXMgZmVkZXJhbCBnb3Zlcm5tZW50IHdpbGwgcm9sbCBvdXQgdGhlIFdlbGNvbWUgV2Fnb24uIiBGb3JtZXIgbWVtYmVyIG9mIENvbmdyZXNzLCBNaWNoZWxsZSBCYWNobWFuLCBhbmQgSSBzdG9vZCBvbiB0aGUsIG9uIHRoZSBiYW5rcyBvZiB0aGUgUmlvIEdyYW5kZSBSaXZlciBhdCBSb21hLCBUZXhhcywgaGVyZSBhIHN1bW1lciBhbmQgYSBoYWxmIG9yIHNvIGFnbyBhbmQgd2F0Y2hlZCBhcyB0aGV5IGluZmxhdGVkIGEgcmFmdCBvbiB0aGUsIHRoZSBvdGhlciBzaWRlIG9mIHRoZSByaXZlci4gVHdvIGNveW90ZXMsIGZhaXJseSBnb29kLXNpemVkIHJhZnQuIEFuZCB0aGV5IGhlbHBlZCB0aGUgbGFkeSBpbnRvIHRoYXQgcmFmdCBTdW5kYXkgYWZ0ZXJub29uLCBicm9hZCBkYXlsaWdodCwgZXhhY3RseSBhdCB0aGUgc2hpZnQgY2hhbmdlIGZvciB0aGUgQm9yZGVyIFBhdHJvbC4gQW5kIHRoZXkgaGVscGVkIGEgcHJlZ25hbnQgbGFkeSBpbnRvIHRoZSByYWZ0LiBTaGUgaGFkIHR3byBsaXR0bGUgYmFncyBvZiBmb3IgcHJvcGVydHkuIEFuZCB0aGV5IHJhZnQgYWNyb3NzIHRoZSByaXZlciwgYnJvdWdodCBpdCB1cCB0byB0aGUgc2hvcmVsaW5lIHVuZGVyIHRoZSBleWVzIG9mIHRoZSBjaXR5IHBvbGljZSBhbmQgdGhlIEJvcmRlciBQYXRyb2wuIEJ1dCBpdCB3YXMgc2hpZnQgY2hhbmdlIGFuZCB0aGV5IGhlbHBlZCBvbmUgb2YgdGhlIGNveW90ZXMgZ290IG91dCBvZiB0aGUgcmFmdC4gVGhlIG90aGVyIG9uZSBzdGFiaWxpemVkIGl0LCBoZWxwZWQgdGhlIHByZWduYW50IGxhZHkgb3V0IG9mIHRoZSByYWZ0IG9udG8gdGhlLCBvbnRvIFVTIHNob3Jlcy4gQW5kIHRoZW4gaGFuZGVkIGhlciB0d28gbGl0dGxlIGRpZGR5IGJhZ3MgYW5kIGhlIGdvdCBiYWNrIGludG8gdGhlIHJhZnQgYW5kIHRoZSB0d28gY295b3RlcyB3ZW50IGJhY2sgYWNyb3NzIHRoZSByaXZlciwgZGVmbGF0ZWQgdGhlIHJhZnQsIGZvbGRlZCBpdCB1cCwgcHV0IGl0IGluIHRoZSB0cnVuayBvZiB0aGVpciBjYXIsIHRoZSBjYXIgdGhhdCB3ZSdkIHdhdGNoZWQgZ28gYXJvdW5kIGFuZCBhcm91bmQgb3ZlciB0aGVyZSBrbm93aW5nIHRoYXQgaXQgd2FzIGEgY295b3RlIGNhciBiZWNhdXNlIHRoZXkgcmVjb2duaXplZCBpdCBmcm9tIHRoZSBVUyBzaWRlIG9mIHRoZSByaXZlci4gQW5kIGEgbGFkeSBzdG9vZCB0aGVyZSwgc2hlIGFuZCBoZXIgdW5ib3JuIGJhYnkgaW4gaGVyIHR3byBkaWRkeSBiYWdzLCB3YWl0aW5nIGZvciB0aGUgQm9yZGVyIFBhdHJvbCB0byBzaG93IHVwLiBUYWtlcyBhIGxpdHRsZSBsb25nZXIgZHVyaW5nIHRoZSBzaGlmdCBjaGFuZ2UuIFRoZXkgc2hvdyB1cCwgbm8gZG91YnQuIEFuZCBJIGRpZG4ndCBmb2xsb3cgdGhpcyBjYXNlIGFueSBmdXJ0aGVyLiBBbmQgdGhleSB3b3VsZCBoYXZlIHByZWZlcnJlZCB0aGF0IEkgZGlkbid0LiBCdXQgaGVyZSdzIHdoYXQgSSB3aWxsIHByZWRpY3QgaGFwcGVuZWQuIFRoYXQgc2hlIGFwcGxpZWQgZm9yIGFzeWx1bS4gVGhlIGJhYnkgaXMgbm93IGJvcm4uIEFuZCB0aGUgYmFieSBpcyBhbiBBbWVyaWNhbiBjaXRpemVuLiBBbmQgc2hlIGlzIHRoZSBwYXJlbnQgb2YgYW4gYW5jaG9yIGJhYnkuIFdlbGwsIHRoYXQncyB0aGUga2luZCBvZiBwZXJzb24gdGhhdCBCYXJhY2sgT2JhbWEgaGFzIGdyYW50ZWQgYSBkZSBmYWN0bywgYXQgbGVhc3QgYSB0ZW1wb3JhcnkgYW1uZXN0eSB0byBmb3IgdGhlIGRlZmVycmVkIGFjdGlvbiBmb3IgcGFyZW50cyBvZi4gSSBrZWVwIHdhbnRpbmcgdG8gdGVsbCB5b3Ugd2hhdCB0aGF0IHdvcmQgbWVhbnMgdG8gbWUuIFVtLCBidXQsIGJ1dCB0aGUsIHVtLCBwYXJlbnRzLCB0aGUgcGFyZW50cyBvZiBBbWVyaWNhbnMgaXMgd2hhdCB0aGUgUHJlc2lkZW50IHdvdWxkIGxpa2UgdG8gY2FsbCBpdC4gRGVmZXJyZWQgYWN0aW9uIGZvciBwYXJlbnRzIG9mIEFtZXJpY2FucywgREFQQS4gV2VsbCwgaGVyZSdzLiBJIHdhdGNoZWQgb25lIG9mIHRob3NlIHBhcmVudHMgb2YgQW1lcmljYW5zLCBwYXJlbnQgbm93IGNvbWUgYWNyb3NzIHRoZSBib3JkZXIgaW4gYSwgaW4gYW4gaW5mbGF0YWJsZSByYWZ0IHdpdGggdHdvIGNveW90ZXMuIFRoZXkgZ290IHBhaWQgc29tZXRoaW5nIHRvIGRvIHRoYXQsIHRoYXQgSSBkb24ndCBrbm93IGhvdyBtdWNoLiBBbmQgbm93IHRoZSBlZGljdCB0aGF0IHdlIGdyYW50IHRoaXMgZGUgZmFjdG8gcGVybWl0LCB0aGlzIGFtbmVzdHkgZm9yIHRoZSBwYXJlbnRzIG9mLCBvZiBhbmNob3IgYmFiaWVzIHRvIGJlIHN0YXlpbmcgZnJlZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgdGhhdCBzdXNwZW5kcyB0aGUgcnVsZSBvZiBsYXcsIGRlZiBsYXcsIGRlZmllcyB0aGUgdmVyeSBsYXcsIHRoZSBzcGVjaWZpZWQgbGF3IGl0c2VsZi4gQW5kIHRoYXQgY2FzZSBpcyBoZWFyZCBiZWZvcmUgdGhlIFN1cHJlbWUgQ291cnQgdGhpcyB3ZWVrLCB1aCwgTXIuIFNwZWFrZXIuIEFuZCB0aGUgcXVlc3Rpb24gaXMsIGRvZXMgdGhlIFByZXNpZGVudCBoYXZlIHByb3NlY3V0b3JpYWwgYXV0aG9yaXR5LCBwcm9zZWN1dG9yaWFsIGRpc2NyZXRpb24/IFRoYXQsIHdlbGwsIHRoZSBwcmVjZWRlbmNlIGFsb25nIHByb3NlY3V0b3JpYWwgZGlzY3JldGlvbi4gQW5kIEkgZG9uJ3Qga25vdy4gVGhlIFN1cHJlbWUgQ291cnQgaGFzIGV2ZXIgaGVhcmQgYW5kIHJ1bGVkIG9uIGEgY2FzZSBvZiBwcm9zZWN1dG9yaWFsIGRpc2NyZXRpb24uIEkgYmVsaWV2ZSB0aGV5IGhhdmUgbm90LiBCdXQgdGhlIHByZWNlZGVudHMgdGhhdCBhcmUgb3V0IHRoZXJlIGluIHRoZSBsb3dlciBjb3VydHMgYW5kIHRoZSBwcmFjdGljZSBoYXMgYmVlbiB0aGF0IGlmIGEgY2hpZWYgZXhlY3V0aXZlIG9mZmljZXIgYW5kIGFuZCBjYW4gcHJvamVjdCBoaXMgcG9saWN5IHRocm91Z2ggaGlzIHN1Ym9yZGluYXRlcyB0aGF0IHRoZXkgaGF2ZSB0byBwaWNrIGFuZCBjaG9vc2Ugd2hpY2ggY2FzZXMgdGhleSB3aWxsIHByb3NlY3V0ZS4gV2VsbCwgd2hlbiB0aGV5IGRvIHRoYXQsIHRoYXQncyBjYWxsZWQgcHJvc2VjdXRvcmlhbCBkaXNjcmV0aW9uLiBJdCBoYXMgdG8gYmUgb24gYW4gaW5kaXZpZHVhbCBiYXNpcyBvbmx5LiBBbmQgdGhhdCdzIGJ5IHRoZSB3b3JkcyBvZiB0aGUgZm9ybWVyIFNlY3JldGFyeSBvZiBIb21lbGFuZCBTZWN1cml0eSwgSmFuZXQgTmFwb2xpdGFubywgd2hvIHRlc3RpZmllZCBiZWZvcmUgdGhlIEp1ZGljaWFyeSBDb21taXR0ZWUgdG8gdGhhdCBleHRlbnQuIEFuZCBpbiB0aGUgZmlyc3QgTW9ydG9uIG1lbW8gdGhhdCBicm91Z2h0IG91dCB0aGlzIHByb3NlY3V0b3JpYWwgZGlzY3JldGlvbiwgaXQgY3JlYXRlcyBmb3VyIGRpZmZlcmVudCBjYXRlZ29yaWVzIG9yIGdyb3VwcyBvZiBwZW9wbGUuIFNvIHRoZXkncmUgdXRpbGl6aW5nIGNhdGVnb3JpZXMgb3IgZ3JvdXBzIG9mIHBlb3BsZSBkZWNsYXJpbmcgaXQgdG8gYmUgcHJvc2VjdXRvcmlhbCBkaXNjcmV0aW9uIHdoZW4gaW4gZmFjdCBpdCBpcyBub3QgcHJvc2VjdXRvcmlhbCBkaXNjcmV0aW9uIGJlY2F1c2UgaXQgYXBwbGllcyB0byBncm91cHMgb2YgcGVvcGxlIGNyZWF0ZWQgZm91ciBkaWZmZXJlbnQgZ3JvdXBzIG9mIHBlb3BsZS4gVGhhdCdzIHRoZSBzdG9yeSBvZiBKb3NodWEgV2lsa2Vyc29uLiBBbmQgdGhlbiB0aGUgd2l0bmVzcyBzaXR0aW5nIG5leHQgdG8gTGF1cmEgV2lsa2Vyc29uIGlzIE1pY2hlbGxlIFJ1dCBNb2RhbGUsIElvd2EuIE1pY2hlbGxlIFJ1dCwgdGhlIGdyaWV2aW5nIG1vdGhlciBvZiBhIGRhdWdodGVyLCAyMSB5ZWFycyBvbGQsIHdobyB3YXMgYSA0LjAgc3R1ZGVudCBhdCBCZWxsZXZpZXcgVW5pdmVyc2l0eS4gU2hlIHdhbnRlZCB0byBiZWNvbWUgYSBsYXcgZW5mb3JjZW1lbnQgaW52ZXN0aWdhdG9yLiBTaGUgaGFkIHRoZSBiZXN0IGdyYWRlcyB0aGF0IHlvdSBjb3VsZCBwb3NzaWJseSBoYXZlLCBsaXZpbmcgYW5kIGxvdmluZyBsaWZlLiBTaGUgaGFkIGdyYWR1YXRlZCBhbmQgZW5qb3llZCB0aGUgZ3JhZHVhdGlvbiBjZXJlbW9uaWVzIHRoZSBkYXkgYmVmb3JlIHdoZW4gYW4gaWxsZWdhbCBjcmltaW5hbCBhbGllbiBkcnVuayBkcml2aW5nIHBlcnBldHJhdG9yIHJhbiBoZXIgZG93biBhbmQgcmVhci1lbmRlZCBoZXIgaW4gdGhlIHN0cmVldCBhbmQga2lsbGVkIFNhcmFoIFJvb3QuIFNhcmFoLCBTYXJhaCBSb290LCA0LjAgc3R1ZGVudCwgdGhlIHdvcmxkIGFoZWFkIG9mIGhlciwgd2FudGluZyB0byBjb250cmlidXRlIHRvIHRoaXMgY291bnRyeSwgdG8gbGlmZSwgdG8gc29jaWV0eSwgbGl2aW5nIGFuZCBsb3ZpbmcgbGlmZS4gSGVyIGxpZmUgYWJydXB0bHkgZW5kZWQgYnkgYSBjcmltaW5hbCBhbGllbiB3aG8gaGFkIGJlZW4sIGFuZCB3aG8gaGFkIGJlZW4gZW5jb3VudGVyZWQgYnkgYSBsYXcgZW5mb3JjZW1lbnQgYmVmb3JlLCB3aG9zZSBpbW1pZ3JhdGlvbiBhdHRvcm5leXMga25ldyBoaW0uIFR3byBvZiB0aGVtIGhhdmUgYmVlbiBxdW90ZWQgaW4gdGhlIG5ld3NwYXBlciBhdCB0aGlzIHBvaW50LiBBbmQgaGUgaGFkIGJlZW4gcmVsZWFzZWQuIEhlJ2QgYmVlbiByZWxlYXNlZCBvbnRvIHRoZSBzdHJlZXRzIHdoZXJlIGhlIG5vdyBoYWQgdGhyZWUgdGltZXMgdGhlIGJsb29kIGFsY29ob2wgY29udGVudCBhbGxvd2FibGUgYnkgbGF3LCBkcmFnIHJhY2luZyBpbiB0aGUgc3RyZWV0cywga2lsbGVkIFNhcmFoIFJvb3QuIEFuZCBoZXIgbW90aGVyIE1pY2hlbGxlIHRvbGQgdGhlIHN0b3J5IHllc3RlcmRheSBvZiBoZXIsIG9mIGhlciBkYXVnaHRlciB3aG9tIHNoZSBsb3ZlcyBzbyBkZWVwbHkuIEFuZCBhbGwgdGhyb3VnaCB0aGUgcmVzdCBvZiBoZXIgbGlmZSBhbmQgaGVyIGZhbWlseSdzIGxpZmUsIHRoZXkgd2lsbCBjYXJyeSB0aGlzIGhvbGUsIHRoaXMgYWNoZSBpbiB0aGVpciBoZWFydCB0aGF0IGRpZG4ndCBuZWVkIHRvIGJlLiBTYXJhaCBSb290IHdvdWxkIGJlIGFsaXZlIHRvZGF5IGlmIHRoZSBQcmVzaWRlbnQgaGFkIGRvbmUgaGlzIGpvYiwgaWYgbGF3IGVuZm9yY2VtZW50IGhhZCBiZWVuIGFsbG93ZWQgdG8gZG8gdGhlaXIgam9iLCBpZiBJQ0UgaGFkIHJlc3BvbmRlZCB3aGVuIGxvY2FsIGxhdyBlbmZvcmNlbWVudCBjYWxsZWQgdGhlbS4gQW5kIGlmIElDRSBhbmQsIGFuZCBvbiB0b3Agb2YgdGhhdCwgc29tZXRpbWVzIGl0J3MgSUNFIGlzc3VlcyBhIGRldGFpbmVyIGFuZCBsb2NhbCBsYXcgZW5mb3JjZW1lbnQgcmVsZWFzZXMgdGhlbSBmcm9tIGEgc2FuY3R1YXJ5IGNpdHkuIFRoaXMgaXMgbWl4ZWQgdXAgYm90aCB3YXlzLiBXZSBnb3QgSUNFIHdobydzIHByb2hpYml0ZWQgZnJvbSBkb2luZyB0aGVpciBqb2IsIHdobyBzb21ldGltZXMgd29uJ3Qgd2hlbiB0aGV5IHdhbnQgdG8uIExvY2FsIGxhdyBlbmZvcmNlbWVudCB0aGF0IHdvbid0IGNvb3BlcmF0ZSB3aXRoIElDRSBiZWNhdXNlIEkgc2VudCBvdXQgYSBsZXR0ZXIgYSB5ZWFyIGFuZCBhIGhhbGYgb3Igc28gYWdvIHRoYXQgc2FpZCBJQ0UgZGV0YWluZXJzIGFyZSBhIHJlY29tbWVuZGF0aW9uLiBUaGV5J3JlIG5vIGxvbmdlciBtYW5kYXRvcnkuIENvbmdyZXNzIHBhc3NlZCB0aGUgbGF3IGFuZCBkaXJlY3RlZCB0aGUgRGVwYXJ0bWVudCBvZiBIb21lbGFuZCBTZWN1cml0eSB0byBlc3RhYmxpc2ggdGhlIHJ1bGUgdGhhdCB3b3VsZCBoYXZlIHRoZSBmb3JjZSBhbmQgZWZmZWN0aXZlIGxhdyB0aGF0IElDRSBkZXRhaW5lcnMgYXJlIG1hbmRhdG9yeS4gVGhleSB3cm90ZSB0aGUgcnVsZSB0aGF0IElDRSBkZXRhaW5lcnMgYXJlIG1hbmRhdG9yeS4gQW5kIERhbiBSYWdzZGFsZSwgdGhlIGludGVyaW0gZGlyZWN0b3Igb2YgSUNFLCBpc3N1ZWQgYSBsZXR0ZXIgdGhhdCBzYWlkIHRvIGFsbCBsb2NhbCBsYXcgZW5mb3JjZW1lbnQsICJObywgaXQncyBhIHJlY29tbWVuZGF0aW9uLiBJdCdzIG5vdCBtYW5kYXRvcnkuIiBBbmQgbm93IHdlIGhhdmUgaW4gdGhpcyBjb25mdXNlZCBqdW5rLiBBcml6b25hLCBoZXJlJ3MgVGV4YXMuIFlvdSd2ZSBnb3QgaXQgaW4gdGhlIGhlYXJ0IG9mIHRoZSBoZWFydGxhbmQuIFRob3VnaCB0aGF0J3MgY29sLCB0aGF0J3MgQ29sb3JhZG8gb3ZlciBhbG9uZyB0aGUgRWFzdCBDb2FzdC4gU29tZXRoaW5nIGhhcyBoYXBwZW5lZCBpbiBtb3N0IG9mIHRoZSBzdGF0ZXMgYW5kIHRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcHJvc2VjdXRvcmlhbCBkaXNjcmV0aW9uLiBUaGlzIFByZXNpZGVudCBoYXMsIGhhcyByZWxlYXNlZCwgaGlzIGFkbWluaXN0cmF0aW9uIGhhcyByZWxlYXNlZCBvdmVyIDMwLDAwMCBjcmltaW5hbHMsIGNyaW1pbmFsIGFsaWVucyBvbnRvIHRoZSBzdHJlZXRzIG9mIEFtZXJpY2EuIEFuZCBvZiB0aG9zZSB0aGF0IHRoZXkgcmVsZWFzZWQsIHRoZXJlIGhhdmUgYmVlbiBhdCBsZWFzdCAxMjQgb2YgdGhlbSB3aG8gaGF2ZSBiZWVuIGNoYXJnZWQgd2l0aCBob21pY2lkZSBmb3IgMTM1IG11cmRlcnMuIFRoYXQncyAxMzUgZGVhZCBBbWVyaWNhbnMgdGhhdCB3b3VsZCBiZSBhbGl2ZSB0b2RheSBpZiB0aGUgUHJlc2lkZW50IGRpZG4ndCBoYXZlIHRoZSBwb2xpY3kgb2YgcmVsZWFzaW5nIGNyaW1pbmFsLCBjcmltaW5hbCBhbGllbnMgb250byB0aGUgc3RyZWV0cy4gVGhhdCdzLCB0aGF0J3MgdGhlIG9uZXMgd2Uga25vdyBvZi4gVGhhdCdzIHRoZSBvbmVzIHRoYXQgYXJlIHRoZSByZWNpZGl2aXNtIHdpdGhpbiBhIGZpdmUteWVhciB3aW5kb3cgb2YgdGltZSB3aG9zZSBuYW1lcyB3ZSBrbm93LCB3aG9zZSBpbmNpZGVudHMgd2Uga25vdy4gQnV0IHRoYXQgZG9lc24ndCBpbmNsdWRlIGFueXdoZXJlIG5lYXIgYWxsIG9mIHRoZW0sIE1yLiBTcGVha2VyLiBUaGlzIGlzIGEgbG9jYWwsIHRoaXMgaXMgdGhlIGZhY2Ugb2Ygb25lIG9mIHRoZXNlIHBlcnBldHJhdG9ycywgTWF1cmljaW8gSGVybmFuZGV6LiBXaGF0IGRpZCBoZSBkbz8gTWF1cmljaW8gSGVybmFuZGV6LCBhIHNleHVhbCBwcmVkYXRvciB3aG8gaW1wcmVnbmF0ZWQgYSAxMy15ZWFyLW9sZCBkYXVnaHRlciBvZiBoaXMgbGl2aW5nIGdpcmxmcmllbmQuIEFuZCB0b29rIHRoaXMgcmVwZWF0ZWRseSwgaGFkIHNleHVhbCByZWxhdGlvbnMgd2l0aCBoZXIgaW4gd2F5cyB0aGF0IEkgd29uJ3QgcmVwZWF0IGhlcmUgb24gdGhlIGZsb29yLiBUb29rIGhlciBvZmYgdG8gc29jY2VyIGdhbWVzIHdoZXJlIGhlIGdhdmUuIEhlIGFsc28gZ2F2ZSBoZXIgYW4gYWJvcnRpb24gaW5kdWNpbmcgZHJ1Zy4gQW5kIHNoZSB3ZW50IGludG8gaW50byBhIHBvcnRhIHBvdCBhbmQgaGFkIHRoZSBiYWJ5IHRoYXQgd2FzIGFsaXZlLiBBbmQgaGUgd2VudCBpbiBhbmQgc2F3IHRoYXQgYmFieS4gQW5kIHRoaXMgZ2lybCB3YXMgdGhlbiBoYXVsZWQgaG9tZS4gVGhlIGJhYnkgd2FzIGxlZnQgdG8gZGllLiBUaGF0IGJhYnkgZGllZC4gTWF1cmljaW8gSGVybmFuZGV6IGlzIHRoZSBwZXJwZXRyYXRvci4gSGUncyBhbm90aGVyIGlsbGVnYWwgYWxpZW4uIEFub3RoZXIgb25lIHdobyBoYWQgYmVlbiBlbmNvdW50ZXJlZCBieSBsYXcuIEFub3RoZXIgb25lIHRoYXQgaGFkIGJlZW4gZ3JhbnRlZCB0aGlzIGRlIGZhY3RvIGFtbmVzdHkgYmVjYXVzZSBvZiB0aGUgUHJlc2lkZW50J3MgcG9saWN5LiBBbmQgc28gSSBjYW4gc3RhbmQgaGVyZSwgTXIuIFNwZWFrZXIsIGV2ZXJ5IG5pZ2h0IEkgY291bGQgY29tZSBoZXJlIGFuZCBnaXZlIHlvdSB0aGVzZSBzdGF0cyBhbmQgSSBjYW4gZ2l2ZSB5b3UgdGhlIGRhdGEgb24gdGhlIHRob3VzYW5kcyBvZiBBbWVyaWNhbnMgdGhhdCBhcmUgZGVhZCBhdCB0aGUgaGFuZHMgb2YgdGhlIGNyaW1pbmFsIGFsaWVucyB0aGF0IGhhdmUgYmVlbiBpbmNhcmNlcmF0ZWQgZm9yIGEgdGVtcG9yYXJ5IHBlcmlvZCBvZiB0aW1lIGFuZCByZWxlYXNlZCBieSBtdWx0aXBsZSBqdXJpc2RpY3Rpb25zIGFjcm9zcyB0aGlzIGNvdW50cnkuIEFuZCBldmVyeSBBbWVyaWNhbiB0aGF0IGRpZXMgYXQgdGhlaXIgaGFuZHMgaXMgYSBsaWZlIHRoYXQgY291bGQgYmUgc2F2ZWQgaWYgd2UganVzdCBmb2xsb3dlZCBvdXIgbGF3cy4gVGhhdCdzIHdoYXQncyBhdCBzdGFrZSBoZXJlLiBCdXQgd2UncmUgZ29pbmcgdG8gaGF2ZSB0byBwZXJzb25hbGl6ZSBpdCBiZWNhdXNlIHBlb3BsZSBvdmVyIG9uIHRoaXMgc2lkZSBvZiB0aGUgYWlzbGUgaGF2ZSB0aGVpciBmaW5nZXJzIGluIHRoZWlyIGVhcnMgb24gZGF0YS4gQnV0IHdoZW4gdGhleSBzZWUgdGhlIGZhY2VzLCB3aGVuIHRoZXkgaGVhciB0aGUgYW5ndWlzaCBhbmQgdGhlIHZvaWNlcywgZXNwZWNpYWxseSBvZiB0aGUgbW90aGVycywgb3IgdGhlIHZvaWNlLiBBbmQgSSdsbCBjb25jbHVkZSB3aXRoIHRoaXMsIE1yLiBTcGVha2VyLCBvciB0aGUgdm9pY2Ugb2YgdGhlIGZhdGhlciwgU2NvdHQgUm9vdCwgd2hvIHNhaWQgd2hlbiB0aGV5IGFycmVzdGVkIHRoaXMgcGVycGV0cmF0b3IgdGhhdCBraWxsZWQgaGlzIGRhdWdodGVyLCBoZSB3YXMgb3V0IGJlZm9yZSB0aGV5IGNvdWxkIGJ1cnkgaGlzIGRhdWdodGVyLiBIZSB3YXMgb3V0IG9uICQ1LDAwMCBiYWlsLCB3aGljaCB3YXMgbGVzcyB0aGFuIGl0IGNvc3QgaGltIHRvIGJ1cnkgaGlzIGRhdWdodGVyLiBBbmQgdGhhdCBpbmRpdmlkdWFsIGFic2NvbmRlZCBiYWNrIG91dCBvZiB0aGUgVW5pdGVkIFN0YXRlcywgbm93IG5vdCB0byBiZSByZWFjaGVkIGFnYWluIGJ5IHRoZSBhcm0gb2YgdGhlIGxhdywgd2hpY2ggaXMgbm90IGxvbmcgZW5vdWdoIGJlY2F1c2UgdGhleSBwdXQgaGltIG91dCBvbiBiYWlsLiBJIGRvbid0IHdhbnQgdG8gc2VlIGFueSBtb3JlIGJhaWwgdG8gY3JpbWluYWwgYWxpZW5zLiBJIHdhbnQgdG8gc2VlIGxhdyBlbmZvcmNlbWVudC4gQW5kIEkgd2FudCBhbiBleHBlY3RhdGlvbiB0aGF0IHdoZW4gdGhlIGxhdyBpcyBicm9rZW4gaW4gdGhlIFVuaXRlZCBTdGF0ZXMsIHRoYXQgdGhlcmUncyBnb2luZyB0byBiZSBhbiBlbmZvcmNlbWVudCwgdGhhdCBpdCdsbCBiZSBhcHBsaWVkIGVxdWFsbHkgd2l0aG91dCByZWdhcmQgdG8gYW55IG9mIHRoZXNlIGNhdGVnb3JpZXMgdGhhdCB0aGUgUHJlc2lkZW50IGVuY291cmFnZXMgdXMgdG8gYmUgbWVtYmVycyBvZi4gVGhhdCBiZWluZyBvbmUgb2YgR29kJ3MgY2hpbGRyZW4gaXMgZ29vZCBlbm91Z2ggdG8gYmUgcHJvdGVjdGVkIGJ5IHRoZSBsYXcsIGJ1dCBldmVyeWJvZHkgdHJlYXRlZCBlcXVhbGx5LiBTZWN1cmUgb3VyIGJvcmRlcnMuIFJlc3RvcmUgdGhlaXIgcmVzcGVjdCBmb3IgdGhlIHJ1bGUgb2YgbGF3LiBTYXZlIHRoZXNlIGxpdmVzLiBTZW5kIHRoZXNlIHBlb3BsZSBpbnRvIHByaXNvbi4gQW5kIHdoZW4gdGhleSdyZSBkb25lLCBzZW5kIHRoZW0gYmFjayB0byB0aGUgY291bnRyeSB0aGF0IHRoZXkgY2FuIGxpdmUgaW4gbGVnYWxseSBmb3IgdGhlIHJlc3Qgb2YgdGhlaXIgbGl2ZXMgaWYgdGhleSBkb24ndCBzdGF5IGluIG91ciBwcmlzb25zIGZvciB0aGUgcmVzdCBvZiB0aGVpciBsaXZlcy4gTXIuIFNwZWFrZXIsIHRoaXMgaXMgYW4gaW5mdXJpYXRpbmcgdG9waWMgdGhhdCBBbWVyaWNhIG5lZWRzIHRvIGtub3cgYSBsb3QgbW9yZSBhYm91dC4gQW5kIEknZCBhc2sgTXIuIFNwZWFrZXIgdGhhdCB0aGlzIGNvdW50cnkga2VlcCB0aGUgZmFtaWxpZXMgb2YgdGhlc2UgdmljdGltcyBpbiB0aGVpciBwcmF5ZXJzIGV2ZXJ5IGRheSB1bnRpbCBzdWNoIHRpbWUgYXMgd2UgcmVzdC4=\n\n\n---\n\nBegin analysis now for batch `batch_24c26ee8f914`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Constitutional Health Framework (CHF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis conducted using the sequential multi-layer approach of the CHF, focusing on textual evidence for each dimension before integration.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"steve_king_2017_house_floor.txt\",\n      \"dimensional_scores\": {\n        \"procedural_legitimacy\": {\n          \"raw_score\": 0.45,\n          \"salience\": 0.60,\n          \"confidence\": 0.70\n        },\n        \"procedural_rejection\": {\n          \"raw_score\": 0.65,\n          \"salience\": 0.75,\n          \"confidence\": 0.80\n        },\n        \"institutional_respect\": {\n          \"raw_score\": 0.30,\n          \"salience\": 0.40,\n          \"confidence\": 0.65\n        },\n        \"institutional_subversion\": {\n          \"raw_score\": 0.70,\n          \"salience\": 0.70,\n          \"confidence\": 0.75\n        },\n        \"systemic_continuity\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.30,\n          \"confidence\": 0.60\n        },\n        \"systemic_replacement\": {\n          \"raw_score\": 0.80,\n          \"salience\": 0.85,\n          \"confidence\": 0.85\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"procedural_legitimacy\",\n          \"quote_text\": \"We have a lame duck President who has made appointments to the Supreme Court who seem to believe that the Constitution means what they want it to mean and they want to read it uh to say what they want it to say rather than what it actually says and rather than what it actually was understood to mean at the time of its ratification.\",\n          \"confidence\": 0.70,\n          \"context_type\": \"procedural_language\"\n        },\n        {\n          \"dimension\": \"procedural_rejection\",\n          \"quote_text\": \"But it's no longer possible to look at this Supreme Court and discern what a likely decision of the Court might be by studying the text of the Constitution and the text of the law because we have a court that will write, make it up as they go along, write laws.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"process_dismissal\"\n        },\n        {\n          \"dimension\": \"institutional_respect\",\n          \"quote_text\": \"The Senate writes its own rules just like the House writes its own rules, Mr. Speaker. And so I'd like to put this back in perspective here.\",\n          \"confidence\": 0.65,\n          \"context_type\": \"authority_recognition\"\n        },\n        {\n          \"dimension\": \"institutional_subversion\",\n          \"quote_text\": \"And now this court has twisted it into a command that there's no difference between a man and a woman when it comes to joining them together in matrimony.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"authority_attacks\"\n        },\n        {\n          \"dimension\": \"systemic_continuity\",\n          \"quote_text\": \"We have a Constitution to preserve, protect, defend, and defend. And so our obligation then is to say, 'Mr. President, you're lame duck. Let's stick with the tradition. Let's stick with the practice.'\",\n          \"confidence\": 0.60,\n          \"context_type\": \"stability_language\"\n        },\n        {\n          \"dimension\": \"systemic_replacement\",\n          \"quote_text\": \"They made it up. And they wrapped themselves in the cloak of constitutional authority in Marbury versus Madison and a whole series of presumably precedent cases.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"revolution_rhetoric\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":67594,"response_length":3696,"metadata":{"batch_id":"batch_24c26ee8f914","mathematical_validation":true,"tokens_input":365,"tokens_output":393},"session_id":"20250805T162415Z_9b003ed1","timestamp":"2025-08-05T16:24:48.132456+00:00"}
