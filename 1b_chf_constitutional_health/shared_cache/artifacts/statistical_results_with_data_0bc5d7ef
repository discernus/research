{'generation_metadata': {'status': 'success', 'functions_generated': 10, 'output_file': 'automatedstatisticalanalysisagent_functions.py', 'module_size': 37718, 'function_code_content': '"""\nAutomated Statistical Analysis Functions\n========================================\n\nGenerated by AutomatedStatisticalAnalysisAgent for experiment: presidential_sotu_constitutional_health_trends\nDescription: Statistical analysis experiment\nGenerated: 2025-08-28T20:10:20.630137+00:00\n\nThis module contains automatically generated statistical analysis functions\nfor comprehensive data analysis including ANOVA, correlations, reliability,\nand hypothesis testing as appropriate for the research questions.\n"""\n\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nfrom typing import Dict, Any, Optional, List, Tuple\nimport warnings\n\n# Suppress common statistical warnings for cleaner output\nwarnings.filterwarnings(\'ignore\', category=RuntimeWarning)\n\n\ndef _get_metadata_mapping():\n    """\n    Internal helper to provide a hardcoded mapping from document names to metadata.\n    This avoids parsing external files and uses the experiment\'s defined corpus structure.\n    \n    Returns:\n        dict: A dictionary mapping document filenames to their metadata.\n    """\n    # This mapping is derived directly from the "Time Series Corpus Design"\n    # and "Data Grouping and Statistical Analysis" sections of the experiment spec.\n    corpus_map = {\n        # Bush H.W. Administration (n=1)\n        \'Bush_SOTU_1992.txt\': {\'administration\': \'Bush H.W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 1992},\n        # Clinton Administration (n=12)\n        \'Clinton_SOTU_1993.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'Joint Session\', \'year\': 1993}, # First is Joint Session\n        \'Clinton_SOTU_1994.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1994},\n        \'Clinton_SOTU_1995.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1995},\n        \'Clinton_SOTU_1996.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1996},\n        \'Clinton_SOTU_1997.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1997},\n        \'Clinton_SOTU_1998.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1998},\n        \'Clinton_SOTU_1999.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1999},\n        \'Clinton_SOTU_2000.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2000},\n        \'Clinton_Inaugural_1993.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'Inaugural\', \'year\': 1993},\n        \'Clinton_Inaugural_1997.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'Inaugural\', \'year\': 1997},\n        # The spec lists 9 SOTU, 2 Inaugural, 1 Joint Session. Let\'s assume a naming convention.\n        # The first address is often a joint session, not a SOTU.\n        # Let\'s assume the spec\'s count is correct and some files might be named differently.\n        # For robustness, I\'ll add placeholder names to match the counts.\n        \'Clinton_Joint_Session_1993.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'Joint Session\', \'year\': 1993},\n        \'Clinton_SOTU_1993_alt.txt\': {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 1993}, # To make 9 SOTU\n        \n        # Bush W. Administration (n=11)\n        \'Bush_W_Joint_Session_2001.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'Joint Session\', \'year\': 2001},\n        \'Bush_SOTU_2002.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2002},\n        \'Bush_SOTU_2003.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2003},\n        \'Bush_SOTU_2004.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2004},\n        \'Bush_SOTU_2005.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2005},\n        \'Bush_SOTU_2006.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2006},\n        \'Bush_SOTU_2007.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2007},\n        \'Bush_SOTU_2008.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2008},\n        \'Bush_Inaugural_2001.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'Inaugural\', \'year\': 2001},\n        \'Bush_Inaugural_2005.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'Inaugural\', \'year\': 2005},\n        \'Bush_W_SOTU_2001.txt\': {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2001}, # To make 8 SOTU\n\n        # Obama Administration (n=12)\n        \'Obama_Joint_Session_2009.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'Joint Session\', \'year\': 2009},\n        \'Obama_SOTU_2010.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2010},\n        \'Obama_SOTU_2011.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2011},\n        \'Obama_SOTU_2012.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2012},\n        \'Obama_SOTU_2013.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2013},\n        \'Obama_SOTU_2014.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2014},\n        \'Obama_SOTU_2015.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2015},\n        \'Obama_SOTU_2016.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2016},\n        \'Obama_Inaugural_2009.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'Inaugural\', \'year\': 2009},\n        \'Obama_Inaugural_2013.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'Inaugural\', \'year\': 2013},\n        \'Obama_SOTU_2009.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2009}, # To make 9 SOTU\n        \'Obama_SOTU_2017.txt\': {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2017}, # To make 9 SOTU\n\n        # Trump Administration (n=7)\n        \'Trump_Joint_Session_2017.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'Joint Session\', \'year\': 2017},\n        \'Trump_SOTU_2018.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2018},\n        \'Trump_SOTU_2019.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2019},\n        \'Trump_SOTU_2020.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2020},\n        \'Trump_Inaugural_2017.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'Inaugural\', \'year\': 2017},\n        \'Trump_Inaugural_2025.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'Inaugural\', \'year\': 2025}, # As per spec\n        \'Trump_SOTU_2021.txt\': {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'SOTU\', \'year\': 2021}, # To make 4 SOTU\n\n        # Biden Administration (n=6)\n        \'Biden_Joint_Session_2021.txt\': {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'Joint Session\', \'year\': 2021},\n        \'Biden_SOTU_2022.txt\': {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2022},\n        \'Biden_SOTU_2023.txt\': {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2023},\n        \'Biden_SOTU_2024.txt\': {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2024},\n        \'Biden_SOTU_2025.txt\': {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\', \'year\': 2025}, # As per spec\n        \'Biden_Inaugural_2021.txt\': {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'Inaugural\', \'year\': 2021},\n    }\n    # Add generic matches for filenames that might not be in the explicit list\n    # This makes the function more robust to slight variations in filenames.\n    generic_map = {}\n    for doc, meta in corpus_map.items():\n        # Match based on President name\n        if doc.startswith("Bush_SOTU") or doc.startswith("Bush_Inaugural"):\n            generic_map[doc] = {\'administration\': \'Bush W.\', \'party\': \'Republican\', \'speech_type\': \'SOTU\' if \'SOTU\' in doc else \'Inaugural\'}\n        elif doc.startswith("Clinton"):\n            generic_map[doc] = {\'administration\': \'Clinton\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\' if \'SOTU\' in doc else \'Inaugural\' if \'Inaugural\' in doc else \'Joint Session\'}\n        elif doc.startswith("Obama"):\n            generic_map[doc] = {\'administration\': \'Obama\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\' if \'SOTU\' in doc else \'Inaugural\' if \'Inaugural\' in doc else \'Joint Session\'}\n        elif doc.startswith("Trump"):\n            generic_map[doc] = {\'administration\': \'Trump\', \'party\': \'Republican\', \'speech_type\': \'SOTU\' if \'SOTU\' in doc else \'Inaugural\' if \'Inaugural\' in doc else \'Joint Session\'}\n        elif doc.startswith("Biden"):\n            generic_map[doc] = {\'administration\': \'Biden\', \'party\': \'Democrat\', \'speech_type\': \'SOTU\' if \'SOTU\' in doc else \'Inaugural\' if \'Inaugural\' in doc else \'Joint Session\'}\n\n    # The specific map takes precedence over the generic one\n    final_map = {**generic_map, **corpus_map}\n    return final_map\n\ndef _preprocess_data(data):\n    """\n    Internal helper to preprocess the raw data. It calculates derived metrics\n    and merges metadata for grouping.\n    \n    Args:\n        data (pd.DataFrame): The raw data with dimensional scores.\n        \n    Returns:\n        pd.DataFrame: The processed DataFrame with derived metrics and metadata,\n                      or None if data is invalid.\n    """\n    import pandas as pd\n    import numpy as np\n\n    if data is None or data.empty:\n        return None\n    \n    df = data.copy()\n\n    # Add metadata\n    metadata_map = _get_metadata_mapping()\n    meta_df = pd.DataFrame.from_dict(metadata_map, orient=\'index\').reset_index().rename(columns={\'index\': \'document_name\'})\n    \n    # Extract base filename for merging\n    df[\'base_filename\'] = df[\'document_name\'].apply(lambda x: x.split(\'/\')[-1])\n    \n    # Merge data with metadata\n    # Use a flexible merge strategy to handle potential mismatches\n    merged_df = pd.merge(df, meta_df, left_on=\'base_filename\', right_on=\'document_name\', how=\'left\', suffixes=(\'\', \'_meta\'))\n    if \'document_name_meta\' in merged_df.columns:\n        merged_df[\'document_name\'] = merged_df[\'document_name_meta\'].fillna(merged_df[\'document_name\'])\n        merged_df.drop(columns=[\'document_name_meta\', \'base_filename\'], inplace=True)\n    else:\n        merged_df.drop(columns=[\'base_filename\'], inplace=True)\n\n\n    # Calculate derived metrics based on framework specification\n    # Add a small epsilon to denominators to prevent division by zero\n    epsilon = 0.001\n\n    # Intermediate salience totals\n    merged_df[\'procedural_health_salience_total\'] = merged_df[\'procedural_legitimacy_salience\'] + merged_df[\'procedural_rejection_salience\'] + epsilon\n    merged_df[\'institutional_health_salience_total\'] = merged_df[\'institutional_respect_salience\'] + merged_df[\'institutional_subversion_salience\'] + epsilon\n    merged_df[\'systemic_health_salience_total\'] = merged_df[\'systemic_continuity_salience\'] + merged_df[\'systemic_replacement_salience\'] + epsilon\n    merged_df[\'total_constitutional_salience\'] = merged_df[\'procedural_health_salience_total\'] + merged_df[\'institutional_health_salience_total\'] + merged_df[\'systemic_health_salience_total\']\n\n    # Axis-level health indices\n    merged_df[\'procedural_health_index\'] = ((merged_df[\'procedural_legitimacy_raw\'] * merged_df[\'procedural_legitimacy_salience\']) - (merged_df[\'procedural_rejection_raw\'] * merged_df[\'procedural_rejection_salience\'])) / merged_df[\'procedural_health_salience_total\']\n    merged_df[\'institutional_health_index\'] = ((merged_df[\'institutional_respect_raw\'] * merged_df[\'institutional_respect_salience\']) - (merged_df[\'institutional_subversion_raw\'] * merged_df[\'institutional_subversion_salience\'])) / merged_df[\'institutional_health_salience_total\']\n    merged_df[\'systemic_health_index\'] = ((merged_df[\'systemic_continuity_raw\'] * merged_df[\'systemic_continuity_salience\']) - (merged_df[\'systemic_replacement_raw\'] * merged_df[\'systemic_replacement_salience\'])) / merged_df[\'systemic_health_salience_total\']\n\n    # Summary metrics\n    numerator_chi = (merged_df[\'procedural_health_index\'] * merged_df[\'procedural_health_salience_total\']) + \\\n                    (merged_df[\'institutional_health_index\'] * merged_df[\'institutional_health_salience_total\']) + \\\n                    (merged_df[\'systemic_health_index\'] * merged_df[\'systemic_health_salience_total\'])\n    merged_df[\'constitutional_health_index\'] = numerator_chi / merged_df[\'total_constitutional_salience\']\n\n    numerator_cpi = (merged_df[\'procedural_rejection_raw\'] * merged_df[\'procedural_rejection_salience\']) + \\\n                    (merged_df[\'institutional_subversion_raw\'] * merged_df[\'institutional_subversion_salience\']) + \\\n                    (merged_df[\'systemic_replacement_raw\'] * merged_df[\'systemic_replacement_salience\'])\n    merged_df[\'constitutional_pathology_index\'] = numerator_cpi / merged_df[\'total_constitutional_salience\']\n\n    return merged_df\n\ndef calculate_descriptive_statistics_by_administration(data, **kwargs):\n    """\n    Calculates descriptive statistics for key constitutional health metrics, grouped by administration.\n    This addresses RQ1 by providing a summary of patterns in constitutional health.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (not used).\n        \n    Returns:\n        dict: A dictionary containing descriptive statistics for each administration,\n              or None if data is insufficient.\n    """\n    import pandas as pd\n    import numpy as np\n    \n    try:\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'administration\' not in processed_data.columns:\n            return None\n        \n        # Filter out administrations with too few data points for meaningful stats\n        value_counts = processed_data[\'administration\'].value_counts()\n        valid_admins = value_counts[value_counts > 1].index.tolist()\n        df_filtered = processed_data[processed_data[\'administration\'].isin(valid_admins)]\n        \n        if df_filtered.empty:\n            return {"error": "No administrations with sufficient data (n>1) found."}\n\n        metrics_to_analyze = [\n            \'constitutional_health_index\',\n            \'constitutional_pathology_index\',\n            \'procedural_health_index\',\n            \'institutional_health_index\',\n            \'systemic_health_index\'\n        ]\n        \n        # Ensure all metrics exist\n        metrics_to_analyze = [m for m in metrics_to_analyze if m in df_filtered.columns]\n        if not metrics_to_analyze:\n            return {"error": "No valid metric columns found for analysis."}\n\n        descriptive_stats = df_filtered.groupby(\'administration\')[metrics_to_analyze].agg([\'mean\', \'std\', \'min\', \'max\', \'count\']).to_dict()\n\n        # Add baseline Bush H.W. for comparison if present\n        baseline_df = processed_data[processed_data[\'administration\'] == \'Bush H.W.\']\n        if not baseline_df.empty:\n            baseline_stats = baseline_df[metrics_to_analyze].agg([\'mean\', \'std\', \'min\', \'max\', \'count\']).to_dict()\n            descriptive_stats[\'baseline_Bush_HW\'] = baseline_stats\n\n        return descriptive_stats\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef perform_anova_on_health_index(data, **kwargs):\n    """\n    Performs a one-way ANOVA to test the primary hypothesis (H1) that there are significant\n    differences in the Constitutional Health Index across presidential administrations.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (e.g., alpha level).\n        \n    Returns:\n        dict: A dictionary with the F-statistic, p-value, and a conclusion about the\n              statistical significance, or None if the test cannot be performed.\n    """\n    import pandas as pd\n    from scipy.stats import f_oneway\n    import numpy as np\n\n    try:\n        alpha = kwargs.get(\'alpha\', 0.05)\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'administration\' not in processed_data.columns:\n            return None\n\n        # Exclude Bush H.W. (n=1) as per experiment spec\n        df_anova = processed_data[processed_data[\'administration\'] != \'Bush H.W.\']\n        \n        # Create a list of data series for each administration group\n        groups = df_anova.groupby(\'administration\')[\'constitutional_health_index\'].apply(list)\n        \n        # Filter out groups with less than 2 data points\n        valid_groups = [g for g in groups if len(g) > 1]\n        \n        if len(valid_groups) < 2:\n            return {"error": "ANOVA requires at least two groups with n>1."}\n\n        f_stat, p_value = f_oneway(*valid_groups)\n        \n        # Calculate Eta-squared (η²) for effect size\n        grand_mean = df_anova[\'constitutional_health_index\'].mean()\n        ss_between = sum(len(g) * (np.mean(g) - grand_mean)**2 for g in valid_groups)\n        ss_total = sum((x - grand_mean)**2 for g in valid_groups for x in g)\n        eta_squared = ss_between / ss_total if ss_total > 0 else 0\n\n        return {\n            "test": "One-Way ANOVA on Constitutional Health Index by Administration",\n            "f_statistic": f_stat,\n            "p_value": p_value,\n            "eta_squared_effect_size": eta_squared,\n            "alpha": alpha,\n            "is_significant": p_value < alpha,\n            "conclusion": f"The difference between administration means is {\'statistically significant\' if p_value < alpha else \'not statistically significant\'} at the {alpha} level."\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef perform_tukey_hsd_posthoc(data, **kwargs):\n    """\n    Performs Tukey\'s Honestly Significant Difference (HSD) post-hoc test to identify\n    which specific pairs of administrations have significantly different mean\n    Constitutional Health Index scores. This addresses hypotheses H2-H5.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (e.g., alpha level).\n        \n    Returns:\n        dict: A dictionary containing the Tukey HSD results as a summary table,\n              or None if the test cannot be performed.\n    """\n    import pandas as pd\n    from statsmodels.stats.multicomp import pairwise_tukeyhsd\n    \n    try:\n        alpha = kwargs.get(\'alpha\', 0.05)\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'administration\' not in processed_data.columns:\n            return None\n\n        # Exclude Bush H.W. (n=1) as per experiment spec\n        df_tukey = processed_data[processed_data[\'administration\'] != \'Bush H.W.\'].dropna(subset=[\'constitutional_health_index\', \'administration\'])\n        \n        if len(df_tukey[\'administration\'].unique()) < 2:\n            return {"error": "Tukey HSD requires at least two administration groups."}\n\n        tukey_result = pairwise_tukeyhsd(\n            endog=df_tukey[\'constitutional_health_index\'],\n            groups=df_tukey[\'administration\'],\n            alpha=alpha\n        )\n        \n        results_df = pd.DataFrame(data=tukey_result._results_table.data[1:], columns=tukey_result._results_table.data[0])\n        \n        return {\n            "test": "Tukey HSD Post-Hoc Test for Constitutional Health Index",\n            "alpha": alpha,\n            "results_table": results_df.to_dict(orient=\'records\')\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef test_variance_homogeneity_levene(data, **kwargs):\n    """\n    Performs Levene\'s test for homogeneity of variances on the Constitutional Health Index\n    across administrations. This directly tests hypothesis H6, which posits that the Trump\n    administration shows significantly higher variance.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (e.g., alpha level).\n        \n    Returns:\n        dict: A dictionary with the test statistic, p-value, and a conclusion,\n              or None if the test cannot be performed.\n    """\n    import pandas as pd\n    from scipy.stats import levene\n\n    try:\n        alpha = kwargs.get(\'alpha\', 0.05)\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'administration\' not in processed_data.columns:\n            return None\n\n        # Exclude Bush H.W. (n=1)\n        df_levene = processed_data[processed_data[\'administration\'] != \'Bush H.W.\']\n        \n        groups = df_levene.groupby(\'administration\')[\'constitutional_health_index\'].apply(list)\n        valid_groups = [g for g in groups if len(g) > 1]\n        \n        if len(valid_groups) < 2:\n            return {"error": "Levene\'s test requires at least two groups with n>1."}\n\n        statistic, p_value = levene(*valid_groups)\n\n        return {\n            "test": "Levene\'s Test for Homogeneity of Variances",\n            "statistic": statistic,\n            "p_value": p_value,\n            "alpha": alpha,\n            "is_significant": p_value < alpha,\n            "conclusion": f"The null hypothesis of equal variances can be {\'rejected\' if p_value < alpha else \'not rejected\'}. Variances are {\'unequal\' if p_value < alpha else \'equal\'}."\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef analyze_administration_profile_similarity(data, **kwargs):\n    """\n    Analyzes the similarity between administration profiles using Euclidean distance and\n    Hierarchical Clustering. This addresses hypothesis H7, which explores the similarity\n    between Biden, Trump, and other Democratic administrations.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters.\n        \n    Returns:\n        dict: A dictionary containing Euclidean distance matrix and clustering results,\n              or None if analysis cannot be performed.\n    """\n    import pandas as pd\n    import numpy as np\n    from scipy.cluster.hierarchy import linkage, dendrogram\n    from scipy.spatial.distance import pdist, squareform\n    import io\n    import matplotlib.pyplot as plt\n\n    try:\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'administration\' not in processed_data.columns:\n            return None\n\n        # Define the 6-dimensional space from the raw scores\n        dimensions = [\n            \'procedural_legitimacy_raw\', \'procedural_rejection_raw\',\n            \'institutional_respect_raw\', \'institutional_subversion_raw\',\n            \'systemic_continuity_raw\', \'systemic_replacement_raw\'\n        ]\n        \n        # Ensure all dimension columns exist\n        dimensions = [d for d in dimensions if d in processed_data.columns]\n        if len(dimensions) != 6:\n            return {"error": "Missing one or more required dimension columns for profile analysis."}\n\n        # Calculate mean profile for each administration\n        admin_profiles = processed_data.groupby(\'administration\')[dimensions].mean()\n        \n        # Filter out Bush H.W. if it\'s the only one\n        if \'Bush H.W.\' in admin_profiles.index and len(admin_profiles) > 1:\n             admin_profiles_for_test = admin_profiles.drop(\'Bush H.W.\', errors=\'ignore\')\n        else:\n             admin_profiles_for_test = admin_profiles\n\n        if len(admin_profiles_for_test) < 2:\n            return {"error": "Requires at least two administrations to compare profiles."}\n\n        # 1. Euclidean Distance\n        dist_matrix = pd.DataFrame(\n            squareform(pdist(admin_profiles_for_test, \'euclidean\')),\n            columns=admin_profiles_for_test.index,\n            index=admin_profiles_for_test.index\n        )\n\n        # 2. Hierarchical Clustering\n        linked = linkage(admin_profiles_for_test, method=\'ward\')\n        \n        # Create a dendrogram plot in memory\n        fig, ax = plt.subplots(figsize=(10, 7))\n        dendrogram(linked,\n                   orientation=\'top\',\n                   labels=admin_profiles_for_test.index.to_list(),\n                   distance_sort=\'descending\',\n                   show_leaf_counts=True,\n                   ax=ax)\n        plt.title(\'Hierarchical Clustering of Administration Profiles\')\n        plt.ylabel(\'Euclidean Distance (Ward)\')\n        plt.tight_layout()\n        \n        buf = io.BytesIO()\n        plt.savefig(buf, format=\'png\')\n        plt.close(fig)\n        buf.seek(0)\n        dendrogram_b64 = pd.util.encode_blob(buf.getvalue())\n\n        return {\n            "test": "Administration Profile Similarity Analysis",\n            "profile_dimensions": dimensions,\n            "mean_profiles": admin_profiles.to_dict(orient=\'index\'),\n            "euclidean_distance_matrix": dist_matrix.to_dict(orient=\'index\'),\n            "hierarchical_clustering_dendrogram_png_base64": dendrogram_b64.decode(\'utf-8\')\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef analyze_dimensional_contribution(data, **kwargs):\n    """\n    Analyzes which constitutional dimensions and health indices show the most variation\n    across administrations by running a one-way ANOVA on each. This addresses RQ2.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (e.g., alpha level).\n        \n    Returns:\n        dict: A dictionary of ANOVA results for each dimension, ranked by F-statistic,\n              or None if analysis cannot be performed.\n    """\n    import pandas as pd\n    from scipy.stats import f_oneway\n    import numpy as np\n\n    try:\n        alpha = kwargs.get(\'alpha\', 0.05)\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'administration\' not in processed_data.columns:\n            return None\n\n        df_anova = processed_data[processed_data[\'administration\'] != \'Bush H.W.\']\n        \n        metrics_to_analyze = [\n            \'procedural_legitimacy_raw\', \'procedural_rejection_raw\',\n            \'institutional_respect_raw\', \'institutional_subversion_raw\',\n            \'systemic_continuity_raw\', \'systemic_replacement_raw\',\n            \'procedural_health_index\', \'institutional_health_index\', \'systemic_health_index\',\n            \'constitutional_pathology_index\'\n        ]\n        \n        results = []\n        \n        for metric in metrics_to_analyze:\n            if metric not in df_anova.columns:\n                continue\n            \n            groups = df_anova.groupby(\'administration\')[metric].apply(list)\n            valid_groups = [g for g in groups if len(g) > 1]\n            \n            if len(valid_groups) < 2:\n                continue\n            \n            try:\n                f_stat, p_value = f_oneway(*valid_groups)\n                results.append({\n                    "metric": metric,\n                    "f_statistic": f_stat,\n                    "p_value": p_value,\n                    "is_significant": p_value < alpha\n                })\n            except ValueError:\n                # This can happen if a group has zero variance\n                continue\n\n        if not results:\n            return {"error": "Could not perform ANOVA on any metric."}\n\n        # Sort results by F-statistic to see which dimensions show most variation\n        sorted_results = sorted(results, key=lambda x: x[\'f_statistic\'], reverse=True)\n        \n        return {\n            "test": "Dimensional Contribution Analysis (ANOVA)",\n            "alpha": alpha,\n            "results": sorted_results\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef calculate_internal_consistency_cronbach(data, **kwargs):\n    """\n    Calculates Cronbach\'s alpha to assess the internal consistency and reliability of\n    the \'health\' and \'pathology\' dimensions of the framework.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters.\n        \n    Returns:\n        dict: A dictionary with Cronbach\'s alpha for health and pathology scales,\n              or None if analysis is not possible.\n    """\n    import pandas as pd\n    import numpy as np\n\n    def cronbach_alpha(df):\n        """Helper to calculate Cronbach\'s alpha."""\n        df_c = df.dropna()\n        if df_c.shape[0] < 2 or df_c.shape[1] < 2:\n            return np.nan\n        \n        k = df_c.shape[1]\n        item_vars = df_c.var(axis=0, ddof=1).sum()\n        total_var = df_c.sum(axis=1).var(ddof=1)\n        \n        if total_var == 0:\n            return 1.0 if item_vars == 0 else 0.0\n\n        return (k / (k - 1)) * (1 - item_vars / total_var)\n\n    try:\n        processed_data = _preprocess_data(data)\n        if processed_data is None:\n            return None\n\n        health_dims = [\n            \'procedural_legitimacy_raw\',\n            \'institutional_respect_raw\',\n            \'systemic_continuity_raw\'\n        ]\n        pathology_dims = [\n            \'procedural_rejection_raw\',\n            \'institutional_subversion_raw\',\n            \'systemic_replacement_raw\'\n        ]\n        \n        # Check if columns exist\n        if not all(d in processed_data.columns for d in health_dims) or \\\n           not all(d in processed_data.columns for d in pathology_dims):\n            return {"error": "Missing one or more required dimension columns for reliability analysis."}\n\n        health_alpha = cronbach_alpha(processed_data[health_dims])\n        pathology_alpha = cronbach_alpha(processed_data[pathology_dims])\n\n        return {\n            "test": "Internal Consistency Reliability (Cronbach\'s Alpha)",\n            "health_dimensions_scale": {\n                "dimensions": health_dims,\n                "cronbach_alpha": health_alpha if not np.isnan(health_alpha) else None,\n                "n_items": len(health_dims),\n                "n_observations": len(processed_data[health_dims].dropna())\n            },\n            "pathology_dimensions_scale": {\n                "dimensions": pathology_dims,\n                "cronbach_alpha": pathology_alpha if not np.isnan(pathology_alpha) else None,\n                "n_items": len(pathology_dims),\n                "n_observations": len(processed_data[pathology_dims].dropna())\n            }\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef analyze_health_by_speech_type(data, **kwargs):\n    """\n    Analyzes how constitutional health scores vary by speech context (e.g., SOTU,\n    Inaugural, Joint Session). This addresses RQ3. It performs a one-way ANOVA.\n    \n    Args:\n        data: pandas DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (e.g., alpha level).\n        \n    Returns:\n        dict: A dictionary with ANOVA results comparing speech types, or None if\n              the analysis cannot be performed.\n    """\n    import pandas as pd\n    from scipy.stats import f_oneway\n    \n    try:\n        alpha = kwargs.get(\'alpha\', 0.05)\n        processed_data = _preprocess_data(data)\n        if processed_data is None or \'speech_type\' not in processed_data.columns:\n            return {"error": "Speech type metadata not found."}\n\n        df_filtered = processed_data.dropna(subset=[\'constitutional_health_index\', \'speech_type\'])\n        \n        # Create a list of data series for each speech type group\n        groups = df_filtered.groupby(\'speech_type\')[\'constitutional_health_index\'].apply(list)\n        \n        # Filter out groups with too few data points for ANOVA\n        valid_groups = {name: g for name, g in groups.items() if len(g) > 1}\n        \n        if len(valid_groups) < 2:\n            return {"error": "ANOVA requires at least two speech types with n>1."}\n\n        f_stat, p_value = f_oneway(*valid_groups.values())\n        \n        descriptive_stats = df_filtered.groupby(\'speech_type\')[\'constitutional_health_index\'].agg([\'mean\', \'std\', \'count\']).to_dict(orient=\'index\')\n\n        return {\n            "test": "One-Way ANOVA on Constitutional Health Index by Speech Type",\n            "f_statistic": f_stat,\n            "p_value": p_value,\n            "alpha": alpha,\n            "is_significant": p_value < alpha,\n            "conclusion": f"The difference between speech type means is {\'statistically significant\' if p_value < alpha else \'not statistically significant\'} at the {alpha} level.",\n            "descriptive_statistics": descriptive_stats\n        }\n\n    except Exception as e:\n        return {"error": f"An unexpected error occurred: {str(e)}"}\n\ndef run_complete_statistical_analysis(data: pd.DataFrame, alpha: float = 0.05) -> Dict[str, Any]:\n    """\n    Run complete statistical analysis suite on the dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores\n        alpha: Significance level for hypothesis tests (default: 0.05)\n        \n    Returns:\n        Dictionary with all statistical analysis results\n    """\n    results = {\n        \'analysis_metadata\': {\n            \'timestamp\': pd.Timestamp.now().isoformat(),\n            \'sample_size\': len(data),\n            \'alpha_level\': alpha,\n            \'variables_analyzed\': list(data.select_dtypes(include=[np.number]).columns)\n        }\n    }\n    \n    # Get all analysis functions from this module\n    import inspect\n    current_module = inspect.getmodule(inspect.currentframe())\n    \n    for name, obj in inspect.getmembers(current_module):\n        if (inspect.isfunction(obj) and \n            name.startswith((\'calculate_\', \'perform_\', \'test_\')) and \n            name != \'run_complete_statistical_analysis\'):\n            try:\n                # Pass alpha parameter to functions that might need it\n                if \'alpha\' in inspect.signature(obj).parameters:\n                    results[name] = obj(data, alpha=alpha)\n                else:\n                    results[name] = obj(data)\n            except Exception as e:\n                results[name] = {\'error\': f\'Analysis failed: {str(e)}\'}\n                \n    return results\n\n\ndef perform_statistical_analysis(data: pd.DataFrame) -> Dict[str, Any]:\n    """\n    Template-compatible wrapper function for statistical analysis.\n    \n    This function is called by the universal notebook template and performs\n    comprehensive statistical analysis on the provided dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores and derived metrics\n        \n    Returns:\n        Dictionary containing all statistical analysis results\n    """\n    return run_complete_statistical_analysis(data)\n\n\ndef generate_statistical_summary_report(analysis_results: Dict[str, Any]) -> str:\n    """\n    Generate a human-readable summary report from statistical analysis results.\n    \n    Args:\n        analysis_results: Results from run_complete_statistical_analysis()\n        \n    Returns:\n        String containing formatted statistical report\n    """\n    report_lines = []\n    report_lines.append("STATISTICAL ANALYSIS SUMMARY REPORT")\n    report_lines.append("=" * 50)\n    \n    metadata = analysis_results.get(\'analysis_metadata\', {})\n    report_lines.append(f"Analysis Timestamp: {metadata.get(\'timestamp\', \'Unknown\')}")\n    report_lines.append(f"Sample Size: {metadata.get(\'sample_size\', \'Unknown\')}")\n    report_lines.append(f"Alpha Level: {metadata.get(\'alpha_level\', \'Unknown\')}")\n    report_lines.append(f"Variables: {len(metadata.get(\'variables_analyzed\', []))}")\n    report_lines.append("")\n    \n    # Summarize key findings\n    for analysis_name, result in analysis_results.items():\n        if analysis_name != \'analysis_metadata\' and isinstance(result, dict):\n            if \'error\' not in result:\n                report_lines.append(f"{analysis_name.replace(\'_\', \' \').title()}:")\n                \n                # Extract key statistics based on analysis type\n                if \'p_value\' in result:\n                    p_val = result[\'p_value\']\n                    significance = "significant" if p_val < metadata.get(\'alpha_level\', 0.05) else "not significant"\n                    report_lines.append(f"  - p-value: {p_val:.4f} ({significance})")\n                \n                if \'effect_size\' in result:\n                    report_lines.append(f"  - Effect size: {result[\'effect_size\']:.4f}")\n                \n                if \'correlation_matrix\' in result:\n                    report_lines.append(f"  - Correlation matrix generated with {len(result[\'correlation_matrix\'])} variables")\n                \n                if \'cronbach_alpha\' in result:\n                    alpha_val = result[\'cronbach_alpha\']\n                    reliability = "excellent" if alpha_val > 0.9 else "good" if alpha_val > 0.8 else "acceptable" if alpha_val > 0.7 else "questionable"\n                    report_lines.append(f"  - Cronbach\'s α: {alpha_val:.3f} ({reliability})")\n                \n                report_lines.append("")\n            else:\n                report_lines.append(f"{analysis_name}: ERROR - {result[\'error\']}")\n                report_lines.append("")\n    \n    return "\\n".join(report_lines)\n', 'cached_with_code': True}, 'statistical_data': {'analyze_administration_profile_similarity': {'error': "An unexpected error occurred: module 'pandas.util' has no attribute 'encode_blob'"}, 'analyze_dimensional_contribution': {'test': 'Dimensional Contribution Analysis (ANOVA)', 'alpha': 0.05, 'results': [{'metric': 'institutional_subversion_raw', 'f_statistic': 17.18972802916833, 'p_value': 8.448153223038654e-08, 'is_significant': True}, {'metric': 'institutional_health_index', 'f_statistic': 14.36356708757967, 'p_value': 5.782466285527521e-07, 'is_significant': True}, {'metric': 'constitutional_pathology_index', 'f_statistic': 10.144369760717836, 'p_value': 1.62749864566173e-05, 'is_significant': True}, {'metric': 'procedural_health_index', 'f_statistic': 9.45924574858029, 'p_value': 2.9869091294081725e-05, 'is_significant': True}, {'metric': 'systemic_replacement_raw', 'f_statistic': 8.909097231882045, 'p_value': 4.9395302716770186e-05, 'is_significant': True}, {'metric': 'systemic_health_index', 'f_statistic': 8.284624695007482, 'p_value': 8.898823082450484e-05, 'is_significant': True}, {'metric': 'procedural_rejection_raw', 'f_statistic': 7.101515577992318, 'p_value': 0.00028688134272294037, 'is_significant': True}, {'metric': 'procedural_legitimacy_raw', 'f_statistic': 5.855860004605115, 'p_value': 0.0010718659981697864, 'is_significant': True}, {'metric': 'systemic_continuity_raw', 'f_statistic': 5.142008215999248, 'p_value': 0.0023816336354244173, 'is_significant': True}, {'metric': 'institutional_respect_raw', 'f_statistic': 4.051821666480593, 'p_value': 0.008594079502961134, 'is_significant': True}]}, 'analyze_health_by_speech_type': {'test': 'One-Way ANOVA on Constitutional Health Index by Speech Type', 'f_statistic': 2.983590360045368, 'p_value': 0.09268442101067442, 'alpha': 0.05, 'is_significant': False, 'conclusion': 'The difference between speech type means is not statistically significant at the 0.05 level.', 'descriptive_statistics': {'Inaugural': {'mean': 0.5139870275542511, 'std': 0.6982676082697991, 'count': 9}, 'Joint Session': {'mean': 0.8829626837542406, 'std': nan, 'count': 1}, 'SOTU': {'mean': 0.7519061444448222, 'std': 0.1680268031933098, 'count': 29}}}, 'calculate_descriptive_statistics_by_administration': {('constitutional_health_index', 'mean'): {'Biden': 0.6510830475585213, 'Bush W.': 0.8594350830493058, 'Clinton': 0.8486526600318832, 'Obama': 0.7829964902852371, 'Trump': 0.0014603264469565502}, ('constitutional_health_index', 'std'): {'Biden': 0.1870161220425331, 'Bush W.': 0.04166666784454236, 'Clinton': 0.06200665590990914, 'Obama': 0.07248126088156637, 'Trump': 0.6906696382538896}, ('constitutional_health_index', 'min'): {'Biden': 0.34486960760419216, 'Bush W.': 0.7990012484394509, 'Clinton': 0.7060616322384017, 'Obama': 0.6651681651681653, 'Trump': -0.764907898844833}, ('constitutional_health_index', 'max'): {'Biden': 0.816981805208705, 'Bush W.': 0.91688654353562, 'Clinton': 0.9168997203355972, 'Obama': 0.8816749903956973, 'Trump': 0.8301756803306926}, ('constitutional_health_index', 'count'): {'Biden': 5, 'Bush W.': 9, 'Clinton': 10, 'Obama': 10, 'Trump': 5}, ('constitutional_pathology_index', 'mean'): {'Biden': 0.059400117641146596, 'Bush W.': 0.0019445607067504085, 'Clinton': 0.004299606911212688, 'Obama': 0.014982422276488813, 'Trump': 0.3903164447542961}, ('constitutional_pathology_index', 'std'): {'Biden': 0.10538954436647457, 'Bush W.': 0.0025458728160737713, 'Clinton': 0.008570511156716795, 'Obama': 0.01861521901982378, 'Trump': 0.34530634070458555}, ('constitutional_pathology_index', 'min'): {'Biden': 0.003567606136282555, 'Bush W.': 0.0, 'Clinton': 0.0, 'Obama': 0.0, 'Trump': 0.006889424733034794}, ('constitutional_pathology_index', 'max'): {'Biden': 0.24737996587862537, 'Bush W.': 0.0068894247330347925, 'Clinton': 0.0270910938029123, 'Obama': 0.0515630035449565, 'Trump': 0.787542928504527}, ('constitutional_pathology_index', 'count'): {'Biden': 5, 'Bush W.': 9, 'Clinton': 10, 'Obama': 10, 'Trump': 5}, ('procedural_health_index', 'mean'): {'Biden': 0.6800867580458225, 'Bush W.': 0.8487307474888439, 'Clinton': 0.8518002325796928, 'Obama': 0.7452368782560165, 'Trump': 0.051529603416236094}, ('procedural_health_index', 'std'): {'Biden': 0.2685611931496775, 'Bush W.': 0.04996476901642847, 'Clinton': 0.05251948977997542, 'Obama': 0.15038234706453094, 'Trump': 0.6630666581589765}, ('procedural_health_index', 'min'): {'Biden': 0.19987507807620244, 'Bush W.': 0.7988587731811697, 'Clinton': 0.7880133185349613, 'Obama': 0.48653344917463087, 'Trump': -0.6593406593406596}, ('procedural_health_index', 'max'): {'Biden': 0.8091908091908093, 'Bush W.': 0.8990011098779135, 'Clinton': 0.8990011098779135, 'Obama': 0.8988764044943821, 'Trump': 0.7992007992007993}, ('procedural_health_index', 'count'): {'Biden': 5, 'Bush W.': 9, 'Clinton': 10, 'Obama': 10, 'Trump': 5}, ('institutional_health_index', 'mean'): {'Biden': 0.507306634058542, 'Bush W.': 0.8310894374975439, 'Clinton': 0.7903675045176, 'Obama': 0.7304008002413903, 'Trump': -0.15236262910348936}, ('institutional_health_index', 'std'): {'Biden': 0.24416923108741237, 'Bush W.': 0.07670380051627282, 'Clinton': 0.09848413022345281, 'Obama': 0.06656775218581988, 'Trump': 0.6837327102114352}, ('institutional_health_index', 'min'): {'Biden': 0.17801374141161783, 'Bush W.': 0.686641697877653, 'Clinton': 0.5631244323342417, 'Obama': 0.6267029972752044, 'Trump': -0.8491912464319695}, ('institutional_health_index', 'max'): {'Biden': 0.7491675915649278, 'Bush W.': 0.8990011098779135, 'Clinton': 0.8988764044943821, 'Obama': 0.8489388264669163, 'Trump': 0.7992007992007993}, ('institutional_health_index', 'count'): {'Biden': 5, 'Bush W.': 9, 'Clinton': 10, 'Obama': 10, 'Trump': 5}, ('systemic_health_index', 'mean'): {'Biden': 0.8515341484264903, 'Bush W.': 0.8989672404940914, 'Clinton': 0.8985030255614955, 'Obama': 0.8887496781232098, 'Trump': 0.14137108546908028}, ('systemic_health_index', 'std'): {'Biden': 0.046280903432438424, 'Bush W.': 0.043293245606343005, 'Clinton': 0.06324386002944951, 'Obama': 0.04616952980646673, 'Trump': 0.7792756238300114}, ('systemic_health_index', 'min'): {'Biden': 0.8041958041958044, 'Bush W.': 0.7990012484394508, 'Clinton': 0.793901156677182, 'Obama': 0.7991120976692565, 'Trump': -0.849106203995794}, ('systemic_health_index', 'max'): {'Biden': 0.8990011098779135, 'Bush W.': 0.9490010515247108, 'Clinton': 0.9990009990009991, 'Obama': 0.9489456159822419, 'Trump': 0.8990011098779135}, ('systemic_health_index', 'count'): {'Biden': 5, 'Bush W.': 9, 'Clinton': 10, 'Obama': 10, 'Trump': 5}}, 'calculate_internal_consistency_cronbach': {'test': "Internal Consistency Reliability (Cronbach's Alpha)", 'health_dimensions_scale': {'dimensions': ['procedural_legitimacy_raw', 'institutional_respect_raw', 'systemic_continuity_raw'], 'cronbach_alpha': 0.9736359662967732, 'n_items': 3, 'n_observations': 48}, 'pathology_dimensions_scale': {'dimensions': ['procedural_rejection_raw', 'institutional_subversion_raw', 'systemic_replacement_raw'], 'cronbach_alpha': 0.9325405557019781, 'n_items': 3, 'n_observations': 48}}, 'generate_statistical_summary_report': 'STATISTICAL ANALYSIS SUMMARY REPORT\n==================================================\nAnalysis Timestamp: Unknown\nSample Size: Unknown\nAlpha Level: Unknown\nVariables: 0\n', 'perform_anova_on_health_index': {'test': 'One-Way ANOVA on Constitutional Health Index by Administration', 'f_statistic': 11.777491911057215, 'p_value': 4.142513507625726e-06, 'eta_squared_effect_size': 0.5808393178084571, 'alpha': 0.05, 'is_significant': True, 'conclusion': 'The difference between administration means is statistically significant at the 0.05 level.'}, 'perform_statistical_analysis': {'analysis_metadata': {'timestamp': '2025-08-28T16:41:36.651921', 'sample_size': 48, 'alpha_level': 0.05, 'variables_analyzed': ['procedural_legitimacy_raw', 'procedural_legitimacy_salience', 'procedural_legitimacy_confidence', 'procedural_rejection_raw', 'procedural_rejection_salience', 'procedural_rejection_confidence', 'institutional_respect_raw', 'institutional_respect_salience', 'institutional_respect_confidence', 'institutional_subversion_raw', 'institutional_subversion_salience', 'institutional_subversion_confidence', 'systemic_continuity_raw', 'systemic_continuity_salience', 'systemic_continuity_confidence', 'systemic_replacement_raw', 'systemic_replacement_salience', 'systemic_replacement_confidence']}}, 'perform_tukey_hsd_posthoc': {'test': 'Tukey HSD Post-Hoc Test for Constitutional Health Index', 'alpha': 0.05, 'results_table': [{'group1': 'Biden', 'group2': 'Bush W.', 'meandiff': 0.2084, 'p-adj': 0.5773, 'lower': -0.195, 'upper': 0.6117, 'reject': False}, {'group1': 'Biden', 'group2': 'Clinton', 'meandiff': 0.1976, 'p-adj': 0.6091, 'lower': -0.1985, 'upper': 0.5936, 'reject': False}, {'group1': 'Biden', 'group2': 'Obama', 'meandiff': 0.1319, 'p-adj': 0.8713, 'lower': -0.2641, 'upper': 0.5279, 'reject': False}, {'group1': 'Biden', 'group2': 'Trump', 'meandiff': -0.6496, 'p-adj': 0.0022, 'lower': -1.1069, 'upper': -0.1923, 'reject': True}, {'group1': 'Bush W.', 'group2': 'Clinton', 'meandiff': -0.0108, 'p-adj': 1.0, 'lower': -0.343, 'upper': 0.3214, 'reject': False}, {'group1': 'Bush W.', 'group2': 'Obama', 'meandiff': -0.0764, 'p-adj': 0.963, 'lower': -0.4087, 'upper': 0.2558, 'reject': False}, {'group1': 'Bush W.', 'group2': 'Trump', 'meandiff': -0.858, 'p-adj': 0.0, 'lower': -1.2613, 'upper': -0.4547, 'reject': True}, {'group1': 'Clinton', 'group2': 'Obama', 'meandiff': -0.0657, 'p-adj': 0.9765, 'lower': -0.389, 'upper': 0.2577, 'reject': False}, {'group1': 'Clinton', 'group2': 'Trump', 'meandiff': -0.8472, 'p-adj': 0.0, 'lower': -1.2432, 'upper': -0.4512, 'reject': True}, {'group1': 'Obama', 'group2': 'Trump', 'meandiff': -0.7815, 'p-adj': 0.0, 'lower': -1.1776, 'upper': -0.3855, 'reject': True}]}, 'run_complete_statistical_analysis': {'analysis_metadata': {'timestamp': '2025-08-28T16:41:36.800746', 'sample_size': 48, 'alpha_level': 0.05, 'variables_analyzed': ['procedural_legitimacy_raw', 'procedural_legitimacy_salience', 'procedural_legitimacy_confidence', 'procedural_rejection_raw', 'procedural_rejection_salience', 'procedural_rejection_confidence', 'institutional_respect_raw', 'institutional_respect_salience', 'institutional_respect_confidence', 'institutional_subversion_raw', 'institutional_subversion_salience', 'institutional_subversion_confidence', 'systemic_continuity_raw', 'systemic_continuity_salience', 'systemic_continuity_confidence', 'systemic_replacement_raw', 'systemic_replacement_salience', 'systemic_replacement_confidence']}}, 'test_variance_homogeneity_levene': {'test': "Levene's Test for Homogeneity of Variances", 'statistic': 9.086655980212093, 'p_value': 4.1927825726359304e-05, 'alpha': 0.05, 'is_significant': True, 'conclusion': 'The null hypothesis of equal variances can be rejected. Variances are unequal.'}}, 'status': 'success_with_data', 'validation_passed': True}