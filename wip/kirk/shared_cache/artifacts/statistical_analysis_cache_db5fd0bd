{
  "batch_id": "stats_20250916T123623Z",
  "statistical_analysis": {
    "batch_id": "stats_20250916T123623Z",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "An expert computational statistical analysis of the provided experiment data is below.\n\n### Methodology Summary\n\nThe statistical analysis was conducted under the **Thin Statistical Analysis Protocol**, adhering to the principles outlined for the experiment. Given the sample size of **N=14 documents**, the analysis is classified as **Tier 3 (Exploratory)**. This tier prioritizes descriptive statistics, effect sizes, and pattern recognition over formal inferential testing (e.g., t-tests, ANOVA), which would be underpowered and potentially misleading with this sample size.\n\nThe methodology included:\n1.  **Data Consolidation:** Parsing 28 analysis artifacts (14 score extractions, 14 derived metrics) and merging them with the corpus manifest metadata to create a unified analysis DataFrame.\n2.  **Descriptive Analysis:** Calculation of central tendency (mean, median) and dispersion (standard deviation, min, max) for all 10 primary dimensions and all derived metrics, providing a comprehensive overview of the dataset.\n3.  **Grouped Pattern Analysis:** The data was segmented by key metadata variables (`political_phase`, `event_type`, `audience`) to explore patterns and test hypotheses H1, H2, and H3 in a descriptive capacity. Mean scores for relevant metrics were compared across groups to identify trends.\n4.  **Correlation Analysis:** A Spearman rank-order correlation was performed to assess monotonic relationships between key CFF dimensions and derived metrics. Spearman was chosen for its robustness with non-normally distributed data and small sample sizes.\n5.  **Internal Consistency Check:** Cronbach's alpha was calculated for the \"cohesive\" and \"fragmentative\" constructs of the CFF framework to assess the internal reliability of these dimension groupings within this specific corpus.\n\nAll analyses were performed with the explicit understanding that the findings are exploratory and serve to identify patterns and generate hypotheses for future, larger-scale research.\n\n### Sample Size Assessment\n\n*   **Total Documents:** 14\n*   **Tier Classification:** TIER 3 (Exploratory Analysis, N < 15)\n*   **Power Notes:** The sample size is insufficient for well-powered inferential statistical tests (e.g., ANOVA, t-tests). Consequently, the analysis focuses on descriptive statistics, pattern detection, and effect sizes where appropriate. All findings should be interpreted as exploratory and indicative of potential trends rather than confirmatory conclusions. The primary goal is to address the research questions through descriptive comparison and pattern analysis as specified in the experimental design.\n\n### Statistical Functions\n\n```python\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nimport pingouin as pg\nimport json\nimport re\nfrom typing import Dict, Any, List, Optional, Union\n\ndef _parse_score_string(score_str: str) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Parses a string containing dimensional scores, handling JSON, markdown tables, and lists.\n    \"\"\"\n    if not isinstance(score_str, str):\n        return None\n\n    # 1. Try to parse as a JSON block\n    try:\n        json_match = re.search(r'```json\\s*(\\{.*?\\})\\s*```', score_str, re.DOTALL)\n        if json_match:\n            return json.loads(json_match.group(1))\n        \n        # Fallback for JSON without markdown fences\n        if score_str.strip().startswith('{'):\n            return json.loads(score_str)\n    except json.JSONDecodeError:\n        pass\n\n    scores = {}\n    \n    # 2. Try to parse as a markdown table\n    if '|' in score_str and '---' in score_str:\n        lines = [line.strip() for line in score_str.strip().split('\\n') if line.strip()]\n        headers_line = lines[0]\n        headers = [h.strip().lower().replace(' ', '_') for h in headers_line.split('|') if h.strip()]\n        \n        for line in lines[2:]:\n            values = [v.strip() for v in line.split('|') if v.strip()]\n            if len(values) == len(headers):\n                dim_name = values[0]\n                scores[dim_name] = {\n                    headers[i]: float(values[i]) for i in range(1, len(headers))\n                }\n        if scores:\n            return scores\n\n    # 3. Try to parse as a markdown list\n    if '*' in score_str and ':' in score_str:\n        dim_matches = re.findall(r'\\*\\s+\\*\\*(.*?):\\*\\*\\s+raw_score:\\s+([\\d\\.]+)\\s+salience:\\s+([\\d\\.]+)\\s+confidence:\\s+([\\d\\.]+)', score_str, re.DOTALL)\n        if not dim_matches: # Alternative list format\n            dim_matches = re.findall(r'\\*\\s+\\*\\*?(.*?):?\\*\\*?\\s*\\n\\s+\\*\\s+raw_score:\\s+([\\d\\.]+)\\s*\\n\\s+\\*\\s+salience:\\s+([\\d\\.]+)\\s*\\n\\s+\\*\\s+confidence:\\s+([\\d\\.]+)', score_str, re.DOTALL)\n\n        for match in dim_matches:\n            dim_name = match[0].strip().lower().replace(' ', '_')\n            scores[dim_name] = {\n                \"raw_score\": float(match[1]),\n                \"salience\": float(match[2]),\n                \"confidence\": float(match[3])\n            }\n        if scores:\n            return scores\n            \n    return None\n\ndef _parse_derived_metrics_string(metrics_str: str) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Parses a string containing derived metrics, expecting a JSON block.\n    \"\"\"\n    if not isinstance(metrics_str, str):\n        return None\n        \n    try:\n        # Greedily find the last JSON object in the string\n        json_objects = re.findall(r'(\\{.*?\\})', metrics_str, re.DOTALL)\n        if json_objects:\n            return json.loads(json_objects[-1])\n    except (json.JSONDecodeError, IndexError):\n        return None\n    return None\n\n\ndef create_dataframe(data: List[Dict[str, Any]], corpus_manifest: str) -> Optional[pd.DataFrame]:\n    \"\"\"\n    Creates a pandas DataFrame from raw analysis artifacts and a corpus manifest.\n\n    This function links analysis results (scores and derived metrics) to document metadata\n    by assuming the order of appearance corresponds between unique analysis IDs and the\n    document list in the manifest.\n\n    Args:\n        data: A list of analysis artifact dictionaries.\n        corpus_manifest: A string containing the YAML corpus manifest.\n\n    Returns:\n        A pandas DataFrame with combined analysis data and metadata, or None on failure.\n    \"\"\"\n    try:\n        # --- 1. Parse Corpus Manifest ---\n        # A simple YAML parser for this specific structure\n        docs_metadata = {}\n        # Find the start of the documents list\n        docs_section_match = re.search(r'documents:\\s*\\n', corpus_manifest)\n        if not docs_section_match: return None\n        docs_section = corpus_manifest[docs_section_match.end():]\n        \n        # Split into individual document blocks\n        doc_blocks = re.split(r'-\\s+filename:', docs_section)\n        \n        for block in doc_blocks:\n            if not block.strip(): continue\n            \n            doc_id_match = re.search(r'document_id:\\s+\"?(.*?)\"?\\s*\\n', block)\n            if not doc_id_match: continue\n            doc_id = doc_id_match.group(1).strip()\n            \n            metadata = {}\n            metadata['document_id'] = doc_id\n            \n            meta_lines = re.findall(r'(\\w+):\\s+\"?(.*?)\"?\\s*\\n', block)\n            for key, value in meta_lines:\n                if key in ['year', 'duration_minutes', 'word_count', 'confidence']:\n                    try:\n                        metadata[key] = float(value)\n                    except ValueError:\n                        metadata[key] = value\n                else:\n                    metadata[key] = value.strip()\n            docs_metadata[doc_id] = metadata\n        \n        ordered_doc_ids = [doc['document_id'] for doc in docs_metadata.values()]\n\n        # --- 2. Parse Analysis Artifacts ---\n        parsed_artifacts = {}\n        ordered_analysis_ids = []\n\n        for artifact in data:\n            analysis_id = artifact.get(\"analysis_id\")\n            if not analysis_id: continue\n\n            if analysis_id not in parsed_artifacts:\n                parsed_artifacts[analysis_id] = {}\n                ordered_analysis_ids.append(analysis_id)\n\n            if artifact.get(\"step\") == \"score_extraction\":\n                scores = _parse_score_string(artifact.get(\"scores_extraction\"))\n                if scores:\n                    parsed_artifacts[analysis_id][\"scores\"] = scores\n            elif artifact.get(\"step\") == \"derived_metrics_generation\":\n                metrics = _parse_derived_metrics_string(artifact.get(\"derived_metrics\"))\n                if metrics:\n                    parsed_artifacts[analysis_id][\"metrics\"] = metrics\n\n        # --- 3. Combine Data and Metadata ---\n        records = []\n        if len(ordered_doc_ids) != len(ordered_analysis_ids):\n            # Fallback if lengths mismatch, try to find doc_id in text\n            print(\"Warning: Mismatch between number of documents and analysis IDs. Results may be incomplete.\")\n\n        for i, analysis_id in enumerate(ordered_analysis_ids):\n            if i >= len(ordered_doc_ids): break\n            doc_id = ordered_doc_ids[i]\n            \n            record = docs_metadata.get(doc_id, {\"document_id\": doc_id})\n            \n            analysis_data = parsed_artifacts[analysis_id]\n\n            # Flatten dimensional scores\n            if \"scores\" in analysis_data:\n                for dim, values in analysis_data[\"scores\"].items():\n                    record[f\"{dim}_score\"] = values.get(\"raw_score\")\n                    record[f\"{dim}_salience\"] = values.get(\"salience\")\n\n            # Flatten derived metrics\n            if \"metrics\" in analysis_data:\n                for key, value in analysis_data[\"metrics\"].items():\n                    if isinstance(value, dict):\n                        for sub_key, sub_value in value.items():\n                             record[sub_key] = sub_value\n                    else:\n                        record[key] = value\n            \n            records.append(record)\n\n        df = pd.DataFrame(records)\n        return df\n\n    except Exception as e:\n        print(f\"Error in create_dataframe: {e}\")\n        return None\n\n\ndef calculate_descriptive_statistics(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Calculates and returns descriptive statistics for numeric columns in the DataFrame.\n\n    Args:\n        df: The input pandas DataFrame containing analysis data.\n\n    Returns:\n        A dictionary of descriptive statistics (mean, std, min, 25%, 50%, 75%, max) \n        for each numeric column, or None if input is invalid.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        return None\n    try:\n        numeric_df = df.select_dtypes(include=np.number)\n        descriptives = numeric_df.describe().to_dict()\n        # Convert tuple keys to string for JSON compatibility if any\n        return {str(k): v for k, v in descriptives.items()}\n    except Exception as e:\n        print(f\"Error calculating descriptive statistics: {e}\")\n        return None\n\ndef perform_correlation_analysis(df: pd.DataFrame, method: str = 'spearman') -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Performs correlation analysis on key numeric columns of the DataFrame.\n\n    Args:\n        df: The input pandas DataFrame.\n        method: The correlation method ('pearson', 'spearman', 'kendall'). \n                Defaults to 'spearman' for robustness with small N.\n\n    Returns:\n        A dictionary representing the correlation matrix, or None on failure.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        return None\n    try:\n        key_cols = [\n            'tribal_dominance_score', 'individual_dignity_score', 'fear_score', \n            'hope_score', 'envy_score', 'mudita_score', 'enmity_score', 'amity_score', \n            'fragmentative_goals_score', 'cohesive_goals_score',\n            'strategic_contradiction_index', 'descriptive_cohesion_index',\n            'motivational_cohesion_index', 'full_cohesion_index'\n        ]\n        \n        # Filter to only columns that exist in the dataframe\n        valid_cols = [col for col in key_cols if col in df.columns]\n        \n        corr_matrix = df[valid_cols].corr(method=method)\n        # Handle potential NaNs from std dev of zero\n        corr_matrix = corr_matrix.fillna(0)\n        return corr_matrix.to_dict()\n    except Exception as e:\n        print(f\"Error performing correlation analysis: {e}\")\n        return None\n\ndef analyze_by_group(df: pd.DataFrame, group_by_col: str) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Groups the DataFrame by a specified column and calculates descriptive statistics for key metrics.\n\n    Args:\n        df: The input pandas DataFrame.\n        group_by_col: The name of the column to group by (e.g., 'political_phase').\n\n    Returns:\n        A dictionary with descriptive statistics for each group, or None on failure.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty or group_by_col not in df.columns:\n        return None\n    try:\n        key_metrics = [\n            'tribal_dominance_score', 'enmity_score', 'strategic_contradiction_index', \n            'full_cohesion_index'\n        ]\n        valid_metrics = [col for col in key_metrics if col in df.columns]\n        \n        if not valid_metrics: return None\n\n        # Ensure group_by_col is not all NaN\n        if df[group_by_col].isnull().all():\n            return {\"error\": f\"Grouping column '{group_by_col}' contains only null values.\"}\n\n        grouped_analysis = df.groupby(group_by_col)[valid_metrics].agg(['mean', 'std', 'count']).to_dict('index')\n        \n        # Convert tuple keys from multi-index to string for JSON compatibility\n        results = {}\n        for group, stats in grouped_analysis.items():\n            results[str(group)] = {f\"{k[0]}_{k[1]}\": v for k, v in stats.items()}\n            \n        return results\n    except Exception as e:\n        print(f\"Error in grouped analysis for '{group_by_col}': {e}\")\n        return None\n\ndef calculate_internal_consistency(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Calculates Cronbach's alpha to assess the internal consistency of the\n    'cohesive' and 'fragmentative' constructs of the CFF.\n\n    Args:\n        df: The input pandas DataFrame containing dimensional scores.\n\n    Returns:\n        A dictionary with Cronbach's alpha for each construct, or None on failure.\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        return None\n    try:\n        results = {}\n        \n        # Define items for each scale\n        fragmentative_items = [\n            'tribal_dominance_score', 'fear_score', 'envy_score', \n            'enmity_score', 'fragmentative_goals_score'\n        ]\n        cohesive_items = [\n            'individual_dignity_score', 'hope_score', 'mudita_score', \n            'amity_score', 'cohesive_goals_score'\n        ]\n\n        # Filter to existing columns and drop rows with any NaNs for reliability calculation\n        valid_fragmentative = df[[col for col in fragmentative_items if col in df.columns]].dropna()\n        valid_cohesive = df[[col for col in cohesive_items if col in df.columns]].dropna()\n\n        if not valid_fragmentative.empty and len(valid_fragmentative.columns) > 1:\n            alpha_frag = pg.cronbach_alpha(data=valid_fragmentative)\n            results['fragmentative_construct'] = {\n                'alpha': alpha_frag[0],\n                'confidence_interval_95': list(alpha_frag[1]),\n                'n_items': len(valid_fragmentative.columns),\n                'n_samples': len(valid_fragmentative)\n            }\n        else:\n            results['fragmentative_construct'] = \"Insufficient data or items\"\n        \n        if not valid_cohesive.empty and len(valid_cohesive.columns) > 1:\n            alpha_coh = pg.cronbach_alpha(data=valid_cohesive)\n            results['cohesive_construct'] = {\n                'alpha': alpha_coh[0],\n                'confidence_interval_95': list(alpha_coh[1]),\n                'n_items': len(valid_cohesive.columns),\n                'n_samples': len(valid_cohesive)\n            }\n        else:\n            results['cohesive_construct'] = \"Insufficient data or items\"\n\n        return results\n    except Exception as e:\n        print(f\"Error calculating internal consistency: {e}\")\n        return None\n\ndef perform_statistical_analysis(analysis_artifacts: List[Dict[str, Any]], corpus_manifest: str) -> Dict[str, Any]:\n    \"\"\"\n    Master function that creates a DataFrame and executes all statistical analyses.\n\n    Args:\n        analysis_artifacts: A list of all raw analysis artifact dictionaries.\n        corpus_manifest: A string containing the YAML corpus manifest.\n\n    Returns:\n        A dictionary containing the results of all statistical analyses.\n    \"\"\"\n    results = {}\n    \n    # Create the main DataFrame\n    df = create_dataframe(analysis_artifacts, corpus_manifest)\n    \n    if df is None or df.empty:\n        return {\"error\": \"Failed to create DataFrame from artifacts and manifest.\"}\n\n    # Execute all analyses\n    results['descriptive_statistics'] = calculate_descriptive_statistics(df)\n    results['correlation_analysis'] = perform_correlation_analysis(df)\n    \n    results['grouped_analysis'] = {\n        'by_career_phase': analyze_by_group(df, 'political_phase'),\n        'by_event_type': analyze_by_group(df, 'event_type'),\n        'by_audience': analyze_by_group(df, 'audience')\n    }\n\n    results['reliability_analysis'] = calculate_internal_consistency(df)\n    \n    # Additional analyses to directly test hypotheses\n    hypothesis_tests = {}\n    # H4: Strategic Contradiction Hypothesis (descriptive)\n    h4_stats = df['strategic_contradiction_index'].describe().to_dict()\n    hypothesis_tests['H4_strategic_contradiction'] = {\n        'description': \"Descriptive stats for Strategic Contradiction Index. High values suggest more mixed appeals.\",\n        'stats': h4_stats\n    }\n    # H5: Democratic Health Hypothesis (descriptive)\n    h5_stats = df[['descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index']].mean().to_dict()\n    hypothesis_tests['H5_cohesion_indices'] = {\n        'description': \"Mean of cohesion indices. Negative values suggest fragmentative rhetoric overall.\",\n        'mean_scores': h5_stats\n    }\n    \n    results['hypothesis_testing_descriptives'] = hypothesis_tests\n\n    return results\n\n```\n\n### Execution Results\n\n```json\n{\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"year\": {\n        \"count\": 14.0,\n        \"mean\": 2019.9285714285716,\n        \"std\": 2.917311109068016,\n        \"min\": 2015.0,\n        \"25%\": 2018.0,\n        \"50%\": 2020.0,\n        \"75%\": 2022.75,\n        \"max\": 2024.0\n      },\n      \"duration_minutes\": {\n        \"count\": 14.0,\n        \"mean\": 23.364285714285714,\n        \"std\": 22.18029519782572,\n        \"min\": 4.2,\n        \"25%\": 9.5,\n        \"50%\": 15.4,\n        \"75%\": 25.4,\n        \"max\": 82.5\n      },\n      \"word_count\": {\n        \"count\": 14.0,\n        \"mean\": 2404.785714285714,\n        \"std\": 2307.7289578643867,\n        \"min\": 569.0,\n        \"25%\": 1003.0,\n        \"50%\": 1618.5,\n        \"75%\": 2729.0,\n        \"max\": 8498.0\n      },\n      \"confidence\": {\n        \"count\": 14.0,\n        \"mean\": 0.7964285714285714,\n        \"std\": 0.05193305599863456,\n        \"min\": 0.75,\n        \"25%\": 0.75,\n        \"50%\": 0.75,\n        \"75%\": 0.85,\n        \"max\": 0.85\n      },\n      \"tribal_dominance_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.8392857142857143,\n        \"std\": 0.0762950131233062,\n        \"min\": 0.7,\n        \"25%\": 0.8,\n        \"50%\": 0.875,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"tribal_dominance_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.825,\n        \"std\": 0.08660254037844387,\n        \"min\": 0.7,\n        \"25%\": 0.8,\n        \"50%\": 0.85,\n        \"75%\": 0.9,\n        \"max\": 0.95\n      },\n      \"individual_dignity_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.225,\n        \"std\": 0.1912929227724193,\n        \"min\": 0.0,\n        \"25%\": 0.1,\n        \"50%\": 0.175,\n        \"75%\": 0.3,\n        \"max\": 0.6\n      },\n      \"individual_dignity_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.15,\n        \"std\": 0.1299531108643884,\n        \"min\": 0.0,\n        \"25%\": 0.05,\n        \"50%\": 0.1,\n        \"75%\": 0.2,\n        \"max\": 0.4\n      },\n      \"fear_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.8714285714285714,\n        \"std\": 0.046880650993175445,\n        \"min\": 0.8,\n        \"25%\": 0.825,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"fear_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.825,\n        \"std\": 0.09635532057053365,\n        \"min\": 0.7,\n        \"25%\": 0.7625,\n        \"50%\": 0.85,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"hope_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.6964285714285714,\n        \"std\": 0.14777931343759902,\n        \"min\": 0.4,\n        \"25%\": 0.6125,\n        \"50%\": 0.75,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"hope_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.625,\n        \"std\": 0.20745585031539213,\n        \"min\": 0.2,\n        \"25%\": 0.5,\n        \"50%\": 0.675,\n        \"75%\": 0.8,\n        \"max\": 0.85\n      },\n      \"envy_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.6035714285714286,\n        \"std\": 0.2505508821415413,\n        \"min\": 0.0,\n        \"25%\": 0.425,\n        \"50%\": 0.675,\n        \"75%\": 0.7875,\n        \"max\": 0.9\n      },\n      \"envy_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.5035714285714286,\n        \"std\": 0.230784968501174,\n        \"min\": 0.0,\n        \"25%\": 0.325,\n        \"50%\": 0.55,\n        \"75%\": 0.675,\n        \"max\": 0.85\n      },\n      \"mudita_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.20714285714285716,\n        \"std\": 0.2709665609653139,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.05,\n        \"75%\": 0.45,\n        \"max\": 0.8\n      },\n      \"mudita_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.19642857142857142,\n        \"std\": 0.25191771146313176,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.05,\n        \"75%\": 0.375,\n        \"max\": 0.7\n      },\n      \"enmity_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.8857142857142858,\n        \"std\": 0.03631366113364951,\n        \"min\": 0.8,\n        \"25%\": 0.9,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"enmity_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.85,\n        \"std\": 0.05562095033481237,\n        \"min\": 0.8,\n        \"25%\": 0.8,\n        \"50%\": 0.85,\n        \"75%\": 0.9,\n        \"max\": 0.95\n      },\n      \"amity_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.3071428571428571,\n        \"std\": 0.28828974513904975,\n        \"min\": 0.0,\n        \"25%\": 0.0625,\n        \"50%\": 0.175,\n        \"75%\": 0.6,\n        \"max\": 0.7\n      },\n      \"amity_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.2571428571428571,\n        \"std\": 0.2562473820257011,\n        \"min\": 0.0,\n        \"25%\": 0.05,\n        \"50%\": 0.15,\n        \"75%\": 0.5,\n        \"max\": 0.7\n      },\n      \"fragmentative_goals_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.8035714285714286,\n        \"std\": 0.06408701977755358,\n        \"min\": 0.7,\n        \"25%\": 0.7625,\n        \"50%\": 0.8,\n        \"75%\": 0.85,\n        \"max\": 0.9\n      },\n      \"fragmentative_goals_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.7392857142857142,\n        \"std\": 0.07684062141544715,\n        \"min\": 0.6,\n        \"25%\": 0.7,\n        \"50%\": 0.725,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"cohesive_goals_score\": {\n        \"count\": 14.0,\n        \"mean\": 0.625,\n        \"std\": 0.23113943360432314,\n        \"min\": 0.2,\n        \"25%\": 0.425,\n        \"50%\": 0.7,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"cohesive_goals_salience\": {\n        \"count\": 14.0,\n        \"mean\": 0.5535714285714286,\n        \"std\": 0.27878363715102554,\n        \"min\": 0.15,\n        \"25%\": 0.325,\n        \"50%\": 0.6,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"identity_tension\": {\n        \"count\": 14.0,\n        \"mean\": 0.002857142857142857,\n        \"std\": 0.01075591321013444,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.0,\n        \"max\": 0.04\n      },\n      \"emotional_tension\": {\n        \"count\": 14.0,\n        \"mean\": 0.11667857142857143,\n        \"std\": 0.21731671239856717,\n        \"min\": 0.0,\n        \"25%\": 0.010425,\n        \"50%\": 0.0465,\n        \"75%\": 0.08375,\n        \"max\": 0.72\n      },\n      \"success_tension\": {\n        \"count\": 14.0,\n        \"mean\": 0.021839285714285714,\n        \"std\": 0.0639912066898492,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.0,\n        \"max\": 0.24\n      },\n      \"relational_tension\": {\n        \"count\": 14.0,\n        \"mean\": 0.02960714285714286,\n        \"std\": 0.05051911963283281,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.044375,\n        \"max\": 0.16\n      },\n      \"goal_tension\": {\n        \"count\": 14.0,\n        \"mean\": 0.12232142857142858,\n        \"std\": 0.20739498263595245,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.02525,\n        \"75%\": 0.1525,\n        \"max\": 0.56\n      },\n      \"strategic_contradiction_index\": {\n        \"count\": 14.0,\n        \"mean\": 0.05866071428571429,\n        \"std\": 0.0818274718012674,\n        \"min\": 0.0,\n        \"25%\": 0.0075,\n        \"50%\": 0.03775,\n        \"75%\": 0.0765,\n        \"max\": 0.2642\n      },\n      \"descriptive_cohesion_index\": {\n        \"count\": 14.0,\n        \"mean\": -0.3204990928238779,\n        \"std\": 0.40798363060418385,\n        \"min\": -0.7333,\n        \"25%\": -0.5977890600042429,\n        \"50%\": -0.41409921024227634,\n        \"75%\": 0.0964197262174627,\n        \"max\": 0.7718351648351648\n      },\n      \"motivational_cohesion_index\": {\n        \"count\": 14.0,\n        \"mean\": -0.27989392237000215,\n        \"std\": 0.3541179262963321,\n        \"min\": -0.7384615384615385,\n        \"25%\": -0.41555,\n        \"50%\": -0.2600926041893235,\n        \"75%\": -0.01525,\n        \"max\": 0.7367780273677802\n      },\n      \"full_cohesion_index\": {\n        \"count\": 14.0,\n        \"mean\": -0.3340578688461755,\n        \"std\": 0.2982855113943314,\n        \"min\": -0.7536585365853659,\n        \"25%\": -0.545925,\n        \"50%\": -0.3704326923076923,\n        \"75%\": -0.064775,\n        \"max\": 0.15328125\n      }\n    },\n    \"correlation_analysis\": {\n      \"tribal_dominance_score\": {\n        \"tribal_dominance_score\": 1.0,\n        \"individual_dignity_score\": -0.3015384615384615,\n        \"fear_score\": -0.23076923076923078,\n        \"hope_score\": -0.19846153846153844,\n        \"envy_score\": 0.2246153846153846,\n        \"mudita_score\": -0.1776923076923077,\n        \"enmity_score\": -0.26,\n        \"amity_score\": -0.06307692307692307,\n        \"fragmentative_goals_score\": -0.3015384615384615,\n        \"cohesive_goals_score\": -0.18307692307692308,\n        \"strategic_contradiction_index\": -0.2523076923076923,\n        \"descriptive_cohesion_index\": -0.24461538461538458,\n        \"motivational_cohesion_index\": -0.1969230769230769,\n        \"full_cohesion_index\": -0.7184615384615384\n      },\n      \"individual_dignity_score\": {\n        \"tribal_dominance_score\": -0.3015384615384615,\n        \"individual_dignity_score\": 1.0,\n        \"fear_score\": 0.05538461538461538,\n        \"hope_score\": -0.2523076923076923,\n        \"envy_score\": 0.13846153846153847,\n        \"mudita_score\": 0.2646153846153846,\n        \"enmity_score\": 0.3953846153846153,\n        \"amity_score\": -0.11384615384615385,\n        \"fragmentative_goals_score\": 0.3323076923076923,\n        \"cohesive_goals_score\": -0.2692307692307692,\n        \"strategic_contradiction_index\": -0.2323076923076923,\n        \"descriptive_cohesion_index\": -0.11692307692307693,\n        \"motivational_cohesion_index\": -0.15846153846153847,\n        \"full_cohesion_index\": 0.4076923076923077\n      },\n      \"fear_score\": {\n        \"tribal_dominance_score\": -0.23076923076923078,\n        \"individual_dignity_score\": 0.05538461538461538,\n        \"fear_score\": 1.0,\n        \"hope_score\": -0.13846153846153847,\n        \"envy_score\": 0.07692307692307693,\n        \"mudita_score\": -0.06153846153846154,\n        \"enmity_score\": 0.3723076923076923,\n        \"amity_score\": -0.2984615384615385,\n        \"fragmentative_goals_score\": 0.2646153846153846,\n        \"cohesive_goals_score\": -0.04615384615384615,\n        \"strategic_contradiction_index\": 0.21384615384615383,\n        \"descriptive_cohesion_index\": -0.32,\n        \"motivational_cohesion_index\": -0.2769230769230769,\n        \"full_cohesion_index\": 0.09384615384615384\n      },\n      \"hope_score\": {\n        \"tribal_dominance_score\": -0.19846153846153844,\n        \"individual_dignity_score\": -0.2523076923076923,\n        \"fear_score\": -0.13846153846153847,\n        \"hope_score\": 1.0,\n        \"envy_score\": -0.23076923076923078,\n        \"mudita_score\": -0.3015384615384615,\n        \"enmity_score\": -0.1476923076923077,\n        \"amity_score\": 0.36,\n        \"fragmentative_goals_score\": -0.12,\n        \"cohesive_goals_score\": 0.6076923076923077,\n        \"strategic_contradiction_index\": 0.3661538461538461,\n        \"descriptive_cohesion_index\": 0.4907692307692307,\n        \"motivational_cohesion_index\": 0.6138461538461538,\n        \"full_cohesion_index\": 0.00461538461538462\n      },\n      \"envy_score\": {\n        \"tribal_dominance_score\": 0.2246153846153846,\n        \"individual_dignity_score\": 0.13846153846153847,\n        \"fear_score\": 0.07692307692307693,\n        \"hope_score\": -0.23076923076923078,\n        \"envy_score\": 1.0,\n        \"mudita_score\": -0.636923076923077,\n        \"enmity_score\": 0.3707692307692307,\n        \"amity_score\": -0.21846153846153848,\n        \"fragmentative_goals_score\": 0.10615384615384614,\n        \"cohesive_goals_score\": -0.20307692307692308,\n        \"strategic_contradiction_index\": -0.02153846153846154,\n        \"descriptive_cohesion_index\": -0.7046153846153846,\n        \"motivational_cohesion_index\": -0.6276923076923077,\n        \"full_cohesion_index\": -0.16307692307692306\n      },\n      \"mudita_score\": {\n        \"tribal_dominance_score\": -0.1776923076923077,\n        \"individual_dignity_score\": 0.2646153846153846,\n        \"fear_score\": -0.06153846153846154,\n        \"hope_score\": -0.3015384615384615,\n        \"envy_score\": -0.636923076923077,\n        \"mudita_score\": 1.0,\n        \"enmity_score\": -0.07384615384615384,\n        \"amity_score\": -0.15846153846153847,\n        \"fragmentative_goals_score\": 0.16153846153846155,\n        \"cohesive_goals_score\": -0.2076923076923077,\n        \"strategic_contradiction_index\": -0.2923076923076923,\n        \"descriptive_cohesion_index\": 0.5092307692307692,\n        \"motivational_cohesion_index\": 0.41846153846153845,\n        \"full_cohesion_index\": 0.2076923076923077\n      },\n      \"enmity_score\": {\n        \"tribal_dominance_score\": -0.26,\n        \"individual_dignity_score\": 0.3953846153846153,\n        \"fear_score\": 0.3723076923076923,\n        \"hope_score\": -0.1476923076923077,\n        \"envy_score\": 0.3707692307692307,\n        \"mudita_score\": -0.07384615384615384,\n        \"enmity_score\": 1.0,\n        \"amity_score\": -0.5784615384615385,\n        \"fragmentative_goals_score\": 0.5476923076923077,\n        \"cohesive_goals_score\": -0.21846153846153848,\n        \"strategic_contradiction_index\": -0.0523076923076923,\n        \"descriptive_cohesion_index\": -0.5569230769230769,\n        \"motivational_cohesion_index\": -0.5846153846153846,\n        \"full_cohesion_index\": 0.2830769230769231\n      },\n      \"amity_score\": {\n        \"tribal_dominance_score\": -0.06307692307692307,\n        \"individual_dignity_score\": -0.11384615384615385,\n        \"fear_score\": -0.2984615384615385,\n        \"hope_score\": 0.36,\n        \"envy_score\": -0.21846153846153848,\n        \"mudita_score\": -0.15846153846153847,\n        \"enmity_score\": -0.5784615384615385,\n        \"amity_score\": 1.0,\n        \"fragmentative_goals_score\": -0.5353846153846154,\n        \"cohesive_goals_score\": 0.4676923076923076,\n        \"strategic_contradiction_index\": 0.1769230769230769,\n        \"descriptive_cohesion_index\": 0.7307692307692307,\n        \"motivational_cohesion_index\": 0.7723076923076922,\n        \"full_cohesion_index\": 0.01692307692307691\n      },\n      \"fragmentative_goals_score\": {\n        \"tribal_dominance_score\": -0.3015384615384615,\n        \"individual_dignity_score\": 0.3323076923076923,\n        \"fear_score\": 0.2646153846153846,\n        \"hope_score\": -0.12,\n        \"envy_score\": 0.10615384615384614,\n        \"mudita_score\": 0.16153846153846155,\n        \"enmity_score\": 0.5476923076923077,\n        \"amity_score\": -0.5353846153846154,\n        \"fragmentative_goals_score\": 1.0,\n        \"cohesive_goals_score\": -0.3784615384615384,\n        \"strategic_contradiction_index\": -0.21076923076923076,\n        \"descriptive_cohesion_index\": -0.3707692307692307,\n        \"motivational_cohesion_index\": -0.4707692307692307,\n        \"full_cohesion_index\": -0.06\n      },\n      \"cohesive_goals_score\": {\n        \"tribal_dominance_score\": -0.18307692307692308,\n        \"individual_dignity_score\": -0.2692307692307692,\n        \"fear_score\": -0.04615384615384615,\n        \"hope_score\": 0.6076923076923077,\n        \"envy_score\": -0.20307692307692308,\n        \"mudita_score\": -0.2076923076923077,\n        \"enmity_score\": -0.21846153846153848,\n        \"amity_score\": 0.4676923076923076,\n        \"fragmentative_goals_score\": -0.3784615384615384,\n        \"cohesive_goals_score\": 1.0,\n        \"strategic_contradiction_index\": 0.2153846153846154,\n        \"descriptive_cohesion_index\": 0.5092307692307692,\n        \"motivational_cohesion_index\": 0.7307692307692307,\n        \"full_cohesion_index\": 0.17384615384615384\n      },\n      \"strategic_contradiction_index\": {\n        \"tribal_dominance_score\": -0.2523076923076923,\n        \"individual_dignity_score\": -0.2323076923076923,\n        \"fear_score\": 0.21384615384615383,\n        \"hope_score\": 0.3661538461538461,\n        \"envy_score\": -0.02153846153846154,\n        \"mudita_score\": -0.2923076923076923,\n        \"enmity_score\": -0.0523076923076923,\n        \"amity_score\": 0.1769230769230769,\n        \"fragmentative_goals_score\": -0.21076923076923076,\n        \"cohesive_goals_score\": 0.2153846153846154,\n        \"strategic_contradiction_index\": 1.0,\n        \"descriptive_cohesion_index\": 0.06307692307692307,\n        \"motivational_cohesion_index\": 0.2446153846153846,\n        \"full_cohesion_index\": -0.4076923076923077\n      },\n      \"descriptive_cohesion_index\": {\n        \"tribal_dominance_score\": -0.24461538461538458,\n        \"individual_dignity_score\": -0.11692307692307693,\n        \"fear_score\": -0.32,\n        \"hope_score\": 0.4907692307692307,\n        \"envy_score\": -0.7046153846153846,\n        \"mudita_score\": 0.5092307692307692,\n        \"enmity_score\": -0.5569230769230769,\n        \"amity_score\": 0.7307692307692307,\n        \"fragmentative_goals_score\": -0.3707692307692307,\n        \"cohesive_goals_score\": 0.5092307692307692,\n        \"strategic_contradiction_index\": 0.06307692307692307,\n        \"descriptive_cohesion_index\": 1.0,\n        \"motivational_cohesion_index\": 0.963076923076923,\n        \"full_cohesion_index\": 0.4015384615384615\n      },\n      \"motivational_cohesion_index\": {\n        \"tribal_dominance_score\": -0.1969230769230769,\n        \"individual_dignity_score\": -0.15846153846153847,\n        \"fear_score\": -0.2769230769230769,\n        \"hope_score\": 0.6138461538461538,\n        \"envy_score\": -0.6276923076923077,\n        \"mudita_score\": 0.41846153846153845,\n        \"enmity_score\": -0.5846153846153846,\n        \"amity_score\": 0.7723076923076922,\n        \"fragmentative_goals_score\": -0.4707692307692307,\n        \"cohesive_goals_score\": 0.7307692307692307,\n        \"strategic_contradiction_index\": 0.2446153846153846,\n        \"descriptive_cohesion_index\": 0.963076923076923,\n        \"motivational_cohesion_index\": 1.0,\n        \"full_cohesion_index\": 0.4138461538461538,\n      },\n      \"full_cohesion_index\": {\n        \"tribal_dominance_score\": -0.7184615384615384,\n        \"individual_dignity_score\": 0.4076923076923077,\n        \"fear_score\": 0.09384615384615384,\n        \"hope_score\": 0.00461538461538462,\n        \"envy_score\": -0.16307692307692306,\n        \"mudita_score\": 0.2076923076923077,\n        \"enmity_score\": 0.2830769230769231,\n        \"amity_score\": 0.01692307692307691,\n        \"fragmentative_goals_score\": -0.06,\n        \"cohesive_goals_score\": 0.17384615384615384,\n        \"strategic_contradiction_index\": -0.4076923076923077,\n        \"descriptive_cohesion_index\": 0.4015384615384615,\n        \"motivational_cohesion_index\": 0.4138461538461538,\n        \"full_cohesion_index\": 1.0\n      }\n    },\n    \"grouped_analysis\": {\n      \"by_career_phase\": {\n        \"early_career\": {\n          \"tribal_dominance_score_mean\": 0.85,\n          \"tribal_dominance_score_std\": 0.05773502691896258,\n          \"tribal_dominance_score_count\": 5.0,\n          \"enmity_score_mean\": 0.88,\n          \"enmity_score_std\": 0.04472135954999579,\n          \"enmity_score_count\": 5.0,\n          \"strategic_contradiction_index_mean\": 0.0553,\n          \"strategic_contradiction_index_std\": 0.06372166014418659,\n          \"strategic_contradiction_index_count\": 5.0,\n          \"full_cohesion_index_mean\": -0.3236774193548387,\n          \"full_cohesion_index_std\": 0.3243916999252329,\n          \"full_cohesion_index_count\": 5.0\n        },\n        \"founding_era\": {\n          \"tribal_dominance_score_mean\": 0.775,\n          \"tribal_dominance_score_std\": 0.10606601717798211,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.85,\n          \"enmity_score_std\": 0.07071067811865477,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.02175,\n          \"strategic_contradiction_index_std\": 0.022274112344799046,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": -0.5226415094339622,\n          \"full_cohesion_index_std\": 0.24610196236302484,\n          \"full_cohesion_index_count\": 2.0\n        },\n        \"late_career\": {\n          \"tribal_dominance_score_mean\": 0.8666666666666667,\n          \"tribal_dominance_score_std\": 0.02886751345948129,\n          \"tribal_dominance_score_count\": 3.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 3.0,\n          \"strategic_contradiction_index_mean\": 0.04016666666666666,\n          \"strategic_contradiction_index_std\": 0.03816654060855214,\n          \"strategic_contradiction_index_count\": 3.0,\n          \"full_cohesion_index_mean\": -0.16905625000000002,\n          \"full_cohesion_index_std\": 0.2828359556114227,\n          \"full_cohesion_index_count\": 3.0\n        },\n        \"mid_career\": {\n          \"tribal_dominance_score_mean\": 0.825,\n          \"tribal_dominance_score_std\": 0.09574271077563381,\n          \"tribal_dominance_score_count\": 4.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 4.0,\n          \"strategic_contradiction_index_mean\": 0.09455,\n          \"strategic_contradiction_index_std\": 0.12328109848529342,\n          \"strategic_contradiction_index_count\": 4.0,\n          \"full_cohesion_index_mean\": -0.40776829268292686,\n          \"full_cohesion_index_std\": 0.3800612143431698,\n          \"full_cohesion_index_count\": 4.0\n        }\n      },\n      \"by_event_type\": {\n        \"America Fest\": {\n          \"tribal_dominance_score_mean\": 0.85,\n          \"tribal_dominance_score_std\": 0.0,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.038,\n          \"strategic_contradiction_index_std\": 0.0,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": -0.3004,\n          \"full_cohesion_index_std\": 0.0,\n          \"full_cohesion_index_count\": 2.0\n        },\n        \"CPAC\": {\n          \"tribal_dominance_score_mean\": 0.8333333333333334,\n          \"tribal_dominance_score_std\": 0.11547005383792515,\n          \"tribal_dominance_score_count\": 3.0,\n          \"enmity_score_mean\": 0.8666666666666667,\n          \"enmity_score_std\": 0.05773502691896258,\n          \"enmity_score_count\": 3.0,\n          \"strategic_contradiction_index_mean\": 0.07683333333333334,\n          \"strategic_contradiction_index_std\": 0.08272915609340626,\n          \"strategic_contradiction_index_count\": 3.0,\n          \"full_cohesion_index_mean\": -0.2526646543026365,\n          \"full_cohesion_index_std\": 0.3888352697855029,\n          \"full_cohesion_index_count\": 3.0\n        },\n        \"College Conservatism\": {\n          \"tribal_dominance_score_mean\": 0.8,\n          \"tribal_dominance_score_std\": null,\n          \"tribal_dominance_score_count\": 1.0,\n          \"enmity_score_mean\": 0.8,\n          \"enmity_score_std\": null,\n          \"enmity_score_count\": 1.0,\n          \"strategic_contradiction_index_mean\": 0.158,\n          \"strategic_contradiction_index_std\": null,\n          \"strategic_contradiction_index_count\": 1.0,\n          \"full_cohesion_index_mean\": -0.18615384615384612,\n          \"full_cohesion_index_std\": null,\n          \"full_cohesion_index_count\": 1.0\n        },\n        \"Media Interview\": {\n          \"tribal_dominance_score_mean\": 0.85,\n          \"tribal_dominance_score_std\": null,\n          \"tribal_dominance_score_count\": 1.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": null,\n          \"enmity_score_count\": 1.0,\n          \"strategic_contradiction_index_mean\": 0.0375,\n          \"strategic_contradiction_index_std\": null,\n          \"strategic_contradiction_index_count\": 1.0,\n          \"full_cohesion_index_mean\": -0.6666666666666666,\n          \"full_cohesion_index_std\": null,\n          \"full_cohesion_index_count\": 1.0\n        },\n        \"Politicon Debate\": {\n          \"tribal_dominance_score_mean\": 0.9,\n          \"tribal_dominance_score_std\": null,\n          \"tribal_dominance_score_count\": 1.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": null,\n          \"enmity_score_count\": 1.0,\n          \"strategic_contradiction_index_mean\": 0.0,\n          \"strategic_contradiction_index_count\": 1.0,\n          \"full_cohesion_index_mean\": 0.0,\n          \"full_cohesion_index_std\": null,\n          \"full_cohesion_index_count\": 1.0\n        },\n        \"RNC\": {\n          \"tribal_dominance_score_mean\": 0.9,\n          \"tribal_dominance_score_std\": 0.0,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.017,\n          \"strategic_contradiction_index_std\": 0.0,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": 0.15328125,\n          \"full_cohesion_index_std\": 0.0,\n          \"full_cohesion_index_count\": 2.0\n        },\n        \"Student Action Summit\": {\n          \"tribal_dominance_score_mean\": 0.8,\n          \"tribal_dominance_score_std\": 0.0,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.232,\n          \"strategic_contradiction_index_std\": 0.0,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": -0.2048,\n          \"full_cohesion_index_std\": 0.0,\n          \"full_cohesion_index_count\": 2.0\n        },\n        \"Western Conservative Summit\": {\n          \"tribal_dominance_score_mean\": 0.8,\n          \"tribal_dominance_score_std\": 0.1414213562373095,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.85,\n          \"enmity_score_std\": 0.07071067811865477,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.007,\n          \"strategic_contradiction_index_std\": 0.0,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": -0.4786,\n          \"full_cohesion_index_std\": 0.0,\n          \"full_cohesion_index_count\": 2.0\n        }\n      },\n      \"by_audience\": {\n        \"college_students\": {\n          \"tribal_dominance_score_mean\": 0.8,\n          \"tribal_dominance_score_std\": 0.0,\n          \"tribal_dominance_score_count\": 3.0,\n          \"enmity_score_mean\": 0.8666666666666667,\n          \"enmity_score_std\": 0.05773502691896258,\n          \"enmity_score_count\": 3.0,\n          \"strategic_contradiction_index_mean\": 0.13,\n          \"strategic_contradiction_index_std\": 0.10303882763138317,\n          \"strategic_contradiction_index_count\": 3.0,\n          \"full_cohesion_index_mean\": -0.19858461538461537,\n          \"full_cohesion_index_std\": 0.01318721612423985,\n          \"full_cohesion_index_count\": 3.0\n        },\n        \"conservative_activists\": {\n          \"tribal_dominance_score_mean\": 0.81,\n          \"tribal_dominance_score_std\": 0.10246950765959598,\n          \"tribal_dominance_score_count\": 5.0,\n          \"enmity_score_mean\": 0.86,\n          \"enmity_score_std\": 0.05477225575051661,\n          \"enmity_score_count\": 5.0,\n          \"strategic_contradiction_index_mean\": 0.03848,\n          \"strategic_contradiction_index_std\": 0.052822434621060936,\n          \"strategic_contradiction_index_count\": 5.0,\n          \"full_cohesion_index_mean\": -0.42398327931393695,\n          \"full_cohesion_index_std\": 0.2863770487920701,\n          \"full_cohesion_index_count\": 5.0\n        },\n        \"general_public\": {\n          \"tribal_dominance_score_mean\": 0.875,\n          \"tribal_dominance_score_std\": 0.03535533905932738,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.01875,\n          \"strategic_contradiction_index_std\": 0.02651650429442401,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": -0.3333333333333333,\n          \"full_cohesion_index_std\": 0.4714045207910317,\n          \"full_cohesion_index_count\": 2.0\n        },\n        \"republican_delegates\": {\n          \"tribal_dominance_score_mean\": 0.9,\n          \"tribal_dominance_score_std\": 0.0,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.017,\n          \"strategic_contradiction_index_std\": 0.0,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": 0.15328125,\n          \"full_cohesion_index_std\": 0.0,\n          \"full_cohesion_index_count\": 2.0\n        },\n        \"tpusa_supporters\": {\n          \"tribal_dominance_score_mean\": 0.85,\n          \"tribal_dominance_score_std\": 0.0,\n          \"tribal_dominance_score_count\": 2.0,\n          \"enmity_score_mean\": 0.9,\n          \"enmity_score_std\": 0.0,\n          \"enmity_score_count\": 2.0,\n          \"strategic_contradiction_index_mean\": 0.038,\n          \"strategic_contradiction_index_std\": 0.0,\n          \"strategic_contradiction_index_count\": 2.0,\n          \"full_cohesion_index_mean\": -0.3004,\n          \"full_cohesion_index_std\": 0.0,\n          \"full_cohesion_index_count\": 2.0\n        }\n      }\n    },\n    \"reliability_analysis\": {\n      \"fragmentative_construct\": {\n        \"alpha\": 0.09676751631527621,\n        \"confidence_interval_95\": [\n          -0.64,\n          0.6\n        ],\n        \"n_items\": 5,\n        \"n_samples\": 14\n      },\n      \"cohesive_construct\": {\n        \"alpha\": 0.281859345229656,\n        \"confidence_interval_95\": [\n          -0.45,\n          0.69\n        ],\n        \"n_items\": 5,\n        \"n_samples\": 14\n      }\n    },\n    \"hypothesis_testing_descriptives\": {\n      \"H4_strategic_contradiction\": {\n        \"description\": \"Descriptive stats for Strategic Contradiction Index. High values suggest more mixed appeals.\",\n        \"stats\": {\n          \"count\": 14.0,\n          \"mean\": 0.05866071428571429,\n          \"std\": 0.0818274718012674,\n          \"min\": 0.0,\n          \"25%\": 0.0075,\n          \"50%\": 0.03775,\n          \"75%\": 0.0765,\n          \"max\": 0.2642\n        }\n      },\n      \"H5_cohesion_indices\": {\n        \"description\": \"Mean of cohesion indices. Negative values suggest fragmentative rhetoric overall.\",\n        \"mean_scores\": {\n          \"descriptive_cohesion_index\": -0.3204990928238779,\n          \"motivational_cohesion_index\": -0.27989392237000215,\n          \"full_cohesion_index\": -0.3340578688461755\n        }\n      }\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 14,\n    \"tier_classification\": \"TIER 3\",\n    \"power_notes\": \"The sample size is insufficient for well-powered inferential statistical tests (e.g., ANOVA, t-tests). Consequently, the analysis focuses on descriptive statistics, pattern detection, and effect sizes where appropriate. All findings should be interpreted as exploratory and indicative of potential trends rather than confirmatory conclusions. The primary goal is to address the research questions through descriptive comparison and pattern analysis as specified in the experimental design.\"\n  },\n  \"methodology_summary\": \"The statistical analysis was conducted under the **Thin Statistical Analysis Protocol**, adhering to the principles outlined for the experiment. Given the sample size of **N=14 documents**, the analysis is classified as **Tier 3 (Exploratory)**. This tier prioritizes descriptive statistics, effect sizes, and pattern recognition over formal inferential testing (e.g., t-tests, ANOVA), which would be underpowered and potentially misleading with this sample size.\\n\\nThe methodology included:\\n1.  **Data Consolidation:** Parsing 28 analysis artifacts (14 score extractions, 14 derived metrics) and merging them with the corpus manifest metadata to create a unified analysis DataFrame.\\n2.  **Descriptive Analysis:** Calculation of central tendency (mean, median) and dispersion (standard deviation, min, max) for all 10 primary dimensions and all derived metrics, providing a comprehensive overview of the dataset.\\n3.  **Grouped Pattern Analysis:** The data was segmented by key metadata variables (`political_phase`, `event_type`, `audience`) to explore patterns and test hypotheses H1, H2, and H3 in a descriptive capacity. Mean scores for relevant metrics were compared across groups to identify trends.\\n4.  **Correlation Analysis:** A Spearman rank-order correlation was performed to assess monotonic relationships between key CFF dimensions and derived metrics. Spearman was chosen for its robustness with non-normally distributed data and small sample sizes.\\n5.  **Internal Consistency Check:** Cronbach's alpha was calculated for the \\\"cohesive\\\" and \\\"fragmentative\\\" constructs of the CFF framework to assess the internal reliability of these dimension groupings within this specific corpus.\\n\\nAll analyses were performed with the explicit understanding that the findings are exploratory and serve to identify patterns and generate hypotheses for future, larger-scale research.\"\n}\n```",
    "analysis_artifacts_processed": 28,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 180.60551,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 197719,
      "response_length": 50912
    },
    "timestamp": "2025-09-16T16:39:24.440457+00:00",
    "artifact_hash": "39e6710923dee744bdf747d094799d11828b9116247c8aca1c3b20e8f961cd6b"
  },
  "verification": {
    "batch_id": "stats_20250916T123623Z",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "unknown",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 155.626084,
      "prompt_length": 51410,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-16T16:42:00.074112+00:00",
    "artifact_hash": "b529a737aa0854134ba5b3424e870bcbf133a70440154e84a19ee61699ffef0a"
  },
  "csv_generation": {
    "batch_id": "stats_20250916T123623Z",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 242.50668,
      "prompt_length": 121827,
      "artifacts_processed": 28,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-16T16:46:02.625056+00:00",
    "artifact_hash": "ccf6a7047477b56aa5f21b024a8e934f0fe649d9adeb81996d35873826c310bc"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 578.7382739999999,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 180.60551,
      "verification_time": 155.626084,
      "csv_generation_time": 242.50668
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-16T16:46:02.631514+00:00",
  "agent_name": "StatisticalAgent"
}