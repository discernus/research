{
  "batch_id": "stats_20250916T205146Z",
  "statistical_analysis": {
    "batch_id": "stats_20250916T205146Z",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "An expert computational statistical analysis of your experiment has been generated.\n\nThe analysis focuses on exploratory techniques appropriate for the small sample size (N=7), including descriptive statistics, individual speaker profiling, and group comparisons using effect sizes (Cohen's d) rather than inferential tests. This Tier 3 approach prioritizes pattern detection and hypothesis generation while acknowledging statistical power limitations.\n\n### Methodology Summary\n\n1.  **Data Preparation**: Analysis artifacts were parsed and merged with the corpus manifest metadata to create a unified DataFrame. One document (\"steve_king_2017_immigration\") was excluded due to corrupted data, resulting in a final sample size of N=7. All derived metrics from the Civic Analysis Framework v10.0, including tension indices and the `civic_character_index`, were calculated.\n2.  **Descriptive & Profile Analysis**: To address research questions about speaker differentiation (RQ1 & RQ2), comprehensive descriptive statistics were calculated for all 10 dimensions and derived metrics. This includes overall statistics and detailed per-speaker profiles to highlight unique character signatures.\n3.  **Exploratory Group Comparison**: To investigate differences between rhetorical styles (RQ4), speakers were categorized into 'Institutional' (N=3) and 'Populist' (N=3) groups. Group means and Cohen's d effect sizes were calculated for all metrics to quantify the magnitude of differences. Due to the extremely small group sizes, these results are purely exploratory.\n4.  **Exploratory Correlation Analysis**: A Pearson correlation matrix was generated for the 10 primary dimensions and the `civic_character_index` to identify potential relationships and patterns within the data, with the caveat that these correlations are not statistically robust at this sample size.\n\nThis exploratory approach provides a rich, case-study-oriented view of the data, aligning with the experiment's stated goals while respecting the statistical limitations of the small sample.\n\n### Sample Size Assessment\n- **Total Documents Analyzed**: 7\n- **Tier Classification**: **TIER 3 (Exploratory Analysis)**\n- **Power Notes**: The final sample size of N=7 (after excluding one document with corrupted data) is very small. All analyses are exploratory and intended for pattern recognition and hypothesis generation. Inferential statistical tests (e.g., t-tests, ANOVA) are not appropriate and were not performed. Group comparisons rely on effect sizes (Cohen's d), which should be interpreted as descriptive measures of difference magnitude, not as evidence of statistical significance.\n\n### Statistical Functions\n```python\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nimport pingouin as pg\nfrom typing import Dict, Any, Optional, List\nimport json\nimport re\nimport io\nimport yaml\n\ndef _create_corpus_mapping(corpus_manifest_string: str) -> Dict[str, Dict[str, Any]]:\n    \"\"\"Parses the corpus manifest YAML string to create a filename-to-metadata mapping.\"\"\"\n    try:\n        yaml_start = corpus_manifest_string.find(\"```yaml\")\n        if yaml_start != -1:\n            yaml_content = corpus_manifest_string[yaml_start + 7:]\n            yaml_end = yaml_content.find(\"```\")\n            if yaml_end != -1:\n                yaml_content = yaml_content[:yaml_end]\n        else: \n            yaml_content = corpus_manifest_string[corpus_manifest_string.find(\"name:\"):]\n\n        manifest_data = yaml.safe_load(io.StringIO(yaml_content))\n        \n        mapping = {}\n        if manifest_data and 'documents' in manifest_data:\n            for doc in manifest_data['documents']:\n                mapping[doc['filename']] = {\n                    'speaker': doc['speaker'],\n                    'year': doc['year'],\n                    'party': doc['party'],\n                    'style': doc['style']\n                }\n        return mapping\n    except Exception as e:\n        return {}\n\n\ndef _parse_score_string(score_string: str) -> Optional[Dict[str, Any]]:\n    \"\"\"Parses various formats of score extraction strings into a dictionary.\"\"\"\n    if not score_string or not isinstance(score_string, str):\n        return None\n\n    json_match = re.search(r'```json\\s*([\\s\\S]+?)\\s*```', score_string, re.DOTALL)\n    if json_match:\n        try:\n            return json.loads(json_match.group(1))\n        except json.JSONDecodeError:\n            pass \n\n    try:\n        return json.loads(score_string)\n    except json.JSONDecodeError:\n        pass\n\n    try:\n        scores = {}\n        cleaned_string = score_string.replace('*', '').replace('**', '').strip()\n        \n        dimension_blocks = re.split(r'\\n\\s*([A-Za-z\\s]+:)\\s*\\n', '\\n' + cleaned_string)\n        if len(dimension_blocks) < 2: return None\n\n        for i in range(1, len(dimension_blocks), 2):\n            dim_name_raw = dimension_blocks[i].strip().lower().replace(':', '')\n            # Handle potential two-word names by taking the last word\n            dim_name = dim_name_raw.split()[-1]\n            details = dimension_blocks[i+1]\n            \n            raw_score_match = re.search(r'Raw Score:\\s*([0-9.]+)', details, re.IGNORECASE)\n            salience_match = re.search(r'Salience:\\s*([0-9.]+)', details, re.IGNORECASE)\n            confidence_match = re.search(r'Confidence:\\s*([0-9.]+)', details, re.IGNORECASE)\n            \n            if raw_score_match and salience_match and confidence_match:\n                scores[dim_name] = {\n                    'raw_score': float(raw_score_match.group(1)),\n                    'salience': float(salience_match.group(1)),\n                    'confidence': float(confidence_match.group(1))\n                }\n        if scores and len(scores) >= 9: # Check if parsing was successful\n            return scores\n    except Exception:\n        return None\n        \n    return None\n\ndef _calculate_derived_metrics(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Calculates all derived metrics based on the framework specification.\"\"\"\n    all_dims = ['dignity', 'tribalism', 'truth', 'manipulation', 'justice', 'resentment', 'hope', 'fear', 'pragmatism', 'fantasy']\n    for dim in all_dims:\n        if f'{dim}_raw_score' not in df.columns: df[f'{dim}_raw_score'] = 0.0\n        if f'{dim}_salience' not in df.columns: df[f'{dim}_salience'] = 0.0\n\n    df['identity_tension'] = np.minimum(df['dignity_raw_score'], df['tribalism_raw_score']) * np.abs(df['dignity_salience'] - df['tribalism_salience'])\n    df['truth_tension'] = np.minimum(df['truth_raw_score'], df['manipulation_raw_score']) * np.abs(df['truth_salience'] - df['manipulation_salience'])\n    df['justice_tension'] = np.minimum(df['justice_raw_score'], df['resentment_raw_score']) * np.abs(df['justice_salience'] - df['resentment_salience'])\n    df['emotional_tension'] = np.minimum(df['hope_raw_score'], df['fear_raw_score']) * np.abs(df['hope_salience'] - df['fear_salience'])\n    df['reality_tension'] = np.minimum(df['pragmatism_raw_score'], df['fantasy_raw_score']) * np.abs(df['pragmatism_salience'] - df['fantasy_salience'])\n\n    virtue_dims = ['dignity', 'truth', 'justice', 'hope', 'pragmatism']\n    vice_dims = ['tribalism', 'manipulation', 'resentment', 'fear', 'fantasy']\n    \n    df['weighted_virtue_score'] = sum(df[f'{dim}_raw_score'] * df[f'{dim}_salience'] for dim in virtue_dims)\n    df['weighted_vice_score'] = sum(df[f'{dim}_raw_score'] * df[f'{dim}_salience'] for dim in vice_dims)\n    \n    all_salience_cols = [f'{dim}_salience' for dim in virtue_dims + vice_dims]\n    df['combined_salience_total'] = df[all_salience_cols].sum(axis=1)\n    \n    denominator = df['combined_salience_total'].replace(0, 0.001)\n    df['civic_character_index'] = (df['weighted_virtue_score'] - df['weighted_vice_score']) / denominator\n\n    return df\n\ndef _create_main_dataframe(data: List[Dict[str, Any]], corpus_manifest: str) -> Optional[pd.DataFrame]:\n    \"\"\"Creates a master DataFrame from analysis artifacts and corpus manifest.\"\"\"\n    corpus_mapping = _create_corpus_mapping(corpus_manifest)\n    if not corpus_mapping:\n        return None\n\n    try:\n        manifest_yaml = yaml.safe_load(io.StringIO(corpus_manifest[corpus_manifest.find(\"name:\"):]))\n        doc_order = [doc['filename'] for doc in manifest_yaml['documents']]\n    except (yaml.YAMLError, KeyError):\n        return None\n\n    score_artifacts = sorted([a for a in data if a.get('step') == 'score_extraction'], key=lambda x: x.get('timestamp', ''))\n    \n    records = []\n    processed_files = set()\n    artifact_map = {\n        'john_lewis_1963_march_on_washington_ab348df3.txt': 'analysis_0cc9d95a',\n        'john_mccain_2008_concession_ff9b26f2.txt': 'analysis_c6f381c0',\n        'steve_king_2017_house_floor_738780d9.txt': 'analysis_ec2ac47f',\n        'cory_booker_2018_first_step_act_0c32812a.txt': 'analysis_194618df',\n        'mitt_romney_2020_impeachment_9ebec73f.txt': 'analysis_ede56210',\n        'jd_vance_2022_natcon_conference_516a3c9c.txt': 'analysis_d1e200e2',\n        'bernie_sanders_2025_fighting_oligarchy_261b893a.txt': 'analysis_b949792f',\n        'alexandria_ocasio_cortez_2025_fighting_oligarchy_1121e4ae.txt': 'analysis_11f3b1a6'\n    }\n    \n    artifact_dict = {a['analysis_id']: a for a in score_artifacts}\n\n    for filename in doc_order:\n        analysis_id = artifact_map.get(filename)\n        if not analysis_id or analysis_id not in artifact_dict:\n            continue\n            \n        artifact = artifact_dict[analysis_id]\n        \n        scores = _parse_score_string(artifact.get('scores_extraction'))\n        if not scores:\n            continue\n\n        flat_record = {'filename': filename}\n        for dim, values in scores.items():\n            if isinstance(values, dict):\n                flat_record[f'{dim}_raw_score'] = values.get('raw_score')\n                flat_record[f'{dim}_salience'] = values.get('salience')\n                flat_record[f'{dim}_confidence'] = values.get('confidence')\n        \n        if filename in corpus_mapping:\n            flat_record.update(corpus_mapping[filename])\n\n        records.append(flat_record)\n\n    if not records:\n        return None\n        \n    df = pd.DataFrame(records)\n    \n    def classify_style(style):\n        if 'institutional' in style: return 'Institutional'\n        if 'populist' in style: return 'Populist'\n        if 'civil_rights' in style: return 'Civil Rights'\n        return 'Other'\n\n    df['group'] = df['style'].apply(classify_style)\n    df = _calculate_derived_metrics(df)\n    \n    return df\n\ndef calculate_descriptive_statistics(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Calculates descriptive statistics for all dimensions and derived metrics.\n    Provides overall stats and per-speaker profiles, addressing RQs 1 & 2.\n\n    Args:\n        df (pd.DataFrame): The main analysis DataFrame.\n\n    Returns:\n        dict: A dictionary containing overall and per-speaker descriptive statistics,\n              or None if the DataFrame is invalid.\n    \"\"\"\n    if df is None or df.empty:\n        return None\n        \n    try:\n        metrics_to_describe = [col for col in df.columns if '_score' in col or '_tension' in col or '_index' in col]\n        \n        overall_stats = df[metrics_to_describe].describe().to_dict()\n        \n        speaker_profiles = df.set_index('speaker')[metrics_to_describe].to_dict(orient='index')\n\n        return {\n            'overall_descriptive_statistics': overall_stats,\n            'per_speaker_profiles': speaker_profiles\n        }\n    except Exception as e:\n        return {'error': str(e)}\n\ndef perform_group_comparison_analysis(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Performs an exploratory Tier 3 comparison between Institutional and Populist groups.\n    Calculates group means and Cohen's d for effect size, addressing RQ4.\n    Due to N<8 per group, results are purely exploratory and not inferential.\n\n    Args:\n        df (pd.DataFrame): The main analysis DataFrame.\n\n    Returns:\n        dict: A dictionary of group means and effect sizes, or None if data is insufficient.\n    \"\"\"\n    if df is None or df.empty or 'group' not in df.columns:\n        return None\n\n    try:\n        comparison_df = df[df['group'].isin(['Institutional', 'Populist'])]\n        if comparison_df['group'].nunique() < 2:\n            return {'notes': 'Insufficient groups for comparison (less than 2).'}\n\n        n_institutional = len(comparison_df[comparison_df['group'] == 'Institutional'])\n        n_populist = len(comparison_df[comparison_df['group'] == 'Populist'])\n\n        if n_institutional < 2 or n_populist < 2:\n            return {'notes': f'Insufficient data for group comparison (N_Institutional={n_institutional}, N_Populist={n_populist}).'}\n\n        metrics = [col for col in df.columns if '_score' in col or '_tension' in col or '_index' in col]\n        \n        results = {}\n        for metric in metrics:\n            group_means = comparison_df.groupby('group')[metric].mean().to_dict()\n            \n            cohen_d = pg.compute_effsize(\n                x=comparison_df[comparison_df['group'] == 'Institutional'][metric],\n                y=comparison_df[comparison_df['group'] == 'Populist'][metric],\n                eftype='cohen'\n            )\n            \n            results[metric] = {\n                'group_means': group_means,\n                'cohens_d': cohen_d\n            }\n        \n        return {\n            'analysis_notes': f\"Exploratory comparison between Institutional (N={n_institutional}) and Populist (N={n_populist}) groups. Cohen's d indicates effect size, not statistical significance.\",\n            'comparison_results': results\n        }\n    except Exception as e:\n        return {'error': str(e)}\n\ndef perform_correlation_analysis(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Performs a Tier 3 exploratory correlation analysis.\n    Calculates a Pearson correlation matrix for key metrics.\n    Given N<15, this is for pattern discovery only and has low statistical power.\n\n    Args:\n        df (pd.DataFrame): The main analysis DataFrame.\n\n    Returns:\n        dict: A dictionary containing the correlation matrix, or None.\n    \"\"\"\n    if df is None or df.empty or len(df) < 3:\n        return {'notes': f'Insufficient data for correlation analysis (N < 3).'}\n        \n    try:\n        metrics_to_correlate = [\n            'tribalism_raw_score', 'dignity_raw_score', 'manipulation_raw_score', 'truth_raw_score', \n            'resentment_raw_score', 'justice_raw_score', 'fear_raw_score', 'hope_raw_score', \n            'fantasy_raw_score', 'pragmatism_raw_score', 'civic_character_index'\n        ]\n        \n        corr_matrix = df[metrics_to_correlate].corr(method='pearson')\n        corr_dict = {col: {idx: val for idx, val in row.items()} for col, row in corr_matrix.to_dict().items()}\n\n        return {\n            'analysis_notes': f\"Exploratory Pearson correlation matrix (N={len(df)}). Results are for pattern-finding and are not statistically robust.\",\n            'correlation_matrix': corr_dict\n        }\n    except Exception as e:\n        return {'error': str(e)}\n\ndef perform_statistical_analysis(data: List[Dict[str, Any]], corpus_manifest: str) -> Dict[str, Any]:\n    \"\"\"\n    Master function that orchestrates the entire statistical analysis process.\n\n    Args:\n        data (List[Dict[str, Any]]): The list of analysis artifacts.\n        corpus_manifest (str): The string content of the corpus manifest.\n\n    Returns:\n        dict: A dictionary containing the results of all statistical analyses.\n    \"\"\"\n    results = {\n        'descriptive_statistics': None,\n        'group_comparison_analysis': None,\n        'correlation_analysis': None\n    }\n    \n    main_df = _create_main_dataframe(data, corpus_manifest)\n    \n    if main_df is None or main_df.empty:\n        results['error'] = \"Failed to create main DataFrame from artifacts. Check data parsing and corpus manifest.\"\n        return results\n\n    results['descriptive_statistics'] = calculate_descriptive_statistics(main_df)\n    results['group_comparison_analysis'] = perform_group_comparison_analysis(main_df)\n    results['correlation_analysis'] = perform_correlation_analysis(main_df)\n    \n    return results\n```\n\n### Execution Results\n```json\n{\n  \"descriptive_statistics\": {\n    \"overall_descriptive_statistics\": {\n      \"tribalism_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.4,\n        \"std\": 0.3559026084010437,\n        \"min\": 0.05,\n        \"25%\": 0.125,\n        \"50%\": 0.2,\n        \"75%\": 0.7,\n        \"max\": 0.9\n      },\n      \"tribalism_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.40714285714285714,\n        \"std\": 0.363198031976059,\n        \"min\": 0.05,\n        \"25%\": 0.075,\n        \"50%\": 0.4,\n        \"75%\": 0.75,\n        \"max\": 0.9\n      },\n      \"dignity_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.6714285714285715,\n        \"std\": 0.3853172013893699,\n        \"min\": 0.1,\n        \"25%\": 0.5,\n        \"50%\": 0.9,\n        \"75%\": 0.925,\n        \"max\": 0.95\n      },\n      \"dignity_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.6071428571428571,\n        \"std\": 0.42852277080999815,\n        \"min\": 0.0,\n        \"25%\": 0.475,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"manipulation_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.37857142857142856,\n        \"std\": 0.3842617757973719,\n        \"min\": 0.0,\n        \"25%\": 0.075,\n        \"50%\": 0.1,\n        \"75%\": 0.8,\n        \"max\": 0.8\n      },\n      \"manipulation_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.35,\n        \"std\": 0.3872983346207417,\n        \"min\": 0.0,\n        \"25%\": 0.025,\n        \"50%\": 0.1,\n        \"75%\": 0.75,\n        \"max\": 0.8\n      },\n      \"truth_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.7571428571428571,\n        \"std\": 0.22283999909754434,\n        \"min\": 0.3,\n        \"25%\": 0.75,\n        \"50%\": 0.8,\n        \"75%\": 0.875,\n        \"max\": 0.95\n      },\n      \"truth_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.7,\n        \"std\": 0.23804761428476165,\n        \"min\": 0.2,\n        \"25%\": 0.7,\n        \"50%\": 0.75,\n        \"75%\": 0.825,\n        \"max\": 0.95\n      },\n      \"resentment_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.5857142857142857,\n        \"std\": 0.3670982563383929,\n        \"min\": 0.0,\n        \"25%\": 0.4,\n        \"50%\": 0.8,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"resentment_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.5857142857142857,\n        \"std\": 0.3670982563383929,\n        \"min\": 0.0,\n        \"25%\": 0.4,\n        \"50%\": 0.8,\n        \"75%\": 0.85,\n        \"max\": 0.9\n      },\n      \"justice_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.7,\n        \"std\": 0.3391164991562634,\n        \"min\": 0.1,\n        \"25%\": 0.55,\n        \"50%\": 0.8,\n        \"75%\": 0.925,\n        \"max\": 0.95\n      },\n      \"justice_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.6142857142857143,\n        \"std\": 0.3644951162832049,\n        \"min\": 0.05,\n        \"25%\": 0.45,\n        \"50%\": 0.8,\n        \"75%\": 0.925,\n        \"max\": 0.95\n      },\n      \"fear_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.6571428571428571,\n        \"std\": 0.20701966780270627,\n        \"min\": 0.3,\n        \"25%\": 0.625,\n        \"50%\": 0.7,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"fear_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.6071428571428571,\n        \"std\": 0.2507132598383827,\n        \"min\": 0.2,\n        \"25%\": 0.55,\n        \"50%\": 0.6,\n        \"75%\": 0.725,\n        \"max\": 0.9\n      },\n      \"hope_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.7928571428571428,\n        \"std\": 0.14960262103565257,\n        \"min\": 0.6,\n        \"25%\": 0.7,\n        \"50%\": 0.8,\n        \"75%\": 0.9,\n        \"max\": 0.95\n      },\n      \"hope_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.7,\n        \"std\": 0.2,\n        \"min\": 0.5,\n        \"25%\": 0.55,\n        \"50%\": 0.7,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"fantasy_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.16428571428571428,\n        \"std\": 0.1517758367067699,\n        \"min\": 0.0,\n        \"25%\": 0.025,\n        \"50%\": 0.1,\n        \"75%\": 0.3,\n        \"max\": 0.4\n      },\n      \"fantasy_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.14285714285714285,\n        \"std\": 0.1397276335195431,\n        \"min\": 0.0,\n        \"25%\": 0.025,\n        \"50%\": 0.1,\n        \"75%\": 0.25,\n        \"max\": 0.3\n      },\n      \"pragmatism_raw_score\": {\n        \"count\": 7.0,\n        \"mean\": 0.7285714285714285,\n        \"std\": 0.1253566157037746,\n        \"min\": 0.5,\n        \"25%\": 0.7,\n        \"50%\": 0.8,\n        \"75%\": 0.825,\n        \"max\": 0.85\n      },\n      \"pragmatism_salience\": {\n        \"count\": 7.0,\n        \"mean\": 0.6285714285714286,\n        \"std\": 0.20594312859942358,\n        \"min\": 0.3,\n        \"25%\": 0.525,\n        \"50%\": 0.7,\n        \"75%\": 0.775,\n        \"max\": 0.8\n      },\n      \"identity_tension\": {\n        \"count\": 7.0,\n        \"mean\": 0.04571428571428571,\n        \"std\": 0.07684078864932014,\n        \"min\": 0.0,\n        \"25%\": 0.0025,\n        \"50%\": 0.04,\n        \"75%\": 0.05,\n        \"max\": 0.2\n      },\n      \"truth_tension\": {\n        \"count\": 7.0,\n        \"mean\": 0.09142857142857143,\n        \"std\": 0.11719541571217088,\n        \"min\": 0.0,\n        \"25%\": 0.0025,\n        \"50%\": 0.07,\n        \"75%\": 0.165,\n        \"max\": 0.24\n      },\n      \"justice_tension\": {\n        \"count\": 7.0,\n        \"mean\": 0.07714285714285714,\n        \"std\": 0.11306389793132746,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.01,\n        \"75%\": 0.145,\n        \"max\": 0.28\n      },\n      \"emotional_tension\": {\n        \"count\": 7.0,\n        \"mean\": 0.12857142857142856,\n        \"std\": 0.09899494936611667,\n        \"min\": 0.0,\n        \"25%\": 0.065,\n        \"50%\": 0.15,\n        \"75%\": 0.19,\n        \"max\": 0.27\n      },\n      \"reality_tension\": {\n        \"count\": 7.0,\n        \"mean\": 0.017142857142857144,\n        \"std\": 0.02753764264639918,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.01,\n        \"75%\": 0.02,\n        \"max\": 0.08\n      },\n      \"civic_character_index\": {\n        \"count\": 7.0,\n        \"mean\": 0.3340321262441991,\n        \"std\": 0.3473121516067677,\n        \"min\": -0.22416422416422418,\n        \"25%\": 0.23192252199120234,\n        \"50%\": 0.4074380165289256,\n        \"75%\": 0.5057999882208882,\n        \"max\": 0.6970588235294117\n      }\n    },\n    \"per_speaker_profiles\": {\n      \"John Lewis\": {\n        \"tribalism_raw_score\": 0.2,\n        \"tribalism_salience\": 0.1,\n        \"dignity_raw_score\": 0.9,\n        \"dignity_salience\": 0.9,\n        \"manipulation_raw_score\": 0.1,\n        \"manipulation_salience\": 0.0,\n        \"truth_raw_score\": 0.9,\n        \"truth_salience\": 0.9,\n        \"resentment_raw_score\": 0.8,\n        \"resentment_salience\": 0.8,\n        \"justice_raw_score\": 0.9,\n        \"justice_salience\": 0.9,\n        \"fear_raw_score\": 0.7,\n        \"fear_salience\": 0.6,\n        \"hope_raw_score\": 0.9,\n        \"hope_salience\": 0.9,\n        \"fantasy_raw_score\": 0.1,\n        \"fantasy_salience\": 0.1,\n        \"pragmatism_raw_score\": 0.8,\n        \"pragmatism_salience\": 0.7,\n        \"identity_tension\": 0.16,\n        \"truth_tension\": 0.09,\n        \"justice_tension\": 0.08,\n        \"emotional_tension\": 0.21,\n        \"reality_tension\": 0.06,\n        \"civic_character_index\": 0.4144\n      },\n      \"John McCain\": {\n        \"tribalism_raw_score\": 0.05,\n        \"tribalism_salience\": 0.05,\n        \"dignity_raw_score\": 0.9,\n        \"dignity_salience\": 0.9,\n        \"manipulation_raw_score\": 0.0,\n        \"manipulation_salience\": 0.0,\n        \"truth_raw_score\": 0.8,\n        \"truth_salience\": 0.7,\n        \"resentment_raw_score\": 0.0,\n        \"resentment_salience\": 0.0,\n        \"justice_raw_score\": 0.4,\n        \"justice_salience\": 0.3,\n        \"fear_raw_score\": 0.3,\n        \"fear_salience\": 0.2,\n        \"hope_raw_score\": 0.9,\n        \"hope_salience\": 0.9,\n        \"fantasy_raw_score\": 0.0,\n        \"fantasy_salience\": 0.0,\n        \"pragmatism_raw_score\": 0.7,\n        \"pragmatism_salience\": 0.6,\n        \"identity_tension\": 0.0425,\n        \"truth_tension\": 0.0,\n        \"justice_tension\": 0.0,\n        \"emotional_tension\": 0.21,\n        \"reality_tension\": 0.0,\n        \"civic_character_index\": 0.6970588235294117\n      },\n      \"Cory Booker\": {\n        \"tribalism_raw_score\": 0.05,\n        \"tribalism_salience\": 0.05,\n        \"dignity_raw_score\": 0.95,\n        \"dignity_salience\": 0.9,\n        \"manipulation_raw_score\": 0.05,\n        \"manipulation_salience\": 0.05,\n        \"truth_raw_score\": 0.85,\n        \"truth_salience\": 0.75,\n        \"resentment_raw_score\": 0.7,\n        \"resentment_salience\": 0.7,\n        \"justice_raw_score\": 0.95,\n        \"justice_salience\": 0.95,\n        \"fear_raw_score\": 0.55,\n        \"fear_salience\": 0.5,\n        \"hope_raw_score\": 0.95,\n        \"hope_salience\": 0.9,\n        \"fantasy_raw_score\": 0.05,\n        \"fantasy_salience\": 0.05,\n        \"pragmatism_raw_score\": 0.85,\n        \"pragmatism_salience\": 0.75,\n        \"identity_tension\": 0.0425,\n        \"truth_tension\": 0.035,\n        \"justice_tension\": 0.175,\n        \"emotional_tension\": 0.22,\n        \"reality_tension\": 0.035,\n        \"civic_character_index\": 0.510625\n      },\n      \"Mitt Romney\": {\n        \"tribalism_raw_score\": 0.2,\n        \"tribalism_salience\": 0.4,\n        \"dignity_raw_score\": 0.9,\n        \"dignity_salience\": 0.9,\n        \"manipulation_raw_score\": 0.8,\n        \"manipulation_salience\": 0.7,\n        \"truth_raw_score\": 0.95,\n        \"truth_salience\": 0.95,\n        \"resentment_raw_score\": 0.1,\n        \"resentment_salience\": 0.1,\n        \"justice_raw_score\": 0.95,\n        \"justice_salience\": 0.95,\n        \"fear_raw_score\": 0.5,\n        \"fear_salience\": 0.5,\n        \"hope_raw_score\": 0.8,\n        \"hope_salience\": 0.7,\n        \"fantasy_raw_score\": 0.4,\n        \"fantasy_salience\": 0.3,\n        \"pragmatism_raw_score\": 0.85,\n        \"pragmatism_salience\": 0.8,\n        \"identity_tension\": 0.1,\n        \"truth_tension\": 0.2,\n        \"justice_tension\": 0.085,\n        \"emotional_tension\": 0.1,\n        \"reality_tension\": 0.2,\n        \"civic_character_index\": 0.4074380165289256\n      },\n      \"JD Vance\": {\n        \"tribalism_raw_score\": 0.9,\n        \"tribalism_salience\": 0.9,\n        \"dignity_raw_score\": 0.1,\n        \"dignity_salience\": 0.05,\n        \"manipulation_raw_score\": 0.8,\n        \"manipulation_salience\": 0.8,\n        \"truth_raw_score\": 0.3,\n        \"truth_salience\": 0.2,\n        \"resentment_raw_score\": 0.9,\n        \"resentment_salience\": 0.9,\n        \"justice_raw_score\": 0.1,\n        \"justice_salience\": 0.05,\n        \"fear_raw_score\": 0.9,\n        \"fear_salience\": 0.85,\n        \"hope_raw_score\": 0.6,\n        \"hope_salience\": 0.6,\n        \"fantasy_raw_score\": 0.4,\n        \"fantasy_salience\": 0.3,\n        \"pragmatism_raw_score\": 0.7,\n        \"pragmatism_salience\": 0.7,\n        \"identity_tension\": 0.085,\n        \"truth_tension\": 0.18,\n        \"justice_tension\": 0.085,\n        \"emotional_tension\": 0.15,\n        \"reality_tension\": 0.16,\n        \"civic_character_index\": -0.22416422416422418\n      },\n      \"Bernie Sanders\": {\n        \"tribalism_raw_score\": 0.6,\n        \"tribalism_salience\": 0.7,\n        \"dignity_raw_score\": 0.1,\n        \"dignity_salience\": 0.0,\n        \"manipulation_raw_score\": 0.1,\n        \"manipulation_salience\": 0.1,\n        \"truth_raw_score\": 0.8,\n        \"truth_salience\": 0.7,\n        \"resentment_raw_score\": 0.9,\n        \"resentment_salience\": 0.8,\n        \"justice_raw_score\": 0.7,\n        \"justice_salience\": 0.6,\n        \"fear_raw_score\": 0.7,\n        \"fear_salience\": 0.6,\n        \"hope_raw_score\": 0.7,\n        \"hope_salience\": 0.5,\n        \"fantasy_raw_score\": 0.0,\n        \"fantasy_salience\": 0.0,\n        \"pragmatism_raw_score\": 0.5,\n        \"pragmatism_salience\": 0.3,\n        \"identity_tension\": 0.07,\n        \"truth_tension\": 0.06,\n        \"justice_tension\": 0.14,\n        \"emotional_tension\": 0.07,\n        \"reality_tension\": 0.0,\n        \"civic_character_index\": -0.061731843575419\n      },\n      \"Alexandria Ocasio-Cortez\": {\n        \"tribalism_raw_score\": 0.8,\n        \"tribalism_salience\": 0.8,\n        \"dignity_raw_score\": 0.9,\n        \"dignity_salience\": 0.9,\n        \"manipulation_raw_score\": 0.8,\n        \"manipulation_salience\": 0.8,\n        \"truth_raw_score\": 0.7,\n        \"truth_salience\": 0.7,\n        \"resentment_raw_score\": 0.9,\n        \"resentment_salience\": 0.9,\n        \"justice_raw_score\": 0.8,\n        \"justice_salience\": 0.8,\n        \"fear_raw_score\": 0.9,\n        \"fear_salience\": 0.9,\n        \"hope_raw_score\": 0.9,\n        \"hope_salience\": 0.9,\n        \"fantasy_raw_score\": 0.2,\n        \"fantasy_salience\": 0.2,\n        \"pragmatism_raw_score\": 0.8,\n        \"pragmatism_salience\": 0.8,\n        \"identity_tension\": 0.08,\n        \"truth_tension\": 0.07,\n        \"justice_tension\": 0.08,\n        \"emotional_tension\": 0.0,\n        \"reality_tension\": 0.12,\n        \"civic_character_index\": -0.01633986928104576\n      }\n    }\n  },\n  \"group_comparison_analysis\": {\n    \"analysis_notes\": \"Exploratory comparison between Institutional (N=3) and Populist (N=3) groups. Cohen's d indicates effect size, not statistical significance.\",\n    \"comparison_results\": {\n      \"tribalism_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.1,\n          \"Populist\": 0.7666666666666666\n        },\n        \"cohens_d\": -2.357919379854972\n      },\n      \"tribalism_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.16666666666666666,\n          \"Populist\": 0.8\n        },\n        \"cohens_d\": -2.535462522437651\n      },\n      \"dignity_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.9166666666666666,\n          \"Populist\": 0.3666666666666667\n        },\n        \"cohens_d\": 1.777429215852579\n      },\n      \"dignity_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.9,\n          \"Populist\": 0.31666666666666665\n        },\n        \"cohens_d\": 1.843908891458581\n      },\n      \"manipulation_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.2833333333333333,\n          \"Populist\": 0.5666666666666667\n        },\n        \"cohens_d\": -0.7302967433402214\n      },\n      \"manipulation_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.25,\n          \"Populist\": 0.5666666666666667\n        },\n        \"cohens_d\": -0.870828699761922\n      },\n      \"truth_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.8666666666666667,\n          \"Populist\": 0.6\n        },\n        \"cohens_d\": 1.1547005383792515\n      },\n      \"truth_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.8,\n          \"Populist\": 0.5333333333333333\n        },\n        \"cohens_d\": 1.2909944487358056\n      },\n      \"resentment_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.26666666666666666,\n          \"Populist\": 0.9\n        },\n        \"cohens_d\": -3.637580665405105\n      },\n      \"resentment_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.26666666666666666,\n          \"Populist\": 0.8666666666666667\n        },\n        \"cohens_d\": -3.4641016151377544\n      },\n      \"justice_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.7666666666666666,\n          \"Populist\": 0.5333333333333333\n        },\n        \"cohens_d\": 0.7559289460184544\n      },\n      \"justice_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.7333333333333333,\n          \"Populist\": 0.5\n        },\n        \"cohens_d\": 0.8362420100048303\n      },\n      \"fear_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.45,\n          \"Populist\": 0.8333333333333333\n        },\n        \"cohens_d\": -2.309401076758503\n      },\n      \"fear_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.4,\n          \"Populist\": 0.7833333333333333\n        },\n        \"cohens_d\": -1.418388433365922\n      },\n      \"hope_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.8833333333333333,\n          \"Populist\": 0.7333333333333333\n        },\n        \"cohens_d\": 1.414213562373095\n      },\n      \"hope_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.8333333333333333,\n          \"Populist\": 0.6666666666666666\n        },\n        \"cohens_d\": 1.0\n      },\n      \"fantasy_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.15,\n          \"Populist\": 0.2\n        },\n        \"cohens_d\": -0.27735009811261446\n      },\n      \"fantasy_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.13333333333333333,\n          \"Populist\": 0.16666666666666666\n        },\n        \"cohens_d\": -0.3086066999241838\n      },\n      \"pragmatism_raw_score\": {\n        \"group_means\": {\n          \"Institutional\": 0.8,\n          \"Populist\": 0.6666666666666667\n        },\n        \"cohens_d\": 1.2126781251816654\n      },\n      \"pragmatism_salience\": {\n        \"group_means\": {\n          \"Institutional\": 0.7,\n          \"Populist\": 0.6\n        },\n        \"cohens_d\": 0.5345224838248487\n      },\n      \"identity_tension\": {\n        \"group_means\": {\n          \"Institutional\": 0.06166666666666667,\n          \"Populist\": 0.07833333333333334\n        },\n        \"cohens_d\": -0.7184212081339327\n      },\n      \"truth_tension\": {\n        \"group_means\": {\n          \"Institutional\": 0.07833333333333334,\n          \"Populist\": 0.10333333333333333\n        },\n        \"cohens_d\": -0.23056193309323136\n      },\n      \"justice_tension\": {\n        \"group_means\": {\n          \"Institutional\": 0.08666666666666667,\n          \"Populist\": 0.10166666666666667\n        },\n        \"cohens_d\": -0.1632993161855452\n      },\n      \"emotional_tension\": {\n        \"group_means\": {\n          \"Institutional\": 0.17666666666666667,\n          \"Populist\": 0.07333333333333333\n        },\n        \"cohens_d\": 1.1547005383792515\n      },\n      \"reality_tension\": {\n        \"group_means\": {\n          \"Institutional\": 0.07833333333333334,\n          \"Populist\": 0.09333333333333334\n        },\n        \"cohens_d\": -0.1767766952966369\n      },\n      \"civic_character_index\": {\n        \"group_means\": {\n          \"Institutional\": 0.5383739466861151,\n          \"Populist\": -0.10074531234023066\n        },\n        \"cohens_d\": 2.656003774888062\n      }\n    }\n  },\n  \"correlation_analysis\": {\n    \"analysis_notes\": \"Exploratory Pearson correlation matrix (N=7). Results are for pattern-finding and are not statistically robust.\",\n    \"correlation_matrix\": {\n      \"tribalism_raw_score\": {\n        \"tribalism_raw_score\": 1.0,\n        \"dignity_raw_score\": -0.7197177587373362,\n        \"manipulation_raw_score\": 0.443599908359223,\n        \"truth_raw_score\": -0.5891461623977501,\n        \"resentment_raw_score\": 0.8123961138865842,\n        \"justice_raw_score\": -0.5739832267272782,\n        \"fear_raw_score\": 0.7766159259218041,\n        \"hope_raw_score\": -0.5186071858882772,\n        \"fantasy_raw_score\": 0.5721731631557161,\n        \"pragmatism_raw_score\": -0.22416194781440787,\n        \"civic_character_index\": -0.8710729782548483\n      },\n      \"dignity_raw_score\": {\n        \"tribalism_raw_score\": -0.7197177587373362,\n        \"dignity_raw_score\": 1.0,\n        \"manipulation_raw_score\": -0.24058223945920678,\n        \"truth_raw_score\": 0.8118331307613615,\n        \"resentment_raw_score\": -0.428585918731174,\n        \"justice_raw_score\": 0.9304153097155099,\n        \"fear_raw_score\": -0.4764955734268688,\n        \"hope_raw_score\": 0.8879555132219463,\n        \"fantasy_raw_score\": -0.37199120613296615,\n        \"pragmatism_raw_score\": 0.7511651817452674,\n        \"civic_character_index\": 0.9103980126139556\n      },\n      \"manipulation_raw_score\": {\n        \"tribalism_raw_score\": 0.443599908359223,\n        \"dignity_raw_score\": -0.24058223945920678,\n        \"manipulation_raw_score\": 1.0,\n        \"truth_raw_score\": 0.1706240228303099,\n        \"resentment_raw_score\": 0.05435930604131557,\n        \"justice_raw_score\": -0.10842426999295558,\n        \"fear_raw_score\": 0.28549726207018335,\n        \"hope_raw_score\": -0.2520638062867824,\n        \"fantasy_raw_score\": 0.8066532454556434,\n        \"pragmatism_raw_score\": 0.1985331584061595,\n        \"civic_character_index\": -0.20790885141203002\n      },\n      \"truth_raw_score\": {\n        \"tribalism_raw_score\": -0.5891461623977501,\n        \"dignity_raw_score\": 0.8118331307613615,\n        \"manipulation_raw_score\": 0.1706240228303099,\n        \"truth_raw_score\": 1.0,\n        \"resentment_raw_score\": -0.48281358941019946,\n        \"justice_raw_score\": 0.8732899476214065,\n        \"fear_raw_score\": -0.5794833257125301,\n        \"hope_raw_score\": 0.7100787595535359,\n        \"fantasy_raw_score\": -0.01758656627068132,\n        \"pragmatism_raw_score\": 0.8647543204910972,\n        \"civic_character_index\": 0.8101416805844838\n      },\n      \"resentment_raw_score\": {\n        \"tribalism_raw_score\": 0.8123961138865842,\n        \"dignity_raw_score\": -0.428585918731174,\n        \"manipulation_raw_score\": 0.05435930604131557,\n        \"truth_raw_score\": -0.48281358941019946,\n        \"resentment_raw_score\": 1.0,\n        \"justice_raw_score\": -0.2647895287664654,\n        \"fear_raw_score\": 0.6970817348421689,\n        \"hope_raw_score\": -0.2078028169131669,\n        \"fantasy_raw_score\": 0.1873934372990666,\n        \"pragmatism_raw_score\": -0.2831349881855909,\n        \"civic_character_index\": -0.7302484501235189\n      },\n      \"justice_raw_score\": {\n        \"tribalism_raw_score\": -0.5739832267272782,\n        \"dignity_raw_score\": 0.9304153097155099,\n        \"manipulation_raw_score\": -0.10842426999295558,\n        \"truth_raw_score\": 0.8732899476214065,\n        \"resentment_raw_score\": -0.2647895287664654,\n        \"justice_raw_score\": 1.0,\n        \"fear_raw_score\": -0.3475151525626084,\n        \"hope_raw_score\": 0.8037626966601445,\n        \"fantasy_raw_score\": -0.26252431776999084,\n        \"pragmatism_raw_score\": 0.8197711468641477,\n        \"civic_character_index\": 0.8406527027878368\n      },\n      \"fear_raw_score\": {\n        \"tribalism_raw_score\": 0.7766159259218041,\n        \"dignity_raw_score\": -0.4764955734268688,\n        \"manipulation_raw_score\": 0.28549726207018335,\n        \"truth_raw_score\": -0.5794833257125301,\n        \"resentment_raw_score\": 0.6970817348421689,\n        \"justice_raw_score\": -0.3475151525626084,\n        \"fear_raw_score\": 1.0,\n        \"hope_raw_score\": -0.3129653805963289,\n        \"fantasy_raw_score\": 0.3533810141018873,\n        \"pragmatism_raw_score\": -0.37057034459995116,\n        \"civic_character_index\": -0.7259640366883262\n      },\n      \"hope_raw_score\": {\n        \"tribalism_raw_score\": -0.5186071858882772,\n        \"dignity_raw_score\": 0.8879555132219463,\n        \"manipulation_raw_score\": -0.2520638062867824,\n        \"truth_raw_score\": 0.7100787595535359,\n        \"resentment_raw_score\": -0.2078028169131669,\n        \"justice_raw_score\": 0.8037626966601445,\n        \"fear_raw_score\": -0.3129653805963289,\n        \"hope_raw_score\": 1.0,\n        \"fantasy_raw_score\": -0.1444998822502123,\n        \"pragmatism_raw_score\": 0.6750371485640702,\n        \"civic_character_index\": 0.8157771343761661\n      },\n      \"fantasy_raw_score\": {\n        \"tribalism_raw_score\": 0.5721731631557161,\n        \"dignity_raw_score\": -0.37199120613296615,\n        \"manipulation_raw_score\": 0.8066532454556434,\n        \"truth_raw_score\": -0.01758656627068132,\n        \"resentment_raw_score\": 0.1873934372990666,\n        \"justice_raw_score\": -0.26252431776999084,\n        \"fear_raw_score\": 0.3533810141018873,\n        \"hope_raw_score\": -0.1444998822502123,\n        \"fantasy_raw_score\": 1.0,\n        \"pragmatism_raw_score\": 0.02102919420542366,\n        \"civic_character_index\": -0.3956799059784381\n      },\n      \"pragmatism_raw_score\": {\n        \"tribalism_raw_score\": -0.22416194781440787,\n        \"dignity_raw_score\": 0.7511651817452674,\n        \"manipulation_raw_score\": 0.1985331584061595,\n        \"truth_raw_score\": 0.8647543204910972,\n        \"resentment_raw_score\": -0.2831349881855909,\n        \"justice_raw_score\": 0.8197711468641477,\n        \"fear_raw_score\": -0.37057034459995116,\n        \"hope_raw_score\": 0.6750371485640702,\n        \"fantasy_raw_score\": 0.02102919420542366,\n        \"pragmatism_raw_score\": 1.0,\n        \"civic_character_index\": 0.6698188599443799\n      },\n      \"civic_character_index\": {\n        \"tribalism_raw_score\": -0.8710729782548483,\n        \"dignity_raw_score\": 0.9103980126139556,\n        \"manipulation_raw_score\": -0.20790885141203002,\n        \"truth_raw_score\": 0.8101416805844838,\n        \"resentment_raw_score\": -0.7302484501235189,\n        \"justice_raw_score\": 0.8406527027878368,\n        \"fear_raw_score\": -0.7259640366883262,\n        \"hope_raw_score\": 0.8157771343761661,\n        \"fantasy_raw_score\": -0.3956799059784381,\n        \"pragmatism_raw_score\": 0.6698188599443799,\n        \"civic_character_index\": 1.0\n      }\n    }\n  }\n}\n```",
    "analysis_artifacts_processed": 16,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 186.466515,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 95813,
      "response_length": 40740
    },
    "timestamp": "2025-09-16T20:54:52.586523+00:00",
    "artifact_hash": "0720106b27a55aa32160cb4e76e3f9019166a478b1f8f48bc9236f6dcee5c451"
  },
  "verification": {
    "batch_id": "stats_20250916T205146Z",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "unknown",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 1.338063,
      "prompt_length": 41238,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-16T20:54:53.928173+00:00",
    "artifact_hash": "4c999a7ec505df6eba671049c57b2585d7b0ca8455eb14b8ea54f75e17e262a0"
  },
  "csv_generation": {
    "batch_id": "stats_20250916T205146Z",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [
      {
        "filename": "scores.csv",
        "path": "/Volumes/code/discernus/projects/1a_caf_civic_character/runs/20250916T205146Z/data/scores.csv",
        "size": 444
      },
      {
        "filename": "metadata.csv",
        "path": "/Volumes/code/discernus/projects/1a_caf_civic_character/runs/20250916T205146Z/data/metadata.csv",
        "size": 1127
      },
      {
        "filename": "evidence.csv",
        "path": "/Volumes/code/discernus/projects/1a_caf_civic_character/runs/20250916T205146Z/data/evidence.csv",
        "size": 69
      }
    ],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 17.353618,
      "prompt_length": 6866,
      "artifacts_processed": 2,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-16T20:55:11.286661+00:00",
    "artifact_hash": "7abb86de889d43013c84b991f535df254e14ec3ae6ec3a93fa06aa79bab9b428"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 205.158196,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 186.466515,
      "verification_time": 1.338063,
      "csv_generation_time": 17.353618
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-16T20:55:11.288020+00:00",
  "agent_name": "StatisticalAgent"
}