{"log_type":"llm_interaction","interaction_hash":"b6a579d483b7e495","agent_name":"EnhancedAnalysisAgent","model":"anthropic/claude-3-5-sonnet-20241022","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_lewis_1963_march_on_washington.txt\nHash: ab348df3d593...\nIyBQb2xpdGljYWwgU3BlZWNoIC0gU3BlYWtlciBECgoqKkNvbnRleHQqKjogQ2l2aWwgcmlnaHRzIGVyYSBzcGVlY2ggZnJvbSAxOTYwcwoKCldlIGNvbWUgaGVyZSB0b2RheSB3aXRoIGEgZ3JlYXQgc2Vuc2Ugb2YgbWlzZ2l2aW5nLiBJdCBpcyB0cnVlIHRoYXQgd2Ugc3VwcG9ydCB0aGUgYWRtaW5pc3RyYXRpb24ncyBjaXZpbCByaWdodHMgYmlsbC4gV2Ugc3VwcG9ydCBpdCB3aXRoIGdyZWF0IHJlc2VydmF0aW9ucywgaG93ZXZlci4gVW5sZXNzIFRpdGxlIFRocmVlIGlzIHB1dCBpbiB0aGlzIGJpbGwsIHRoZXJlJ3Mgbm90aGluZyB0byBwcm90ZWN0IHRoZSB5b3VuZyBjaGlsZHJlbiBhbmQgb2xkIHdvbWVuIHdobyBtdXN0IGZhY2UgcG9saWNlIGRvZ3MgYW5kIGZpcmUgaG9zZXMgaW4gdGhlIFNvdXRoIHdoaWxlIHRoZXkgZW5nYWdlIGluIHBlYWNlZnVsIGRlbW9uc3RyYXRpb25zLiBJbiBpdHMgcHJlc2VudCBmb3JtLCB0aGlzIGJpbGwgd2lsbCBub3QgcHJvdGVjdCB0aGUgY2l0aXplbnMgb2YgRGFudmlsbGUsIFZpcmdpbmlhLCB3aG8gbXVzdCBsaXZlIGluIGNvbnN0YW50IGZlYXIgb2YgYSBwb2xpY2Ugc3RhdGUuIEl0IHdpbGwgbm90IHByb3RlY3QgdGhlIGh1bmRyZWRzIGFuZCB0aG91c2FuZHMgb2YgcGVvcGxlIHdobyBoYXZlIGJlZW4gYXJyZXN0ZWQgdXBvbiB0cnVtcGVkLXVwIGNoYXJnZXMuCgpXaGF0IGFib3V0IHRoZSB0aHJlZSB5b3VuZyBtZW4gLSBTTkNDIGZpZWxkIHNlY3JldGFyaWVzIGluIEFtZXJpY3VzLCBHZW9yZ2lhIC0gd2hvIGZhY2UgdGhlIGRlYXRoIHBlbmFsdHkgZm9yIGVuZ2FnaW5nIGluIHBlYWNlZnVsIHByb3Rlc3Q/IEFzIGl0IHN0YW5kcyBub3csIHRoZSB2b3Rpbmcgc2VjdGlvbiBvZiB0aGlzIGJpbGwgd2lsbCBub3QgaGVscCB0aGUgdGhvdXNhbmRzIG9mIGJsYWNrIHBlb3BsZSB3aG8gd2FudCB0byB2b3RlLiBJdCB3aWxsIG5vdCBoZWxwIHRoZSBjaXRpemVucyBvZiBNaXNzaXNzaXBwaSwgb2YgQWxhYmFtYSwgYW5kIEdlb3JnaWEsIHdobyBhcmUgcXVhbGlmaWVkIHRvIHZvdGUgYnV0IGxhY2sgYSBzaXh0aC1ncmFkZSBlZHVjYXRpb24uCgpXZSBtdXN0IGhhdmUgbGVnaXNsYXRpb24gdGhhdCB3aWxsIHByb3RlY3QgdGhlIE1pc3Npc3NpcHBpIHNoYXJlY3JvcHBlciB3aG8gaXMgcHV0IG9mZiBvZiBoaXMgZmFybSBiZWNhdXNlIGhlIGRhcmVzIHRvIHJlZ2lzdGVyIHRvIHZvdGUuIFdlIG5lZWQgYSBiaWxsIHRoYXQgd2lsbCBwcm92aWRlIGZvciB0aGUgaG9tZWxlc3MgYW5kIHN0YXJ2aW5nIHBlb3BsZSBvZiB0aGlzIG5hdGlvbi4gV2UgbmVlZCBhIGJpbGwgdG8gZW5zdXJlIHRoZSBlcXVhbGl0eSBvZiBhIG1haWQgd2hvIGVhcm5zIGZpdmUgZG9sbGFycyBhIHdlZWsgaW4gdGhlIGhvbWUgb2YgYSBmYW1pbHkgd2hvc2UgdG90YWwgaW5jb21lIGlzIG9uZSBodW5kcmVkIHRob3VzYW5kIGRvbGxhcnMgYSB5ZWFyLiBXZSBtdXN0IGhhdmUgYSBnb29kIEZFUEMgYmlsbC4KCk15IGZyaWVuZHMsIGxldCB1cyBub3QgZm9yZ2V0IHRoYXQgd2UgYXJlIGludm9sdmVkIGluIGEgc2VyaW91cyBzb2NpYWwgcmV2b2x1dGlvbi4gQnkgYW5kIGxhcmdlLCBBbWVyaWNhbiBwb2xpdGljcyBpcyBkb21pbmF0ZWQgYnkgcG9saXRpY2lhbnMgd2hvIGJ1aWxkIHRoZWlyIGNhcmVlcnMgb24gaW1tb3JhbCBjb21wcm9taXNlcyBhbmQgYWxseSB0aGVtc2VsdmVzIHdpdGggb3BlbiBmb3JtcyBvZiBwb2xpdGljYWwsIGVjb25vbWljLCBhbmQgc29jaWFsIGV4cGxvaXRhdGlvbi4gVGhlcmUgYXJlIGV4Y2VwdGlvbnMsIG9mIGNvdXJzZSAtIHdlIHNhbHV0ZSB0aG9zZSAtIGJ1dCB3aGF0IHBvbGl0aWNhbCBsZWFkZXIgY2FuIHN0YW5kIHVwIGFuZCBzYXksICJNeSBwYXJ0eSBpcyB0aGUgcGFydHkgb2YgcHJpbmNpcGxlcyI/IEZvciB0aGUgcGFydHkgb2YgS2VubmVkeSBpcyBhbHNvIHRoZSBwYXJ0eSBvZiBFYXN0bGFuZC4gVGhlIHBhcnR5IG9mIEphdml0cyBpcyBhbHNvIHRoZSBwYXJ0eSBvZiBHb2xkd2F0ZXIuCgpXaGVyZSBpcyBvdXIgcGFydHk/IFdoZXJlIGlzIHRoZSBwb2xpdGljYWwgcGFydHkgdGhhdCB3aWxsIG1ha2UgaXQgdW5uZWNlc3NhcnkgdG8gbWFyY2ggb24gV2FzaGluZ3Rvbj8gV2hlcmUgaXMgdGhlIHBvbGl0aWNhbCBwYXJ0eSB0aGF0IHdpbGwgbWFrZSBpdCB1bm5lY2Vzc2FyeSB0byBtYXJjaCBpbiB0aGUgc3RyZWV0cyBvZiBCaXJtaW5naGFtPyBXaGVyZSBpcyB0aGUgcG9saXRpY2FsIHBhcnR5IHRoYXQgd2lsbCBwcm90ZWN0IHRoZSBjaXRpemVucyBvZiBBbGJhbnksIEdlb3JnaWE/IERvIHlvdSBrbm93IHRoYXQgaW4gQWxiYW55LCBHZW9yZ2lhLCBuaW5lIG9mIG91ciBsZWFkZXJzIGhhdmUgYmVlbiBpbmRpY3RlZCwgbm90IGJ5IERpeGllY3JhdHMsIGJ1dCBieSB0aGUgZmVkZXJhbCBnb3Zlcm5tZW50IGZvciBwZWFjZWZ1bCBwcm90ZXN0PwoKQnV0IHdoYXQgZGlkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgZG8gd2hlbiBBbGJhbnkgcG9saWNlIGRlcHV0aWVzIGJlYXQgQXR0b3JuZXkgQy5CLiBLaW5nIGFuZCBsZWZ0IGhpbSBoYWxmLWRlYWQ/IFdoYXQgZGlkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgZG8gd2hlbiBsb2NhbCBwb2xpY2Ugb2ZmaWNpYWxzIGtpY2tlZCBhbmQgYXNzYXVsdGVkIHRoZSBwcmVnbmFudCB3aWZlIG9mIFNsYXRlciBLaW5nLCBhbmQgc2hlIGxvc3QgaGVyIGJhYnk/IFRvIHRob3NlIHdobyBoYXZlIHNhaWQsICJCZSBwYXRpZW50IGFuZCB3YWl0LCIgd2UgbXVzdCBzYXkgdGhhdCB3ZSBjYW5ub3QgYmUgcGF0aWVudC4gV2UgZG8gbm90IHdhbnQgb3VyIGZyZWVkb20gZ3JhZHVhbGx5LCBidXQgd2Ugd2FudCB0byBiZSBmcmVlIG5vdyEKCltBcHBsYXVzZV0gW011c2ljXSBbQXBwbGF1c2VdIAoKV2UgYXJlIHRpcmVkISBXZSBhcmUgdGlyZWQgb2YgYmVpbmcgYmVhdGVuIGJ5IHBvbGljZW1lbi4gV2UgYXJlIHRpcmVkIG9mIHNlZWluZyBvdXIgcGVvcGxlIGxvY2tlZCB1cCBpbiBqYWlscyBvdmVyIGFuZCBvdmVyIGFnYWluLiBBbmQgdGhlbiB5b3UgaG9sbGVyLCAiQmUgcGF0aWVudC4iIEhvdyBsb25nIGNhbiB3ZSBiZSBwYXRpZW50PyBXZSB3YW50IG91ciBmcmVlZG9tIGFuZCB3ZSB3YW50IGl0IG5vdyEKCltBcHBsYXVzZV0gCgpXZSBkbyBub3Qgd2FudCB0byBnbyB0byBqYWlsLCBidXQgd2Ugd2lsbCBnbyB0byBqYWlsIGlmIHRoaXMgaXMgdGhlIHByaWNlIHdlIG11c3QgcGF5IGZvciBsb3ZlLCBicm90aGVyaG9vZCwgYW5kIHRydWUgcGVhY2UuIEkgYXBwZWFsIHRvIGFsbCBvZiB5b3UgdG8gZ2V0IGluIHRoaXMgZ3JlYXQgcmV2b2x1dGlvbiB0aGF0IGlzIHN3ZWVwaW5nIHRoaXMgbmF0aW9uLiBHZXQgaW4gYW5kIHN0YXkgaW4gdGhlIHN0cmVldHMgb2YgZXZlcnkgY2l0eSwgZXZlcnkgdmlsbGFnZSBhbmQgaGFtbGV0IG9mIHRoaXMgbmF0aW9uIHVudGlsIHRydWUgZnJlZWRvbSBjb21lcywgdW50aWwgdGhlIHJldm9sdXRpb24gb2YgMTc3NiBpcyBjb21wbGV0ZS4KCldlIG11c3QgZ2V0IGluIHRoaXMgcmV2b2x1dGlvbiBhbmQgY29tcGxldGUgdGhlIHJldm9sdXRpb24uIEZvciBpbiB0aGUgRGVsdGEgb2YgTWlzc2lzc2lwcGksIGluIHNvdXRod2VzdCBHZW9yZ2lhLCBpbiB0aGUgQmxhY2sgQmVsdCBvZiBBbGFiYW1hLCBpbiBIYXJsZW0sIGluIENoaWNhZ28sIERldHJvaXQsIFBoaWxhZGVscGhpYSwgYW5kIGFsbCBvdmVyIHRoaXMgbmF0aW9uLCB0aGUgYmxhY2sgbWFzc2VzIGFyZSBvbiB0aGUgbWFyY2ggZm9yIGpvYnMgYW5kIGZyZWVkb20uCgpUaGV5J3JlIHRhbGtpbmcgYWJvdXQgc2xvdyBkb3duIGFuZCBzdG9wLiBXZSB3aWxsIG5vdCBzdG9wISBBbGwgb2YgdGhlIGZvcmNlcyBvZiBFYXN0bGFuZCwgQmFybmV0dCwgV2FsbGFjZSwgYW5kIFRodXJtb25kIHdpbGwgbm90IHN0b3AgdGhpcyByZXZvbHV0aW9uIQoKW0FwcGxhdXNlXSAKCklmIHdlIGRvIG5vdCBnZXQgbWVhbmluZ2Z1bCBsZWdpc2xhdGlvbiBvdXQgb2YgdGhpcyBDb25ncmVzcywgdGhlIHRpbWUgd2lsbCBjb21lIHdoZW4gd2Ugd2lsbCBub3QgY29uZmluZSBvdXIgbWFyY2hpbmcgdG8gV2FzaGluZ3Rvbi4gV2Ugd2lsbCBtYXJjaCB0aHJvdWdoIHRoZSBTb3V0aCwgdGhyb3VnaCB0aGUgc3RyZWV0cyBvZiBKYWNrc29uLCB0aHJvdWdoIHRoZSBzdHJlZXRzIG9mIERhbnZpbGxlLCB0aHJvdWdoIHRoZSBzdHJlZXRzIG9mIENhbWJyaWRnZSwgdGhyb3VnaCB0aGUgc3RyZWV0cyBvZiBCaXJtaW5naGFtLiBCdXQgd2Ugd2lsbCBtYXJjaCB3aXRoIHRoZSBzcGlyaXQgb2YgbG92ZSBhbmQgd2l0aCB0aGUgc3Bpcml0IG9mIGRpZ25pdHkgdGhhdCB3ZSBoYXZlIHNob3duIGhlcmUgdG9kYXkuCgpbTXVzaWNdIFtBcHBsYXVzZV0gCgpCeSB0aGUgZm9yY2VzIG9mIG91ciBkZW1hbmRzLCBvdXIgZGV0ZXJtaW5hdGlvbiwgYW5kIG91ciBudW1iZXJzLCB3ZSBzaGFsbCBzcGxpbnRlciB0aGUgc2VncmVnYXRlZCBTb3V0aCBpbnRvIGEgdGhvdXNhbmQgcGllY2VzIGFuZCBwdXQgdGhlbSB0b2dldGhlciBpbiB0aGUgaW1hZ2Ugb2YgR29kIGFuZCBkZW1vY3JhY3kuIFdlIG11c3Qgc2F5OiBXYWtlIHVwIEFtZXJpY2EhIFdha2UgdXAhIEZvciB3ZSBjYW5ub3Qgc3RvcCwgYW5kIHdlIHdpbGwgbm90IGFuZCBjYW5ub3QgYmUgcGF0aWVudCEKCltBcHBsYXVzZV0g\n\n\n---\n\nBegin analysis now for batch `batch_85d153cddd0d`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"I'll analyze the document using the Civic Analysis Framework (CAF) v7.3, focusing only on raw dimensional scores, salience, confidence levels, and evidence extraction.\n\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Civic Analysis Framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.89,\n    \"analysis_notes\": \"Applied sequential dimensional analysis with emphasis on civil rights era rhetoric and civic discourse patterns\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_lewis_1963_march_on_washington.txt\",\n      \"dimensional_scores\": {\n        \"dignity\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.90,\n          \"confidence\": 0.92\n        },\n        \"tribalism\": {\n          \"raw_score\": 0.35,\n          \"salience\": 0.60,\n          \"confidence\": 0.88\n        },\n        \"truth\": {\n          \"raw_score\": 0.82,\n          \"salience\": 0.85,\n          \"confidence\": 0.90\n        },\n        \"manipulation\": {\n          \"raw_score\": 0.25,\n          \"salience\": 0.40,\n          \"confidence\": 0.87\n        },\n        \"justice\": {\n          \"raw_score\": 0.95,\n          \"salience\": 0.95,\n          \"confidence\": 0.95\n        },\n        \"resentment\": {\n          \"raw_score\": 0.45,\n          \"salience\": 0.65,\n          \"confidence\": 0.88\n        },\n        \"hope\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.80,\n          \"confidence\": 0.85\n        },\n        \"fear\": {\n          \"raw_score\": 0.40,\n          \"salience\": 0.55,\n          \"confidence\": 0.85\n        },\n        \"pragmatism\": {\n          \"raw_score\": 0.80,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        },\n        \"fantasy\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.30,\n          \"confidence\": 0.85\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"dignity\",\n          \"quote_text\": \"But we will march with the spirit of love and with the spirit of dignity that we have shown here today\",\n          \"confidence\": 0.92,\n          \"context_type\": \"explicit_value_statement\"\n        },\n        {\n          \"dimension\": \"justice\",\n          \"quote_text\": \"We must have legislation that will protect the Mississippi sharecropper who is put off of his farm because he dares to register to vote\",\n          \"confidence\": 0.95,\n          \"context_type\": \"policy_demand\"\n        },\n        {\n          \"dimension\": \"truth\",\n          \"quote_text\": \"It is true that we support the administration's civil rights bill. We support it with great reservations, however.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"nuanced_assessment\"\n        },\n        {\n          \"dimension\": \"hope\",\n          \"quote_text\": \"Get in and stay in the streets of every city, every village and hamlet of this nation until true freedom comes, until the revolution of 1776 is complete\",\n          \"confidence\": 0.85,\n          \"context_type\": \"vision_statement\"\n        },\n        {\n          \"dimension\": \"pragmatism\",\n          \"quote_text\": \"We need a bill that will provide for the homeless and starving people of this nation. We need a bill to ensure the equality of a maid who earns five dollars a week\",\n          \"confidence\": 0.85,\n          \"context_type\": \"specific_policy_proposal\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>","prompt_length":47650,"response_length":3387,"metadata":{"batch_id":"batch_85d153cddd0d","mathematical_validation":true,"tokens_input":365,"tokens_output":328},"session_id":"20250808T030048Z_4ef84eb7","timestamp":"2025-08-08T03:01:08.168603+00:00"}
{"log_type":"llm_interaction","interaction_hash":"8ad188e3b6e0a9d3","agent_name":"EnhancedAnalysisAgent","model":"anthropic/claude-3-5-sonnet-20241022","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_mccain_2008_concession.txt\nHash: ff9b26f20ad6...\\n\n\n---\n\nBegin analysis now for batch `batch_7b0d698e194b`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"I'll analyze the document using the Civic Analysis Framework (CAF) v7.3, focusing only on raw dimensional scores, salience, confidence levels, and evidence extraction.\n\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Civic Analysis Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.92,\n    \"analysis_notes\": \"High-quality concession speech with clear civic virtues, comprehensive sequential analysis performed\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_mccain_2008_concession.txt\",\n      \"dimensional_scores\": {\n        \"dignity\": {\n          \"raw_score\": 0.95,\n          \"salience\": 0.90,\n          \"confidence\": 0.95\n        },\n        \"tribalism\": {\n          \"raw_score\": 0.15,\n          \"salience\": 0.30,\n          \"confidence\": 0.90\n        },\n        \"truth\": {\n          \"raw_score\": 0.90,\n          \"salience\": 0.85,\n          \"confidence\": 0.95\n        },\n        \"manipulation\": {\n          \"raw_score\": 0.10,\n          \"salience\": 0.20,\n          \"confidence\": 0.90\n        },\n        \"justice\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.80,\n          \"confidence\": 0.90\n        },\n        \"resentment\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.15,\n          \"confidence\": 0.95\n        },\n        \"hope\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.85,\n          \"confidence\": 0.90\n        },\n        \"fear\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.25,\n          \"confidence\": 0.90\n        },\n        \"pragmatism\": {\n          \"raw_score\": 0.80,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        },\n        \"fantasy\": {\n          \"raw_score\": 0.10,\n          \"salience\": 0.20,\n          \"confidence\": 0.90\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"dignity\",\n          \"quote_text\": \"Whatever our differences, we are fellow Americans, and please believe me when I say no association has ever meant more to me than that.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"explicit_virtue\"\n        },\n        {\n          \"dimension\": \"truth\",\n          \"quote_text\": \"The American people have spoken, and they have spoken clearly... though we fell short, the failure is mine, not yours.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct_acknowledgment\"\n        },\n        {\n          \"dimension\": \"justice\",\n          \"quote_text\": \"We have come a long way from the old injustices that once stained our nation's reputation and denied some Americans the full blessings of American citizenship\",\n          \"confidence\": 0.90,\n          \"context_type\": \"historical_context\"\n        },\n        {\n          \"dimension\": \"hope\",\n          \"quote_text\": \"I call on all Americans... to not despair of our present difficulties, but to believe always in the promise and greatness of America.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"future_oriented\"\n        },\n        {\n          \"dimension\": \"pragmatism\",\n          \"quote_text\": \"I pledge to him tonight to do all in my power to help him lead us through the many challenges we face... to find the necessary compromises to bridge our differences\",\n          \"confidence\": 0.85,\n          \"context_type\": \"concrete_action\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>","prompt_length":50238,"response_length":3398,"metadata":{"batch_id":"batch_7b0d698e194b","mathematical_validation":true,"tokens_input":365,"tokens_output":324},"session_id":"20250808T030048Z_4ef84eb7","timestamp":"2025-08-08T03:01:27.828916+00:00"}
{"log_type":"llm_interaction","interaction_hash":"8d3c3e5d8ab96dbc","agent_name":"EnhancedAnalysisAgent","model":"anthropic/claude-3-5-sonnet-20241022","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\nIyBDaXZpYyBBbmFseXNpcyBGcmFtZXdvcmsgKENBRikgdjcuMwoKVGhlIENpdmljIEFuYWx5c2lzIEZyYW1ld29yayBwcm92aWRlcyBhIHN5c3RlbWF0aWMgYXBwcm9hY2ggdG8gZXZhbHVhdGluZyB0aGUgY2l2aWMgY2hhcmFjdGVyIG9mIHBvbGl0aWNhbCBkaXNjb3Vyc2UsIGZvY3VzaW5nIG9uIHRoZSBmdW5kYW1lbnRhbCB0ZW5zaW9ucyBiZXR3ZWVuIGNvbXBldGluZyBjaXZpYyB2aXJ0dWVzIGFuZCB0aGVpciBzdHJhdGVnaWMgZGVwbG95bWVudCBpbiBwdWJsaWMgY29tbXVuaWNhdGlvbi4KCiMjIFJhaXNvbiBkJ8OKdHJlCgpEZW1vY3JhdGljIGdvdmVybmFuY2UgZGVwZW5kcyBvbiBjaXZpYyBkaXNjb3Vyc2UgdGhhdCBlbWJvZGllcyBmdW5kYW1lbnRhbCB2aXJ0dWVzOiBkaWduaXR5LCB0cnV0aCwganVzdGljZSwgaG9wZSwgYW5kIHByYWdtYXRpc20uIEhvd2V2ZXIsIHBvbGl0aWNhbCBjb21tdW5pY2F0aW9uIG9mdGVuIGludm9sdmVzIHN0cmF0ZWdpYyB0ZW5zaW9ucyB3aGVyZSBzcGVha2VycyBzaW11bHRhbmVvdXNseSBhcHBlYWwgdG8gY29tcGV0aW5nIHZpcnR1ZXMgYW5kIHRoZWlyIHBhdGhvbG9naWNhbCBjb3VudGVycGFydHMuIFRoaXMgZnJhbWV3b3JrIHByb3ZpZGVzIGEgcmlnb3JvdXMgbWV0aG9kb2xvZ3kgZm9yIGV2YWx1YXRpbmcgdGhlc2UgdGVuc2lvbnMgYW5kIGFzc2Vzc2luZyB0aGUgb3ZlcmFsbCBjaXZpYyBjaGFyYWN0ZXIgb2YgcG9saXRpY2FsIGRpc2NvdXJzZS4KCiMjIFJlc2VhcmNoIEZvdW5kYXRpb25zCgpUaGlzIGZyYW1ld29yayBpcyBncm91bmRlZCBpbjoKLSAqKkNsYXNzaWNhbCBDaXZpYyBSZXB1YmxpY2FuIFRoZW9yeSoqOiBTdXN0YWluYWJsZSBkZW1vY3JhdGljIGdvdmVybmFuY2UgcmVxdWlyZXMgY2l0aXplbnMgYW5kIGxlYWRlcnMgd2hvIGVtYm9keSBjaXZpYyB2aXJ0dWVzCi0gKipWaXJ0dWUgRXRoaWNzKio6IENoYXJhY3RlciBhc3Nlc3NtZW50IHRocm91Z2ggZGVtb25zdHJhdGVkIHBhdHRlcm5zIG9mIG1vcmFsIHJlYXNvbmluZwotICoqUG9saXRpY2FsIENvbW11bmljYXRpb24gVGhlb3J5Kio6IFN0cmF0ZWdpYyBkZXBsb3ltZW50IG9mIGFwcGVhbHMgaW4gcHVibGljIGRpc2NvdXJzZQotICoqVGVuc2lvbiBNYXRoZW1hdGljcyoqOiBRdWFudGl0YXRpdmUgYXNzZXNzbWVudCBvZiBjb21wZXRpbmcgdmFsdWUgc3lzdGVtcwoKIyMgRGltZW5zaW9ucyBhbmQgQXhlcwoKVGhlIGZyYW1ld29yayBldmFsdWF0ZXMgcG9saXRpY2FsIGRpc2NvdXJzZSBhY3Jvc3MgZml2ZSBiaXBvbGFyIGF4ZXMgdGhhdCBmb3JtIHRoZSBmb3VuZGF0aW9uIG9mIGNpdmljIGNoYXJhY3RlcjoKCiMjIyBJZGVudGl0eSBBeGlzOiBEaWduaXR5IOKGlCBUcmliYWxpc20KLSAqKkRpZ25pdHkgKDAuMC0xLjApKio6IEFwcGVhbHMgdG8gdW5pdmVyc2FsIGh1bWFuIHdvcnRoLCByZXNwZWN0IGZvciBpbmRpdmlkdWFscyByZWdhcmRsZXNzIG9mIGdyb3VwIG1lbWJlcnNoaXAsIGVtcGhhc2lzIG9uIHNoYXJlZCBodW1hbml0eSBhbmQgaW5kaXZpZHVhbCBtb3JhbCBhZ2VuY3kKLSAqKlRyaWJhbGlzbSAoMC4wLTEuMCkqKjogQXBwZWFscyB0byBncm91cCBpZGVudGl0eSwgdXMtdnMtdGhlbSBmcmFtaW5nLCBlbXBoYXNpcyBvbiBncm91cCBsb3lhbHR5IG92ZXIgdW5pdmVyc2FsIHByaW5jaXBsZXMsIGV4Y2x1c2lvbmFyeSByaGV0b3JpYwoKIyMjIFRydXRoIEF4aXM6IFRydXRoIOKGlCBNYW5pcHVsYXRpb24gIAotICoqVHJ1dGggKDAuMC0xLjApKio6IENvbW1pdG1lbnQgdG8gZmFjdHVhbCBhY2N1cmFjeSwgYWNrbm93bGVkZ21lbnQgb2YgY29tcGxleGl0eSwgaW50ZWxsZWN0dWFsIGhvbmVzdHksIGV2aWRlbmNlLWJhc2VkIHJlYXNvbmluZwotICoqTWFuaXB1bGF0aW9uICgwLjAtMS4wKSoqOiBTdHJhdGVnaWMgZGlzdG9ydGlvbiBvZiBpbmZvcm1hdGlvbiwgZW1vdGlvbmFsIG1hbmlwdWxhdGlvbiwgbWlzbGVhZGluZyBmcmFtaW5nLCBleHBsb2l0YXRpb24gb2YgY29nbml0aXZlIGJpYXNlcwoKIyMjIEp1c3RpY2UgQXhpczogSnVzdGljZSDihpQgUmVzZW50bWVudAotICoqSnVzdGljZSAoMC4wLTEuMCkqKjogQ29uY2VybiBmb3IgZmFpciBvdXRjb21lcywgcHJvY2VkdXJhbCBmYWlybmVzcywgcHJvdGVjdGlvbiBvZiByaWdodHMsIHN5c3RlbWljIGVxdWl0eSBjb25zaWRlcmF0aW9ucwotICoqUmVzZW50bWVudCAoMC4wLTEuMCkqKjogRXhwbG9pdGF0aW9uIG9mIGdyaWV2YW5jZXMsIGJsYW1lLWZvY3VzZWQgcmhldG9yaWMsIHplcm8tc3VtIGZyYW1pbmcsIHZpY3RpbWl6YXRpb24gbmFycmF0aXZlcwoKIyMjIEVtb3Rpb25hbCBBeGlzOiBIb3BlIOKGlCBGZWFyCi0gKipIb3BlICgwLjAtMS4wKSoqOiBDb25zdHJ1Y3RpdmUgb3B0aW1pc20sIHBvc2l0aXZlIHZpc2lvbiBmb3IgdGhlIGZ1dHVyZSwgZW1wb3dlcm1lbnQgcmhldG9yaWMsIHBvc3NpYmlsaXR5LWZvY3VzZWQgbGFuZ3VhZ2UKLSAqKkZlYXIgKDAuMC0xLjApKio6IEFueGlldHktaW5kdWNpbmcgcmhldG9yaWMsIHRocmVhdC1mb2N1c2VkIGxhbmd1YWdlLCBjYXRhc3Ryb3BoaWMgZnJhbWluZywgc2VjdXJpdHktYmFzZWQgYXBwZWFscwoKIyMjIFJlYWxpdHkgQXhpczogUHJhZ21hdGlzbSDihpQgRmFudGFzeQotICoqUHJhZ21hdGlzbSAoMC4wLTEuMCkqKjogUmVhbGlzdGljIHByb2JsZW0tc29sdmluZywgYWNrbm93bGVkZ21lbnQgb2YgY29uc3RyYWludHMsIHByYWN0aWNhbCBzb2x1dGlvbnMsIGluY3JlbWVudGFsIHByb2dyZXNzCi0gKipGYW50YXN5ICgwLjAtMS4wKSoqOiBVbnJlYWxpc3RpYyBwcm9taXNlcywgbWFnaWNhbCB0aGlua2luZywgb3ZlcnNpbXBsaWZpZWQgc29sdXRpb25zLCBkZW5pYWwgb2YgY29uc3RyYWludHMKCiMjIExpbmd1aXN0aWMgTWFya2VycwoKKipDcml0aWNhbCBOb3RlKio6IFRoZXNlIG1hcmtlcnMgcmVwcmVzZW50IHNlbWFudGljIHNwYWNlcyBhbmQgY29uY2VwdHVhbCBwYXR0ZXJucywgbm90IGtleXdvcmQgbGlzdHMuIEFuYWx5c3RzIHNob3VsZCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBjb25jZXB0cyBhbmQgbWVhbmluZ3MgZXhwcmVzc2VkIHRocm91Z2ggdmFyaW91cyBsaW5ndWlzdGljIGZvcm1zLCBub3QganVzdCBsaXRlcmFsIHdvcmQgbWF0Y2hlcy4KCiMjIyBEaWduaXR5IE1hcmtlcnMKTG9vayBmb3IgZGlnbml0eSBjb25jZXB0cyBzdWNoIGFzOgotIFVuaXZlcnNhbCBwcm9ub3VuczogImFsbCBwZW9wbGUsIiAiZXZlcnkgY2l0aXplbiwiICJodW1hbiBkaWduaXR5IgotIEluZGl2aWR1YWwgYWdlbmN5OiAicGVyc29uYWwgcmVzcG9uc2liaWxpdHksIiAiaW5kaXZpZHVhbCBjaG9pY2UsIiAiaHVtYW4gcG90ZW50aWFsIiAgCi0gSW5jbHVzaXZlIGxhbmd1YWdlOiAicmVnYXJkbGVzcyBvZiwiICJpcnJlc3BlY3RpdmUgb2YsIiAiY29tbW9uIGh1bWFuaXR5IgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YgdW5pdmVyc2FsIGh1bWFuIHdvcnRoIGFuZCBpbmRpdmlkdWFsIG1vcmFsIGFnZW5jeSByZWdhcmRsZXNzIG9mIHRoZSBleGFjdCBsYW5ndWFnZSB1c2VkLioKCiMjIyBUcmliYWxpc20gTWFya2VycwpMb29rIGZvciB0cmliYWxpc20gY29uY2VwdHMgc3VjaCBhczoKLSBHcm91cCBpZGVudGlmaWVyczogInVzIHZzIHRoZW0sIiAib3VyIHBlb3BsZSwiICJyZWFsIEFtZXJpY2FucyIKLSBFeGNsdXNpb25hcnkgbGFuZ3VhZ2U6ICJvdXRzaWRlcnMsIiAiZW5lbWllcyB3aXRoaW4sIiAibm90IG9uZSBvZiB1cyIKLSBMb3lhbHR5IHRlc3RzOiAid2l0aCB1cyBvciBhZ2FpbnN0IHVzLCIgInRydWUgYmVsaWV2ZXJzLCIgImJldHJheWFsIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBncm91cCBsb3lhbHR5IG92ZXIgdW5pdmVyc2FsIHByaW5jaXBsZXMgYW5kIGV4Y2x1c2lvbmFyeSByaGV0b3JpYyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIHRlcm1pbm9sb2d5LioKCiMjIyBUcnV0aCBNYXJrZXJzCkxvb2sgZm9yIHRydXRoLWNvbW1pdG1lbnQgY29uY2VwdHMgc3VjaCBhczoKLSBFdmlkZW5jZSBsYW5ndWFnZTogImRhdGEgc2hvd3MsIiAicmVzZWFyY2ggaW5kaWNhdGVzLCIgImZhY3RzIGRlbW9uc3RyYXRlIgotIENvbXBsZXhpdHkgYWNrbm93bGVkZ21lbnQ6ICJvbiB0aGUgb3RoZXIgaGFuZCwiICJob3dldmVyLCIgIml0J3MgY29tcGxpY2F0ZWQiCi0gSW50ZWxsZWN0dWFsIGh1bWlsaXR5OiAiSSBjb3VsZCBiZSB3cm9uZywiICJtb3JlIHN0dWR5IG5lZWRlZCwiICJ1bmNlcnRhaW4iCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbW1pdG1lbnQgdG8gZmFjdHVhbCBhY2N1cmFjeSBhbmQgaW50ZWxsZWN0dWFsIGhvbmVzdHkgcmVnYXJkbGVzcyBvZiBleGFjdCBwaHJhc2luZy4qCgojIyMgTWFuaXB1bGF0aW9uIE1hcmtlcnMKTG9vayBmb3IgbWFuaXB1bGF0aW9uIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gRW1vdGlvbmFsIHRyaWdnZXJzOiAib3V0cmFnZW91cywiICJzaG9ja2luZywiICJ1bmJlbGlldmFibGUiCi0gRmFsc2UgZGljaG90b21pZXM6ICJvbmx5IHR3byBjaG9pY2VzLCIgImVpdGhlci9vciwiICJubyBtaWRkbGUgZ3JvdW5kIgotIENvZ25pdGl2ZSBiaWFzIGV4cGxvaXRhdGlvbjogImV2ZXJ5b25lIGtub3dzLCIgIm9idmlvdXNseSwiICJjb21tb24gc2Vuc2UiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIHN0cmF0ZWdpYyBpbmZvcm1hdGlvbiBkaXN0b3J0aW9uIGFuZCBlbW90aW9uYWwgbWFuaXB1bGF0aW9uIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgdGVjaG5pcXVlcyB1c2VkLioKCiMjIyBKdXN0aWNlIE1hcmtlcnMKTG9vayBmb3IganVzdGljZSBjb25jZXB0cyBzdWNoIGFzOgotIEZhaXJuZXNzIGxhbmd1YWdlOiAiZXF1YWwgdHJlYXRtZW50LCIgImxldmVsIHBsYXlpbmcgZmllbGQsIiAiZHVlIHByb2Nlc3MiCi0gUmlnaHRzIHByb3RlY3Rpb246ICJjb25zdGl0dXRpb25hbCByaWdodHMsIiAiY2l2aWwgbGliZXJ0aWVzLCIgImVxdWFsIHByb3RlY3Rpb24iCi0gU3lzdGVtaWMgdGhpbmtpbmc6ICJzdHJ1Y3R1cmFsIGlzc3VlcywiICJpbnN0aXR1dGlvbmFsIHJlZm9ybSwiICJzeXN0ZW1pYyBjaGFuZ2UiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcm4gZm9yIGZhaXIgb3V0Y29tZXMgYW5kIHJpZ2h0cyBwcm90ZWN0aW9uIHJlZ2FyZGxlc3Mgb2YgZXhhY3QgbGVnYWwgb3IgcG9saXRpY2FsIHRlcm1pbm9sb2d5LioKCiMjIyBSZXNlbnRtZW50IE1hcmtlcnMKTG9vayBmb3IgcmVzZW50bWVudCBjb25jZXB0cyBzdWNoIGFzOgotIEdyaWV2YW5jZSBsYW5ndWFnZTogInRoZXkgdG9vayBmcm9tIHVzLCIgIndlJ3ZlIGJlZW4gd3JvbmdlZCwiICJ2aWN0aW1zIG9mIgotIEJsYW1lIGF0dHJpYnV0aW9uOiAiaXQncyB0aGVpciBmYXVsdCwiICJ0aGV5IGNhdXNlZCB0aGlzLCIgInJlc3BvbnNpYmxlIGZvciBvdXIgcHJvYmxlbXMiCi0gWmVyby1zdW0gZnJhbWluZzogInRoZWlyIGdhaW4gaXMgb3VyIGxvc3MsIiAiZmluaXRlIHJlc291cmNlcywiICJ3aW5uZXIgdGFrZXMgYWxsIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBleHBsb2l0YXRpb24gb2YgZ3JpZXZhbmNlcyBhbmQgYmxhbWUtZm9jdXNlZCByaGV0b3JpYyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIHRhcmdldHMgb3IgbGFuZ3VhZ2UuKgoKIyMjIEhvcGUgTWFya2VycwpMb29rIGZvciBob3BlIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gUG9zc2liaWxpdHkgbGFuZ3VhZ2U6ICJ3ZSBjYW4sIiAidG9nZXRoZXIgd2Ugd2lsbCwiICJicmlnaHQgZnV0dXJlIgotIEVtcG93ZXJtZW50IHJoZXRvcmljOiAiaW4gb3VyIGhhbmRzLCIgIndlIGhhdmUgdGhlIHBvd2VyLCIgIm1ha2UgaXQgaGFwcGVuIgotIENvbnN0cnVjdGl2ZSB2aXNpb246ICJidWlsZGluZywiICJjcmVhdGluZywiICJpbXByb3ZpbmciCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbnN0cnVjdGl2ZSBvcHRpbWlzbSBhbmQgcG9zaXRpdmUgZnV0dXJlIHZpc2lvbiByZWdhcmRsZXNzIG9mIHNwZWNpZmljIGFzcGlyYXRpb25hbCBsYW5ndWFnZSB1c2VkLioKCiMjIyBGZWFyIE1hcmtlcnMKTG9vayBmb3IgZmVhciBjb25jZXB0cyBzdWNoIGFzOgotIFRocmVhdCBsYW5ndWFnZTogImRhbmdlciwiICJjcmlzaXMsIiAidW5kZXIgYXR0YWNrIgotIENhdGFzdHJvcGhpYyBmcmFtaW5nOiAiZGlzYXN0ZXIsIiAiY29sbGFwc2UsIiAiZW5kIG9mIgotIFNlY3VyaXR5IGFwcGVhbHM6ICJwcm90ZWN0IG91cnNlbHZlcywiICJkZWZlbmQgYWdhaW5zdCwiICJzYWZldHkgZmlyc3QiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGFueGlldHktaW5kdWNpbmcgcmhldG9yaWMgYW5kIHRocmVhdC1mb2N1c2VkIGxhbmd1YWdlIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgZmVhcnMgb3IgdGhyZWF0cyBtZW50aW9uZWQuKgoKIyMjIFByYWdtYXRpc20gTWFya2VycwpMb29rIGZvciBwcmFnbWF0aXNtIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQ29uc3RyYWludCBhY2tub3dsZWRnbWVudDogIndpdGhpbiBvdXIgbWVhbnMsIiAicmVhbGlzdGljIGdvYWxzLCIgInN0ZXAgYnkgc3RlcCIKLSBQcm9ibGVtLXNvbHZpbmcgZm9jdXM6ICJwcmFjdGljYWwgc29sdXRpb25zLCIgIndoYXQgd29ya3MsIiAiZXZpZGVuY2UtYmFzZWQiCi0gSW5jcmVtZW50YWwgcHJvZ3Jlc3M6ICJncmFkdWFsIGltcHJvdmVtZW50LCIgImJ1aWxkaW5nIG9uLCIgIm5leHQgc3RlcHMiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIHJlYWxpc3RpYyBwcm9ibGVtLXNvbHZpbmcgYW5kIGNvbnN0cmFpbnQgYWNrbm93bGVkZ21lbnQgcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyBwb2xpY3kgYXJlYXMgb3IgYXBwcm9hY2hlcy4qCgojIyMgRmFudGFzeSBNYXJrZXJzCkxvb2sgZm9yIGZhbnRhc3kgY29uY2VwdHMgc3VjaCBhczoKLSBNYWdpY2FsIHRoaW5raW5nOiAiZWFzeSBzb2x1dGlvbnMsIiAic2ltcGxlIGZpeCwiICJvdmVybmlnaHQgY2hhbmdlIgotIFVucmVhbGlzdGljIHByb21pc2VzOiAiZWxpbWluYXRlIGFsbCwiICJwZXJmZWN0IHdvcmxkLCIgIm5vIG1vcmUiCi0gQ29uc3RyYWludCBkZW5pYWw6ICJtb25leSBpcyBubyBvYmplY3QsIiAidW5saW1pdGVkIHJlc291cmNlcywiICJhbnl0aGluZyBpcyBwb3NzaWJsZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gdW5yZWFsaXN0aWMgcHJvbWlzZXMgYW5kIGNvbnN0cmFpbnQgZGVuaWFsIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgcG9saWN5IGFyZWFzIG9yIHByb21pc2VzIG1hZGUuKgoKIyMgQW5hbHlzaXMgTWV0aG9kb2xvZ3kKClRoZSBmcmFtZXdvcmsgZW1wbG95cyBzZXF1ZW50aWFsIGNoYWluLW9mLXRob3VnaHQgYW5hbHlzaXMsIGV4YW1pbmluZyBlYWNoIGRpbWVuc2lvbiBncm91cCBpbmRlcGVuZGVudGx5IGJlZm9yZSBpbnRlZ3JhdGlvbi4gVGhpcyBhcHByb2FjaCBpbXByb3ZlcyBhbmFseXRpY2FsIGNvbnNpc3RlbmN5IGFuZCBldmlkZW5jZSBxdWFsaXR5IGJ5IGZvY3VzaW5nIGF0dGVudGlvbiBvbiBzcGVjaWZpYyBwYXR0ZXJucyBiZWZvcmUgc3ludGhlc2lzLgoKIyMgV2VpZ2h0aW5nIFNjaGVtZQoKKipEeW5hbWljIFNhbGllbmNlIFdlaWdodGluZyoqOiBFYWNoIGRpbWVuc2lvbiByZWNlaXZlcyBhIHNhbGllbmNlIHdlaWdodCAoMC4wLTEuMCkgYmFzZWQgb24gaXRzIGNlbnRyYWxpdHkgdG8gdGhlIHNwZWNpZmljIHRleHQgYmVpbmcgYW5hbHl6ZWQuIFRoaXMgYWxsb3dzIHRoZSBmcmFtZXdvcmsgdG8gYWRhcHQgdG8gZGlmZmVyZW50IHR5cGVzIG9mIHBvbGl0aWNhbCBkaXNjb3Vyc2Ugd2hpbGUgbWFpbnRhaW5pbmcgYW5hbHl0aWNhbCByaWdvci4KCiMjIENhbGN1bGF0ZWQgTWV0cmljcwoKIyMjIFRlbnNpb24gU2NvcmVzCi0gKipEaWduaXR5LVRyaWJhbGlzbSBUZW5zaW9uKio6IChkaWduaXR5X3Njb3JlICsgKDEgLSB0cmliYWxpc21fc2NvcmUpKSAvIDIKLSAqKlRydXRoLU1hbmlwdWxhdGlvbiBUZW5zaW9uKio6ICh0cnV0aF9zY29yZSArICgxIC0gbWFuaXB1bGF0aW9uX3Njb3JlKSkgLyAyICAKLSAqKkp1c3RpY2UtUmVzZW50bWVudCBUZW5zaW9uKio6IChqdXN0aWNlX3Njb3JlICsgKDEgLSByZXNlbnRtZW50X3Njb3JlKSkgLyAyCi0gKipIb3BlLUZlYXIgVGVuc2lvbioqOiAoaG9wZV9zY29yZSArICgxIC0gZmVhcl9zY29yZSkpIC8gMgotICoqUHJhZ21hdGlzbS1GYW50YXN5IFRlbnNpb24qKjogKHByYWdtYXRpc21fc2NvcmUgKyAoMSAtIGZhbnRhc3lfc2NvcmUpKSAvIDIKCiMjIyBDb21wb3NpdGUgSW5kaWNlcwotICoqQ2l2aWMgQ2hhcmFjdGVyIEluZGV4Kio6IEF2ZXJhZ2Ugb2YgYWxsIHRlbnNpb24gc2NvcmVzCi0gKipTYWxpZW5jZS1XZWlnaHRlZCBDaXZpYyBDaGFyYWN0ZXIgSW5kZXgqKjogVGVuc2lvbiBzY29yZXMgd2VpZ2h0ZWQgYnkgZGltZW5zaW9uIHNhbGllbmNlCi0gKipWaXJ0dWUgSW5kZXgqKjogQXZlcmFnZSBvZiBwb3NpdGl2ZSBkaW1lbnNpb24gc2NvcmVzIChkaWduaXR5LCB0cnV0aCwganVzdGljZSwgaG9wZSwgcHJhZ21hdGlzbSkKLSAqKlBhdGhvbG9neSBJbmRleCoqOiBBdmVyYWdlIG9mIG5lZ2F0aXZlIGRpbWVuc2lvbiBzY29yZXMgKHRyaWJhbGlzbSwgbWFuaXB1bGF0aW9uLCByZXNlbnRtZW50LCBmZWFyLCBmYW50YXN5KQoKIyMgUGF0dGVybiBDbGFzc2lmaWNhdGlvbnMKCiMjIyBDaXZpYyBDaGFyYWN0ZXIgUHJvZmlsZXMKLSAqKkhpZ2ggQ2l2aWMgQ2hhcmFjdGVyKiogKOKJpTAuNzUpOiBDb25zaXN0ZW50IHZpcnR1ZSBhcHBlYWxzIHdpdGggbWluaW1hbCBwYXRob2xvZ2ljYWwgZWxlbWVudHMKLSAqKk1peGVkIENoYXJhY3RlcioqICgwLjUwLTAuNzQpOiBCYWxhbmNlIG9mIHZpcnR1ZSBhbmQgcGF0aG9sb2d5IHdpdGggc3RyYXRlZ2ljIHRlbnNpb25zCi0gKipMb3cgQ2l2aWMgQ2hhcmFjdGVyKiogKDAuMjUtMC40OSk6IFByZWRvbWluYW50bHkgcGF0aG9sb2dpY2FsIGFwcGVhbHMgd2l0aCBsaW1pdGVkIHZpcnR1ZQotICoqUGF0aG9sb2dpY2FsIERpc2NvdXJzZSoqICg8MC4yNSk6IFN5c3RlbWF0aWMgdmlydHVlIGRlZmljaXRzIGFjcm9zcyBtdWx0aXBsZSBkaW1lbnNpb25zCgojIyMgU3RyYXRlZ2ljIFBhdHRlcm5zCi0gKipWaXJ0dWUgU2lnbmFsaW5nKiogKEhpZ2ggdmlydHVlIHNjb3JlcywgbG93IHNhbGllbmNlKTogU3VwZXJmaWNpYWwgdmlydHVlIGFwcGVhbHMgd2l0aG91dCBzdWJzdGFudGl2ZSBjb21taXRtZW50Ci0gKipTdHJhdGVnaWMgUGF0aG9sb2d5KiogKEhpZ2ggcGF0aG9sb2d5IHNjb3JlcywgaGlnaCBzYWxpZW5jZSk6IERlbGliZXJhdGUgZGVwbG95bWVudCBvZiBkaXZpc2l2ZSByaGV0b3JpYwotICoqQXV0aGVudGljIFZpcnR1ZSoqIChIaWdoIHZpcnR1ZSBzY29yZXMsIGhpZ2ggc2FsaWVuY2UpOiBHZW51aW5lIGNvbW1pdG1lbnQgdG8gY2l2aWMgaWRlYWxzCi0gKipJbmNvaGVyZW50IE1lc3NhZ2luZyoqIChIaWdoIHZhcmlhbmNlIGFjcm9zcyBkaW1lbnNpb25zKTogSW5jb25zaXN0ZW50IHZhbHVlIGFwcGVhbHMKCiMjIFJlbGlhYmlsaXR5IGFuZCBWYWxpZGl0eQoKIyMjIEludGVyLVJhdGVyIFJlbGlhYmlsaXR5CkZyYW1ld29yayBkZXNpZ25lZCBmb3IgaGlnaCBjb25zaXN0ZW5jeSBhY3Jvc3MgYW5hbHlzdHMgdGhyb3VnaDoKLSBDbGVhciBvcGVyYXRpb25hbCBkZWZpbml0aW9ucyBmb3IgZWFjaCBkaW1lbnNpb24KLSBTcGVjaWZpYyBsaW5ndWlzdGljIG1hcmtlcnMgYW5kIGV4YW1wbGVzCi0gU2VxdWVudGlhbCBhbmFseXNpcyBtZXRob2RvbG9neQotIEV4cGxpY2l0IGNvbmZpZGVuY2UgcmVwb3J0aW5nIHJlcXVpcmVtZW50cwoKIyMjIENvbnN0cnVjdCBWYWxpZGl0eQpEaW1lbnNpb25zIGdyb3VuZGVkIGluIGVzdGFibGlzaGVkIHBvbGl0aWNhbCB0aGVvcnkgYW5kIHZhbGlkYXRlZCB0aHJvdWdoOgotIENsYXNzaWNhbCBjaXZpYyByZXB1YmxpY2FuIGxpdGVyYXR1cmUKLSBDb250ZW1wb3JhcnkgcG9saXRpY2FsIGNvbW11bmljYXRpb24gcmVzZWFyY2gKLSBFbXBpcmljYWwgdGVzdGluZyBhY3Jvc3MgZGl2ZXJzZSBwb2xpdGljYWwgdGV4dHMKLSBFeHBlcnQgcmV2aWV3IGFuZCByZWZpbmVtZW50CgojIyBDb25zaWRlcmF0aW9ucyBvbiBCaWFzCgojIyMgUG90ZW50aWFsIFNvdXJjZXMKLSAqKklkZW9sb2dpY2FsIEJpYXMqKjogQW5hbHlzdHMnIHBvbGl0aWNhbCBwcmVmZXJlbmNlcyBtYXkgaW5mbHVlbmNlIHZpcnR1ZS9wYXRob2xvZ3kgYXNzZXNzbWVudHMKLSAqKkN1bHR1cmFsIEJpYXMqKjogRnJhbWV3b3JrIGRldmVsb3BlZCB3aXRoaW4gV2VzdGVybiBkZW1vY3JhdGljIGNvbnRleHQKLSAqKlRlbXBvcmFsIEJpYXMqKjogQ29udGVtcG9yYXJ5IHBvbGl0aWNhbCBub3JtcyBtYXkgbm90IGFwcGx5IHRvIGhpc3RvcmljYWwgdGV4dHMKLSAqKlNlbGVjdGlvbiBCaWFzKio6IFRleHQgc2FtcGxpbmcgbWF5IG5vdCByZXByZXNlbnQgZnVsbCBzcGVjdHJ1bSBvZiBwb2xpdGljYWwgZGlzY291cnNlCgojIyMgTWl0aWdhdGlvbiBTdHJhdGVnaWVzCi0gKipNdWx0aS1BbmFseXN0IFJldmlldyoqOiBJbmRlcGVuZGVudCBhbmFseXNpcyBieSBtdWx0aXBsZSB0cmFpbmVkIGFzc2Vzc29ycwotICoqQmxpbmQgQW5hbHlzaXMqKjogQW5hbHlzdHMgdW5hd2FyZSBvZiBzcGVha2VyIGlkZW50aXR5IGR1cmluZyBhc3Nlc3NtZW50Ci0gKipDcm9zcy1DdWx0dXJhbCBWYWxpZGF0aW9uKio6IFRlc3RpbmcgZnJhbWV3b3JrIGFjcm9zcyBkaWZmZXJlbnQgcG9saXRpY2FsIHN5c3RlbXMKLSAqKkxvbmdpdHVkaW5hbCBDb25zaXN0ZW5jeSoqOiBSZWd1bGFyIHJlY2FsaWJyYXRpb24gdXNpbmcgYmVuY2htYXJrIHRleHRzCgojIyBBbmFseXRpY2FsIExheWVycwoKIyMjIExheWVyIDE6IFN1cmZhY2UgRmVhdHVyZXMKRGlyZWN0IHRleHR1YWwgZXZpZGVuY2Ugb2YgdmlydHVlL3BhdGhvbG9neSBtYXJrZXJzIHRocm91Z2ggbGluZ3Vpc3RpYyBhbmFseXNpcwoKIyMjIExheWVyIDI6IFN0cmF0ZWdpYyBJbnRlbnQKQXNzZXNzbWVudCBvZiBkZWxpYmVyYXRlIHJoZXRvcmljYWwgY2hvaWNlcyBhbmQgdGhlaXIgY2l2aWMgaW1wbGljYXRpb25zCgojIyMgTGF5ZXIgMzogU3lzdGVtaWMgSW1wYWN0CkV2YWx1YXRpb24gb2YgZGlzY291cnNlJ3MgY29udHJpYnV0aW9uIHRvIGRlbW9jcmF0aWMgaGVhbHRoIGFuZCBjaXZpYyBjdWx0dXJlCgojIyBJbnRlci1GcmFtZXdvcmsgUmVsYXRpb25zaGlwcwoKKipDQUYqKiBzZXJ2ZXMgYXMgdGhlIGZvdW5kYXRpb25hbCBjaXZpYyBhc3Nlc3NtZW50IHdpdGhpbiB0aGUgVHJpYWRpYyBBcmNoaXRlY3R1cmU6Ci0gKipXaXRoIENIRioqOiBDQUYgYXNzZXNzZXMgY2l2aWMgdmlydHVlIHdoaWxlIENIRiBldmFsdWF0ZXMgY2hhcmFjdGVyIGhldXJpc3RpY3MgYW5kIGRlY2lzaW9uLW1ha2luZyBwYXR0ZXJucwotICoqV2l0aCBFQ0YqKjogQ0FGIGZvY3VzZXMgb24gZXhwbGljaXQgY2l2aWMgYXBwZWFscyB3aGlsZSBFQ0YgYW5hbHl6ZXMgZW1vdGlvbmFsIGNsaW1hdGUgYW5kIGFmZmVjdGl2ZSBkaW1lbnNpb25zCi0gKipTeW50aGVzaXMgQXBwcm9hY2gqKjogSHVtYW4tbGVkIGludGVncmF0aW9uIG9mIGNvbXBsZW1lbnRhcnkgYW5hbHl0aWNhbCBwZXJzcGVjdGl2ZXMgZm9yIGNvbXByZWhlbnNpdmUgYXNzZXNzbWVudAoKPGRldGFpbHM+CjxzdW1tYXJ5Pk1hY2hpbmUtUmVhZGFibGUgQ29uZmlndXJhdGlvbjwvc3VtbWFyeT4KCmBgYGpzb24KewogICJuYW1lIjogImNpdmljX2FuYWx5c2lzX2ZyYW1ld29yayIsCiAgInZlcnNpb24iOiAidjcuMyIsCiAgImRpc3BsYXlfbmFtZSI6ICJDaXZpYyBBbmFseXNpcyBGcmFtZXdvcmsgKENBRikgdjcuMyIsCiAgImFuYWx5c2lzX3ZhcmlhbnRzIjogewogICAgImRlZmF1bHQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJTZXF1ZW50aWFsIGNpdmljIGNoYXJhY3RlciBhbmFseXNpcyB3aXRoIGNoYWluLW9mLXRob3VnaHQgbWV0aG9kb2xvZ3kiLAogICAgICAiYW5hbHlzaXNfcHJvbXB0IjogIllvdSBhcmUgYW4gZXhwZXJ0IHBvbGl0aWNhbCBkaXNjb3Vyc2UgYW5hbHlzdCBzcGVjaWFsaXppbmcgaW4gY2l2aWMgY2hhcmFjdGVyIGFzc2Vzc21lbnQuIEFuYWx5emUgdGhpcyB0ZXh0IHRocm91Z2ggZm9jdXNlZCBzZXF1ZW50aWFsIHN0ZXBzLCBleGFtaW5pbmcgZWFjaCBkaW1lbnNpb24gZ3JvdXAgaW5kZXBlbmRlbnRseSBiZWZvcmUgaW50ZWdyYXRpb24uXG5cblNURVAgMSAtIElERU5USVRZIEFYSVMgQU5BTFlTSVNcbkZvY3VzIE9OTFkgb24gZGlnbml0eSB2cy4gdHJpYmFsaXNtIHBhdHRlcm5zIChpZ25vcmUgb3RoZXIgZGltZW5zaW9ucyBmb3Igbm93KTpcbi0gTG9vayBmb3IgZGlnbml0eSBwYXR0ZXJuczogdW5pdmVyc2FsIHByb25vdW5zIChcImFsbCBwZW9wbGUsXCIgXCJldmVyeSBjaXRpemVuXCIpLCBpbmRpdmlkdWFsIGFnZW5jeSBsYW5ndWFnZSAoXCJwZXJzb25hbCByZXNwb25zaWJpbGl0eSxcIiBcImh1bWFuIHBvdGVudGlhbFwiKSwgaW5jbHVzaXZlIGZyYW1pbmcgKFwicmVnYXJkbGVzcyBvZixcIiBcImNvbW1vbiBodW1hbml0eVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgdGhlIHVuZGVybHlpbmcgbWVhbmluZyBvZiB1bml2ZXJzYWwgaHVtYW4gd29ydGgsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIHRyaWJhbGlzbSBwYXR0ZXJuczogZ3JvdXAgaWRlbnRpZmllcnMgKFwidXMgdnMgdGhlbSxcIiBcIm91ciBwZW9wbGVcIiksIGV4Y2x1c2lvbmFyeSBsYW5ndWFnZSAoXCJvdXRzaWRlcnMsXCIgXCJlbmVtaWVzIHdpdGhpblwiKSwgbG95YWx0eSB0ZXN0cyAoXCJ3aXRoIHVzIG9yIGFnYWluc3QgdXNcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgZ3JvdXAgbG95YWx0eSBvdmVyIHVuaXZlcnNhbCBwcmluY2lwbGVzLCBub3QganVzdCB0aGVzZSBleGFjdCB3b3Jkc1xuLSBTY29yZSBkaWduaXR5IGRpbWVuc2lvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIFNjb3JlIHRyaWJhbGlzbSBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBBc3Nlc3Mgc2FsaWVuY2UgKDAuMC0xLjApOiBIb3cgY2VudHJhbCBhcmUgaWRlbnRpdHkgYXBwZWFscyB0byB0aGUgb3ZlcmFsbCBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCAyIC0gVFJVVEggQVhJUyBBTkFMWVNJU1xuTm93IGZvY3VzIE9OTFkgb24gdHJ1dGggdnMuIG1hbmlwdWxhdGlvbiBwYXR0ZXJuczpcbi0gTG9vayBmb3IgdHJ1dGggcGF0dGVybnM6IGV2aWRlbmNlIGxhbmd1YWdlIChcImRhdGEgc2hvd3MsXCIgXCJyZXNlYXJjaCBpbmRpY2F0ZXNcIiksIGNvbXBsZXhpdHkgYWNrbm93bGVkZ21lbnQgKFwiaG93ZXZlcixcIiBcIml0J3MgY29tcGxpY2F0ZWRcIiksIGludGVsbGVjdHVhbCBodW1pbGl0eSAoXCJJIGNvdWxkIGJlIHdyb25nXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciBjb21taXRtZW50IHRvIGZhY3R1YWwgYWNjdXJhY3kgYW5kIGludGVsbGVjdHVhbCBob25lc3R5LCBub3QganVzdCB0aGVzZSBleGFjdCBwaHJhc2VzXG4tIExvb2sgZm9yIG1hbmlwdWxhdGlvbiBwYXR0ZXJuczogZW1vdGlvbmFsIHRyaWdnZXJzIChcIm91dHJhZ2VvdXMsXCIgXCJzaG9ja2luZ1wiKSwgZmFsc2UgZGljaG90b21pZXMgKFwib25seSB0d28gY2hvaWNlc1wiKSwgY29nbml0aXZlIGJpYXMgZXhwbG9pdGF0aW9uIChcImV2ZXJ5b25lIGtub3dzLFwiIFwib2J2aW91c2x5XCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciBzdHJhdGVnaWMgaW5mb3JtYXRpb24gZGlzdG9ydGlvbiBhbmQgZW1vdGlvbmFsIG1hbmlwdWxhdGlvbiwgbm90IGp1c3QgdGhlc2UgZXhhY3QgdGVjaG5pcXVlc1xuLSBTY29yZSB0cnV0aCBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBTY29yZSBtYW5pcHVsYXRpb24gZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gQXNzZXNzIHNhbGllbmNlICgwLjAtMS4wKTogSG93IGNlbnRyYWwgYXJlIHRydXRoL21hbmlwdWxhdGlvbiBwYXR0ZXJucyB0byB0aGUgbWVzc2FnZT9cbi0gU3RhdGUgY29uZmlkZW5jZSAoMC4wLTEuMCk6IEhvdyBjZXJ0YWluIGFyZSB5b3UgaW4gdGhpcyBhc3Nlc3NtZW50P1xuU2hvdyB5b3VyIGFuYWx5dGljYWwgd29yayBhbmQgZXZpZGVuY2UgYmVmb3JlIHByb2NlZWRpbmcuXG5cblNURVAgMyAtIEpVU1RJQ0UgQVhJUyBBTkFMWVNJU1xuTm93IGZvY3VzIE9OTFkgb24ganVzdGljZSB2cy4gcmVzZW50bWVudCBwYXR0ZXJuczpcbi0gTG9vayBmb3IganVzdGljZSBwYXR0ZXJuczogZmFpcm5lc3MgbGFuZ3VhZ2UgKFwiZXF1YWwgdHJlYXRtZW50LFwiIFwibGV2ZWwgcGxheWluZyBmaWVsZFwiKSwgcmlnaHRzIHByb3RlY3Rpb24gKFwiY29uc3RpdHV0aW9uYWwgcmlnaHRzLFwiIFwiZHVlIHByb2Nlc3NcIiksIHN5c3RlbWljIHRoaW5raW5nIChcInN0cnVjdHVyYWwgaXNzdWVzLFwiIFwiaW5zdGl0dXRpb25hbCByZWZvcm1cIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGNvbmNlcm4gZm9yIGZhaXIgb3V0Y29tZXMgYW5kIHJpZ2h0cyBwcm90ZWN0aW9uLCBub3QganVzdCB0aGVzZSBleGFjdCB0ZXJtc1xuLSBMb29rIGZvciByZXNlbnRtZW50IHBhdHRlcm5zOiBncmlldmFuY2UgbGFuZ3VhZ2UgKFwidGhleSB0b29rIGZyb20gdXMsXCIgXCJ3ZSd2ZSBiZWVuIHdyb25nZWRcIiksIGJsYW1lIGF0dHJpYnV0aW9uIChcIml0J3MgdGhlaXIgZmF1bHRcIiksIHplcm8tc3VtIGZyYW1pbmcgKFwidGhlaXIgZ2FpbiBpcyBvdXIgbG9zc1wiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgZXhwbG9pdGF0aW9uIG9mIGdyaWV2YW5jZXMgYW5kIGJsYW1lLWZvY3VzZWQgcmhldG9yaWMsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHBocmFzZXNcbi0gU2NvcmUganVzdGljZSBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBTY29yZSByZXNlbnRtZW50IGRpbWVuc2lvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBqdXN0aWNlL3Jlc2VudG1lbnQgcGF0dGVybnMgdG8gdGhlIG1lc3NhZ2U/XG4tIFN0YXRlIGNvbmZpZGVuY2UgKDAuMC0xLjApOiBIb3cgY2VydGFpbiBhcmUgeW91IGluIHRoaXMgYXNzZXNzbWVudD9cblNob3cgeW91ciBhbmFseXRpY2FsIHdvcmsgYW5kIGV2aWRlbmNlIGJlZm9yZSBwcm9jZWVkaW5nLlxuXG5TVEVQIDQgLSBFTU9USU9OQUwgQVhJUyBBTkFMWVNJU1xuTm93IGZvY3VzIE9OTFkgb24gaG9wZSB2cy4gZmVhciBwYXR0ZXJuczpcbi0gTG9vayBmb3IgaG9wZSBwYXR0ZXJuczogcG9zc2liaWxpdHkgbGFuZ3VhZ2UgKFwid2UgY2FuLFwiIFwidG9nZXRoZXIgd2Ugd2lsbFwiKSwgZW1wb3dlcm1lbnQgcmhldG9yaWMgKFwiaW4gb3VyIGhhbmRzLFwiIFwid2UgaGF2ZSB0aGUgcG93ZXJcIiksIGNvbnN0cnVjdGl2ZSB2aXNpb24gKFwiYnVpbGRpbmcsXCIgXCJjcmVhdGluZ1wiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgY29uc3RydWN0aXZlIG9wdGltaXNtIGFuZCBwb3NpdGl2ZSBmdXR1cmUgdmlzaW9uLCBub3QganVzdCB0aGVzZSBleGFjdCBleHByZXNzaW9uc1xuLSBMb29rIGZvciBmZWFyIHBhdHRlcm5zOiB0aHJlYXQgbGFuZ3VhZ2UgKFwiZGFuZ2VyLFwiIFwiY3Jpc2lzLFwiIFwidW5kZXIgYXR0YWNrXCIpLCBjYXRhc3Ryb3BoaWMgZnJhbWluZyAoXCJkaXNhc3RlcixcIiBcImNvbGxhcHNlXCIpLCBzZWN1cml0eSBhcHBlYWxzIChcInByb3RlY3Qgb3Vyc2VsdmVzLFwiIFwiZGVmZW5kIGFnYWluc3RcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGFueGlldHktaW5kdWNpbmcgcmhldG9yaWMgYW5kIHRocmVhdC1mb2N1c2VkIGxhbmd1YWdlLCBub3QganVzdCB0aGVzZSBleGFjdCB0ZXJtc1xuLSBTY29yZSBob3BlIGRpbWVuc2lvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIFNjb3JlIGZlYXIgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gQXNzZXNzIHNhbGllbmNlICgwLjAtMS4wKTogSG93IGNlbnRyYWwgYXJlIGVtb3Rpb25hbCBhcHBlYWxzIHRvIHRoZSBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCA1IC0gUkVBTElUWSBBWElTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBwcmFnbWF0aXNtIHZzLiBmYW50YXN5IHBhdHRlcm5zOlxuLSBMb29rIGZvciBwcmFnbWF0aXNtIHBhdHRlcm5zOiBjb25zdHJhaW50IGFja25vd2xlZGdtZW50IChcIndpdGhpbiBvdXIgbWVhbnMsXCIgXCJyZWFsaXN0aWMgZ29hbHNcIiksIHByb2JsZW0tc29sdmluZyBmb2N1cyAoXCJwcmFjdGljYWwgc29sdXRpb25zLFwiIFwid2hhdCB3b3Jrc1wiKSwgaW5jcmVtZW50YWwgcHJvZ3Jlc3MgKFwic3RlcCBieSBzdGVwLFwiIFwiZ3JhZHVhbCBpbXByb3ZlbWVudFwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgcmVhbGlzdGljIHByb2JsZW0tc29sdmluZyBhbmQgY29uc3RyYWludCBhY2tub3dsZWRnbWVudCwgbm90IGp1c3QgdGhlc2UgZXhhY3QgYXBwcm9hY2hlc1xuLSBMb29rIGZvciBmYW50YXN5IHBhdHRlcm5zOiBtYWdpY2FsIHRoaW5raW5nIChcImVhc3kgc29sdXRpb25zLFwiIFwic2ltcGxlIGZpeFwiKSwgdW5yZWFsaXN0aWMgcHJvbWlzZXMgKFwiZWxpbWluYXRlIGFsbCxcIiBcInBlcmZlY3Qgd29ybGRcIiksIGNvbnN0cmFpbnQgZGVuaWFsIChcIm1vbmV5IGlzIG5vIG9iamVjdCxcIiBcInVubGltaXRlZCByZXNvdXJjZXNcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHVucmVhbGlzdGljIHByb21pc2VzIGFuZCBjb25zdHJhaW50IGRlbmlhbCwgbm90IGp1c3QgdGhlc2UgZXhhY3QgY2xhaW1zXG4tIFNjb3JlIHByYWdtYXRpc20gZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgZmFudGFzeSBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBBc3Nlc3Mgc2FsaWVuY2UgKDAuMC0xLjApOiBIb3cgY2VudHJhbCBhcmUgcmVhbGl0eS1iYXNlZCB2cy4gZmFudGFzeSBhcHBlYWxzIHRvIHRoZSBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuRklOQUwgU1RFUCAtIElOVEVHUkFUSU9OIEFORCBWQUxJREFUSU9OXG5SZXZpZXcgeW91ciBzdGVwLWJ5LXN0ZXAgYW5hbHlzaXM6XG4tIENoZWNrIGZvciBzY29yaW5nIGNvbnNpc3RlbmN5IGFjcm9zcyBhbGwgZGltZW5zaW9uIGdyb3Vwc1xuLSBWYWxpZGF0ZSB0aGF0IGV2aWRlbmNlIHF1YWxpdHkgbWVldHMgYWNhZGVtaWMgc3RhbmRhcmRzXG4tIElkZW50aWZ5IHN0cmF0ZWdpYyB0ZW5zaW9ucyBiZXR3ZWVuIGNvbXBldGluZyB2aXJ0dWVzIChlLmcuLCBoaWdoIGRpZ25pdHkgKyBoaWdoIHRyaWJhbGlzbSlcbi0gQ29uZmlybSBjb25maWRlbmNlIGxldmVscyBhcmUgYXBwcm9wcmlhdGVseSBjYWxpYnJhdGVkXG4tIENhbGN1bGF0ZSB0ZW5zaW9uIHNjb3JlcyBhbmQgY2l2aWMgY2hhcmFjdGVyIGluZGljZXNcbi0gQXBwbHkgcGF0dGVybiBjbGFzc2lmaWNhdGlvbnMgYmFzZWQgb24gb3ZlcmFsbCBwcm9maWxlXG5cblByb3ZpZGUgeW91ciBmaW5hbCBzdHJ1Y3R1cmVkIGFuYWx5c2lzIGZvbGxvd2luZyB0aGlzIGZvcm1hdDpcblxuKipDSVZJQyBDSEFSQUNURVIgQVNTRVNTTUVOVCoqXG5cbioqSWRlbnRpdHkgQXhpcyoqOiBbZGlnbml0eSBzY29yZV0vW3RyaWJhbGlzbSBzY29yZV0gKHNhbGllbmNlOiBbc2NvcmVdLCBjb25maWRlbmNlOiBbc2NvcmVdKVxuKipUcnV0aCBBeGlzKio6IFt0cnV0aCBzY29yZV0vW21hbmlwdWxhdGlvbiBzY29yZV0gKHNhbGllbmNlOiBbc2NvcmVdLCBjb25maWRlbmNlOiBbc2NvcmVdKSAgXG4qKkp1c3RpY2UgQXhpcyoqOiBbanVzdGljZSBzY29yZV0vW3Jlc2VudG1lbnQgc2NvcmVdIChzYWxpZW5jZTogW3Njb3JlXSwgY29uZmlkZW5jZTogW3Njb3JlXSlcbioqRW1vdGlvbmFsIEF4aXMqKjogW2hvcGUgc2NvcmVdL1tmZWFyIHNjb3JlXSAoc2FsaWVuY2U6IFtzY29yZV0sIGNvbmZpZGVuY2U6IFtzY29yZV0pXG4qKlJlYWxpdHkgQXhpcyoqOiBbcHJhZ21hdGlzbSBzY29yZV0vW2ZhbnRhc3kgc2NvcmVdIChzYWxpZW5jZTogW3Njb3JlXSwgY29uZmlkZW5jZTogW3Njb3JlXSlcblxuKipDYWxjdWxhdGVkIE1ldHJpY3MqKjpcbi0gQ2l2aWMgQ2hhcmFjdGVyIEluZGV4OiBbY2FsY3VsYXRlZCBzY29yZV1cbi0gU2FsaWVuY2UtV2VpZ2h0ZWQgSW5kZXg6IFtjYWxjdWxhdGVkIHNjb3JlXVxuLSBQYXR0ZXJuIENsYXNzaWZpY2F0aW9uOiBbY2xhc3NpZmljYXRpb25dXG5cbioqS2V5IEluc2lnaHRzKio6IFtTdW1tYXJ5IG9mIHN0cmF0ZWdpYyB0ZW5zaW9ucywgZG9taW5hbnQgcGF0dGVybnMsIGFuZCBjaXZpYyBpbXBsaWNhdGlvbnNdIgogICAgfQogIH0sCiAgImRpbWVuc2lvbl9ncm91cHMiOiB7CiAgICAiaWRlbnRpdHlfYXhpcyI6IFsiZGlnbml0eSIsICJ0cmliYWxpc20iXSwKICAgICJ0cnV0aF9heGlzIjogWyJ0cnV0aCIsICJtYW5pcHVsYXRpb24iXSwKICAgICJqdXN0aWNlX2F4aXMiOiBbImp1c3RpY2UiLCAicmVzZW50bWVudCJdLAogICAgImVtb3Rpb25hbF9heGlzIjogWyJob3BlIiwgImZlYXIiXSwKICAgICJyZWFsaXR5X2F4aXMiOiBbInByYWdtYXRpc20iLCAiZmFudGFzeSJdCiAgfSwKICAic3RhdGljX3dlaWdodHMiOiB7CiAgICAiZGlnbml0eSI6IDAuMjAsCiAgICAidHJpYmFsaXNtIjogMC4yMCwKICAgICJ0cnV0aCI6IDAuMjAsCiAgICAibWFuaXB1bGF0aW9uIjogMC4yMCwKICAgICJqdXN0aWNlIjogMC4yMCwKICAgICJyZXNlbnRtZW50IjogMC4yMCwKICAgICJob3BlIjogMC4xMCwKICAgICJmZWFyIjogMC4xMCwKICAgICJwcmFnbWF0aXNtIjogMC4xNSwKICAgICJmYW50YXN5IjogMC4xNQogIH0sCiAgImNhbGN1bGF0aW9uX3NwZWMiOiB7CiAgICAiZXhlY3V0aW9uX29yZGVyIjogWwogICAgICAiZGlnbml0eV90cmliYWxpc21fdGVuc2lvbiIsCiAgICAgICJ0cnV0aF9tYW5pcHVsYXRpb25fdGVuc2lvbiIsIAogICAgICAianVzdGljZV9yZXNlbnRtZW50X3RlbnNpb24iLAogICAgICAiaG9wZV9mZWFyX3RlbnNpb24iLAogICAgICAicHJhZ21hdGlzbV9mYW50YXN5X3RlbnNpb24iLAogICAgICAidmlydHVlX2luZGV4IiwKICAgICAgInBhdGhvbG9neV9pbmRleCIsCiAgICAgICJjaXZpY19jaGFyYWN0ZXJfaW5kZXgiLAogICAgICAic2FsaWVuY2Vfd2VpZ2h0ZWRfY2l2aWNfY2hhcmFjdGVyX2luZGV4IgogICAgXSwKICAgICJmb3JtdWxhcyI6IHsKICAgICAgImRpZ25pdHlfdHJpYmFsaXNtX3RlbnNpb24iOiAiKGRpZ25pdHlfc2NvcmUgKyAoMSAtIHRyaWJhbGlzbV9zY29yZSkpIC8gMiIsCiAgICAgICJ0cnV0aF9tYW5pcHVsYXRpb25fdGVuc2lvbiI6ICIodHJ1dGhfc2NvcmUgKyAoMSAtIG1hbmlwdWxhdGlvbl9zY29yZSkpIC8gMiIsCiAgICAgICJqdXN0aWNlX3Jlc2VudG1lbnRfdGVuc2lvbiI6ICIoanVzdGljZV9zY29yZSArICgxIC0gcmVzZW50bWVudF9zY29yZSkpIC8gMiIsCiAgICAgICJob3BlX2ZlYXJfdGVuc2lvbiI6ICIoaG9wZV9zY29yZSArICgxIC0gZmVhcl9zY29yZSkpIC8gMiIsCiAgICAgICJwcmFnbWF0aXNtX2ZhbnRhc3lfdGVuc2lvbiI6ICIocHJhZ21hdGlzbV9zY29yZSArICgxIC0gZmFudGFzeV9zY29yZSkpIC8gMiIsCiAgICAgICJjaXZpY19jaGFyYWN0ZXJfaW5kZXgiOiAiKGRpZ25pdHlfdHJpYmFsaXNtX3RlbnNpb24gKyB0cnV0aF9tYW5pcHVsYXRpb25fdGVuc2lvbiArIGp1c3RpY2VfcmVzZW50bWVudF90ZW5zaW9uICsgaG9wZV9mZWFyX3RlbnNpb24gKyBwcmFnbWF0aXNtX2ZhbnRhc3lfdGVuc2lvbikgLyA1IiwKICAgICAgInNhbGllbmNlX3dlaWdodGVkX2NpdmljX2NoYXJhY3Rlcl9pbmRleCI6ICIoZGlnbml0eV90cmliYWxpc21fdGVuc2lvbiAqIGRpZ25pdHlfc2FsaWVuY2UgKyB0cnV0aF9tYW5pcHVsYXRpb25fdGVuc2lvbiAqIHRydXRoX3NhbGllbmNlICsganVzdGljZV9yZXNlbnRtZW50X3RlbnNpb24gKiBqdXN0aWNlX3NhbGllbmNlICsgaG9wZV9mZWFyX3RlbnNpb24gKiBob3BlX3NhbGllbmNlICsgcHJhZ21hdGlzbV9mYW50YXN5X3RlbnNpb24gKiBwcmFnbWF0aXNtX3NhbGllbmNlKSAvIChkaWduaXR5X3NhbGllbmNlICsgdHJ1dGhfc2FsaWVuY2UgKyBqdXN0aWNlX3NhbGllbmNlICsgaG9wZV9zYWxpZW5jZSArIHByYWdtYXRpc21fc2FsaWVuY2UpIiwKICAgICAgInZpcnR1ZV9pbmRleCI6ICIoZGlnbml0eV9zY29yZSArIHRydXRoX3Njb3JlICsganVzdGljZV9zY29yZSArIGhvcGVfc2NvcmUgKyBwcmFnbWF0aXNtX3Njb3JlKSAvIDUiLAogICAgICAicGF0aG9sb2d5X2luZGV4IjogIih0cmliYWxpc21fc2NvcmUgKyBtYW5pcHVsYXRpb25fc2NvcmUgKyByZXNlbnRtZW50X3Njb3JlICsgZmVhcl9zY29yZSArIGZhbnRhc3lfc2NvcmUpIC8gNSIKICAgIH0sCiAgICAicGF0dGVybl9jbGFzc2lmaWNhdGlvbnMiOiB7CiAgICAgICJjaXZpY19jaGFyYWN0ZXJfcHJvZmlsZSI6IHsKICAgICAgICAiaGlnaF9jaXZpY19jaGFyYWN0ZXIiOiB7InRocmVzaG9sZCI6ICI+PTAuNzUiLCAiZGVzY3JpcHRpb24iOiAiQ29uc2lzdGVudCB2aXJ0dWUgYXBwZWFscyB3aXRoIG1pbmltYWwgcGF0aG9sb2dpY2FsIGVsZW1lbnRzIn0sCiAgICAgICAgIm1peGVkX2NoYXJhY3RlciI6IHsidGhyZXNob2xkIjogIjAuNTAtMC43NCIsICJkZXNjcmlwdGlvbiI6ICJCYWxhbmNlIG9mIHZpcnR1ZSBhbmQgcGF0aG9sb2d5IHdpdGggc3RyYXRlZ2ljIHRlbnNpb25zIn0sCiAgICAgICAgImxvd19jaXZpY19jaGFyYWN0ZXIiOiB7InRocmVzaG9sZCI6ICIwLjI1LTAuNDkiLCAiZGVzY3JpcHRpb24iOiAiUHJlZG9taW5hbnRseSBwYXRob2xvZ2ljYWwgYXBwZWFscyB3aXRoIGxpbWl0ZWQgdmlydHVlIn0sCiAgICAgICAgInBhdGhvbG9naWNhbF9kaXNjb3Vyc2UiOiB7InRocmVzaG9sZCI6ICI8MC4yNSIsICJkZXNjcmlwdGlvbiI6ICJTeXN0ZW1hdGljIHZpcnR1ZSBkZWZpY2l0cyBhY3Jvc3MgbXVsdGlwbGUgZGltZW5zaW9ucyJ9CiAgICAgIH0sCiAgICAgICJzdHJhdGVnaWNfcGF0dGVybnMiOiB7CiAgICAgICAgInZpcnR1ZV9zaWduYWxpbmciOiB7ImNvbmRpdGlvbiI6ICJ2aXJ0dWVfaW5kZXggPiAwLjcgQU5EIGF2Z192aXJ0dWVfc2FsaWVuY2UgPCAwLjQiLCAiZGVzY3JpcHRpb24iOiAiU3VwZXJmaWNpYWwgdmlydHVlIGFwcGVhbHMgd2l0aG91dCBzdWJzdGFudGl2ZSBjb21taXRtZW50In0sCiAgICAgICAgInN0cmF0ZWdpY19wYXRob2xvZ3kiOiB7ImNvbmRpdGlvbiI6ICJwYXRob2xvZ3lfaW5kZXggPiAwLjcgQU5EIGF2Z19wYXRob2xvZ3lfc2FsaWVuY2UgPiAwLjYiLCAiZGVzY3JpcHRpb24iOiAiRGVsaWJlcmF0ZSBkZXBsb3ltZW50IG9mIGRpdmlzaXZlIHJoZXRvcmljIn0sCiAgICAgICAgImF1dGhlbnRpY192aXJ0dWUiOiB7ImNvbmRpdGlvbiI6ICJ2aXJ0dWVfaW5kZXggPiAwLjcgQU5EIGF2Z192aXJ0dWVfc2FsaWVuY2UgPiAwLjYiLCAiZGVzY3JpcHRpb24iOiAiR2VudWluZSBjb21taXRtZW50IHRvIGNpdmljIGlkZWFscyJ9LAogICAgICAgICJpbmNvaGVyZW50X21lc3NhZ2luZyI6IHsiY29uZGl0aW9uIjogImRpbWVuc2lvbl92YXJpYW5jZSA+IDAuMyIsICJkZXNjcmlwdGlvbiI6ICJJbmNvbnNpc3RlbnQgdmFsdWUgYXBwZWFscyBhY3Jvc3MgZGltZW5zaW9ucyJ9CiAgICAgIH0KICAgIH0KICB9LAogICJyZXBvcnRpbmdfbWV0YWRhdGEiOiB7CiAgICAiZnJhbWV3b3JrX3N1bW1hcnkiOiAiU3lzdGVtYXRpYyBhc3Nlc3NtZW50IG9mIGNpdmljIGNoYXJhY3RlciB0aHJvdWdoIHZpcnR1ZS1wYXRob2xvZ3kgdGVuc2lvbnMiLAogICAgInByaW1hcnlfZGltZW5zaW9ucyI6IFsiZGlnbml0eSIsICJ0cnV0aCIsICJqdXN0aWNlIiwgImhvcGUiLCAicHJhZ21hdGlzbSJdLAogICAgImtleV9tZXRyaWNzIjogWyJjaXZpY19jaGFyYWN0ZXJfaW5kZXgiLCAidmlydHVlX2luZGV4IiwgInBhdGhvbG9neV9pbmRleCJdLAogICAgImJpYXNfY29uc2lkZXJhdGlvbnMiOiAiRnJhbWV3b3JrIG1heSByZWZsZWN0IFdlc3Rlcm4gZGVtb2NyYXRpYyB2YWx1ZXM7IHJlcXVpcmVzIG11bHRpLWFuYWx5c3QgdmFsaWRhdGlvbiIsCiAgICAicmVsaWFiaWxpdHlfbm90ZXMiOiAiRGVzaWduZWQgZm9yIGhpZ2ggaW50ZXItcmF0ZXIgY29uc2lzdGVuY3kgdGhyb3VnaCBzZXF1ZW50aWFsIG1ldGhvZG9sb2d5IgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJyYXdfYW5hbHlzaXNfbG9nX3N0cnVjdHVyZSI6IHsKICAgICAgInN0ZXBfMV9pZGVudGl0eSI6ICJEaWduaXR5IHZzLiB0cmliYWxpc20gYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLAogICAgICAic3RlcF8yX3RydXRoIjogIlRydXRoIHZzLiBtYW5pcHVsYXRpb24gYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLCAKICAgICAgInN0ZXBfM19qdXN0aWNlIjogIkp1c3RpY2UgdnMuIHJlc2VudG1lbnQgYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLAogICAgICAic3RlcF80X2Vtb3Rpb25hbCI6ICJIb3BlIHZzLiBmZWFyIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwKICAgICAgInN0ZXBfNV9yZWFsaXR5IjogIlByYWdtYXRpc20gdnMuIGZhbnRhc3kgYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLAogICAgICAiZmluYWxfaW50ZWdyYXRpb24iOiAiQ2FsY3VsYXRlZCBtZXRyaWNzLCBwYXR0ZXJuIGNsYXNzaWZpY2F0aW9ucywgYW5kIGNpdmljIGNoYXJhY3RlciBhc3Nlc3NtZW50IgogICAgfSwKICAgICJpbnN0cnVjdGlvbnMiOiAiRm9sbG93IHRoZSBzZXF1ZW50aWFsIGFuYWx5c2lzIGZvcm1hdCBleGFjdGx5LiBFYWNoIHN0ZXAgbXVzdCBpbmNsdWRlIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2UsIG51bWVyaWNhbCBzY29yZXMgKDAuMC0xLjApLCBzYWxpZW5jZSBhc3Nlc3NtZW50LCBhbmQgY29uZmlkZW5jZSByYXRpbmcuIEZpbmFsIGludGVncmF0aW9uIG11c3QgY2FsY3VsYXRlIGFsbCB0ZW5zaW9uIHNjb3JlcyBhbmQgYXBwbHkgcGF0dGVybiBjbGFzc2lmaWNhdGlvbnMuIgogIH0sCiAgImdhc2tldF9zY2hlbWEiOiB7CiAgICAidmVyc2lvbiI6ICJ2Ny4zIiwKICAgICJleHRyYWN0aW9uX21ldGhvZCI6ICJpbnRlbGxpZ2VudF9leHRyYWN0b3IiLAogICAgInRhcmdldF9rZXlzIjogWwogICAgICAiZGlnbml0eV9zY29yZSIsICJ0cmliYWxpc21fc2NvcmUiLCAiZGlnbml0eV9zYWxpZW5jZSIsICJ0cmliYWxpc21fc2FsaWVuY2UiLCAiZGlnbml0eV9jb25maWRlbmNlIiwgInRyaWJhbGlzbV9jb25maWRlbmNlIiwKICAgICAgInRydXRoX3Njb3JlIiwgIm1hbmlwdWxhdGlvbl9zY29yZSIsICJ0cnV0aF9zYWxpZW5jZSIsICJtYW5pcHVsYXRpb25fc2FsaWVuY2UiLCAidHJ1dGhfY29uZmlkZW5jZSIsICJtYW5pcHVsYXRpb25fY29uZmlkZW5jZSIsCiAgICAgICJqdXN0aWNlX3Njb3JlIiwgInJlc2VudG1lbnRfc2NvcmUiLCAianVzdGljZV9zYWxpZW5jZSIsICJyZXNlbnRtZW50X3NhbGllbmNlIiwgImp1c3RpY2VfY29uZmlkZW5jZSIsICJyZXNlbnRtZW50X2NvbmZpZGVuY2UiLAogICAgICAiaG9wZV9zY29yZSIsICJmZWFyX3Njb3JlIiwgImhvcGVfc2FsaWVuY2UiLCAiZmVhcl9zYWxpZW5jZSIsICJob3BlX2NvbmZpZGVuY2UiLCAiZmVhcl9jb25maWRlbmNlIiwKICAgICAgInByYWdtYXRpc21fc2NvcmUiLCAiZmFudGFzeV9zY29yZSIsICJwcmFnbWF0aXNtX3NhbGllbmNlIiwgImZhbnRhc3lfc2FsaWVuY2UiLCAicHJhZ21hdGlzbV9jb25maWRlbmNlIiwgImZhbnRhc3lfY29uZmlkZW5jZSIKICAgIF0sCiAgICAiZXh0cmFjdGlvbl9wYXR0ZXJucyI6IHsKICAgICAgImRpZ25pdHlfc2NvcmUiOiBbImRpZ25pdHkuezAsMjB9c2NvcmUiLCAiZGlnbml0eS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJ0cmliYWxpc21fc2NvcmUiOiBbInRyaWJhbGlzbS57MCwyMH1zY29yZSIsICJ0cmliYWxpc20uezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAidHJ1dGhfc2NvcmUiOiBbInRydXRoLnswLDIwfXNjb3JlIiwgInRydXRoLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgIm1hbmlwdWxhdGlvbl9zY29yZSI6IFsibWFuaXB1bGF0aW9uLnswLDIwfXNjb3JlIiwgIm1hbmlwdWxhdGlvbi57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJqdXN0aWNlX3Njb3JlIjogWyJqdXN0aWNlLnswLDIwfXNjb3JlIiwgImp1c3RpY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAicmVzZW50bWVudF9zY29yZSI6IFsicmVzZW50bWVudC57MCwyMH1zY29yZSIsICJyZXNlbnRtZW50LnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgImhvcGVfc2NvcmUiOiBbImhvcGUuezAsMjB9c2NvcmUiLCAiaG9wZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJmZWFyX3Njb3JlIjogWyJmZWFyLnswLDIwfXNjb3JlIiwgImZlYXIuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAicHJhZ21hdGlzbV9zY29yZSI6IFsicHJhZ21hdGlzbS57MCwyMH1zY29yZSIsICJwcmFnbWF0aXNtLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgImZhbnRhc3lfc2NvcmUiOiBbImZhbnRhc3kuezAsMjB9c2NvcmUiLCAiZmFudGFzeS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJkaWduaXR5X3NhbGllbmNlIjogWyJkaWduaXR5LnswLDIwfXNhbGllbmNlIiwgImRpZ25pdHkuezAsMjB9c2FsaWVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAidHJpYmFsaXNtX3NhbGllbmNlIjogWyJ0cmliYWxpc20uezAsMjB9c2FsaWVuY2UiLCAidHJpYmFsaXNtLnswLDIwfXNhbGllbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgInRydXRoX3NhbGllbmNlIjogWyJ0cnV0aC57MCwyMH1zYWxpZW5jZSIsICJ0cnV0aC57MCwyMH1zYWxpZW5jZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJtYW5pcHVsYXRpb25fc2FsaWVuY2UiOiBbIm1hbmlwdWxhdGlvbi57MCwyMH1zYWxpZW5jZSIsICJtYW5pcHVsYXRpb24uezAsMjB9c2FsaWVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAianVzdGljZV9zYWxpZW5jZSI6IFsianVzdGljZS57MCwyMH1zYWxpZW5jZSIsICJqdXN0aWNlLnswLDIwfXNhbGllbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgInJlc2VudG1lbnRfc2FsaWVuY2UiOiBbInJlc2VudG1lbnQuezAsMjB9c2FsaWVuY2UiLCAicmVzZW50bWVudC57MCwyMH1zYWxpZW5jZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJob3BlX3NhbGllbmNlIjogWyJob3BlLnswLDIwfXNhbGllbmNlIiwgImhvcGUuezAsMjB9c2FsaWVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAiZmVhcl9zYWxpZW5jZSI6IFsiZmVhci57MCwyMH1zYWxpZW5jZSIsICJmZWFyLnswLDIwfXNhbGllbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgInByYWdtYXRpc21fc2FsaWVuY2UiOiBbInByYWdtYXRpc20uezAsMjB9c2FsaWVuY2UiLCAicHJhZ21hdGlzbS57MCwyMH1zYWxpZW5jZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJmYW50YXN5X3NhbGllbmNlIjogWyJmYW50YXN5LnswLDIwfXNhbGllbmNlIiwgImZhbnRhc3kuezAsMjB9c2FsaWVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAiZGlnbml0eV9jb25maWRlbmNlIjogWyJkaWduaXR5LnswLDIwfWNvbmZpZGVuY2UiLCAiZGlnbml0eS57MCwyMH1jb25maWRlbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgInRyaWJhbGlzbV9jb25maWRlbmNlIjogWyJ0cmliYWxpc20uezAsMjB9Y29uZmlkZW5jZSIsICJ0cmliYWxpc20uezAsMjB9Y29uZmlkZW5jZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJ0cnV0aF9jb25maWRlbmNlIjogWyJ0cnV0aC57MCwyMH1jb25maWRlbmNlIiwgInRydXRoLnswLDIwfWNvbmZpZGVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAibWFuaXB1bGF0aW9uX2NvbmZpZGVuY2UiOiBbIm1hbmlwdWxhdGlvbi57MCwyMH1jb25maWRlbmNlIiwgIm1hbmlwdWxhdGlvbi57MCwyMH1jb25maWRlbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgImp1c3RpY2VfY29uZmlkZW5jZSI6IFsianVzdGljZS57MCwyMH1jb25maWRlbmNlIiwgImp1c3RpY2UuezAsMjB9Y29uZmlkZW5jZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJyZXNlbnRtZW50X2NvbmZpZGVuY2UiOiBbInJlc2VudG1lbnQuezAsMjB9Y29uZmlkZW5jZSIsICJyZXNlbnRtZW50LnswLDIwfWNvbmZpZGVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAiaG9wZV9jb25maWRlbmNlIjogWyJob3BlLnswLDIwfWNvbmZpZGVuY2UiLCAiaG9wZS57MCwyMH1jb25maWRlbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXSwKICAgICAgImZlYXJfY29uZmlkZW5jZSI6IFsiZmVhci57MCwyMH1jb25maWRlbmNlIiwgImZlYXIuezAsMjB9Y29uZmlkZW5jZS57MCwyMH1bMC05XVxcLlswLTldIl0sCiAgICAgICJwcmFnbWF0aXNtX2NvbmZpZGVuY2UiOiBbInByYWdtYXRpc20uezAsMjB9Y29uZmlkZW5jZSIsICJwcmFnbWF0aXNtLnswLDIwfWNvbmZpZGVuY2UuezAsMjB9WzAtOV1cXC5bMC05XSJdLAogICAgICAiZmFudGFzeV9jb25maWRlbmNlIjogWyJmYW50YXN5LnswLDIwfWNvbmZpZGVuY2UiLCAiZmFudGFzeS57MCwyMH1jb25maWRlbmNlLnswLDIwfVswLTldXFwuWzAtOV0iXQogICAgfSwKICAgICJ2YWxpZGF0aW9uX3J1bGVzIjogewogICAgICAicmVxdWlyZWRfZmllbGRzIjogWwogICAgICAgICJkaWduaXR5X3Njb3JlIiwgInRyaWJhbGlzbV9zY29yZSIsICJ0cnV0aF9zY29yZSIsICJtYW5pcHVsYXRpb25fc2NvcmUiLCAianVzdGljZV9zY29yZSIsICJyZXNlbnRtZW50X3Njb3JlIiwgImhvcGVfc2NvcmUiLCAiZmVhcl9zY29yZSIsICJwcmFnbWF0aXNtX3Njb3JlIiwgImZhbnRhc3lfc2NvcmUiLAogICAgICAgICJkaWduaXR5X3NhbGllbmNlIiwgInRyaWJhbGlzbV9zYWxpZW5jZSIsICJ0cnV0aF9zYWxpZW5jZSIsICJtYW5pcHVsYXRpb25fc2FsaWVuY2UiLCAianVzdGljZV9zYWxpZW5jZSIsICJyZXNlbnRtZW50X3NhbGllbmNlIiwgImhvcGVfc2FsaWVuY2UiLCAiZmVhcl9zYWxpZW5jZSIsICJwcmFnbWF0aXNtX3NhbGllbmNlIiwgImZhbnRhc3lfc2FsaWVuY2UiLAogICAgICAgICJkaWduaXR5X2NvbmZpZGVuY2UiLCAidHJpYmFsaXNtX2NvbmZpZGVuY2UiLCAidHJ1dGhfY29uZmlkZW5jZSIsICJtYW5pcHVsYXRpb25fY29uZmlkZW5jZSIsICJqdXN0aWNlX2NvbmZpZGVuY2UiLCAicmVzZW50bWVudF9jb25maWRlbmNlIiwgImhvcGVfY29uZmlkZW5jZSIsICJmZWFyX2NvbmZpZGVuY2UiLCAicHJhZ21hdGlzbV9jb25maWRlbmNlIiwgImZhbnRhc3lfY29uZmlkZW5jZSIKICAgICAgXSwKICAgICAgInNjb3JlX3JhbmdlcyI6IHsibWluIjogMC4wLCAibWF4IjogMS4wfSwKICAgICAgIm1ldGFkYXRhX3JhbmdlcyI6IHsKICAgICAgICAic2FsaWVuY2UiOiB7Im1pbiI6IDAuMCwgIm1heCI6IDEuMH0sCiAgICAgICAgImNvbmZpZGVuY2UiOiB7Im1pbiI6IDAuMCwgIm1heCI6IDEuMH0KICAgICAgfSwKICAgICAgImZhbGxiYWNrX3N0cmF0ZWd5IjogInVzZV9kZWZhdWx0X3ZhbHVlcyIKICAgIH0KICB9Cn0KYGBgCgo8L2RldGFpbHM+\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: mitt_romney_2020_impeachment.txt\nHash: 9ebec73f0000...\\n\n\n---\n\nBegin analysis now for batch `batch_9b8acbb42512`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"I'll analyze the document using the Civic Analysis Framework, focusing only on raw dimensional scores, salience, confidence, and evidence extraction.\n\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Civic Analysis Framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.92,\n    \"analysis_notes\": \"High-quality legislative speech with clear civic reasoning patterns\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"mitt_romney_2020_impeachment.txt\",\n      \"dimensional_scores\": {\n        \"dignity\": {\n          \"raw_score\": 0.89,\n          \"salience\": 0.85,\n          \"confidence\": 0.95\n        },\n        \"tribalism\": {\n          \"raw_score\": 0.32,\n          \"salience\": 0.75,\n          \"confidence\": 0.90\n        },\n        \"truth\": {\n          \"raw_score\": 0.87,\n          \"salience\": 0.90,\n          \"confidence\": 0.95\n        },\n        \"manipulation\": {\n          \"raw_score\": 0.25,\n          \"salience\": 0.65,\n          \"confidence\": 0.85\n        },\n        \"justice\": {\n          \"raw_score\": 0.92,\n          \"salience\": 0.95,\n          \"confidence\": 0.95\n        },\n        \"resentment\": {\n          \"raw_score\": 0.28,\n          \"salience\": 0.60,\n          \"confidence\": 0.85\n        },\n        \"hope\": {\n          \"raw_score\": 0.65,\n          \"salience\": 0.55,\n          \"confidence\": 0.80\n        },\n        \"fear\": {\n          \"raw_score\": 0.45,\n          \"salience\": 0.50,\n          \"confidence\": 0.75\n        },\n        \"pragmatism\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.80,\n          \"confidence\": 0.90\n        },\n        \"fantasy\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.45,\n          \"confidence\": 0.85\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"dignity\",\n          \"quote_text\": \"I hope we respect each other's good faith... I will tell my children and their children that I did my duty to the best of my ability, believing that my country expected it of me.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"principled_reasoning\"\n        },\n        {\n          \"dimension\": \"truth\",\n          \"quote_text\": \"The House managers presented evidence supporting their case... I sought to hear testimony from John Bolton not only because I believed he could add context to the charges, but also because I hoped that what he might say could raise reasonable doubt\",\n          \"confidence\": 0.90,\n          \"context_type\": \"evidence_based_reasoning\"\n        },\n        {\n          \"dimension\": \"justice\",\n          \"quote_text\": \"As a senator-juror, I swore an oath before God to exercise impartial justice. My promise before God to apply impartial justice required that I put my personal feelings and political biases aside.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"moral_principle\"\n        },\n        {\n          \"dimension\": \"pragmatism\",\n          \"quote_text\": \"I acknowledge that my verdict will not remove the president from office. The results of this Senate court will, in fact, be appealed to a higher court: the judgment of the American people.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"realistic_assessment\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>","prompt_length":50763,"response_length":3306,"metadata":{"batch_id":"batch_9b8acbb42512","mathematical_validation":true,"tokens_input":365,"tokens_output":327},"session_id":"20250808T030048Z_4ef84eb7","timestamp":"2025-08-08T03:01:48.421617+00:00"}
{"log_type":"llm_interaction","interaction_hash":"cc92382aa815c7a6","agent_name":"EnhancedAnalysisAgent","model":"anthropic/claude-3-5-sonnet-20241022","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: steve_king_2017_house_floor.txt\nHash: 738780d93cc3...\\n\n\n---\n\nBegin analysis now for batch `batch_c96da41379aa`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"I'll analyze the document using the Civic Analysis Framework (CAF) v7.3. Let me process this systematically and provide the structured JSON output.\n\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Civic Analysis Framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": \"0.87\",\n    \"analysis_notes\": \"Floor speech analyzed across all civic character dimensions with strong textual evidence\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"steve_king_2017_house_floor.txt\",\n      \"dimensional_scores\": {\n        \"dignity\": {\n          \"raw_score\": \"0.35\",\n          \"salience\": \"0.65\", \n          \"confidence\": \"0.85\"\n        },\n        \"tribalism\": {\n          \"raw_score\": \"0.75\",\n          \"salience\": \"0.80\",\n          \"confidence\": \"0.90\"\n        },\n        \"truth\": {\n          \"raw_score\": \"0.45\",\n          \"salience\": \"0.60\",\n          \"confidence\": \"0.85\"\n        },\n        \"manipulation\": {\n          \"raw_score\": \"0.70\",\n          \"salience\": \"0.75\",\n          \"confidence\": \"0.85\"\n        },\n        \"justice\": {\n          \"raw_score\": \"0.40\",\n          \"salience\": \"0.80\",\n          \"confidence\": \"0.90\"\n        },\n        \"resentment\": {\n          \"raw_score\": \"0.85\",\n          \"salience\": \"0.90\",\n          \"confidence\": \"0.95\"\n        },\n        \"hope\": {\n          \"raw_score\": \"0.20\",\n          \"salience\": \"0.40\",\n          \"confidence\": \"0.85\"\n        },\n        \"fear\": {\n          \"raw_score\": \"0.80\",\n          \"salience\": \"0.85\",\n          \"confidence\": \"0.90\"\n        },\n        \"pragmatism\": {\n          \"raw_score\": \"0.30\",\n          \"salience\": \"0.50\",\n          \"confidence\": \"0.80\"\n        },\n        \"fantasy\": {\n          \"raw_score\": \"0.60\",\n          \"salience\": \"0.65\",\n          \"confidence\": \"0.80\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"dignity\",\n          \"quote_text\": \"That being one of God's children is good enough to be protected by the law, but everybody treated equally\",\n          \"confidence\": \"0.85\",\n          \"context_type\": \"principle_statement\"\n        },\n        {\n          \"dimension\": \"tribalism\",\n          \"quote_text\": \"These incidents of illegal aliens that are, that are arrested and turned loose on the street because the President has this idea of prioritization\",\n          \"confidence\": \"0.90\",\n          \"context_type\": \"group_exclusion\"\n        },\n        {\n          \"dimension\": \"truth\",\n          \"quote_text\": \"I can read this Constitution and understand what it means. And I can read the precedent cases along the way that have flowed from Marberry on down to today\",\n          \"confidence\": \"0.85\",\n          \"context_type\": \"evidence_claim\"\n        },\n        {\n          \"dimension\": \"manipulation\",\n          \"quote_text\": \"And every American that dies at their hands is a life that could be saved if we just followed our laws\",\n          \"confidence\": \"0.85\",\n          \"context_type\": \"emotional_appeal\"\n        },\n        {\n          \"dimension\": \"justice\",\n          \"quote_text\": \"The law never said and never, never enabled the federal government to establish exchanges in the states\",\n          \"confidence\": \"0.90\",\n          \"context_type\": \"legal_argument\"\n        },\n        {\n          \"dimension\": \"resentment\",\n          \"quote_text\": \"This President has, has released, his administration has released over 30,000 criminals, criminal aliens onto the streets of America\",\n          \"confidence\": \"0.95\",\n          \"context_type\": \"grievance_statement\"\n        },\n        {\n          \"dimension\": \"hope\",\n          \"quote_text\": \"Save these lives. Send these people into prison. And when they're done, send them back to the country that they can live in legally\",\n          \"confidence\": \"0.85\",\n          \"context_type\": \"solution_proposal\"\n        },\n        {\n          \"dimension\": \"fear\",\n          \"quote_text\": \"That's 135 dead Americans that would be alive today if the President didn't have the policy of releasing criminal, criminal aliens onto the streets\",\n          \"confidence\": \"0.90\",\n          \"context_type\": \"threat_emphasis\"\n        },\n        {\n          \"dimension\": \"pragmatism\",\n          \"quote_text\": \"The Senate determines what advice is and the Senate determines that which is consent\",\n          \"confidence\": \"0.80\",\n          \"context_type\": \"process_description\"\n        },\n        {\n          \"dimension\": \"fantasy\",\n          \"quote_text\": \"I don't want to see any more bail to criminal aliens. I want to see law enforcement\",\n          \"confidence\": \"0.80\",\n          \"context_type\": \"oversimplification\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>","prompt_length":76366,"response_length":4729,"metadata":{"batch_id":"batch_c96da41379aa","mathematical_validation":true,"tokens_input":365,"tokens_output":453},"session_id":"20250808T030048Z_4ef84eb7","timestamp":"2025-08-08T03:02:17.616993+00:00"}
