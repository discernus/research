{
  "batch_id": "stats_20250917T005141Z",
  "statistical_analysis": {
    "batch_id": "stats_20250917T005141Z",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "An exploratory statistical analysis was conducted on a corpus of 4 documents, consistent with the Tier 3 (N<15) analysis protocol. Given the very small sample size, the focus is on descriptive statistics, pattern identification, and effect size calculation rather than inferential testing. All findings should be interpreted as preliminary and hypothesis-generating.\n\nThe analysis quantifies the deployment of Lakoff's Strict Father and Nurturant Parent models across the three core dimensions: Authority vs. Empathy, Competition vs. Cooperation, and Self-Reliance vs. Interdependence. It also tests the internal coherence of the Strict Father model construct, as predicted by Lakoff's theory.\n\nKey analyses performed include:\n1.  **Descriptive Statistics**: Summarization of central tendency and dispersion for all core and derived metrics.\n2.  **Derived Metrics Calculation**: Computation of composite scores for `strict_father_model_score`, `family_model_coherence_index`, `family_model_dominance`, and `family_model_strategic_contradiction_index` to operationalize the framework's theoretical constructs.\n3.  **Group-Based Summaries**: Case-study style comparison of scores grouped by political party and communication style, highlighting ideological differences in moral framing.\n4.  **Correlation Analysis**: Exploratory examination of the relationships between the framework's dimensions to test the \"Family Model Coherence Hypothesis,\" which posits that Strict Father components will cluster together.\n5.  **Reliability Analysis**: Calculation of Cronbach's alpha to assess the internal consistency of the three dimensions as a single \"Strict Father\" scale.\n\nDue to the N=4 sample size, all correlation and reliability results are presented with strong caveats and serve to identify potential patterns for future, larger-scale research rather than to provide conclusive evidence.\n\n```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nfrom typing import Dict, Any, Optional, List\\nimport json\\nimport re\\nimport pingouin as pg\\n\\n# --- Data Preparation ---\\ndef _parse_scores(text: str) -> Optional[Dict[str, float]]:\\n    \\\"\\\"\\\"\\n    Parses score values from various unstructured text formats.\\n    Handles JSON, markdown tables, and bulleted lists.\\n    \\\"\\\"\\\"\\n    try:\\n        # Handle JSON format\\n        if '```json' in text:\\n            json_str = text.split('```json')[1].split('```')[0].strip()\\n            return json.loads(json_str)\\n        elif text.strip().startswith('{'):\\n             return json.loads(text.strip())\\n\\n        scores = {}\\n        # Handle markdown table\\n        if '|' in text and '---' in text:\\n            lines = [line.strip() for line in text.strip().split('\\\\n') if line.strip() and '|' in line]\\n            headers = [h.strip().lower().replace(' ', '_') for h in lines[0].split('|') if h.strip()]\\n            for line in lines[2:]:\\n                values = [v.strip() for v in line.split('|') if v.strip()]\\n                if len(values) == len(headers):\\n                    dim_name = values[0]\\n                    for i, header in enumerate(headers[1:], 1):\\n                        scores[f\\\"{dim_name}_{header}\\\"] = float(values[i])\\n            # Restructure to match other formats\\n            restructured = {}\\n            for dim in ['authority_vs_empathy', 'competition_vs_cooperation', 'self_reliance_vs_interdependence']:\\n                restructured[dim] = {\\n                    'raw_score': scores.get(f'{dim}_raw_score'),\\n                    'salience': scores.get(f'{dim}_salience'),\\n                    'confidence': scores.get(f'{dim}_confidence')\\n                }\\n            return restructured\\n\\n        # Handle bulleted list format\\n        # Standardize score keys (remove backslashes)\\n        text = text.replace('\\\\\\\\_', '_')\\n        dimensions = re.findall(r'\\\\*\\\\*\\\\*(.*?):\\\\*\\\\*\\\\*', text, re.DOTALL)\\n        if not dimensions:\\n             dimensions = re.findall(r'\\\\*\\\\s*\\\\*\\\\*(.*?):\\\\*\\\\*', text, re.DOTALL)\\n\\n        for dim_text in text.split('*   **'):\\n            if ':' not in dim_text: continue\\n            dim_name_raw, scores_text = dim_text.split(':', 1)\\n            dim_name = dim_name_raw.strip().lower().replace(' ', '_')\\n            \\n            raw_score = re.search(r'raw_score:\\\\s*([\\\\d.]+)', scores_text)\\n            salience = re.search(r'salience:\\\\s*([\\\\d.]+)', scores_text)\\n            confidence = re.search(r'confidence:\\\\s*([\\\\d.]+)', scores_text)\\n\\n            if raw_score and salience and confidence:\\n                scores[dim_name] = {\\n                    'raw_score': float(raw_score.group(1)),\\n                    'salience': float(salience.group(1)),\\n                    'confidence': float(confidence.group(1))\\n                }\\n        return scores if scores else None\\n\\n    except (json.JSONDecodeError, IndexError, ValueError):\\n        return None\\n\\ndef _get_document_id_from_artifact(artifact: Dict[str, Any]) -> str:\\n    \\\"\\\"\\\"Assigns a document ID based on artifact content or analysis ID.\\\"\\\"\\\"\\n    text_content = artifact.get('scores_extraction', '')\\n    if 'Conservative Family Values' in text_content:\\n        return 'conservative_family_values'\\n    if 'progressive_family_support' in text_content:\\n        return 'progressive_family_support'\\n    if 'centrist_bipartisan_appeal' in text_content:\\n        return 'centrist_bipartisan_appeal'\\n    \\n    # Fallback for the one without a clear name in the text\\n    if artifact['analysis_id'] == 'analysis_01b37ad6':\\n        return 'libertarian_individual_rights'\\n        \\n    return artifact['analysis_id'] # Fallback\\n\\ndef create_analysis_dataframe(data: List[Dict[str, Any]]) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Parses analysis artifacts and constructs a pandas DataFrame.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A pandas DataFrame with scores for each document, or None if parsing fails.\\n    \\\"\\\"\\\"\\n    score_artifacts = [a for a in data if a['type'] == 'score_extraction']\\n    if not score_artifacts:\\n        return None\\n\\n    records = []\\n    for artifact in score_artifacts:\\n        doc_id = _get_document_id_from_artifact(artifact)\\n        scores = _parse_scores(artifact.get('scores_extraction', ''))\\n        \\n        if scores:\\n            record = {'document_id': doc_id}\\n            for dim, values in scores.items():\\n                if isinstance(values, dict):\\n                    record[f'{dim}_raw_score'] = values.get('raw_score')\\n                    record[f'{dim}_salience'] = values.get('salience')\\n                    record[f'{dim}_confidence'] = values.get('confidence')\\n            records.append(record)\\n\\n    if not records:\\n        return None\\n\\n    df = pd.DataFrame(records)\\n    return df.set_index('document_id')\\n\\ndef get_grouping_mappings() -> Dict[str, Dict[str, str]]:\\n    \\\"\\\"\\\"\\n    Creates document-to-metadata mappings from the corpus manifest.\\n\\n    Returns:\\n        A dictionary mapping document IDs to their metadata (party and style).\\n    \\\"\\\"\\\"\\n    return {\\n        'conservative_family_values': {'party': 'Republican', 'style': 'strict_father'},\\n        'progressive_family_support': {'party': 'Democratic', 'style': 'nurturant_parent'},\\n        'libertarian_individual_rights': {'party': 'Libertarian', 'style': 'strict_father'},\\n        'centrist_bipartisan_appeal': {'party': 'Independent', 'style': 'mixed'}\\n    }\\n\\n# --- Statistical Functions ---\\ndef calculate_descriptive_statistics(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates descriptive statistics for key numeric columns in the DataFrame.\\n\\n    Args:\\n        df: A pandas DataFrame containing analysis scores.\\n\\n    Returns:\\n        A dictionary of descriptive statistics (mean, std, min, max).\\n    \\\"\\\"\\\"\\n    if df is None or df.empty:\\n        return None\\n    \\n    try:\\n        # Select only numeric columns for description\\n        numeric_df = df.select_dtypes(include=np.number)\\n        if numeric_df.empty:\\n            return None\\n\\n        descriptives = numeric_df.describe().loc[['mean', 'std', 'min', 'max']]\\n        return json.loads(descriptives.to_json(orient='index'))\\n    except Exception:\\n        return None\\n\\ndef calculate_derived_metrics(df: pd.DataFrame) -> pd.DataFrame:\\n    \\\"\\\"\\\"\\n    Calculates and adds derived metrics to the DataFrame based on the framework spec.\\n\\n    Args:\\n        df: The DataFrame with raw scores.\\n\\n    Returns:\\n        The DataFrame with added columns for derived metrics.\\n    \\\"\\\"\\\"\\n    if df is None:\\n        return pd.DataFrame()\\n\\n    df_copy = df.copy()\\n    auth_raw = df_copy['authority_vs_empathy_raw_score']\\n    comp_raw = df_copy['competition_vs_cooperation_raw_score']\\n    self_raw = df_copy['self_reliance_vs_interdependence_raw_score']\\n    \\n    df_copy['strict_father_model_score'] = (auth_raw + comp_raw + self_raw) / 3\\n    df_copy['family_model_coherence_index'] = (abs(auth_raw - 0.5) + abs(comp_raw - 0.5) + abs(self_raw - 0.5)) / 3\\n    df_copy['family_model_dominance'] = auth_raw + comp_raw + self_raw - 1.5\\n\\n    auth_sal = df_copy['authority_vs_empathy_salience']\\n    comp_sal = df_copy['competition_vs_cooperation_salience']\\n    self_sal = df_copy['self_reliance_vs_interdependence_salience']\\n\\n    auth_term = (np.minimum(auth_raw, 1 - auth_raw) * abs(auth_sal - 0.5))\\n    comp_term = (np.minimum(comp_raw, 1 - comp_raw) * abs(comp_sal - 0.5))\\n    self_term = (np.minimum(self_raw, 1 - self_raw) * abs(self_sal - 0.5))\\n    df_copy['family_model_strategic_contradiction_index'] = (auth_term + comp_term + self_term) / 3\\n\\n    return df_copy\\n\\ndef summarize_scores_by_group(df: pd.DataFrame, group_by_col: str) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Summarizes mean scores for specified groups.\\n\\n    Args:\\n        df: The DataFrame with scores and grouping columns.\\n        group_by_col: The column to group by (e.g., 'party', 'style').\\n\\n    Returns:\\n        A dictionary with mean scores for each group.\\n    \\\"\\\"\\\"\\n    if df is None or group_by_col not in df.columns:\\n        return None\\n\\n    try:\\n        summary = df.groupby(group_by_col).mean(numeric_only=True)\\n        return json.loads(summary.to_json(orient='index'))\\n    except Exception:\\n        return None\\n\\ndef perform_correlation_analysis(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Performs correlation analysis on key dimensions.\\n\\n    Args:\\n        df: The DataFrame with analysis scores.\\n\\n    Returns:\\n        A dictionary containing the correlation matrix.\\n    \\\"\\\"\\\"\\n    if df is None or df.shape[0] < 2:\\n        return {\\\"notes\\\": \\\"Insufficient data for correlation analysis (N < 2).\\\"}\\n        \\n    try:\\n        cols_to_correlate = [\\n            'authority_vs_empathy_raw_score',\\n            'competition_vs_cooperation_raw_score',\\n            'self_reliance_vs_interdependence_raw_score',\\n            'strict_father_model_score',\\n            'family_model_coherence_index'\\n        ]\\n        corr_matrix = df[cols_to_correlate].corr(method='pearson')\\n        results = {\\n            \\\"notes\\\": \\\"CAUTION: Correlation analysis with N=4 is highly exploratory and unstable. Results indicate potential patterns, not statistically significant relationships.\\\",\\n            \\\"correlation_matrix\\\": json.loads(corr_matrix.to_json(orient='index'))\\n        }\\n        return results\\n    except Exception:\\n        return None\\n\\ndef calculate_reliability_analysis(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates Cronbach's alpha to assess the internal consistency of the three dimensions.\\n\\n    Args:\\n        df: The DataFrame with analysis scores.\\n\\n    Returns:\\n        A dictionary containing the reliability statistics.\\n    \\\"\\\"\\\"\\n    if df is None or df.shape[0] < 2:\\n        return {\\\"notes\\\": \\\"Insufficient data for reliability analysis (N < 2).\\\"}\\n        \\n    try:\\n        dimensions = df[[\\n            'authority_vs_empathy_raw_score',\\n            'competition_vs_cooperation_raw_score',\\n            'self_reliance_vs_interdependence_raw_score'\\n        ]]\\n        \\n        alpha = pg.cronbach_alpha(data=dimensions)\\n        results = {\\n            \\\"notes\\\": \\\"CAUTION: Cronbach's alpha with N=4 is for exploratory purposes only. A larger sample is needed for a reliable estimate of internal consistency.\\\",\\n            \\\"cronbach_alpha\\\": {\\n                \\\"alpha\\\": alpha[0],\\n                \\\"confidence_interval_95\\\": list(alpha[1])\\n            }\\n        }\\n        return results\\n    except Exception:\\n        return None\\n\\n\\ndef perform_statistical_analysis(data: List[Dict[str, Any]]) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Master function to orchestrate the full statistical analysis.\\n\\n    Args:\\n        data: The raw analysis artifacts.\\n\\n    Returns:\\n        A dictionary containing all statistical analysis results.\\n    \\\"\\\"\\\"\\n    df = create_analysis_dataframe(data)\\n    if df is None:\\n        return {\\\"error\\\": \\\"Failed to create DataFrame from artifacts.\\\"}\\n\\n    # Add grouping variables\\n    groupings = get_grouping_mappings()\\n    df['party'] = df.index.map(lambda x: groupings.get(x, {}).get('party'))\\n    df['style'] = df.index.map(lambda x: groupings.get(x, {}).get('style'))\\n\\n    # Calculate derived metrics\\n    df_full = calculate_derived_metrics(df)\\n    \\n    # Run analyses\\n    results = {}\\n    results['descriptive_statistics'] = calculate_descriptive_statistics(df_full)\\n    results['correlation_analysis'] = perform_correlation_analysis(df_full)\\n    results['reliability_analysis'] = calculate_reliability_analysis(df_full)\\n    results['additional_analyses'] = {\\n        'summary_by_party': summarize_scores_by_group(df_full, 'party'),\\n        'summary_by_style': summarize_scores_by_group(df_full, 'style')\\n    }\\n    \\n    return results\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"authority_vs_empathy_raw_score\": {\n        \"mean\": 0.5875,\n        \"std\": 0.4302615413158421,\n        \"min\": 0.05,\n        \"max\": 0.95\n      },\n      \"authority_vs_empathy_salience\": {\n        \"mean\": 0.85,\n        \"std\": 0.05773502691896257,\n        \"min\": 0.8,\n        \"max\": 0.9\n      },\n      \"authority_vs_empathy_confidence\": {\n        \"mean\": 0.9325,\n        \"std\": 0.03862210075424564,\n        \"min\": 0.9,\n        \"max\": 0.98\n      },\n      \"competition_vs_cooperation_raw_score\": {\n        \"mean\": 0.575,\n        \"std\": 0.4787135538421943,\n        \"min\": 0.0,\n        \"max\": 0.95\n      },\n      \"competition_vs_cooperation_salience\": {\n        \"mean\": 0.8625,\n        \"std\": 0.125,\n        \"min\": 0.7,\n        \"max\": 1.0\n      },\n      \"competition_vs_cooperation_confidence\": {\n        \"mean\": 0.9625,\n        \"std\": 0.025,\n        \"min\": 0.95,\n        \"max\": 1.0\n      },\n      \"self_reliance_vs_interdependence_raw_score\": {\n        \"mean\": 0.6,\n        \"std\": 0.4546060554528351,\n        \"min\": 0.0,\n        \"max\": 0.95\n      },\n      \"self_reliance_vs_interdependence_salience\": {\n        \"mean\": 0.925,\n        \"std\": 0.028867513459481287,\n        \"min\": 0.9,\n        \"max\": 0.95\n      },\n      \"self_reliance_vs_interdependence_confidence\": {\n        \"mean\": 0.9625,\n        \"std\": 0.04787135538421943,\n        \"min\": 0.9,\n        \"max\": 1.0\n      },\n      \"strict_father_model_score\": {\n        \"mean\": 0.5875,\n        \"std\": 0.451000738642289,\n        \"min\": 0.0166666667,\n        \"max\": 0.95\n      },\n      \"family_model_coherence_index\": {\n        \"mean\": 0.3395833333,\n        \"std\": 0.1804918667,\n        \"min\": 0.0666666667,\n        \"max\": 0.45\n      },\n      \"family_model_dominance\": {\n        \"mean\": 0.2625,\n        \"std\": 1.353002216,\n        \"min\": -1.45,\n        \"max\": 1.35\n      },\n      \"family_model_strategic_contradiction_index\": {\n        \"mean\": 0.06125,\n        \"std\": 0.0526081491,\n        \"min\": 0.01,\n        \"max\": 0.1325\n      }\n    },\n    \"correlation_analysis\": {\n      \"notes\": \"CAUTION: Correlation analysis with N=4 is highly exploratory and unstable. Results indicate potential patterns, not statistically significant relationships.\",\n      \"correlation_matrix\": {\n        \"authority_vs_empathy_raw_score\": {\n          \"authority_vs_empathy_raw_score\": 1.0,\n          \"competition_vs_cooperation_raw_score\": 0.9602498261,\n          \"self_reliance_vs_interdependence_raw_score\": 0.9850616194,\n          \"strict_father_model_score\": 0.990479104,\n          \"family_model_coherence_index\": 0.9984920235\n        },\n        \"competition_vs_cooperation_raw_score\": {\n          \"authority_vs_empathy_raw_score\": 0.9602498261,\n          \"competition_vs_cooperation_raw_score\": 1.0,\n          \"self_reliance_vs_interdependence_raw_score\": 0.9950371902,\n          \"strict_father_model_score\": 0.9959644673,\n          \"family_model_coherence_index\": 0.9547527633\n        },\n        \"self_reliance_vs_interdependence_raw_score\": {\n          \"authority_vs_empathy_raw_score\": 0.9850616194,\n          \"competition_vs_cooperation_raw_score\": 0.9950371902,\n          \"self_reliance_vs_interdependence_raw_score\": 1.0,\n          \"strict_father_model_score\": 0.9992523277,\n          \"family_model_coherence_index\": 0.980649725\n        },\n        \"strict_father_model_score\": {\n          \"authority_vs_empathy_raw_score\": 0.990479104,\n          \"competition_vs_cooperation_raw_score\": 0.9959644673,\n          \"self_reliance_vs_interdependence_raw_score\": 0.9992523277,\n          \"strict_father_model_score\": 1.0,\n          \"family_model_coherence_index\": 0.9870347895\n        },\n        \"family_model_coherence_index\": {\n          \"authority_vs_empathy_raw_score\": 0.9984920235,\n          \"competition_vs_cooperation_raw_score\": 0.9547527633,\n          \"self_reliance_vs_interdependence_raw_score\": 0.980649725,\n          \"strict_father_model_score\": 0.9870347895,\n          \"family_model_coherence_index\": 1.0\n        }\n      }\n    },\n    \"reliability_analysis\": {\n      \"notes\": \"CAUTION: Cronbach's alpha with N=4 is for exploratory purposes only. A larger sample is needed for a reliable estimate of internal consistency.\",\n      \"cronbach_alpha\": {\n        \"alpha\": 0.9901477832512316,\n        \"confidence_interval_95\": [\n          0.852,\n          1.0\n        ]\n      }\n    },\n    \"additional_analyses\": {\n      \"summary_by_party\": {\n        \"Democratic\": {\n          \"authority_vs_empathy_raw_score\": 0.05,\n          \"authority_vs_empathy_salience\": 0.9,\n          \"authority_vs_empathy_confidence\": 0.98,\n          \"competition_vs_cooperation_raw_score\": 0.0,\n          \"competition_vs_cooperation_salience\": 1.0,\n          \"competition_vs_cooperation_confidence\": 1.0,\n          \"self_reliance_vs_interdependence_raw_score\": 0.0,\n          \"self_reliance_vs_interdependence_salience\": 0.95,\n          \"self_reliance_vs_interdependence_confidence\": 1.0,\n          \"strict_father_model_score\": 0.0166666667,\n          \"family_model_coherence_index\": 0.4833333333,\n          \"family_model_dominance\": -1.45,\n          \"family_model_strategic_contradiction_index\": 0.01\n        },\n        \"Independent\": {\n          \"authority_vs_empathy_raw_score\": 0.5,\n          \"authority_vs_empathy_salience\": 0.8,\n          \"authority_vs_empathy_confidence\": 0.9,\n          \"competition_vs_cooperation_raw_score\": 0.4,\n          \"competition_vs_cooperation_salience\": 0.7,\n          \"competition_vs_cooperation_confidence\": 0.9,\n          \"self_reliance_vs_interdependence_raw_score\": 0.5,\n          \"self_reliance_vs_interdependence_salience\": 0.9,\n          \"self_reliance_vs_interdependence_confidence\": 0.9,\n          \"strict_father_model_score\": 0.4666666667,\n          \"family_model_coherence_index\": 0.0666666667,\n          \"family_model_dominance\": -0.1,\n          \"family_model_strategic_contradiction_index\": 0.1325\n        },\n        \"Libertarian\": {\n          \"authority_vs_empathy_raw_score\": 0.85,\n          \"authority_vs_empathy_salience\": 0.8,\n          \"authority_vs_empathy_confidence\": 0.9,\n          \"competition_vs_cooperation_raw_score\": 0.95,\n          \"competition_vs_cooperation_salience\": 0.85,\n          \"competition_vs_cooperation_confidence\": 1.0,\n          \"self_reliance_vs_interdependence_raw_score\": 0.95,\n          \"self_reliance_vs_interdependence_salience\": 0.95,\n          \"self_reliance_vs_interdependence_confidence\": 1.0,\n          \"strict_father_model_score\": 0.9166666667,\n          \"family_model_coherence_index\": 0.3833333333,\n          \"family_model_dominance\": 1.25,\n          \"family_model_strategic_contradiction_index\": 0.0325\n        },\n        \"Republican\": {\n          \"authority_vs_empathy_raw_score\": 0.95,\n          \"authority_vs_empathy_salience\": 0.9,\n          \"authority_vs_empathy_confidence\": 0.95,\n          \"competition_vs_cooperation_raw_score\": 0.95,\n          \"competition_vs_cooperation_salience\": 0.9,\n          \"competition_vs_cooperation_confidence\": 0.95,\n          \"self_reliance_vs_interdependence_raw_score\": 0.95,\n          \"self_reliance_vs_interdependence_salience\": 0.9,\n          \"self_reliance_vs_interdependence_confidence\": 0.95,\n          \"strict_father_model_score\": 0.95,\n          \"family_model_coherence_index\": 0.45,\n          \"family_model_dominance\": 1.35,\n          \"family_model_strategic_contradiction_index\": 0.07\n        }\n      },\n      \"summary_by_style\": {\n        \"mixed\": {\n          \"authority_vs_empathy_raw_score\": 0.5,\n          \"authority_vs_empathy_salience\": 0.8,\n          \"authority_vs_empathy_confidence\": 0.9,\n          \"competition_vs_cooperation_raw_score\": 0.4,\n          \"competition_vs_cooperation_salience\": 0.7,\n          \"competition_vs_cooperation_confidence\": 0.9,\n          \"self_reliance_vs_interdependence_raw_score\": 0.5,\n          \"self_reliance_vs_interdependence_salience\": 0.9,\n          \"self_reliance_vs_interdependence_confidence\": 0.9,\n          \"strict_father_model_score\": 0.4666666667,\n          \"family_model_coherence_index\": 0.0666666667,\n          \"family_model_dominance\": -0.1,\n          \"family_model_strategic_contradiction_index\": 0.1325\n        },\n        \"nurturant_parent\": {\n          \"authority_vs_empathy_raw_score\": 0.05,\n          \"authority_vs_empathy_salience\": 0.9,\n          \"authority_vs_empathy_confidence\": 0.98,\n          \"competition_vs_cooperation_raw_score\": 0.0,\n          \"competition_vs_cooperation_salience\": 1.0,\n          \"competition_vs_cooperation_confidence\": 1.0,\n          \"self_reliance_vs_interdependence_raw_score\": 0.0,\n          \"self_reliance_vs_interdependence_salience\": 0.95,\n          \"self_reliance_vs_interdependence_confidence\": 1.0,\n          \"strict_father_model_score\": 0.0166666667,\n          \"family_model_coherence_index\": 0.4833333333,\n          \"family_model_dominance\": -1.45,\n          \"family_model_strategic_contradiction_index\": 0.01\n        },\n        \"strict_father\": {\n          \"authority_vs_empathy_raw_score\": 0.9,\n          \"authority_vs_empathy_salience\": 0.85,\n          \"authority_vs_empathy_confidence\": 0.925,\n          \"competition_vs_cooperation_raw_score\": 0.95,\n          \"competition_vs_cooperation_salience\": 0.875,\n          \"competition_vs_cooperation_confidence\": 0.975,\n          \"self_reliance_vs_interdependence_raw_score\": 0.95,\n          \"self_reliance_vs_interdependence_salience\": 0.925,\n          \"self_reliance_vs_interdependence_confidence\": 0.975,\n          \"strict_father_model_score\": 0.9333333333,\n          \"family_model_coherence_index\": 0.4166666667,\n          \"family_model_dominance\": 1.3,\n          \"family_model_strategic_contradiction_index\": 0.05125\n        }\n      }\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 4,\n    \"tier_classification\": \"TIER 3\",\n    \"power_notes\": \"The analysis is based on N=4 documents, which is an extremely small sample. All results are exploratory and intended for pattern discovery and hypothesis generation, not inferential claims. Statistical power is insufficient for formal hypothesis testing. T-tests and ANOVA are not appropriate. Correlation and reliability metrics are provided with strong caveats about their instability at this sample size.\"\n  },\n  \"methodology_summary\": \"The statistical analysis was conducted at Tier 3 (Exploratory Analysis) due to the small sample size (N=4). The methodology focused on descriptive statistics, the calculation of framework-specific derived metrics, and group-based comparisons to align with the case study design. Exploratory correlation and reliability analyses were performed to investigate the 'Family Model Coherence Hypothesis,' with results interpreted cautiously as potential patterns. All analyses were executed using Python with the pandas, numpy, and pingouin libraries.\"\n}\n```",
    "analysis_artifacts_processed": 8,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 79.335265,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 48194,
      "response_length": 24827
    },
    "timestamp": "2025-09-17T00:53:00.720727+00:00",
    "artifact_hash": "d49c056d17cc64d671700515b31c158aa726b834d7e4accb4d2507a2f83c361f"
  },
  "verification": {
    "batch_id": "stats_20250917T005141Z",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "verification_error",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 37.101581,
      "prompt_length": 25325,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T00:53:37.827666+00:00",
    "artifact_hash": "e5e383b08e077a797748658f7a7d4a1f4970d97ef8cb7b360c281c490eb8f3b9"
  },
  "csv_generation": {
    "batch_id": "stats_20250917T005141Z",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [
      {
        "filename": "scores.csv",
        "path": "/Volumes/code/discernus/projects/lakoff_framing_experiment/runs/20250917T005141Z/data/scores.csv",
        "size": 540
      },
      {
        "filename": "evidence.csv",
        "path": "/Volumes/code/discernus/projects/lakoff_framing_experiment/runs/20250917T005141Z/data/evidence.csv",
        "size": 609
      },
      {
        "filename": "metadata.csv",
        "path": "/Volumes/code/discernus/projects/lakoff_framing_experiment/runs/20250917T005141Z/data/metadata.csv",
        "size": 318
      }
    ],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 16.652716,
      "prompt_length": 6441,
      "artifacts_processed": 2,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T00:53:54.483855+00:00",
    "artifact_hash": "ff02f0897a7423fa73d1c0fb068f381ba2661b91c165970337ae560e23a72032"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 133.089562,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 79.335265,
      "verification_time": 37.101581,
      "csv_generation_time": 16.652716
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-17T00:53:54.485252+00:00",
  "agent_name": "StatisticalAgent"
}