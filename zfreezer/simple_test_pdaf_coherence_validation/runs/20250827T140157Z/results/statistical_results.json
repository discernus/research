{
  "generation_metadata": {
    "status": "success",
    "functions_generated": 5,
    "output_file": "automatedstatisticalanalysisagent_functions.py",
    "module_size": 22296,
    "function_code_content": "\"\"\"\nAutomated Statistical Analysis Functions\n========================================\n\nGenerated by AutomatedStatisticalAnalysisAgent for experiment: simple_test_pdaf\nDescription: Statistical analysis experiment\nGenerated: 2025-08-27T13:59:37.605270+00:00\n\nThis module contains automatically generated statistical analysis functions\nfor comprehensive data analysis including ANOVA, correlations, reliability,\nand hypothesis testing as appropriate for the research questions.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nfrom typing import Dict, Any, Optional, List, Tuple\nimport warnings\n\n# Suppress common statistical warnings for cleaner output\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\n\n\ndef _add_speaker_column(data):\n    \"\"\"\n    Internal helper function to add a 'speaker' column to the DataFrame.\n\n    This function attempts to identify a speaker from the 'document_name' column.\n    It is designed as a fallback since the prompt states \"No corpus manifest found.\"\n    The logic extracts a plausible name from the start of the filename.\n    For example, 'bernie_sanders_2025_speech.txt' becomes 'bernie_sanders'.\n\n    Args:\n        data (pd.DataFrame): The input DataFrame with a 'document_name' column.\n\n    Returns:\n        pd.DataFrame: The DataFrame with an added 'speaker' column.\n    \"\"\"\n    if 'document_name' not in data.columns:\n        # If no document_name, cannot infer speaker. Add a placeholder.\n        data['speaker'] = 'unknown'\n        return data\n\n    def extract_speaker(filename):\n        try:\n            # Assumes format like 'speaker_name_...' or 'speaker-name_...'\n            # Handles names with one or two parts, e.g., \"trump\" or \"bernie_sanders\"\n            parts = Path(filename).stem.replace('-', '_').split('_')\n            if len(parts) > 1 and not parts[1].isdigit():\n                # Likely a two-part name like \"bernie_sanders\"\n                return f\"{parts[0]}_{parts[1]}\"\n            return parts[0]\n        except Exception:\n            return \"unknown\"\n\n    data['speaker'] = data['document_name'].apply(extract_speaker)\n    return data\n\ndef calculate_derived_metrics(data, **kwargs):\n    \"\"\"\n    Calculates all derived metrics as specified in the PDAF v10.0.0 framework.\n\n    This function computes the three strategic tension scores, the overall\n    Populist Strategic Contradiction Index (PSCI), and the four salience-weighted\n    indices. It adds these new metrics as columns to the input DataFrame.\n    This is a foundational function used by other analysis functions.\n\n    Methodology:\n    - Tension Scores: Calculated using the formula `min(ScoreA, ScoreB) * |SalienceA - SalienceB|`.\n    - PSCI: Calculated as the average of the three tension scores, using the full formula\n      from the framework for numerical stability.\n    - Salience-Weighted Indices: Calculated as the weighted average of raw scores,\n      where weights are the corresponding salience scores. A small epsilon (0.001) is\n      added to the denominator to prevent division by zero.\n\n    Args:\n        data (pandas.DataFrame): DataFrame containing the raw analysis data with columns\n                                 matching the framework specification.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        pandas.DataFrame: The original DataFrame with added columns for each derived metric,\n                          or None if essential columns are missing.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        df = data.copy()\n\n        # Define column names for easier access and to match the spec\n        # NOTE: Using 'homogenous' as specified in the 'ACTUAL DATA STRUCTURE'\n        dim_cols = {\n            'manichaean': 'manichaean_people_elite_framing',\n            'crisis': 'crisis_restoration_narrative',\n            'sovereignty': 'popular_sovereignty_claims',\n            'anti_pluralist': 'anti_pluralist_exclusion',\n            'conspiracy': 'elite_conspiracy_systemic_corruption',\n            'authenticity': 'authenticity_vs_political_class',\n            'homogeneous': 'homogenous_people_construction',\n            'nationalist': 'nationalist_exclusion',\n            'economic': 'economic_populist_appeals'\n        }\n\n        raw_scores = {k: f\"{v}_raw\" for k, v in dim_cols.items()}\n        saliences = {k: f\"{v}_salience\" for k, v in dim_cols.items()}\n\n        # --- Tension Metrics ---\n        # Democratic-Authoritarian Tension\n        df['democratic_authoritarian_tension'] = np.minimum(df[raw_scores['sovereignty']], df[raw_scores['anti_pluralist']]) * \\\n                                                  np.abs(df[saliences['sovereignty']] - df[saliences['anti_pluralist']])\n\n        # Internal-External Focus Tension\n        df['internal_external_focus_tension'] = np.minimum(df[raw_scores['homogeneous']], df[raw_scores['nationalist']]) * \\\n                                                 np.abs(df[saliences['homogeneous']] - df[saliences['nationalist']])\n\n        # Crisis-Elite Attribution Tension\n        df['crisis_elite_attribution_tension'] = np.minimum(df[raw_scores['crisis']], df[raw_scores['conspiracy']]) * \\\n                                                  np.abs(df[saliences['crisis']] - df[saliences['conspiracy']])\n\n        # --- Populist Strategic Contradiction Index (PSCI) ---\n        # Calculated directly from base dimensions as per the spec for robustness\n        df['populist_strategic_contradiction_index'] = (df['democratic_authoritarian_tension'] +\n                                                       df['internal_external_focus_tension'] +\n                                                       df['crisis_elite_attribution_tension']) / 3\n\n        # --- Salience-Weighted Indices ---\n        epsilon = 0.001\n\n        # Core Populism\n        core_dims = ['manichaean', 'crisis', 'sovereignty', 'anti_pluralist']\n        core_numerator = sum(df[raw_scores[d]] * df[saliences[d]] for d in core_dims)\n        core_denominator = sum(df[saliences[d]] for d in core_dims) + epsilon\n        df['salience_weighted_core_populism_index'] = core_numerator / core_denominator\n\n        # Populism Mechanisms\n        mech_dims = ['conspiracy', 'authenticity', 'homogeneous']\n        mech_numerator = sum(df[raw_scores[d]] * df[saliences[d]] for d in mech_dims)\n        mech_denominator = sum(df[saliences[d]] for d in mech_dims) + epsilon\n        df['salience_weighted_populism_mechanisms_index'] = mech_numerator / mech_denominator\n\n        # Boundary Distinctions\n        bound_dims = ['nationalist', 'economic']\n        bound_numerator = sum(df[raw_scores[d]] * df[saliences[d]] for d in bound_dims)\n        bound_denominator = sum(df[saliences[d]] for d in bound_dims) + epsilon\n        df['salience_weighted_boundary_distinctions_index'] = bound_numerator / bound_denominator\n\n        # Overall Populism\n        all_dims = list(dim_cols.keys())\n        overall_numerator = sum(df[raw_scores[d]] * df[saliences[d]] for d in all_dims)\n        overall_denominator = sum(df[saliences[d]] for d in all_dims) + epsilon\n        df['salience_weighted_overall_populism_index'] = overall_numerator / overall_denominator\n        \n        # Clip values to be within [0, 1] range as a safeguard\n        for col in df.columns:\n            if 'index' in col or 'tension' in col:\n                df[col] = df[col].clip(0, 1)\n\n        return df\n\n    except KeyError as e:\n        # A required column was not found in the DataFrame\n        print(f\"Error: Missing required column for calculation: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred in calculate_derived_metrics: {e}\")\n        return None\n\ndef get_descriptive_statistics(data, **kwargs):\n    \"\"\"\n    Provides descriptive statistics for all populist dimensions and derived metrics.\n\n    This function first calculates the derived metrics using the `calculate_derived_metrics`\n    function. It then computes and returns summary statistics (mean, std, min, 25%, 50%,\n    75%, max) for all raw score columns and all derived metric columns.\n\n    Args:\n        data (pandas.DataFrame): DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A dictionary containing two pandas DataFrames: 'raw_scores' and\n              'derived_metrics', with descriptive statistics for each. Returns\n              None if data is insufficient.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data.empty:\n            return None\n\n        # First, calculate derived metrics to ensure they are available\n        data_with_metrics = calculate_derived_metrics(data)\n        if data_with_metrics is None:\n            return None\n\n        # Select raw score columns\n        raw_score_cols = [col for col in data_with_metrics.columns if col.endswith('_raw')]\n        \n        # Select derived metric columns\n        derived_metric_cols = [\n            'democratic_authoritarian_tension',\n            'internal_external_focus_tension',\n            'crisis_elite_attribution_tension',\n            'populist_strategic_contradiction_index',\n            'salience_weighted_core_populism_index',\n            'salience_weighted_populism_mechanisms_index',\n            'salience_weighted_boundary_distinctions_index',\n            'salience_weighted_overall_populism_index'\n        ]\n\n        if not raw_score_cols or not all(c in data_with_metrics.columns for c in derived_metric_cols):\n            return None\n\n        # Calculate descriptive statistics\n        raw_stats = data_with_metrics[raw_score_cols].describe()\n        derived_stats = data_with_metrics[derived_metric_cols].describe()\n\n        return {\n            \"raw_scores_stats\": raw_stats.to_dict(),\n            \"derived_metrics_stats\": derived_stats.to_dict()\n        }\n\n    except Exception as e:\n        print(f\"An unexpected error occurred in get_descriptive_statistics: {e}\")\n        return None\n\ndef analyze_speaker_profiles(data, **kwargs):\n    \"\"\"\n    Analyzes and compares the populist discourse profiles of different speakers.\n\n    This function groups the data by speaker and calculates the average score for each\n    of the nine populist dimensions and all derived metrics. This allows for a direct\n    comparison of communication styles.\n\n    Methodology:\n    - Speaker Identification: As no corpus manifest is provided, speakers are identified\n      from the 'document_name' column using a helper function. This is a fallback\n      mechanism.\n    - Aggregation: The function calculates the mean of all raw scores and derived\n      metrics for each speaker.\n\n    Args:\n        data (pandas.DataFrame): DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A dictionary of speaker profiles, with speaker names as keys and their\n              average scores for all metrics as values. Returns None if data is\n              insufficient.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data.empty:\n            return None\n\n        # Calculate derived metrics and identify speakers\n        data_with_metrics = calculate_derived_metrics(data)\n        if data_with_metrics is None:\n            return None\n        \n        data_with_speakers = _add_speaker_column(data_with_metrics)\n\n        # Define columns to aggregate\n        raw_score_cols = [col for col in data_with_speakers.columns if col.endswith('_raw')]\n        derived_metric_cols = [\n            'democratic_authoritarian_tension',\n            'internal_external_focus_tension',\n            'crisis_elite_attribution_tension',\n            'populist_strategic_contradiction_index',\n            'salience_weighted_core_populism_index',\n            'salience_weighted_populism_mechanisms_index',\n            'salience_weighted_boundary_distinctions_index',\n            'salience_weighted_overall_populism_index'\n        ]\n        \n        all_metrics_cols = raw_score_cols + derived_metric_cols\n        \n        if not all(c in data_with_speakers.columns for c in all_metrics_cols):\n             return None\n\n        # Group by speaker and calculate the mean\n        speaker_profiles = data_with_speakers.groupby('speaker')[all_metrics_cols].mean()\n\n        return speaker_profiles.to_dict('index')\n\n    except Exception as e:\n        print(f\"An unexpected error occurred in analyze_speaker_profiles: {e}\")\n        return None\n\ndef analyze_strategic_tensions(data, **kwargs):\n    \"\"\"\n    Analyzes strategic tension patterns across the corpus and by speaker.\n\n    This function focuses on the three tension metrics and the overall Populist\n    Strategic Contradiction Index (PSCI). It provides both a corpus-wide average\n    and a breakdown by speaker to answer research questions about the strategic\n    coherence of populist messaging.\n\n    Methodology:\n    - Metrics: Uses the pre-calculated tension and PSCI metrics.\n    - Aggregation: Calculates the mean of these four metrics for the entire dataset\n      and for each individual speaker.\n\n    Args:\n        data (pandas.DataFrame): DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A dictionary with two keys: 'corpus_average_tensions' (a dict of overall\n              averages) and 'speaker_average_tensions' (a dict of speaker-specific\n              averages). Returns None if data is insufficient.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data.empty:\n            return None\n\n        data_with_metrics = calculate_derived_metrics(data)\n        if data_with_metrics is None:\n            return None\n        \n        data_with_speakers = _add_speaker_column(data_with_metrics)\n\n        tension_cols = [\n            'democratic_authoritarian_tension',\n            'internal_external_focus_tension',\n            'crisis_elite_attribution_tension',\n            'populist_strategic_contradiction_index'\n        ]\n        \n        if not all(c in data_with_speakers.columns for c in tension_cols):\n            return None\n\n        # Calculate corpus-wide average tensions\n        corpus_avg = data_with_speakers[tension_cols].mean().to_dict()\n\n        # Calculate speaker-specific average tensions\n        speaker_avg = data_with_speakers.groupby('speaker')[tension_cols].mean().to_dict('index')\n\n        return {\n            \"corpus_average_tensions\": corpus_avg,\n            \"speaker_average_tensions\": speaker_avg\n        }\n\n    except Exception as e:\n        print(f\"An unexpected error occurred in analyze_strategic_tensions: {e}\")\n        return None\n\ndef compare_ideological_styles(data, **kwargs):\n    \"\"\"\n    Compares populist conservative and progressive styles on key dimensions.\n\n    This function addresses the research question about how different ideological\n    styles use boundary construction and crisis narratives. It compares mean scores\n    for 'Nationalist Exclusion', 'Economic Populist Appeals', and 'Crisis-Restoration\n    Narrative'.\n\n    Methodology:\n    - Ideological Classification: Since no corpus manifest is provided, this function\n      uses a hardcoded mapping of speaker names (inferred from filenames) to\n      'progressive' or 'conservative' categories. This is an assumption based on\n      available data and should be adapted if a manifest becomes available.\n    - Comparison: It calculates the mean scores for the specified dimensions, grouped\n      by the assigned ideology.\n\n    Args:\n        data (pandas.DataFrame): DataFrame containing the raw analysis data.\n        **kwargs: Additional parameters (not used).\n\n    Returns:\n        dict: A dictionary of mean scores for the key dimensions, grouped by\n              ideology. Returns None if data is insufficient or no speakers\n              match the defined ideologies.\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import json\n    import glob\n    from pathlib import Path\n\n    try:\n        if data.empty:\n            return None\n\n        # NOTE: This mapping is a necessary assumption due to the lack of a corpus manifest.\n        # It is based on common knowledge of the speakers in the sample data.\n        ideology_map = {\n            'bernie_sanders': 'progressive',\n            'alexandria_ocasio_cortez': 'progressive',\n            'steve_king': 'conservative',\n            'donald_trump': 'conservative', # Assuming this might appear\n            'john_mccain': 'conservative' # Included for contrast\n        }\n\n        data_with_speakers = _add_speaker_column(data)\n        data_with_speakers['ideology'] = data_with_speakers['speaker'].map(ideology_map)\n\n        # Filter for documents where an ideology could be assigned\n        ideological_data = data_with_speakers.dropna(subset=['ideology'])\n        if ideological_data.empty:\n            return {\"error\": \"No documents from speakers with a defined ideology found.\"}\n\n        comparison_dims = [\n            'nationalist_exclusion_raw',\n            'economic_populist_appeals_raw',\n            'crisis_restoration_narrative_raw'\n        ]\n        \n        if not all(c in ideological_data.columns for c in comparison_dims):\n            return None\n\n        # Group by ideology and calculate mean scores\n        comparison_results = ideological_data.groupby('ideology')[comparison_dims].mean()\n\n        return comparison_results.to_dict('index')\n\n    except Exception as e:\n        print(f\"An unexpected error occurred in compare_ideological_styles: {e}\")\n        return None\n\ndef run_complete_statistical_analysis(data: pd.DataFrame, alpha: float = 0.05) -> Dict[str, Any]:\n    \"\"\"\n    Run complete statistical analysis suite on the dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores\n        alpha: Significance level for hypothesis tests (default: 0.05)\n        \n    Returns:\n        Dictionary with all statistical analysis results\n    \"\"\"\n    results = {\n        'analysis_metadata': {\n            'timestamp': pd.Timestamp.now().isoformat(),\n            'sample_size': len(data),\n            'alpha_level': alpha,\n            'variables_analyzed': list(data.select_dtypes(include=[np.number]).columns)\n        }\n    }\n    \n    # Get all analysis functions from this module\n    import inspect\n    current_module = inspect.getmodule(inspect.currentframe())\n    \n    for name, obj in inspect.getmembers(current_module):\n        if (inspect.isfunction(obj) and \n            name.startswith(('calculate_', 'perform_', 'test_')) and \n            name != 'run_complete_statistical_analysis'):\n            try:\n                # Pass alpha parameter to functions that might need it\n                if 'alpha' in inspect.signature(obj).parameters:\n                    results[name] = obj(data, alpha=alpha)\n                else:\n                    results[name] = obj(data)\n            except Exception as e:\n                results[name] = {'error': f'Analysis failed: {str(e)}'}\n                \n    return results\n\n\ndef perform_statistical_analysis(data: pd.DataFrame) -> Dict[str, Any]:\n    \"\"\"\n    Template-compatible wrapper function for statistical analysis.\n    \n    This function is called by the universal notebook template and performs\n    comprehensive statistical analysis on the provided dataset.\n    \n    Args:\n        data: pandas DataFrame with dimension scores and derived metrics\n        \n    Returns:\n        Dictionary containing all statistical analysis results\n    \"\"\"\n    return run_complete_statistical_analysis(data)\n\n\ndef generate_statistical_summary_report(analysis_results: Dict[str, Any]) -> str:\n    \"\"\"\n    Generate a human-readable summary report from statistical analysis results.\n    \n    Args:\n        analysis_results: Results from run_complete_statistical_analysis()\n        \n    Returns:\n        String containing formatted statistical report\n    \"\"\"\n    report_lines = []\n    report_lines.append(\"STATISTICAL ANALYSIS SUMMARY REPORT\")\n    report_lines.append(\"=\" * 50)\n    \n    metadata = analysis_results.get('analysis_metadata', {})\n    report_lines.append(f\"Analysis Timestamp: {metadata.get('timestamp', 'Unknown')}\")\n    report_lines.append(f\"Sample Size: {metadata.get('sample_size', 'Unknown')}\")\n    report_lines.append(f\"Alpha Level: {metadata.get('alpha_level', 'Unknown')}\")\n    report_lines.append(f\"Variables: {len(metadata.get('variables_analyzed', []))}\")\n    report_lines.append(\"\")\n    \n    # Summarize key findings\n    for analysis_name, result in analysis_results.items():\n        if analysis_name != 'analysis_metadata' and isinstance(result, dict):\n            if 'error' not in result:\n                report_lines.append(f\"{analysis_name.replace('_', ' ').title()}:\")\n                \n                # Extract key statistics based on analysis type\n                if 'p_value' in result:\n                    p_val = result['p_value']\n                    significance = \"significant\" if p_val < metadata.get('alpha_level', 0.05) else \"not significant\"\n                    report_lines.append(f\"  - p-value: {p_val:.4f} ({significance})\")\n                \n                if 'effect_size' in result:\n                    report_lines.append(f\"  - Effect size: {result['effect_size']:.4f}\")\n                \n                if 'correlation_matrix' in result:\n                    report_lines.append(f\"  - Correlation matrix generated with {len(result['correlation_matrix'])} variables\")\n                \n                if 'cronbach_alpha' in result:\n                    alpha_val = result['cronbach_alpha']\n                    reliability = \"excellent\" if alpha_val > 0.9 else \"good\" if alpha_val > 0.8 else \"acceptable\" if alpha_val > 0.7 else \"questionable\"\n                    report_lines.append(f\"  - Cronbach's \u03b1: {alpha_val:.3f} ({reliability})\")\n                \n                report_lines.append(\"\")\n            else:\n                report_lines.append(f\"{analysis_name}: ERROR - {result['error']}\")\n                report_lines.append(\"\")\n    \n    return \"\\n\".join(report_lines)\n",
    "cached_with_code": true
  },
  "statistical_data": {
    "analyze_speaker_profiles": {
      "unknown": {
        "manichaean_people_elite_framing_raw": 0.65,
        "crisis_restoration_narrative_raw": 0.6,
        "popular_sovereignty_claims_raw": 0.4,
        "anti_pluralist_exclusion_raw": 0.275,
        "elite_conspiracy_systemic_corruption_raw": 0.65,
        "authenticity_vs_political_class_raw": 0.225,
        "homogeneous_people_construction_raw": 0.3,
        "nationalist_exclusion_raw": 0.25,
        "economic_populist_appeals_raw": 0.5,
        "homogenous_people_construction_raw": 0.7,
        "democratic_authoritarian_tension": 0.05,
        "internal_external_focus_tension": 0.0,
        "crisis_elite_attribution_tension": 0.07000000000000002,
        "populist_strategic_contradiction_index": 0.08000000000000002,
        "salience_weighted_core_populism_index": 0.6147967062554824,
        "salience_weighted_populism_mechanisms_index": 0.8137044967880088,
        "salience_weighted_boundary_distinctions_index": 0.7491677204915727,
        "salience_weighted_overall_populism_index": 0.8269110601957924
      }
    },
    "analyze_strategic_tensions": {
      "corpus_average_tensions": {
        "democratic_authoritarian_tension": 0.05,
        "internal_external_focus_tension": 0.0,
        "crisis_elite_attribution_tension": 0.07000000000000002,
        "populist_strategic_contradiction_index": 0.08000000000000002
      },
      "speaker_average_tensions": {
        "unknown": {
          "democratic_authoritarian_tension": 0.05,
          "internal_external_focus_tension": 0.0,
          "crisis_elite_attribution_tension": 0.07000000000000002,
          "populist_strategic_contradiction_index": 0.08000000000000002
        }
      }
    },
    "calculate_derived_metrics": {
      "type": "dataframe",
      "data": [
        {
          "document_name": "john_mccain_2008_concession.txt",
          "manichaean_people_elite_framing_raw": 0.0,
          "manichaean_people_elite_framing_salience": 0.0,
          "manichaean_people_elite_framing_confidence": 1.0,
          "crisis_restoration_narrative_raw": 0.1,
          "crisis_restoration_narrative_salience": 0.2,
          "crisis_restoration_narrative_confidence": 0.9,
          "popular_sovereignty_claims_raw": 0.0,
          "popular_sovereignty_claims_salience": 0.0,
          "popular_sovereignty_claims_confidence": 1.0,
          "anti_pluralist_exclusion_raw": 0.0,
          "anti_pluralist_exclusion_salience": 0.0,
          "anti_pluralist_exclusion_confidence": 1.0,
          "elite_conspiracy_systemic_corruption_raw": 0.0,
          "elite_conspiracy_systemic_corruption_salience": 0.0,
          "elite_conspiracy_systemic_corruption_confidence": 1.0,
          "authenticity_vs_political_class_raw": 0.0,
          "authenticity_vs_political_class_salience": 0.0,
          "authenticity_vs_political_class_confidence": 1.0,
          "homogeneous_people_construction_raw": 0.0,
          "homogeneous_people_construction_salience": 0.0,
          "homogeneous_people_construction_confidence": 1.0,
          "nationalist_exclusion_raw": 0.1,
          "nationalist_exclusion_salience": 0.3,
          "nationalist_exclusion_confidence": 0.9,
          "economic_populist_appeals_raw": 0.0,
          "economic_populist_appeals_salience": 0.0,
          "economic_populist_appeals_confidence": 1.0,
          "homogenous_people_construction_raw": NaN,
          "homogenous_people_construction_salience": NaN,
          "homogenous_people_construction_confidence": NaN,
          "democratic_authoritarian_tension": 0.0,
          "internal_external_focus_tension": NaN,
          "crisis_elite_attribution_tension": 0.0,
          "populist_strategic_contradiction_index": NaN,
          "salience_weighted_core_populism_index": 0.09950248756218907,
          "salience_weighted_populism_mechanisms_index": NaN,
          "salience_weighted_boundary_distinctions_index": 0.09966777408637874,
          "salience_weighted_overall_populism_index": NaN
        },
        {
          "document_name": "steve_king_2017_house_floor.txt",
          "manichaean_people_elite_framing_raw": 0.8,
          "manichaean_people_elite_framing_salience": 0.8,
          "manichaean_people_elite_framing_confidence": 0.95,
          "crisis_restoration_narrative_raw": 0.9,
          "crisis_restoration_narrative_salience": 0.9,
          "crisis_restoration_narrative_confidence": 1.0,
          "popular_sovereignty_claims_raw": 0.8,
          "popular_sovereignty_claims_salience": 0.6,
          "popular_sovereignty_claims_confidence": 0.9,
          "anti_pluralist_exclusion_raw": 0.2,
          "anti_pluralist_exclusion_salience": 0.1,
          "anti_pluralist_exclusion_confidence": 0.9,
          "elite_conspiracy_systemic_corruption_raw": 0.8,
          "elite_conspiracy_systemic_corruption_salience": 0.9,
          "elite_conspiracy_systemic_corruption_confidence": 0.95,
          "authenticity_vs_political_class_raw": 0.0,
          "authenticity_vs_political_class_salience": 0.0,
          "authenticity_vs_political_class_confidence": 1.0,
          "homogeneous_people_construction_raw": 0.1,
          "homogeneous_people_construction_salience": 0.1,
          "homogeneous_people_construction_confidence": 0.9,
          "nationalist_exclusion_raw": 0.9,
          "nationalist_exclusion_salience": 0.9,
          "nationalist_exclusion_confidence": 1.0,
          "economic_populist_appeals_raw": 0.0,
          "economic_populist_appeals_salience": 0.0,
          "economic_populist_appeals_confidence": 1.0,
          "homogenous_people_construction_raw": NaN,
          "homogenous_people_construction_salience": NaN,
          "homogenous_people_construction_confidence": NaN,
          "democratic_authoritarian_tension": 0.1,
          "internal_external_focus_tension": NaN,
          "crisis_elite_attribution_tension": 0.0,
          "populist_strategic_contradiction_index": NaN,
          "salience_weighted_core_populism_index": 0.812161599333611,
          "salience_weighted_populism_mechanisms_index": NaN,
          "salience_weighted_boundary_distinctions_index": 0.8990011098779135,
          "salience_weighted_overall_populism_index": NaN
        },
        {
          "document_name": "bernie_sanders_2025_fighting_oligarchy.txt",
          "manichaean_people_elite_framing_raw": 0.9,
          "manichaean_people_elite_framing_salience": 0.9,
          "manichaean_people_elite_framing_confidence": 1.0,
          "crisis_restoration_narrative_raw": 0.7,
          "crisis_restoration_narrative_salience": 0.6,
          "crisis_restoration_narrative_confidence": 0.9,
          "popular_sovereignty_claims_raw": 0.8,
          "popular_sovereignty_claims_salience": 0.7,
          "popular_sovereignty_claims_confidence": 1.0,
          "anti_pluralist_exclusion_raw": 0.2,
          "anti_pluralist_exclusion_salience": 0.2,
          "anti_pluralist_exclusion_confidence": 0.8,
          "elite_conspiracy_systemic_corruption_raw": 0.9,
          "elite_conspiracy_systemic_corruption_salience": 0.8,
          "elite_conspiracy_systemic_corruption_confidence": 0.95,
          "authenticity_vs_political_class_raw": 0.0,
          "authenticity_vs_political_class_salience": 0.0,
          "authenticity_vs_political_class_confidence": 1.0,
          "homogeneous_people_construction_raw": NaN,
          "homogeneous_people_construction_salience": NaN,
          "homogeneous_people_construction_confidence": NaN,
          "nationalist_exclusion_raw": 0.0,
          "nationalist_exclusion_salience": 0.0,
          "nationalist_exclusion_confidence": 1.0,
          "economic_populist_appeals_raw": 1.0,
          "economic_populist_appeals_salience": 1.0,
          "economic_populist_appeals_confidence": 1.0,
          "homogenous_people_construction_raw": 0.7,
          "homogenous_people_construction_salience": 0.6,
          "homogenous_people_construction_confidence": 0.9,
          "democratic_authoritarian_tension": 0.09999999999999999,
          "internal_external_focus_tension": 0.0,
          "crisis_elite_attribution_tension": 0.14000000000000004,
          "populist_strategic_contradiction_index": 0.08000000000000002,
          "salience_weighted_core_populism_index": 0.7621824239900041,
          "salience_weighted_populism_mechanisms_index": 0.8137044967880088,
          "salience_weighted_boundary_distinctions_index": 0.9990009990009991,
          "salience_weighted_overall_populism_index": 0.8269110601957924
        },
        {
          "document_name": "alexandria_ocasio_cortez_2025_fighting_oligarchy.txt",
          "manichaean_people_elite_framing_raw": 0.9,
          "manichaean_people_elite_framing_salience": 0.9,
          "manichaean_people_elite_framing_confidence": 1.0,
          "crisis_restoration_narrative_raw": 0.7,
          "crisis_restoration_narrative_salience": 0.6,
          "crisis_restoration_narrative_confidence": 0.9,
          "popular_sovereignty_claims_raw": 0.0,
          "popular_sovereignty_claims_salience": 0.0,
          "popular_sovereignty_claims_confidence": 1.0,
          "anti_pluralist_exclusion_raw": 0.7,
          "anti_pluralist_exclusion_salience": 0.6,
          "anti_pluralist_exclusion_confidence": 0.95,
          "elite_conspiracy_systemic_corruption_raw": 0.9,
          "elite_conspiracy_systemic_corruption_salience": 0.8,
          "elite_conspiracy_systemic_corruption_confidence": 1.0,
          "authenticity_vs_political_class_raw": 0.9,
          "authenticity_vs_political_class_salience": 0.8,
          "authenticity_vs_political_class_confidence": 1.0,
          "homogeneous_people_construction_raw": 0.8,
          "homogeneous_people_construction_salience": 0.7,
          "homogeneous_people_construction_confidence": 0.9,
          "nationalist_exclusion_raw": 0.0,
          "nationalist_exclusion_salience": 0.0,
          "nationalist_exclusion_confidence": 1.0,
          "economic_populist_appeals_raw": 1.0,
          "economic_populist_appeals_salience": 1.0,
          "economic_populist_appeals_confidence": 1.0,
          "homogenous_people_construction_raw": NaN,
          "homogenous_people_construction_salience": NaN,
          "homogenous_people_construction_confidence": NaN,
          "democratic_authoritarian_tension": 0.0,
          "internal_external_focus_tension": NaN,
          "crisis_elite_attribution_tension": 0.14000000000000004,
          "populist_strategic_contradiction_index": NaN,
          "salience_weighted_core_populism_index": 0.7853403141361256,
          "salience_weighted_populism_mechanisms_index": NaN,
          "salience_weighted_boundary_distinctions_index": 0.9990009990009991,
          "salience_weighted_overall_populism_index": NaN
        }
      ],
      "columns": [
        "document_name",
        "manichaean_people_elite_framing_raw",
        "manichaean_people_elite_framing_salience",
        "manichaean_people_elite_framing_confidence",
        "crisis_restoration_narrative_raw",
        "crisis_restoration_narrative_salience",
        "crisis_restoration_narrative_confidence",
        "popular_sovereignty_claims_raw",
        "popular_sovereignty_claims_salience",
        "popular_sovereignty_claims_confidence",
        "anti_pluralist_exclusion_raw",
        "anti_pluralist_exclusion_salience",
        "anti_pluralist_exclusion_confidence",
        "elite_conspiracy_systemic_corruption_raw",
        "elite_conspiracy_systemic_corruption_salience",
        "elite_conspiracy_systemic_corruption_confidence",
        "authenticity_vs_political_class_raw",
        "authenticity_vs_political_class_salience",
        "authenticity_vs_political_class_confidence",
        "homogeneous_people_construction_raw",
        "homogeneous_people_construction_salience",
        "homogeneous_people_construction_confidence",
        "nationalist_exclusion_raw",
        "nationalist_exclusion_salience",
        "nationalist_exclusion_confidence",
        "economic_populist_appeals_raw",
        "economic_populist_appeals_salience",
        "economic_populist_appeals_confidence",
        "homogenous_people_construction_raw",
        "homogenous_people_construction_salience",
        "homogenous_people_construction_confidence",
        "democratic_authoritarian_tension",
        "internal_external_focus_tension",
        "crisis_elite_attribution_tension",
        "populist_strategic_contradiction_index",
        "salience_weighted_core_populism_index",
        "salience_weighted_populism_mechanisms_index",
        "salience_weighted_boundary_distinctions_index",
        "salience_weighted_overall_populism_index"
      ],
      "index": [
        0,
        1,
        2,
        3
      ],
      "shape": [
        4,
        39
      ]
    },
    "compare_ideological_styles": {
      "error": "No documents from speakers with a defined ideology found."
    },
    "generate_statistical_summary_report": "STATISTICAL ANALYSIS SUMMARY REPORT\n==================================================\nAnalysis Timestamp: Unknown\nSample Size: Unknown\nAlpha Level: Unknown\nVariables: 0\n",
    "get_descriptive_statistics": {
      "raw_scores_stats": {
        "manichaean_people_elite_framing_raw": {
          "count": 4.0,
          "mean": 0.65,
          "std": 0.4358898943540674,
          "min": 0.0,
          "25%": 0.6000000000000001,
          "50%": 0.8500000000000001,
          "75%": 0.9,
          "max": 0.9
        },
        "crisis_restoration_narrative_raw": {
          "count": 4.0,
          "mean": 0.6,
          "std": 0.34641016151377546,
          "min": 0.1,
          "25%": 0.5499999999999999,
          "50%": 0.7,
          "75%": 0.75,
          "max": 0.9
        },
        "popular_sovereignty_claims_raw": {
          "count": 4.0,
          "mean": 0.4,
          "std": 0.46188021535170065,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.4,
          "75%": 0.8,
          "max": 0.8
        },
        "anti_pluralist_exclusion_raw": {
          "count": 4.0,
          "mean": 0.275,
          "std": 0.29860788111948194,
          "min": 0.0,
          "25%": 0.15000000000000002,
          "50%": 0.2,
          "75%": 0.325,
          "max": 0.7
        },
        "elite_conspiracy_systemic_corruption_raw": {
          "count": 4.0,
          "mean": 0.65,
          "std": 0.4358898943540674,
          "min": 0.0,
          "25%": 0.6000000000000001,
          "50%": 0.8500000000000001,
          "75%": 0.9,
          "max": 0.9
        },
        "authenticity_vs_political_class_raw": {
          "count": 4.0,
          "mean": 0.225,
          "std": 0.45,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.0,
          "75%": 0.225,
          "max": 0.9
        },
        "homogeneous_people_construction_raw": {
          "count": 3.0,
          "mean": 0.3,
          "std": 0.43588989435406733,
          "min": 0.0,
          "25%": 0.05,
          "50%": 0.1,
          "75%": 0.45,
          "max": 0.8
        },
        "nationalist_exclusion_raw": {
          "count": 4.0,
          "mean": 0.25,
          "std": 0.4358898943540674,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.05,
          "75%": 0.30000000000000004,
          "max": 0.9
        },
        "economic_populist_appeals_raw": {
          "count": 4.0,
          "mean": 0.5,
          "std": 0.5773502691896257,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.5,
          "75%": 1.0,
          "max": 1.0
        },
        "homogenous_people_construction_raw": {
          "count": 1.0,
          "mean": 0.7,
          "std": NaN,
          "min": 0.7,
          "25%": 0.7,
          "50%": 0.7,
          "75%": 0.7,
          "max": 0.7
        }
      },
      "derived_metrics_stats": {
        "democratic_authoritarian_tension": {
          "count": 4.0,
          "mean": 0.05,
          "std": 0.05773502691896258,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.049999999999999996,
          "75%": 0.09999999999999999,
          "max": 0.1
        },
        "internal_external_focus_tension": {
          "count": 1.0,
          "mean": 0.0,
          "std": NaN,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.0,
          "75%": 0.0,
          "max": 0.0
        },
        "crisis_elite_attribution_tension": {
          "count": 4.0,
          "mean": 0.07000000000000002,
          "std": 0.08082903768654763,
          "min": 0.0,
          "25%": 0.0,
          "50%": 0.07000000000000002,
          "75%": 0.14000000000000004,
          "max": 0.14000000000000004
        },
        "populist_strategic_contradiction_index": {
          "count": 1.0,
          "mean": 0.08000000000000002,
          "std": NaN,
          "min": 0.08000000000000002,
          "25%": 0.08000000000000002,
          "50%": 0.08000000000000002,
          "75%": 0.08000000000000002,
          "max": 0.08000000000000002
        },
        "salience_weighted_core_populism_index": {
          "count": 4.0,
          "mean": 0.6147967062554824,
          "std": 0.34413597352380915,
          "min": 0.09950248756218907,
          "25%": 0.5965124398830504,
          "50%": 0.7737613690630649,
          "75%": 0.792045635435497,
          "max": 0.812161599333611
        },
        "salience_weighted_populism_mechanisms_index": {
          "count": 1.0,
          "mean": 0.8137044967880088,
          "std": NaN,
          "min": 0.8137044967880088,
          "25%": 0.8137044967880088,
          "50%": 0.8137044967880088,
          "75%": 0.8137044967880088,
          "max": 0.8137044967880088
        },
        "salience_weighted_boundary_distinctions_index": {
          "count": 4.0,
          "mean": 0.7491677204915725,
          "std": 0.43555847638669065,
          "min": 0.09966777408637874,
          "25%": 0.6991677759300298,
          "50%": 0.9490010544394563,
          "75%": 0.9990009990009991,
          "max": 0.9990009990009991
        },
        "salience_weighted_overall_populism_index": {
          "count": 1.0,
          "mean": 0.8269110601957924,
          "std": NaN,
          "min": 0.8269110601957924,
          "25%": 0.8269110601957924,
          "50%": 0.8269110601957924,
          "75%": 0.8269110601957924,
          "max": 0.8269110601957924
        }
      }
    },
    "perform_statistical_analysis": {
      "analysis_metadata": {
        "timestamp": "2025-08-27T10:01:58.487499",
        "sample_size": 4,
        "alpha_level": 0.05,
        "variables_analyzed": [
          "manichaean_people_elite_framing_raw",
          "manichaean_people_elite_framing_salience",
          "manichaean_people_elite_framing_confidence",
          "crisis_restoration_narrative_raw",
          "crisis_restoration_narrative_salience",
          "crisis_restoration_narrative_confidence",
          "popular_sovereignty_claims_raw",
          "popular_sovereignty_claims_salience",
          "popular_sovereignty_claims_confidence",
          "anti_pluralist_exclusion_raw",
          "anti_pluralist_exclusion_salience",
          "anti_pluralist_exclusion_confidence",
          "elite_conspiracy_systemic_corruption_raw",
          "elite_conspiracy_systemic_corruption_salience",
          "elite_conspiracy_systemic_corruption_confidence",
          "authenticity_vs_political_class_raw",
          "authenticity_vs_political_class_salience",
          "authenticity_vs_political_class_confidence",
          "homogeneous_people_construction_raw",
          "homogeneous_people_construction_salience",
          "homogeneous_people_construction_confidence",
          "nationalist_exclusion_raw",
          "nationalist_exclusion_salience",
          "nationalist_exclusion_confidence",
          "economic_populist_appeals_raw",
          "economic_populist_appeals_salience",
          "economic_populist_appeals_confidence",
          "homogenous_people_construction_raw",
          "homogenous_people_construction_salience",
          "homogenous_people_construction_confidence"
        ]
      }
    },
    "run_complete_statistical_analysis": {
      "analysis_metadata": {
        "timestamp": "2025-08-27T10:01:58.489872",
        "sample_size": 4,
        "alpha_level": 0.05,
        "variables_analyzed": [
          "manichaean_people_elite_framing_raw",
          "manichaean_people_elite_framing_salience",
          "manichaean_people_elite_framing_confidence",
          "crisis_restoration_narrative_raw",
          "crisis_restoration_narrative_salience",
          "crisis_restoration_narrative_confidence",
          "popular_sovereignty_claims_raw",
          "popular_sovereignty_claims_salience",
          "popular_sovereignty_claims_confidence",
          "anti_pluralist_exclusion_raw",
          "anti_pluralist_exclusion_salience",
          "anti_pluralist_exclusion_confidence",
          "elite_conspiracy_systemic_corruption_raw",
          "elite_conspiracy_systemic_corruption_salience",
          "elite_conspiracy_systemic_corruption_confidence",
          "authenticity_vs_political_class_raw",
          "authenticity_vs_political_class_salience",
          "authenticity_vs_political_class_confidence",
          "homogeneous_people_construction_raw",
          "homogeneous_people_construction_salience",
          "homogeneous_people_construction_confidence",
          "nationalist_exclusion_raw",
          "nationalist_exclusion_salience",
          "nationalist_exclusion_confidence",
          "economic_populist_appeals_raw",
          "economic_populist_appeals_salience",
          "economic_populist_appeals_confidence",
          "homogenous_people_construction_raw",
          "homogenous_people_construction_salience",
          "homogenous_people_construction_confidence"
        ]
      }
    }
  },
  "status": "success_with_data",
  "validation_passed": true
}