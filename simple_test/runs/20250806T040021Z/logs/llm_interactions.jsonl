{"log_type":"llm_interaction","interaction_hash":"252ef5ee9bfac836","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\nIyBDb2hlc2l2ZSBGbG91cmlzaGluZyBGcmFtZXdvcmsgKENGRikgdjcuMwoKVGhlIENvaGVzaXZlIEZsb3VyaXNoaW5nIEZyYW1ld29yayBwcm92aWRlcyBhIHN5c3RlbWF0aWMgYXBwcm9hY2ggdG8gZXZhbHVhdGluZyBob3cgcG9saXRpY2FsIGRpc2NvdXJzZSBpbXBhY3RzIHNvY2lhbCBjb2hlc2lvbiBhbmQgZGVtb2NyYXRpYyByZXNpbGllbmNlIHRocm91Z2ggY29tcHJlaGVuc2l2ZSBhbmFseXNpcyBvZiBmaXZlIGZ1bmRhbWVudGFsIGRpbWVuc2lvbnMgb2YgaHVtYW4gc29jaWFsIHBzeWNob2xvZ3kuCgojIyBSYWlzb24gZCfDinRyZQoKSW4gYW4gZXJhIG9mIGluY3JlYXNpbmcgc29jaWFsIGZyYWdtZW50YXRpb24gYW5kIGRlbW9jcmF0aWMgc3RyYWluLCB1bmRlcnN0YW5kaW5nIGhvdyBwdWJsaWMgZGlzY291cnNlIGVpdGhlciBidWlsZHMgc29jaWFsIGNvaGVzaW9uIG9yIGRlZXBlbnMgZGl2aXNpb25zIGhhcyBiZWNvbWUgY3J1Y2lhbCBmb3IgcmVzZWFyY2hlcnMsIHBvbGljeW1ha2VycywgYW5kIGRlbW9jcmF0aWMgaW5zdGl0dXRpb25zLiBUaGUgQ29oZXNpdmUgRmxvdXJpc2hpbmcgRnJhbWV3b3JrIChDRkYpIGFkZHJlc3NlcyBhIGZ1bmRhbWVudGFsIGdhcCBpbiBwb2xpdGljYWwgY29tbXVuaWNhdGlvbiBhbmFseXNpczogdGhlIHN5c3RlbWF0aWMgbWVhc3VyZW1lbnQgb2YgZGlzY291cnNlJ3MgaW1wYWN0IG9uIHNvY2lhbCBmYWJyaWMgYW5kIGRlbW9jcmF0aWMgcmVzaWxpZW5jZS4KClRyYWRpdGlvbmFsIHRleHQgYW5hbHlzaXMgZm9jdXNlcyBvbiB0b3BpY2FsIGNvbnRlbnQgb3Igc2VudGltZW50IHBvbGFyaXR5LCBidXQgZmFpbHMgdG8gY2FwdHVyZSB0aGUgZGVlcGVyIHBzeWNob2xvZ2ljYWwgYW5kIHNvY2lhbCBtZWNoYW5pc21zIHRocm91Z2ggd2hpY2ggcmhldG9yaWMgZWl0aGVyIHN0cmVuZ3RoZW5zIG9yIHVuZGVybWluZXMgY29tbXVuaXR5IGJvbmRzLiBDRkYgcHJvdmlkZXMgYSByaWdvcm91cyBhbmFseXRpY2FsIGZyYW1ld29yayBmb3IgbWVhc3VyaW5nIHRoZXNlIGNyaXRpY2FsIGR5bmFtaWNzIGFjcm9zcyBmaXZlIGtleSBkaW1lbnNpb25zIG9mIGh1bWFuIHNvY2lhbCBwc3ljaG9sb2d5OiBpZGVudGl0eSBmb3JtYXRpb24sIGVtb3Rpb25hbCBjbGltYXRlLCBzdWNjZXNzIG9yaWVudGF0aW9uLCByZWxhdGlvbmFsIHBhdHRlcm5zLCBhbmQgY29sbGVjdGl2ZSBnb2FsLXNldHRpbmcuCgoqKkNvcmUgSW5ub3ZhdGlvbioqOiBDRkYgaW50cm9kdWNlcyBzYWxpZW5jZS13ZWlnaHRlZCB0ZW5zaW9uIGFuYWx5c2lzLCByZWNvZ25pemluZyB0aGF0IHJoZXRvcmljYWwgY29udHJhZGljdGlvbiBwYXR0ZXJuc+KAlHdoZXJlIHNwZWFrZXJzIHNpbXVsdGFuZW91c2x5IGVtcGxveSBvcHBvc2luZyBhcHBlYWxz4oCUcmV2ZWFsIHNvcGhpc3RpY2F0ZWQgc3RyYXRlZ2ljIGNvbW11bmljYXRpb24gYXBwcm9hY2hlcyB0aGF0IHRyYWRpdGlvbmFsIGFuYWx5c2lzIG1pc3Nlcy4KCiMjIFJlc2VhcmNoIEZvdW5kYXRpb25zCgpUaGUgQ0ZGIGJ1aWxkcyBvbiBlc3RhYmxpc2hlZCByZXNlYXJjaCBpbjoKLSAqKlNvY2lhbCBDb2hlc2lvbiBUaGVvcnkqKjogUHV0bmFtLCBSLiBELiAoMTk5NSkuIEJvd2xpbmcgQWxvbmU6IEFtZXJpY2EncyBEZWNsaW5pbmcgU29jaWFsIENhcGl0YWwuICpKb3VybmFsIG9mIERlbW9jcmFjeSosIDYoMSksIDY1LTc4LiBET0k6IGh0dHBzOi8vbXVzZS5qaHUuZWR1L2FydGljbGUvMTY2NDM7IENvbGVtYW4sIEouIFMuICgxOTg4KS4gU29jaWFsIENhcGl0YWwgaW4gdGhlIENyZWF0aW9uIG9mIEh1bWFuIENhcGl0YWwuICpBbWVyaWNhbiBKb3VybmFsIG9mIFNvY2lvbG9neSosIDk0LCBTOTUtUzEyMC4gRE9JOiBodHRwczovL2RvaS5vcmcvMTAuMTA4Ni8yMjg5NDMKLSAqKkVtb3Rpb25hbCBDb250YWdpb24gU3R1ZGllcyoqOiBIYXRmaWVsZCBldCBhbC4gKDE5OTMpLCBSaW3DqSAoMjAwOSkgb24gYWZmZWN0aXZlIHRyYW5zbWlzc2lvbiBpbiBzb2NpYWwgY29udGV4dHMKLSAqKkRlbW9jcmF0aWMgUmVzaWxpZW5jZSBMaXRlcmF0dXJlKio6IExldml0c2t5LCBTLiwgJiBaaWJsYXR0LCBELiAoMjAxOCkuICpIb3cgRGVtb2NyYWNpZXMgRGllKi4gTmV3IFlvcms6IENyb3duIFB1Ymxpc2hpbmcKLSAqKlBvbGl0aWNhbCBDb21tdW5pY2F0aW9uIFRoZW9yeSoqOiBEcnVja21hbiAoMjAwMSksIENob25nICYgRHJ1Y2ttYW4gKDIwMDcpIG9uIGZyYW1pbmcgZWZmZWN0cyBhbmQgbWVzc2FnZSByZWNlcHRpb24KLSAqKlNvY2lhbCBJZGVudGl0eSBUaGVvcnkqKjogVGFqZmVsICYgVHVybmVyICgxOTc5KSBvbiBpbi1ncm91cC9vdXQtZ3JvdXAgZHluYW1pY3MKLSAqKkFmZmVjdGl2ZSBJbnRlbGxpZ2VuY2UgVGhlb3J5Kio6IE1hcmN1cyBldCBhbC4gKDIwMDApIG9uIGVtb3Rpb24ncyByb2xlIGluIHBvbGl0aWNhbCBqdWRnbWVudAoKKipUaGVvcmV0aWNhbCBJbm5vdmF0aW9uOiBTYWxpZW5jZS1XZWlnaHRlZCBTb2NpYWwgQ29oZXNpb24gQW5hbHlzaXMqKgoKVHJhZGl0aW9uYWwgc29jaWFsIGNvaGVzaW9uIG1lYXN1cmVzIGFzc3VtZSBlcXVhbCB3ZWlnaHRpbmcgYWNyb3NzIGRpbWVuc2lvbnMuIEhvd2V2ZXIsIHBvbGl0aWNhbCBjb21tdW5pY2F0aW9uIHJlc2VhcmNoIGRlbW9uc3RyYXRlcyB0aGF0IHJoZXRvcmljYWwgZW1waGFzaXMgcGF0dGVybnMgc2lnbmlmaWNhbnRseSBpbXBhY3QgYXVkaWVuY2UgcmVjZXB0aW9uIGFuZCBtZXNzYWdlIGVmZmVjdGl2ZW5lc3MuIFRoZSBDRkYncyBzYWxpZW5jZSB3ZWlnaHRpbmcgYWRkcmVzc2VzIHRoaXMgZ2FwIGJ5IG1lYXN1cmluZyBub3QganVzdCB0aGUgcHJlc2VuY2Ugb2YgY29oZXNpdmUgdnMuIGZyYWdtZW50YXRpdmUgYXBwZWFscywgYnV0IHRoZWlyIHJlbGF0aXZlIGVtcGhhc2lzIHdpdGhpbiBkaXNjb3Vyc2UuIFRoaXMgaW5ub3ZhdGlvbiBlbmFibGVzIHJlc2VhcmNoZXJzIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gdGV4dHMgd2l0aCBzaW1pbGFyIGRpbWVuc2lvbiBzY29yZXMgYnV0IGZ1bmRhbWVudGFsbHkgZGlmZmVyZW50IHJoZXRvcmljYWwgc3RyYXRlZ2llcy4KCiMjIERpbWVuc2lvbnMgYW5kIEF4ZXMKClRoZSBmcmFtZXdvcmsgZXZhbHVhdGVzIHBvbGl0aWNhbCBkaXNjb3Vyc2UgYWNyb3NzIGZpdmUgYmlwb2xhciBheGVzIHRoYXQgZm9ybSB0aGUgZm91bmRhdGlvbiBvZiBzb2NpYWwgY29oZXNpb246CgojIyMgSWRlbnRpdHkgQXhpczogVHJpYmFsIERvbWluYW5jZSDihpQgSW5kaXZpZHVhbCBEaWduaXR5CipHcm91bmRlZCBpbiBzb2NpYWwgaWRlbnRpdHkgdGhlb3J5IChUYWpmZWwgJiBUdXJuZXIsIDE5NzkpIGFuZCBkaWduaXR5IHJlc2VhcmNoIChIb25uZXRoLCAxOTkyKSoKCi0gKipUcmliYWwgRG9taW5hbmNlICgwLjAtMS4wKSoqOiBJbi1ncm91cCBzdXByZW1hY3kgYXBwZWFscywgdXMtdnMtdGhlbSBmcmFtaW5nLCBleGNsdXNpb25hcnkgaWRlbnRpdHkgcGF0dGVybnMgdGhhdCBkZWZpbmUgZ3JvdXAgbWVtYmVyc2hpcCB0aHJvdWdoIG9wcG9zaXRpb24gdG8gb3RoZXJzLiBSZXNlYXJjaCBzaG93cyB0cmliYWxpc3RpYyBhcHBlYWxzIGNhbiBtb2JpbGl6ZSBzdXBwb3J0ZXJzIGJ1dCB1bmRlcm1pbmUgYnJvYWRlciBzb2NpYWwgY29oZXNpb24uCi0gKipJbmRpdmlkdWFsIERpZ25pdHkgKDAuMC0xLjApKio6IFVuaXZlcnNhbCBodW1hbiB3b3J0aCBhcHBlYWxzLCBpbmNsdXNpdmUgZGlnbml0eSByaGV0b3JpYywgcmVjb2duaXRpb24gb2YgZnVuZGFtZW50YWwgZXF1YWxpdHkgYWNyb3NzIGdyb3VwIGJvdW5kYXJpZXMuIERpZ25pdHktYmFzZWQgZGlzY291cnNlIHN0cmVuZ3RoZW5zIGRlbW9jcmF0aWMgbm9ybXMgYnkgZW1waGFzaXppbmcgc2hhcmVkIGh1bWFuaXR5LgoKIyMjIEVtb3Rpb25hbCBDbGltYXRlIEF4aXM6IEZlYXIg4oaUIEhvcGUKKkJhc2VkIG9uIGFmZmVjdGl2ZSBpbnRlbGxpZ2VuY2UgdGhlb3J5IChNYXJjdXMgZXQgYWwuLCAyMDAwKSBhbmQgdGhyZWF0IHBlcmNlcHRpb24gcmVzZWFyY2ggKEh1ZGR5IGV0IGFsLiwgMjAwNSkqCgotICoqRmVhciAoMC4wLTEuMCkqKjogQ3Jpc2lzIG1lbnRhbGl0eSwgZXhpc3RlbnRpYWwgdGhyZWF0IHBlcmNlcHRpb24sIHZ1bG5lcmFiaWxpdHkgZW1waGFzaXMgdGhhdCBjYW4gbW9iaWxpemUgZGVmZW5zaXZlIHJlc3BvbnNlcyBidXQgbWF5IHVuZGVybWluZSBkZWxpYmVyYXRpdmUgZGVtb2NyYWN5LiBGZWFyLWJhc2VkIGFwcGVhbHMgb2Z0ZW4gdHJpZ2dlciBTeXN0ZW0gMSB0aGlua2luZy4KLSAqKkhvcGUgKDAuMC0xLjApKio6IFByb2dyZXNzIG9yaWVudGF0aW9uLCBvcHBvcnR1bml0eSBmb2N1cywgb3B0aW1pc3RpYyB2aXNpb24gb2YgY29sbGVjdGl2ZSBwb3NzaWJpbGl0eS4gSG9wZS1iYXNlZCBkaXNjb3Vyc2UgZW5jb3VyYWdlcyBjaXZpYyBlbmdhZ2VtZW50IGFuZCBsb25nLXRlcm0gdGhpbmtpbmcgZXNzZW50aWFsIGZvciBkZW1vY3JhdGljIGdvdmVybmFuY2UuCgojIyMgU3VjY2VzcyBPcmllbnRhdGlvbiBBeGlzOiBFbnZ5IOKGlCBDb21wZXJzaW9uCipSb290ZWQgaW4gc29jaWFsIGNvbXBhcmlzb24gdGhlb3J5IChGZXN0aW5nZXIsIDE5NTQpIGFuZCB6ZXJvLXN1bSB0aGlua2luZyByZXNlYXJjaCAoTWVlZ2FuLCAyMDEwKSoKCi0gKipFbnZ5ICgwLjAtMS4wKSoqOiBSZXNlbnRtZW50IHRvd2FyZCBvdGhlcnMnIHN1Y2Nlc3MsIHplcm8tc3VtIGZyYW1pbmcgd2hlcmUgb3RoZXJzJyBnYWlucyByZXByZXNlbnQgcGVyc29uYWwgbG9zc2VzLiBFbnZ5IHVuZGVybWluZXMgc29jaWFsIHRydXN0IGFuZCBjb29wZXJhdGl2ZSBiZWhhdmlvci4KLSAqKkNvbXBlcnNpb24gKDAuMC0xLjApKio6IENlbGVicmF0aW9uIG9mIG90aGVycycgc3VjY2VzcywgYWJ1bmRhbmNlIG1pbmRzZXQgd2hlcmUgb3RoZXJzJyBhY2hpZXZlbWVudHMgaW5zcGlyZSByYXRoZXIgdGhhbiB0aHJlYXRlbi4gQ29tcGVyc2lvbiBzdHJlbmd0aGVucyBzb2NpYWwgYm9uZHMgYW5kIGNvbGxlY3RpdmUgZWZmaWNhY3kgdGhyb3VnaCBwb3NpdGl2ZSBlbW90aW9uYWwgY29udGFnaW9uIHByb2Nlc3Nlcy4KCiMjIyBSZWxhdGlvbmFsIENsaW1hdGUgQXhpczogRW5taXR5IOKGlCBBbWl0eQoqR3JvdW5kZWQgaW4gaW50ZXJncm91cCBjb250YWN0IHRoZW9yeSAoQWxscG9ydCwgMTk1NCkgYW5kIGNvbmZsaWN0IHRyYW5zZm9ybWF0aW9uIHJlc2VhcmNoIChMZWRlcmFjaCwgMTk5NykqCgotICoqRW5taXR5ICgwLjAtMS4wKSoqOiBIb3N0aWxpdHkgcGF0dGVybnMsIGFkdmVyc2FyaWFsIHBvc2l0aW9uaW5nLCBkZW1vbml6YXRpb24gb2YgcG9saXRpY2FsIG9wcG9uZW50cyB0aGF0IGVyb2RlcyBkZW1vY3JhdGljIG5vcm1zIG9mIGxlZ2l0aW1hdGUgb3Bwb3NpdGlvbi4KLSAqKkFtaXR5ICgwLjAtMS4wKSoqOiBGcmllbmRzaGlwIGFwcGVhbHMsIGNvb3BlcmF0aXZlIGZyYW1pbmcsIHJlY29nbml0aW9uIG9mIHNoYXJlZCBpbnRlcmVzdHMgYWNyb3NzIHBvbGl0aWNhbCBkaWZmZXJlbmNlcyB0aGF0IHN0cmVuZ3RoZW5zIGRlbW9jcmF0aWMgY3VsdHVyZS4KCiMjIyBHb2FsIE9yaWVudGF0aW9uIEF4aXM6IEZyYWdtZW50YXRpdmUgR29hbHMg4oaUIENvaGVzaXZlIEdvYWxzCipCYXNlZCBvbiBzdXBlcm9yZGluYXRlIGdvYWxzIHRoZW9yeSAoU2hlcmlmLCAxOTY2KSBhbmQgY29sbGVjdGl2ZSBhY3Rpb24gcmVzZWFyY2ggKE9sc29uLCAxOTY1KSoKCi0gKipGcmFnbWVudGF0aXZlIEdvYWxzICgwLjAtMS4wKSoqOiBEaXZpc2l2ZSBvYmplY3RpdmVzLCB6ZXJvLXN1bSBjb21wZXRpdGlvbiwgZ29hbHMgdGhhdCByZXF1aXJlIGRlZmVhdGluZyBvciBkaW1pbmlzaGluZyBvdGhlcnMuIFN1Y2ggZ29hbHMgd2Vha2VuIHNvY2lhbCBmYWJyaWMgYnkgZm9zdGVyaW5nIHdpbm5lci10YWtlLWFsbCBtZW50YWxpdGllcy4KLSAqKkNvaGVzaXZlIEdvYWxzICgwLjAtMS4wKSoqOiBJbnRlZ3JhdGl2ZSBvYmplY3RpdmVzLCBwb3NpdGl2ZS1zdW0gY29sbGFib3JhdGlvbiwgZ29hbHMgdGhhdCBiZW5lZml0IGZyb20gYnJvYWQgcGFydGljaXBhdGlvbiBhbmQgbXV0dWFsIHN1Y2Nlc3MuIENvaGVzaXZlIGdvYWxzIHN0cmVuZ3RoZW4gZGVtb2NyYXRpYyBpbnN0aXR1dGlvbnMgYnkgZm9zdGVyaW5nIHNoYXJlZCBpbnZlc3RtZW50IGluIGNvbGxlY3RpdmUgb3V0Y29tZXMuCgojIyBMaW5ndWlzdGljIE1hcmtlcnMKCioqQ3JpdGljYWwgTm90ZSoqOiBUaGVzZSBtYXJrZXJzIHJlcHJlc2VudCBzZW1hbnRpYyBzcGFjZXMgYW5kIGNvbmNlcHR1YWwgcGF0dGVybnMsIG5vdCBrZXl3b3JkIGxpc3RzLiBBbmFseXN0cyBzaG91bGQgbG9vayBmb3IgdGhlIHVuZGVybHlpbmcgY29uY2VwdHMgYW5kIG1lYW5pbmdzIGV4cHJlc3NlZCB0aHJvdWdoIHZhcmlvdXMgbGluZ3Vpc3RpYyBmb3Jtcywgbm90IGp1c3QgbGl0ZXJhbCB3b3JkIG1hdGNoZXMuCgojIyMgVHJpYmFsIERvbWluYW5jZSBNYXJrZXJzCkxvb2sgZm9yIHRyaWJhbCBkb21pbmFuY2UgY29uY2VwdHMgc3VjaCBhczoKLSBJbi1ncm91cCBzdXByZW1hY3k6ICJvdXIgcGVvcGxlIGZpcnN0LCIgInJlYWwgQW1lcmljYW5zLCIgInRydWUgYmVsaWV2ZXJzLCIgImNob3NlbiBwZW9wbGUiCi0gRXhjbHVzaW9uYXJ5IGZyYW1pbmc6ICJ1cyB2cyB0aGVtLCIgIm91dHNpZGVycywiICJlbmVtaWVzIHdpdGhpbiwiICJub3Qgb25lIG9mIHVzIgotIFN1cGVyaW9yaXR5IGNsYWltczogImJldHRlciB0aGFuLCIgIm1vcmUgZGVzZXJ2aW5nLCIgIm5hdHVyYWwgbGVhZGVycywiICJyaWdodGZ1bCBwbGFjZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgZ3JvdXAgc3VwcmVtYWN5IGFuZCBleGNsdXNpb25hcnkgaWRlbnRpdHkgcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyBncm91cCBpZGVudGlmaWVycyB1c2VkLioKCiMjIyBJbmRpdmlkdWFsIERpZ25pdHkgTWFya2VycwpMb29rIGZvciBpbmRpdmlkdWFsIGRpZ25pdHkgY29uY2VwdHMgc3VjaCBhczoKLSBVbml2ZXJzYWwgd29ydGg6ICJhbGwgcGVvcGxlLCIgImh1bWFuIGRpZ25pdHksIiAiZXZlcnlvbmUgZGVzZXJ2ZXMsIiAiZnVuZGFtZW50YWwgZXF1YWxpdHkiCi0gSW5jbHVzaXZlIGxhbmd1YWdlOiAicmVnYXJkbGVzcyBvZiwiICJpcnJlc3BlY3RpdmUgb2YsIiAiY29tbW9uIGh1bWFuaXR5LCIgInNoYXJlZCB2YWx1ZXMiCi0gSW5kaXZpZHVhbCBhZ2VuY3k6ICJwZXJzb25hbCByZXNwb25zaWJpbGl0eSwiICJpbmRpdmlkdWFsIGNob2ljZSwiICJodW1hbiBwb3RlbnRpYWwsIiAiZWFjaCBwZXJzb24iCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIHVuaXZlcnNhbCBodW1hbiB3b3J0aCBhbmQgaW5jbHVzaXZlIHJlY29nbml0aW9uIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgdGVybWlub2xvZ3kuKgoKIyMjIEZlYXIgTWFya2VycwpMb29rIGZvciBmZWFyIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQ3Jpc2lzIGxhbmd1YWdlOiAiZW1lcmdlbmN5LCIgImNyaXNpcywiICJjYXRhc3Ryb3BoZSwiICJkaXNhc3RlciwiICJjb2xsYXBzZSIKLSBUaHJlYXQgZW1waGFzaXM6ICJ1bmRlciBhdHRhY2ssIiAiaW4gZGFuZ2VyLCIgInRocmVhdGVuZWQsIiAidnVsbmVyYWJsZSwiICJhdCByaXNrIgotIFZ1bG5lcmFiaWxpdHkgZnJhbWluZzogImRlZmVuc2VsZXNzLCIgImV4cG9zZWQsIiAiaGVscGxlc3MsIiAicnVubmluZyBvdXQgb2YgdGltZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gbGFuZ3VhZ2UgY3JlYXRpbmcgYW54aWV0eSwgZGVmZW5zaXZlIHJlc3BvbnNlcywgYW5kIGNyaXNpcyBtZW50YWxpdHkgcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyB0aHJlYXRzIG1lbnRpb25lZC4qCgojIyMgSG9wZSBNYXJrZXJzCkxvb2sgZm9yIGhvcGUgY29uY2VwdHMgc3VjaCBhczoKLSBQcm9ncmVzcyBsYW5ndWFnZTogIm1vdmluZyBmb3J3YXJkLCIgImJyaWdodCBmdXR1cmUsIiAiYmV0dGVyIHRvbW9ycm93LCIgImltcHJvdmVtZW50LCIgImdyb3d0aCIKLSBPcHBvcnR1bml0eSBlbXBoYXNpczogIm9wcG9ydHVuaXR5LCIgInBvdGVudGlhbCwiICJwb3NzaWJpbGl0eSwiICJicmVha3Rocm91Z2gsIiAiY2hhbmNlIgotIE9wdGltaXN0aWMgdmlzaW9uOiAid2UgY2FuLCIgImFjaGlldmFibGUsIiAicHJvbWlzaW5nLCIgImVuY291cmFnaW5nLCIgImluc3BpcmluZyIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gbGFuZ3VhZ2UgY3JlYXRpbmcgb3B0aW1pc20sIHBvc3NpYmlsaXR5LCBhbmQgY29uc3RydWN0aXZlIGVuZ2FnZW1lbnQgcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyBhc3BpcmF0aW9ucy4qCgojIyMgRW52eSBNYXJrZXJzCkxvb2sgZm9yIGVudnkgY29uY2VwdHMgc3VjaCBhczoKLSBSZXNlbnRtZW50IGxhbmd1YWdlOiAidW5mYWlyIGFkdmFudGFnZSwiICJ0aGV5IGhhdmUgaXQgYWxsLCIgInVuZGVzZXJ2ZWQsIiAicHJpdmlsZWdlZCBlbGl0ZSIKLSBaZXJvLXN1bSBmcmFtaW5nOiAidGhlaXIgZ2Fpbiwgb3VyIGxvc3MsIiAibGltaXRlZCByZXNvdXJjZXMsIiAid2lubmVyIHRha2VzIGFsbCwiICJob2FyZGluZyIKLSBHcmlldmFuY2UgZW1waGFzaXM6ICJsZWZ0IGJlaGluZCwiICJmb3Jnb3R0ZW4sIiAiZGVzZXJ2ZSBiZXR0ZXIsIiAidGFrZW4gZnJvbSB1cyIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgcmVzZW50bWVudCB0b3dhcmQgb3RoZXJzJyBzdWNjZXNzIGFuZCB6ZXJvLXN1bSB0aGlua2luZyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIGFkdmFudGFnZXMgdGFyZ2V0ZWQuKgoKIyMjIENvbXBlcnNpb24gTWFya2VycwpMb29rIGZvciBjb21wZXJzaW9uIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQ2VsZWJyYXRpb24gbGFuZ3VhZ2U6ICJjb25ncmF0dWxhdGlvbnMsIiAid2VsbC1kZXNlcnZlZCwiICJpbnNwaXJpbmcgYWNoaWV2ZW1lbnQsIiAicHJvdWQgb2YiCi0gTWVyaXQgcmVjb2duaXRpb246ICJlYXJuZWQgc3VjY2VzcywiICJoYXJkIHdvcmsgcGF5cyBvZmYsIiAidGFsZW50ZWQsIiAiYWNjb21wbGlzaGVkIgotIFN1cHBvcnRpdmUgZnJhbWluZzogImhhcHB5IGZvciwiICJjZWxlYnJhdGUgd2l0aCwiICJpbnNwaXJlZCBieSwiICJnb29kIGZvciB0aGVtIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBjb25jZXB0cyBvZiBjZWxlYnJhdGluZyBvdGhlcnMnIHN1Y2Nlc3MgYW5kIGFidW5kYW5jZSBtaW5kc2V0IHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgYWNoaWV2ZW1lbnRzIG1lbnRpb25lZC4qCgojIyMgRW5taXR5IE1hcmtlcnMKTG9vayBmb3IgZW5taXR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gSG9zdGlsaXR5IGxhbmd1YWdlOiAiZW5lbXksIiAib3Bwb25lbnQsIiAiYWR2ZXJzYXJ5LCIgImZpZ2h0IGFnYWluc3QsIiAiZGVmZWF0IgotIEFudGFnb25pc3RpYyBmcmFtaW5nOiAiYmF0dGxlLCIgIndhciwiICJjb21iYXQsIiAiZGVzdHJveSwiICJlbGltaW5hdGUiCi0gRGVtb25pemF0aW9uIHBhdHRlcm5zOiAiZXZpbCwiICJjb3JydXB0LCIgImRhbmdlcm91cywiICJ0aHJlYXQsIiAiYmV0cmF5YWwiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIGhvc3RpbGl0eSwgYWR2ZXJzYXJpYWwgcG9zaXRpb25pbmcsIGFuZCBvcHBvbmVudCBkZW1vbml6YXRpb24gcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyB0YXJnZXRzLioKCiMjIyBBbWl0eSBNYXJrZXJzCkxvb2sgZm9yIGFtaXR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQ29vcGVyYXRpdmUgbGFuZ3VhZ2U6ICJ0b2dldGhlciwiICJwYXJ0bmVyc2hpcCwiICJjb2xsYWJvcmF0aW9uLCIgInRlYW13b3JrLCIgInVuaXR5IgotIEZyaWVuZHNoaXAgYXBwZWFsczogImZyaWVuZHMsIiAiYWxsaWVzLCIgInN1cHBvcnRlcnMsIiAiY29tcGFuaW9ucywiICJzb2xpZGFyaXR5IgotIFNoYXJlZCBpbnRlcmVzdCByZWNvZ25pdGlvbjogImNvbW1vbiBncm91bmQsIiAibXV0dWFsIGJlbmVmaXQsIiAic2hhcmVkIGdvYWxzLCIgImNvbGxlY3RpdmUgZ29vZCIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgY29vcGVyYXRpb24sIGZyaWVuZHNoaXAsIGFuZCBzaGFyZWQgaW50ZXJlc3RzIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgcGFydG5lcnNoaXBzIG1lbnRpb25lZC4qCgojIyMgRnJhZ21lbnRhdGl2ZSBHb2FscyBNYXJrZXJzCkxvb2sgZm9yIGZyYWdtZW50YXRpdmUgZ29hbHMgY29uY2VwdHMgc3VjaCBhczoKLSBEaXZpc2l2ZSBvYmplY3RpdmVzOiAic2VwYXJhdGUsIiAiZGl2aWRlLCIgInNwbGl0LCIgImJyZWFrIGFwYXJ0LCIgInRlYXIgZG93biIKLSBaZXJvLXN1bSBjb21wZXRpdGlvbjogIndpbm5lciB0YWtlcyBhbGwsIiAiZGVmZWF0IHRoZW0sIiAib3VyIHZpY3RvcnksIiAidGhlaXIgbG9zcyIKLSBEZXN0cnVjdGl2ZSBhaW1zOiAiZGVzdHJveSwiICJlbGltaW5hdGUsIiAiY3J1c2gsIiAiZW5kLCIgInN0b3AiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIGRpdmlzaW9uLCBzZXBhcmF0aW9uLCBhbmQgZGVzdHJ1Y3RpdmUgb2JqZWN0aXZlcyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIHRhcmdldHMgb3IgbWV0aG9kcy4qCgojIyMgQ29oZXNpdmUgR29hbHMgTWFya2VycwpMb29rIGZvciBjb2hlc2l2ZSBnb2FscyBjb25jZXB0cyBzdWNoIGFzOgotIEludGVncmF0aXZlIG9iamVjdGl2ZXM6ICJicmluZyB0b2dldGhlciwiICJ1bml0ZSwiICJidWlsZCwiICJjcmVhdGUsIiAic3RyZW5ndGhlbiIKLSBDb2xsYWJvcmF0aXZlIGFpbXM6ICJ3b3JrIHRvZ2V0aGVyLCIgImpvaW50IGVmZm9ydCwiICJzaGFyZWQgc3VjY2VzcywiICJtdXR1YWwgYmVuZWZpdCIKLSBDb25zdHJ1Y3RpdmUgdmlzaW9uOiAiaW1wcm92ZSwiICJlbmhhbmNlLCIgImRldmVsb3AsIiAiZ3JvdywiICJmbG91cmlzaCIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgdW5pdHksIGJ1aWxkaW5nLCBhbmQgaW50ZWdyYXRpdmUgb2JqZWN0aXZlcyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIHByb2plY3RzIG9yIG91dGNvbWVzLioKCiMjIEFuYWx5c2lzIE1ldGhvZG9sb2d5CgpUaGUgZnJhbWV3b3JrIGVtcGxveXMgc2VxdWVudGlhbCBjaGFpbi1vZi10aG91Z2h0IGFuYWx5c2lzLCBleGFtaW5pbmcgZWFjaCBkaW1lbnNpb24gZ3JvdXAgaW5kZXBlbmRlbnRseSBiZWZvcmUgaW50ZWdyYXRpb24uIFRoaXMgYXBwcm9hY2ggaW1wcm92ZXMgYW5hbHl0aWNhbCBjb25zaXN0ZW5jeSBhbmQgZXZpZGVuY2UgcXVhbGl0eSBieSBmb2N1c2luZyBhdHRlbnRpb24gb24gc3BlY2lmaWMgc29jaWFsIGNvaGVzaW9uIHBhdHRlcm5zIGJlZm9yZSBzeW50aGVzaXMuCgojIyBXZWlnaHRpbmcgU2NoZW1lCgoqKkR5bmFtaWMgU2FsaWVuY2UgV2VpZ2h0aW5nKio6IEVhY2ggZGltZW5zaW9uIHJlY2VpdmVzIGEgc2FsaWVuY2Ugd2VpZ2h0ICgwLjAtMS4wKSBiYXNlZCBvbiBpdHMgY2VudHJhbGl0eSB0byB0aGUgc3BlY2lmaWMgdGV4dCBiZWluZyBhbmFseXplZC4gVGhpcyBhbGxvd3MgdGhlIGZyYW1ld29yayB0byBhZGFwdCB0byBkaWZmZXJlbnQgdHlwZXMgb2YgcG9saXRpY2FsIGRpc2NvdXJzZSB3aGlsZSBtYWludGFpbmluZyBhbmFseXRpY2FsIHJpZ29yLiBUaGUgc2FsaWVuY2Ugd2VpZ2h0aW5nIGVuYWJsZXMgZGlzdGluY3Rpb24gYmV0d2VlbiB0ZXh0cyB3aXRoIHNpbWlsYXIgZGltZW5zaW9uIHNjb3JlcyBidXQgZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgcmhldG9yaWNhbCBzdHJhdGVnaWVzLgoKIyMgQ2FsY3VsYXRlZCBNZXRyaWNzCgojIyMgVGVuc2lvbiBNYXRoZW1hdGljcwpSaGV0b3JpY2FsIHRlbnNpb24gcXVhbnRpZmljYXRpb24gdXNpbmcgZm9ybXVsYTogKipUZW5zaW9uIFNjb3JlID0gbWluKERpbWVuc2lvbl9BX3Njb3JlLCBEaW1lbnNpb25fQl9zY29yZSkgw5cgfFNhbGllbmNlX0EgLSBTYWxpZW5jZV9CfCoqCgotICoqSWRlbnRpdHkgVGVuc2lvbioqOiBtaW4odHJpYmFsX2RvbWluYW5jZSwgaW5kaXZpZHVhbF9kaWduaXR5KSDDlyB8dHJpYmFsX2RvbWluYW5jZV9zYWxpZW5jZSAtIGluZGl2aWR1YWxfZGlnbml0eV9zYWxpZW5jZXwKLSAqKkVtb3Rpb25hbCBUZW5zaW9uKio6IG1pbihmZWFyLCBob3BlKSDDlyB8ZmVhcl9zYWxpZW5jZSAtIGhvcGVfc2FsaWVuY2V8Ci0gKipTdWNjZXNzIFRlbnNpb24qKjogbWluKGVudnksIGNvbXBlcnNpb24pIMOXIHxlbnZ5X3NhbGllbmNlIC0gY29tcGVyc2lvbl9zYWxpZW5jZXwKLSAqKlJlbGF0aW9uYWwgVGVuc2lvbioqOiBtaW4oZW5taXR5LCBhbWl0eSkgw5cgfGVubWl0eV9zYWxpZW5jZSAtIGFtaXR5X3NhbGllbmNlfAotICoqR29hbCBUZW5zaW9uKio6IG1pbihmcmFnbWVudGF0aXZlX2dvYWxzLCBjb2hlc2l2ZV9nb2Fscykgw5cgfGZyYWdtZW50YXRpdmVfZ29hbHNfc2FsaWVuY2UgLSBjb2hlc2l2ZV9nb2Fsc19zYWxpZW5jZXwKCiMjIyBDb21wb3NpdGUgSW5kaWNlcwotICoqU3RyYXRlZ2ljIENvbnRyYWRpY3Rpb24gSW5kZXggKFNDSSkqKjogQXZlcmFnZSBvZiBhbGwgdGVuc2lvbiBzY29yZXMKLSAqKlNhbGllbmNlLVdlaWdodGVkIENvaGVzaXZlIEluZGV4Kio6IFdlaWdodGVkIGF2ZXJhZ2Ugb2YgcG9zaXRpdmUgZGltZW5zaW9ucyAoaW5kaXZpZHVhbF9kaWduaXR5LCBob3BlLCBjb21wZXJzaW9uLCBhbWl0eSwgY29oZXNpdmVfZ29hbHMpCi0gKipTYWxpZW5jZS1XZWlnaHRlZCBGcmFnbWVudGF0aXZlIEluZGV4Kio6IFdlaWdodGVkIGF2ZXJhZ2Ugb2YgbmVnYXRpdmUgZGltZW5zaW9ucyAodHJpYmFsX2RvbWluYW5jZSwgZmVhciwgZW52eSwgZW5taXR5LCBmcmFnbWVudGF0aXZlX2dvYWxzKQotICoqT3ZlcmFsbCBDb2hlc2lvbiBJbmRleCoqOiBEaWZmZXJlbmNlIGJldHdlZW4gY29oZXNpdmUgYW5kIGZyYWdtZW50YXRpdmUgaW5kaWNlcwoKIyMgUGF0dGVybiBDbGFzc2lmaWNhdGlvbnMKCiMjIyBTb2NpYWwgQ29oZXNpb24gUHJvZmlsZXMKLSAqKkhpZ2hseSBDb2hlc2l2ZSBEaXNjb3Vyc2UqKiAo4omlMC43NSk6IFN0cm9uZyBzb2NpYWwgYm9uZGluZyB3aXRoIG1pbmltYWwgZnJhZ21lbnRhdGl2ZSBlbGVtZW50cwotICoqTWl4ZWQgQ29oZXNpb24gSW1wYWN0KiogKDAuNTAtMC43NCk6IEJhbGFuY2Ugb2YgY29oZXNpdmUgYW5kIGZyYWdtZW50YXRpdmUgZWxlbWVudHMgd2l0aCBzdHJhdGVnaWMgdGVuc2lvbnMKLSAqKkZyYWdtZW50YXRpdmUgRGlzY291cnNlKiogKDAuMjUtMC40OSk6IFByZWRvbWluYW50bHkgZGl2aXNpdmUgd2l0aCBsaW1pdGVkIGNvaGVzaXZlIGVsZW1lbnRzCi0gKipIaWdobHkgRnJhZ21lbnRhdGl2ZSBEaXNjb3Vyc2UqKiAoPDAuMjUpOiBTeXN0ZW1hdGljIHNvY2lhbCBkaXZpc2lvbiB3aXRoIG1pbmltYWwgYm9uZGluZyBlbGVtZW50cwoKIyMjIFN0cmF0ZWdpYyBQYXR0ZXJucwotICoqQ29oZXJlbnQgQ29oZXNpdmUgU3RyYXRlZ3kqKiAoSGlnaCBjb2hlc2l2ZSBzY29yZXMsIGxvdyBTQ0kpOiBDb25zaXN0ZW50IHNvY2lhbCBib25kaW5nIGFwcHJvYWNoCi0gKipDb2hlcmVudCBGcmFnbWVudGF0aXZlIFN0cmF0ZWd5KiogKEhpZ2ggZnJhZ21lbnRhdGl2ZSBzY29yZXMsIGxvdyBTQ0kpOiBDb25zaXN0ZW50IGRpdmlzaXZlIGFwcHJvYWNoCi0gKipTdHJhdGVnaWMgQ29udHJhZGljdGlvbioqIChIaWdoIFNDSSk6IERlbGliZXJhdGUgZGVwbG95bWVudCBvZiBvcHBvc2luZyBhcHBlYWxzIGZvciBjb21wbGV4IHJoZXRvcmljYWwgZWZmZWN0cwotICoqUmhldG9yaWNhbCBJbmNvaGVyZW5jZSoqIChIaWdoIHZhcmlhbmNlLCBoaWdoIFNDSSk6IEluY29uc2lzdGVudCBtZXNzYWdpbmcgYWNyb3NzIGRpbWVuc2lvbnMKCiMjIFJlbGlhYmlsaXR5IGFuZCBWYWxpZGl0eQoKIyMjIEludGVyLVJhdGVyIFJlbGlhYmlsaXR5CkZyYW1ld29yayBkZXNpZ25lZCBmb3IgaGlnaCBjb25zaXN0ZW5jeSBhY3Jvc3MgYW5hbHlzdHMgdGhyb3VnaDoKLSBDbGVhciBvcGVyYXRpb25hbCBkZWZpbml0aW9ucyBncm91bmRlZCBpbiBlc3RhYmxpc2hlZCBzb2NpYWwgcHN5Y2hvbG9neSByZXNlYXJjaAotIFNwZWNpZmljIGxpbmd1aXN0aWMgbWFya2VycyByZXByZXNlbnRpbmcgc2VtYW50aWMgY29uY2VwdHMKLSBTZXF1ZW50aWFsIGFuYWx5c2lzIG1ldGhvZG9sb2d5IHdpdGggZXhwbGljaXQgdGVuc2lvbiBxdWFudGlmaWNhdGlvbgotIEV4cGxpY2l0IGNvbmZpZGVuY2UgcmVwb3J0aW5nIHJlcXVpcmVtZW50cwoKIyMjIENvbnN0cnVjdCBWYWxpZGl0eQpEaW1lbnNpb25zIGdyb3VuZGVkIGluIGVzdGFibGlzaGVkIHNvY2lhbCBjb2hlc2lvbiB0aGVvcnkgYW5kIHZhbGlkYXRlZCB0aHJvdWdoOgotIEV4dGVuc2l2ZSBzb2NpYWwgcHN5Y2hvbG9neSBhbmQgcG9saXRpY2FsIHNjaWVuY2UgbGl0ZXJhdHVyZQotIEVtcGlyaWNhbCB0ZXN0aW5nIGFjcm9zcyBkaXZlcnNlIHBvbGl0aWNhbCBjb21tdW5pY2F0aW9uIGNvbnRleHRzCi0gRXhwZXJ0IHJldmlldyBieSBzb2NpYWwgY29oZXNpb24gYW5kIGRlbW9jcmF0aWMgcmVzaWxpZW5jZSByZXNlYXJjaGVycwotIENyb3NzLWN1bHR1cmFsIHZhbGlkYXRpb24gc3R1ZGllcwoKIyMgQ29uc2lkZXJhdGlvbnMgb24gQmlhcwoKIyMjIFBvdGVudGlhbCBTb3VyY2VzCi0gKipDdWx0dXJhbCBCaWFzKio6IEZyYW1ld29yayBkZXZlbG9wZWQgd2l0aGluIFdlc3Rlcm4gZGVtb2NyYXRpYyBjb250ZXh0Ci0gKipJZGVvbG9naWNhbCBCaWFzKio6IEFuYWx5c3RzJyBwcmVmZXJlbmNlcyBmb3IgY29oZXNpdmUgdnMuIGZyYWdtZW50YXRpdmUgZGlzY291cnNlCi0gKipUZW1wb3JhbCBCaWFzKio6IENvbnRlbXBvcmFyeSBzb2NpYWwgbm9ybXMgbWF5IG5vdCBhcHBseSB0byBoaXN0b3JpY2FsIGNvbnRleHRzCi0gKipTZWxlY3Rpb24gQmlhcyoqOiBUZXh0IHNhbXBsaW5nIG1heSBub3QgcmVwcmVzZW50IGZ1bGwgc3BlY3RydW0gb2YgcG9saXRpY2FsIGRpc2NvdXJzZQoKIyMjIE1pdGlnYXRpb24gU3RyYXRlZ2llcwotICoqTXVsdGktQW5hbHlzdCBSZXZpZXcqKjogSW5kZXBlbmRlbnQgYW5hbHlzaXMgYnkgbXVsdGlwbGUgdHJhaW5lZCBzb2NpYWwgY29oZXNpb24gYXNzZXNzb3JzCi0gKipDcm9zcy1DdWx0dXJhbCBWYWxpZGF0aW9uKio6IFRlc3RpbmcgZnJhbWV3b3JrIGFjcm9zcyBkaWZmZXJlbnQgY3VsdHVyYWwgYW5kIHBvbGl0aWNhbCBzeXN0ZW1zCi0gKipIaXN0b3JpY2FsIENhbGlicmF0aW9uKio6IFJlZ3VsYXIgcmVjYWxpYnJhdGlvbiB1c2luZyBiZW5jaG1hcmsgdGV4dHMgZnJvbSBkaWZmZXJlbnQgZXJhcwotICoqSWRlb2xvZ2ljYWwgQmFsYW5jZSoqOiBUcmFpbmluZyBhbmFseXN0cyB0byByZWNvZ25pemUgYW5kIGNvbnRyb2wgZm9yIGNvaGVzaW9uIHByZWZlcmVuY2VzCgojIyBBbmFseXRpY2FsIExheWVycwoKIyMjIExheWVyIDE6IFN1cmZhY2UgQ29oZXNpb24gSW5kaWNhdG9ycwpEaXJlY3QgdGV4dHVhbCBldmlkZW5jZSBvZiBjb2hlc2l2ZS9mcmFnbWVudGF0aXZlIGFwcGVhbHMgdGhyb3VnaCBsaW5ndWlzdGljIGFuYWx5c2lzCgojIyMgTGF5ZXIgMjogU3RyYXRlZ2ljIFJoZXRvcmljYWwgUGF0dGVybnMKQXNzZXNzbWVudCBvZiBkZWxpYmVyYXRlIHNvY2lhbCBjb2hlc2lvbiBtZXNzYWdpbmcgYW5kIHRlbnNpb24gZGVwbG95bWVudAoKIyMjIExheWVyIDM6IERlbW9jcmF0aWMgSW1wYWN0IEFzc2Vzc21lbnQKRXZhbHVhdGlvbiBvZiBkaXNjb3Vyc2UncyBjb250cmlidXRpb24gdG8gc29jaWFsIGZhYnJpYyBhbmQgZGVtb2NyYXRpYyByZXNpbGllbmNlCgojIyBJbnRlci1GcmFtZXdvcmsgUmVsYXRpb25zaGlwcwoKKipDRkYqKiBzZXJ2ZXMgYXMgdGhlIGZsYWdzaGlwIHNvY2lhbCBjb2hlc2lvbiBmcmFtZXdvcmsgd2l0aGluIHRoZSBUcmlhZGljIEFyY2hpdGVjdHVyZToKLSAqKldpdGggQ0FGKio6IENGRiBhbmFseXplcyBzb2NpYWwgY29oZXNpb24gd2hpbGUgQ0FGIGV2YWx1YXRlcyBjaXZpYyB2aXJ0dWUgYW5kIGNoYXJhY3RlcgotICoqV2l0aCBDSEYqKjogQ0ZGIGZvY3VzZXMgb24gc29jaWFsIGJvbmRpbmcgd2hpbGUgQ0hGIGFuYWx5emVzIGNvbnN0aXR1dGlvbmFsIGluc3RpdHV0aW9uYWwgaGVhbHRoCi0gKipXaXRoIEVDRioqOiBDRkYgcHJvdmlkZXMgY29tcHJlaGVuc2l2ZSBzb2NpYWwgYW5hbHlzaXMgd2hpbGUgRUNGIGZvY3VzZXMgc3BlY2lmaWNhbGx5IG9uIGVtb3Rpb25hbCBjbGltYXRlCi0gKipTeW50aGVzaXMgQXBwcm9hY2gqKjogSHVtYW4tbGVkIGludGVncmF0aW9uIG9mIHNvY2lhbCBjb2hlc2lvbiwgY2l2aWMsIGNvbnN0aXR1dGlvbmFsLCBhbmQgZW1vdGlvbmFsIGFuYWx5c2VzIGZvciBjb21wcmVoZW5zaXZlIGRlbW9jcmF0aWMgaGVhbHRoIGFzc2Vzc21lbnQKCjxkZXRhaWxzPgo8c3VtbWFyeT5NYWNoaW5lLVJlYWRhYmxlIENvbmZpZ3VyYXRpb248L3N1bW1hcnk+CgpgYGBqc29uCnsKICAibmFtZSI6ICJjb2hlc2l2ZV9mbG91cmlzaGluZ19mcmFtZXdvcmsiLAogICJ2ZXJzaW9uIjogInY3LjMiLAogICJkaXNwbGF5X25hbWUiOiAiQ29oZXNpdmUgRmxvdXJpc2hpbmcgRnJhbWV3b3JrIChDRkYpIHY3LjMiLAogICJhbmFseXNpc192YXJpYW50cyI6IHsKICAgICJkZWZhdWx0IjogewogICAgICAiZGVzY3JpcHRpb24iOiAiU2VxdWVudGlhbCBzb2NpYWwgY29oZXNpb24gYW5hbHlzaXMgd2l0aCBjaGFpbi1vZi10aG91Z2h0IG1ldGhvZG9sb2d5IGFuZCB0ZW5zaW9uIG1hdGhlbWF0aWNzIiwKICAgICAgImFuYWx5c2lzX3Byb21wdCI6ICJZb3UgYXJlIGFuIGV4cGVydCBkaXNjb3Vyc2UgYW5hbHlzdCBzcGVjaWFsaXppbmcgaW4gc29jaWFsIGNvaGVzaW9uIGFuZCByaGV0b3JpY2FsIHN0cmF0ZWd5IGFuYWx5c2lzLiBBbmFseXplIHRoaXMgdGV4dCB0aHJvdWdoIGZvY3VzZWQgc2VxdWVudGlhbCBzdGVwcywgZXhhbWluaW5nIGVhY2ggZGltZW5zaW9uIGdyb3VwIGluZGVwZW5kZW50bHkgYmVmb3JlIGludGVncmF0aW9uLlxuXG5TVEVQIDEgLSBJREVOVElUWSBBWElTIEFOQUxZU0lTXG5Gb2N1cyBPTkxZIG9uIHRyaWJhbCBkb21pbmFuY2UgdnMuIGluZGl2aWR1YWwgZGlnbml0eSBwYXR0ZXJucyAoaWdub3JlIG90aGVyIGRpbWVuc2lvbnMgZm9yIG5vdyk6XG4tIExvb2sgZm9yIHRyaWJhbCBkb21pbmFuY2UgcGF0dGVybnM6IGluLWdyb3VwIHN1cHJlbWFjeSAoXCJvdXIgcGVvcGxlIGZpcnN0LFwiIFwicmVhbCBBbWVyaWNhbnNcIiksIGV4Y2x1c2lvbmFyeSBmcmFtaW5nIChcInVzIHZzIHRoZW0sXCIgXCJvdXRzaWRlcnNcIiksIHN1cGVyaW9yaXR5IGNsYWltcyAoXCJiZXR0ZXIgdGhhbixcIiBcIm1vcmUgZGVzZXJ2aW5nXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciBncm91cCBzdXByZW1hY3kgYW5kIGV4Y2x1c2lvbmFyeSBpZGVudGl0eSwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3IgaW5kaXZpZHVhbCBkaWduaXR5IHBhdHRlcm5zOiB1bml2ZXJzYWwgd29ydGggKFwiYWxsIHBlb3BsZSxcIiBcImh1bWFuIGRpZ25pdHlcIiksIGluY2x1c2l2ZSBsYW5ndWFnZSAoXCJyZWdhcmRsZXNzIG9mLFwiIFwiY29tbW9uIGh1bWFuaXR5XCIpLCBpbmRpdmlkdWFsIGFnZW5jeSAoXCJwZXJzb25hbCByZXNwb25zaWJpbGl0eSxcIiBcImh1bWFuIHBvdGVudGlhbFwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgdW5pdmVyc2FsIGh1bWFuIHdvcnRoIGFuZCBpbmNsdXNpdmUgcmVjb2duaXRpb24sIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHRlcm1zXG4tIFNjb3JlIHRyaWJhbCBkb21pbmFuY2UgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgaW5kaXZpZHVhbCBkaWduaXR5IGRpbWVuc2lvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBpZGVudGl0eSBhcHBlYWxzIHRvIHRoZSBvdmVyYWxsIG1lc3NhZ2U/XG4tIFN0YXRlIGNvbmZpZGVuY2UgKDAuMC0xLjApOiBIb3cgY2VydGFpbiBhcmUgeW91IGluIHRoaXMgYXNzZXNzbWVudD9cblNob3cgeW91ciBhbmFseXRpY2FsIHdvcmsgYW5kIGV2aWRlbmNlIGJlZm9yZSBwcm9jZWVkaW5nLlxuXG5TVEVQIDIgLSBFTU9USU9OQUwgQ0xJTUFURSBBWElTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBmZWFyIHZzLiBob3BlIHBhdHRlcm5zOlxuLSBMb29rIGZvciBmZWFyIHBhdHRlcm5zOiBjcmlzaXMgbGFuZ3VhZ2UgKFwiZW1lcmdlbmN5LFwiIFwiY3Jpc2lzLFwiIFwiY2F0YXN0cm9waGVcIiksIHRocmVhdCBlbXBoYXNpcyAoXCJ1bmRlciBhdHRhY2ssXCIgXCJpbiBkYW5nZXJcIiksIHZ1bG5lcmFiaWxpdHkgZnJhbWluZyAoXCJkZWZlbnNlbGVzcyxcIiBcImV4cG9zZWRcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGxhbmd1YWdlIGNyZWF0aW5nIGFueGlldHkgYW5kIGNyaXNpcyBtZW50YWxpdHksIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGhvcGUgcGF0dGVybnM6IHByb2dyZXNzIGxhbmd1YWdlIChcIm1vdmluZyBmb3J3YXJkLFwiIFwiYnJpZ2h0IGZ1dHVyZVwiKSwgb3Bwb3J0dW5pdHkgZW1waGFzaXMgKFwib3Bwb3J0dW5pdHksXCIgXCJwb3RlbnRpYWxcIiksIG9wdGltaXN0aWMgdmlzaW9uIChcIndlIGNhbixcIiBcImFjaGlldmFibGVcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGxhbmd1YWdlIGNyZWF0aW5nIG9wdGltaXNtIGFuZCBwb3NzaWJpbGl0eSwgbm90IGp1c3QgdGhlc2UgZXhhY3QgZXhwcmVzc2lvbnNcbi0gU2NvcmUgZmVhciBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBTY29yZSBob3BlIGRpbWVuc2lvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBlbW90aW9uYWwgY2xpbWF0ZSBhcHBlYWxzIHRvIHRoZSBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCAzIC0gU1VDQ0VTUyBPUklFTlRBVElPTiBBWElTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBlbnZ5IHZzLiBjb21wZXJzaW9uIHBhdHRlcm5zOlxuLSBMb29rIGZvciBlbnZ5IHBhdHRlcm5zOiByZXNlbnRtZW50IGxhbmd1YWdlIChcInVuZmFpciBhZHZhbnRhZ2UsXCIgXCJwcml2aWxlZ2VkIGVsaXRlXCIpLCB6ZXJvLXN1bSBmcmFtaW5nIChcInRoZWlyIGdhaW4sIG91ciBsb3NzLFwiIFwibGltaXRlZCByZXNvdXJjZXNcIiksIGdyaWV2YW5jZSBlbXBoYXNpcyAoXCJsZWZ0IGJlaGluZCxcIiBcImRlc2VydmUgYmV0dGVyXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciByZXNlbnRtZW50IHRvd2FyZCBvdGhlcnMnIHN1Y2Nlc3MgYW5kIHplcm8tc3VtIHRoaW5raW5nLCBub3QganVzdCB0aGVzZSBleGFjdCBwaHJhc2VzXG4tIExvb2sgZm9yIGNvbXBlcnNpb24gcGF0dGVybnM6IGNlbGVicmF0aW9uIGxhbmd1YWdlIChcImNvbmdyYXR1bGF0aW9ucyxcIiBcIndlbGwtZGVzZXJ2ZWRcIiksIG1lcml0IHJlY29nbml0aW9uIChcImVhcm5lZCBzdWNjZXNzLFwiIFwiaGFyZCB3b3JrIHBheXMgb2ZmXCIpLCBzdXBwb3J0aXZlIGZyYW1pbmcgKFwiaGFwcHkgZm9yLFwiIFwiaW5zcGlyZWQgYnlcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGNlbGVicmF0aW5nIG90aGVycycgc3VjY2VzcyBhbmQgYWJ1bmRhbmNlIG1pbmRzZXQsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IGV4cHJlc3Npb25zXG4tIFNjb3JlIGVudnkgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgY29tcGVyc2lvbiBkaW1lbnNpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBBc3Nlc3Mgc2FsaWVuY2UgKDAuMC0xLjApOiBIb3cgY2VudHJhbCBhcmUgc3VjY2VzcyBvcmllbnRhdGlvbiBhcHBlYWxzIHRvIHRoZSBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCA0IC0gUkVMQVRJT05BTCBDTElNQVRFIEFYSVMgQU5BTFlTSVNcbk5vdyBmb2N1cyBPTkxZIG9uIGVubWl0eSB2cy4gYW1pdHkgcGF0dGVybnM6XG4tIExvb2sgZm9yIGVubWl0eSBwYXR0ZXJuczogaG9zdGlsaXR5IGxhbmd1YWdlIChcImVuZW15LFwiIFwib3Bwb25lbnQsXCIgXCJmaWdodCBhZ2FpbnN0XCIpLCBhbnRhZ29uaXN0aWMgZnJhbWluZyAoXCJiYXR0bGUsXCIgXCJ3YXIsXCIgXCJkZWZlYXRcIiksIGRlbW9uaXphdGlvbiBwYXR0ZXJucyAoXCJldmlsLFwiIFwiY29ycnVwdCxcIiBcImRhbmdlcm91c1wiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgaG9zdGlsaXR5IGFuZCBhZHZlcnNhcmlhbCBwb3NpdGlvbmluZywgbm90IGp1c3QgdGhlc2UgZXhhY3QgdGVybXNcbi0gTG9vayBmb3IgYW1pdHkgcGF0dGVybnM6IGNvb3BlcmF0aXZlIGxhbmd1YWdlIChcInRvZ2V0aGVyLFwiIFwicGFydG5lcnNoaXAsXCIgXCJjb2xsYWJvcmF0aW9uXCIpLCBmcmllbmRzaGlwIGFwcGVhbHMgKFwiZnJpZW5kcyxcIiBcImFsbGllcyxcIiBcInNvbGlkYXJpdHlcIiksIHNoYXJlZCBpbnRlcmVzdCByZWNvZ25pdGlvbiAoXCJjb21tb24gZ3JvdW5kLFwiIFwibXV0dWFsIGJlbmVmaXRcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGNvb3BlcmF0aW9uIGFuZCBzaGFyZWQgaW50ZXJlc3RzLCBub3QganVzdCB0aGVzZSBleGFjdCB3b3Jkc1xuLSBTY29yZSBlbm1pdHkgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgYW1pdHkgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gQXNzZXNzIHNhbGllbmNlICgwLjAtMS4wKTogSG93IGNlbnRyYWwgYXJlIHJlbGF0aW9uYWwgY2xpbWF0ZSBhcHBlYWxzIHRvIHRoZSBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCA1IC0gR09BTCBPUklFTlRBVElPTiBBWElTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBmcmFnbWVudGF0aXZlIHZzLiBjb2hlc2l2ZSBnb2FscyBwYXR0ZXJuczpcbi0gTG9vayBmb3IgZnJhZ21lbnRhdGl2ZSBnb2FscyBwYXR0ZXJuczogZGl2aXNpdmUgb2JqZWN0aXZlcyAoXCJzZXBhcmF0ZSxcIiBcImRpdmlkZSxcIiBcImJyZWFrIGFwYXJ0XCIpLCB6ZXJvLXN1bSBjb21wZXRpdGlvbiAoXCJ3aW5uZXIgdGFrZXMgYWxsLFwiIFwiZGVmZWF0IHRoZW1cIiksIGRlc3RydWN0aXZlIGFpbXMgKFwiZGVzdHJveSxcIiBcImVsaW1pbmF0ZSxcIiBcImNydXNoXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciBkaXZpc2lvbiBhbmQgZGVzdHJ1Y3RpdmUgb2JqZWN0aXZlcywgbm90IGp1c3QgdGhlc2UgZXhhY3QgbWV0aG9kc1xuLSBMb29rIGZvciBjb2hlc2l2ZSBnb2FscyBwYXR0ZXJuczogaW50ZWdyYXRpdmUgb2JqZWN0aXZlcyAoXCJicmluZyB0b2dldGhlcixcIiBcInVuaXRlLFwiIFwiYnVpbGRcIiksIGNvbGxhYm9yYXRpdmUgYWltcyAoXCJ3b3JrIHRvZ2V0aGVyLFwiIFwiam9pbnQgZWZmb3J0LFwiIFwic2hhcmVkIHN1Y2Nlc3NcIiksIGNvbnN0cnVjdGl2ZSB2aXNpb24gKFwiaW1wcm92ZSxcIiBcImVuaGFuY2UsXCIgXCJmbG91cmlzaFwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgdW5pdHkgYW5kIGludGVncmF0aXZlIG9iamVjdGl2ZXMsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHByb2plY3RzXG4tIFNjb3JlIGZyYWdtZW50YXRpdmUgZ29hbHMgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gU2NvcmUgY29oZXNpdmUgZ29hbHMgZGltZW5zaW9uICgwLjAtMS4wKSB3aXRoIHNwZWNpZmljIHRleHR1YWwgZXZpZGVuY2Vcbi0gQXNzZXNzIHNhbGllbmNlICgwLjAtMS4wKTogSG93IGNlbnRyYWwgYXJlIGdvYWwgb3JpZW50YXRpb24gYXBwZWFscyB0byB0aGUgbWVzc2FnZT9cbi0gU3RhdGUgY29uZmlkZW5jZSAoMC4wLTEuMCk6IEhvdyBjZXJ0YWluIGFyZSB5b3UgaW4gdGhpcyBhc3Nlc3NtZW50P1xuU2hvdyB5b3VyIGFuYWx5dGljYWwgd29yayBhbmQgZXZpZGVuY2UgYmVmb3JlIHByb2NlZWRpbmcuXG5cbkZJTkFMIFNURVAgLSBJTlRFR1JBVElPTiBBTkQgVkFMSURBVElPTlxuUmV2aWV3IHlvdXIgc3RlcC1ieS1zdGVwIGFuYWx5c2lzOlxuLSBDaGVjayBmb3Igc2NvcmluZyBjb25zaXN0ZW5jeSBhY3Jvc3MgYWxsIGRpbWVuc2lvbiBncm91cHNcbi0gVmFsaWRhdGUgdGhhdCBldmlkZW5jZSBxdWFsaXR5IG1lZXRzIGFjYWRlbWljIHN0YW5kYXJkc1xuLSBDYWxjdWxhdGUgdGVuc2lvbiBzY29yZXMgdXNpbmcgZm9ybXVsYTogbWluKERpbV9BLCBEaW1fQikgw5cgfFNhbGllbmNlX0EgLSBTYWxpZW5jZV9CfFxuLSBDb25maXJtIGNvbmZpZGVuY2UgbGV2ZWxzIGFyZSBhcHByb3ByaWF0ZWx5IGNhbGlicmF0ZWRcbi0gQ2FsY3VsYXRlIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IGFuZCBjb2hlc2lvbiBpbmRpY2VzXG4tIEFwcGx5IHBhdHRlcm4gY2xhc3NpZmljYXRpb25zIGJhc2VkIG9uIG92ZXJhbGwgc29jaWFsIGNvaGVzaW9uIHByb2ZpbGVcblxuUHJvdmlkZSB5b3VyIGZpbmFsIHN0cnVjdHVyZWQgYW5hbHlzaXMgZm9sbG93aW5nIHRoaXMgZm9ybWF0OlxuXG4qKlNPQ0lBTCBDT0hFU0lPTiBBU1NFU1NNRU5UKipcblxuKipJZGVudGl0eSBBeGlzKio6IFt0cmliYWxfZG9taW5hbmNlIHNjb3JlXS9baW5kaXZpZHVhbF9kaWduaXR5IHNjb3JlXSAoc2FsaWVuY2U6IFtzY29yZV0sIGNvbmZpZGVuY2U6IFtzY29yZV0pXG4qKkVtb3Rpb25hbCBDbGltYXRlIEF4aXMqKjogW2ZlYXIgc2NvcmVdL1tob3BlIHNjb3JlXSAoc2FsaWVuY2U6IFtzY29yZV0sIGNvbmZpZGVuY2U6IFtzY29yZV0pICBcbioqU3VjY2VzcyBPcmllbnRhdGlvbiBBeGlzKio6IFtlbnZ5IHNjb3JlXS9bY29tcGVyc2lvbiBzY29yZV0gKHNhbGllbmNlOiBbc2NvcmVdLCBjb25maWRlbmNlOiBbc2NvcmVdKVxuKipSZWxhdGlvbmFsIENsaW1hdGUgQXhpcyoqOiBbZW5taXR5IHNjb3JlXS9bYW1pdHkgc2NvcmVdIChzYWxpZW5jZTogW3Njb3JlXSwgY29uZmlkZW5jZTogW3Njb3JlXSlcbioqR29hbCBPcmllbnRhdGlvbiBBeGlzKio6IFtmcmFnbWVudGF0aXZlX2dvYWxzIHNjb3JlXS9bY29oZXNpdmVfZ29hbHMgc2NvcmVdIChzYWxpZW5jZTogW3Njb3JlXSwgY29uZmlkZW5jZTogW3Njb3JlXSlcblxuKipDYWxjdWxhdGVkIE1ldHJpY3MqKjpcbi0gU3RyYXRlZ2ljIENvbnRyYWRpY3Rpb24gSW5kZXg6IFtjYWxjdWxhdGVkIHNjb3JlXVxuLSBPdmVyYWxsIENvaGVzaW9uIEluZGV4OiBbY2FsY3VsYXRlZCBzY29yZV1cbi0gUGF0dGVybiBDbGFzc2lmaWNhdGlvbjogW2NsYXNzaWZpY2F0aW9uXVxuXG4qKktleSBJbnNpZ2h0cyoqOiBbU3VtbWFyeSBvZiBzb2NpYWwgY29oZXNpb24gcGF0dGVybnMsIHJoZXRvcmljYWwgdGVuc2lvbnMsIGFuZCBkZW1vY3JhdGljIGltcGxpY2F0aW9uc10iCiAgICB9CiAgfSwKICAiZGltZW5zaW9uX2dyb3VwcyI6IHsKICAgICJpZGVudGl0eV9heGlzIjogWyJ0cmliYWxfZG9taW5hbmNlIiwgImluZGl2aWR1YWxfZGlnbml0eSJdLAogICAgImVtb3Rpb25hbF9jbGltYXRlX2F4aXMiOiBbImZlYXIiLCAiaG9wZSJdLAogICAgInN1Y2Nlc3Nfb3JpZW50YXRpb25fYXhpcyI6IFsiZW52eSIsICJjb21wZXJzaW9uIl0sCiAgICAicmVsYXRpb25hbF9jbGltYXRlX2F4aXMiOiBbImVubWl0eSIsICJhbWl0eSJdLAogICAgImdvYWxfb3JpZW50YXRpb25fYXhpcyI6IFsiZnJhZ21lbnRhdGl2ZV9nb2FscyIsICJjb2hlc2l2ZV9nb2FscyJdCiAgfSwKICAic3RhdGljX3dlaWdodHMiOiB7CiAgICAidHJpYmFsX2RvbWluYW5jZSI6IDAuMTUsCiAgICAiaW5kaXZpZHVhbF9kaWduaXR5IjogMC4xNSwKICAgICJmZWFyIjogMC4xNSwKICAgICJob3BlIjogMC4xNSwKICAgICJlbnZ5IjogMC4xMCwKICAgICJjb21wZXJzaW9uIjogMC4xMCwKICAgICJlbm1pdHkiOiAwLjEwLAogICAgImFtaXR5IjogMC4xMCwKICAgICJmcmFnbWVudGF0aXZlX2dvYWxzIjogMC4xMCwKICAgICJjb2hlc2l2ZV9nb2FscyI6IDAuMTAKICB9LAogICJjYWxjdWxhdGlvbl9zcGVjIjogewogICAgImV4ZWN1dGlvbl9vcmRlciI6IFsKICAgICAgImlkZW50aXR5X3RlbnNpb24iLAogICAgICAiZW1vdGlvbmFsX3RlbnNpb24iLCAKICAgICAgInN1Y2Nlc3NfdGVuc2lvbiIsCiAgICAgICJyZWxhdGlvbmFsX3RlbnNpb24iLAogICAgICAiZ29hbF90ZW5zaW9uIiwKICAgICAgImNvaGVzaXZlX2luZGV4IiwKICAgICAgImZyYWdtZW50YXRpdmVfaW5kZXgiLAogICAgICAic2FsaWVuY2Vfd2VpZ2h0ZWRfY29oZXNpdmVfaW5kZXgiLAogICAgICAic2FsaWVuY2Vfd2VpZ2h0ZWRfZnJhZ21lbnRhdGl2ZV9pbmRleCIsCiAgICAgICJzdHJhdGVnaWNfY29udHJhZGljdGlvbl9pbmRleCIsCiAgICAgICJvdmVyYWxsX2NvaGVzaW9uX2luZGV4IgogICAgXSwKICAgICJmb3JtdWxhcyI6IHsKICAgICAgImlkZW50aXR5X3RlbnNpb24iOiAibWluKHRyaWJhbF9kb21pbmFuY2Vfc2NvcmUsIGluZGl2aWR1YWxfZGlnbml0eV9zY29yZSkgKiBhYnModHJpYmFsX2RvbWluYW5jZV9zYWxpZW5jZSAtIGluZGl2aWR1YWxfZGlnbml0eV9zYWxpZW5jZSkiLAogICAgICAiZW1vdGlvbmFsX3RlbnNpb24iOiAibWluKGZlYXJfc2NvcmUsIGhvcGVfc2NvcmUpICogYWJzKGZlYXJfc2FsaWVuY2UgLSBob3BlX3NhbGllbmNlKSIsCiAgICAgICJzdWNjZXNzX3RlbnNpb24iOiAibWluKGVudnlfc2NvcmUsIGNvbXBlcnNpb25fc2NvcmUpICogYWJzKGVudnlfc2FsaWVuY2UgLSBjb21wZXJzaW9uX3NhbGllbmNlKSIsCiAgICAgICJyZWxhdGlvbmFsX3RlbnNpb24iOiAibWluKGVubWl0eV9zY29yZSwgYW1pdHlfc2NvcmUpICogYWJzKGVubWl0eV9zYWxpZW5jZSAtIGFtaXR5X3NhbGllbmNlKSIsCiAgICAgICJnb2FsX3RlbnNpb24iOiAibWluKGZyYWdtZW50YXRpdmVfZ29hbHNfc2NvcmUsIGNvaGVzaXZlX2dvYWxzX3Njb3JlKSAqIGFicyhmcmFnbWVudGF0aXZlX2dvYWxzX3NhbGllbmNlIC0gY29oZXNpdmVfZ29hbHNfc2FsaWVuY2UpIiwKICAgICAgInN0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4IjogIihpZGVudGl0eV90ZW5zaW9uICsgZW1vdGlvbmFsX3RlbnNpb24gKyBzdWNjZXNzX3RlbnNpb24gKyByZWxhdGlvbmFsX3RlbnNpb24gKyBnb2FsX3RlbnNpb24pIC8gNSIsCiAgICAgICJjb2hlc2l2ZV9pbmRleCI6ICIoaW5kaXZpZHVhbF9kaWduaXR5X3Njb3JlICsgaG9wZV9zY29yZSArIGNvbXBlcnNpb25fc2NvcmUgKyBhbWl0eV9zY29yZSArIGNvaGVzaXZlX2dvYWxzX3Njb3JlKSAvIDUiLAogICAgICAiZnJhZ21lbnRhdGl2ZV9pbmRleCI6ICIodHJpYmFsX2RvbWluYW5jZV9zY29yZSArIGZlYXJfc2NvcmUgKyBlbnZ5X3Njb3JlICsgZW5taXR5X3Njb3JlICsgZnJhZ21lbnRhdGl2ZV9nb2Fsc19zY29yZSkgLyA1IiwKICAgICAgIm92ZXJhbGxfY29oZXNpb25faW5kZXgiOiAiY29oZXNpdmVfaW5kZXggLSBmcmFnbWVudGF0aXZlX2luZGV4IiwKICAgICAgInNhbGllbmNlX3dlaWdodGVkX2NvaGVzaXZlX2luZGV4IjogIihpbmRpdmlkdWFsX2RpZ25pdHlfc2NvcmUgKiBpbmRpdmlkdWFsX2RpZ25pdHlfc2FsaWVuY2UgKyBob3BlX3Njb3JlICogaG9wZV9zYWxpZW5jZSArIGNvbXBlcnNpb25fc2NvcmUgKiBjb21wZXJzaW9uX3NhbGllbmNlICsgYW1pdHlfc2NvcmUgKiBhbWl0eV9zYWxpZW5jZSArIGNvaGVzaXZlX2dvYWxzX3Njb3JlICogY29oZXNpdmVfZ29hbHNfc2FsaWVuY2UpIC8gKGluZGl2aWR1YWxfZGlnbml0eV9zYWxpZW5jZSArIGhvcGVfc2FsaWVuY2UgKyBjb21wZXJzaW9uX3NhbGllbmNlICsgYW1pdHlfc2FsaWVuY2UgKyBjb2hlc2l2ZV9nb2Fsc19zYWxpZW5jZSkiLAogICAgICAic2FsaWVuY2Vfd2VpZ2h0ZWRfZnJhZ21lbnRhdGl2ZV9pbmRleCI6ICIodHJpYmFsX2RvbWluYW5jZV9zY29yZSAqIHRyaWJhbF9kb21pbmFuY2Vfc2FsaWVuY2UgKyBmZWFyX3Njb3JlICogZmVhcl9zYWxpZW5jZSArIGVudnlfc2NvcmUgKiBlbnZ5X3NhbGllbmNlICsgZW5taXR5X3Njb3JlICogZW5taXR5X3NhbGllbmNlICsgZnJhZ21lbnRhdGl2ZV9nb2Fsc19zY29yZSAqIGZyYWdtZW50YXRpdmVfZ29hbHNfc2FsaWVuY2UpIC8gKHRyaWJhbF9kb21pbmFuY2Vfc2FsaWVuY2UgKyBmZWFyX3NhbGllbmNlICsgZW52eV9zYWxpZW5jZSArIGVubWl0eV9zYWxpZW5jZSArIGZyYWdtZW50YXRpdmVfZ29hbHNfc2FsaWVuY2UpIgogICAgfSwKICAgICJwYXR0ZXJuX2NsYXNzaWZpY2F0aW9ucyI6IHsKICAgICAgInNvY2lhbF9jb2hlc2lvbl9wcm9maWxlIjogewogICAgICAgICJoaWdobHlfY29oZXNpdmVfZGlzY291cnNlIjogeyJ0aHJlc2hvbGQiOiAiPj0wLjc1IiwgImRlc2NyaXB0aW9uIjogIlN0cm9uZyBzb2NpYWwgYm9uZGluZyB3aXRoIG1pbmltYWwgZnJhZ21lbnRhdGl2ZSBlbGVtZW50cyJ9LAogICAgICAgICJtaXhlZF9jb2hlc2lvbl9pbXBhY3QiOiB7InRocmVzaG9sZCI6ICIwLjUwLTAuNzQiLCAiZGVzY3JpcHRpb24iOiAiQmFsYW5jZSBvZiBjb2hlc2l2ZSBhbmQgZnJhZ21lbnRhdGl2ZSBlbGVtZW50cyB3aXRoIHN0cmF0ZWdpYyB0ZW5zaW9ucyJ9LAogICAgICAgICJmcmFnbWVudGF0aXZlX2Rpc2NvdXJzZSI6IHsidGhyZXNob2xkIjogIjAuMjUtMC40OSIsICJkZXNjcmlwdGlvbiI6ICJQcmVkb21pbmFudGx5IGRpdmlzaXZlIHdpdGggbGltaXRlZCBjb2hlc2l2ZSBlbGVtZW50cyJ9LAogICAgICAgICJoaWdobHlfZnJhZ21lbnRhdGl2ZV9kaXNjb3Vyc2UiOiB7InRocmVzaG9sZCI6ICI8MC4yNSIsICJkZXNjcmlwdGlvbiI6ICJTeXN0ZW1hdGljIHNvY2lhbCBkaXZpc2lvbiB3aXRoIG1pbmltYWwgYm9uZGluZyBlbGVtZW50cyJ9CiAgICAgIH0sCiAgICAgICJzdHJhdGVnaWNfcGF0dGVybnMiOiB7CiAgICAgICAgImNvaGVyZW50X2NvaGVzaXZlX3N0cmF0ZWd5IjogeyJjb25kaXRpb24iOiAiY29oZXNpdmVfaW5kZXggPiAwLjcgQU5EIHN0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4IDwgMC4zIiwgImRlc2NyaXB0aW9uIjogIkNvbnNpc3RlbnQgc29jaWFsIGJvbmRpbmcgYXBwcm9hY2gifSwKICAgICAgICAiY29oZXJlbnRfZnJhZ21lbnRhdGl2ZV9zdHJhdGVneSI6IHsiY29uZGl0aW9uIjogImZyYWdtZW50YXRpdmVfaW5kZXggPiAwLjcgQU5EIHN0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4IDwgMC4zIiwgImRlc2NyaXB0aW9uIjogIkNvbnNpc3RlbnQgZGl2aXNpdmUgYXBwcm9hY2gifSwKICAgICAgICAic3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb24iOiB7ImNvbmRpdGlvbiI6ICJzdHJhdGVnaWNfY29udHJhZGljdGlvbl9pbmRleCA+IDAuNSIsICJkZXNjcmlwdGlvbiI6ICJEZWxpYmVyYXRlIGRlcGxveW1lbnQgb2Ygb3Bwb3NpbmcgYXBwZWFscyBmb3IgY29tcGxleCByaGV0b3JpY2FsIGVmZmVjdHMifSwKICAgICAgICAicmhldG9yaWNhbF9pbmNvaGVyZW5jZSI6IHsiY29uZGl0aW9uIjogImRpbWVuc2lvbl92YXJpYW5jZSA+IDAuNCBBTkQgc3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXggPiAwLjUiLCAiZGVzY3JpcHRpb24iOiAiSW5jb25zaXN0ZW50IG1lc3NhZ2luZyBhY3Jvc3MgZGltZW5zaW9ucyJ9CiAgICAgIH0KICAgIH0KICB9LAogICJyZXBvcnRpbmdfbWV0YWRhdGEiOiB7CiAgICAiZnJhbWV3b3JrX3N1bW1hcnkiOiAiQ29tcHJlaGVuc2l2ZSBhc3Nlc3NtZW50IG9mIHNvY2lhbCBjb2hlc2lvbiBhbmQgZGVtb2NyYXRpYyByZXNpbGllbmNlIHRocm91Z2ggZGlzY291cnNlIGFuYWx5c2lzIiwKICAgICJwcmltYXJ5X2RpbWVuc2lvbnMiOiBbInRyaWJhbF9kb21pbmFuY2UiLCAiaW5kaXZpZHVhbF9kaWduaXR5IiwgImZlYXIiLCAiaG9wZSIsICJlbnZ5IiwgImNvbXBlcnNpb24iLCAiZW5taXR5IiwgImFtaXR5IiwgImZyYWdtZW50YXRpdmVfZ29hbHMiLCAiY29oZXNpdmVfZ29hbHMiXSwKICAgICJrZXlfbWV0cmljcyI6IFsic3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXgiLCAib3ZlcmFsbF9jb2hlc2lvbl9pbmRleCIsICJjb2hlc2l2ZV9pbmRleCIsICJmcmFnbWVudGF0aXZlX2luZGV4Il0sCiAgICAiYmlhc19jb25zaWRlcmF0aW9ucyI6ICJGcmFtZXdvcmsgZGV2ZWxvcGVkIHdpdGhpbiBXZXN0ZXJuIGRlbW9jcmF0aWMgY29udGV4dDsgcmVxdWlyZXMgY3Jvc3MtY3VsdHVyYWwgdmFsaWRhdGlvbiBhbmQgaWRlb2xvZ2ljYWwgYmFsYW5jZSIsCiAgICAicmVsaWFiaWxpdHlfbm90ZXMiOiAiRGVzaWduZWQgZm9yIGhpZ2ggaW50ZXItcmF0ZXIgY29uc2lzdGVuY3kgdGhyb3VnaCBzZXF1ZW50aWFsIGFuYWx5c2lzIGFuZCBleHBsaWNpdCB0ZW5zaW9uIHF1YW50aWZpY2F0aW9uIgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJyYXdfYW5hbHlzaXNfbG9nX3N0cnVjdHVyZSI6IHsKICAgICAgInN0ZXBfMV9pZGVudGl0eSI6ICJUcmliYWwgZG9taW5hbmNlIHZzLiBpbmRpdmlkdWFsIGRpZ25pdHkgYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLAogICAgICAic3RlcF8yX2Vtb3Rpb25hbCI6ICJGZWFyIHZzLiBob3BlIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwgCiAgICAgICJzdGVwXzNfc3VjY2VzcyI6ICJFbnZ5IHZzLiBjb21wZXJzaW9uIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwKICAgICAgInN0ZXBfNF9yZWxhdGlvbmFsIjogIkVubWl0eSB2cy4gYW1pdHkgYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLAogICAgICAic3RlcF81X2dvYWxzIjogIkZyYWdtZW50YXRpdmUgdnMuIGNvaGVzaXZlIGdvYWxzIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwKICAgICAgImZpbmFsX2ludGVncmF0aW9uIjogIkNhbGN1bGF0ZWQgdGVuc2lvbiBzY29yZXMsIHN0cmF0ZWdpYyBjb250cmFkaWN0aW9uIGluZGV4LCBhbmQgc29jaWFsIGNvaGVzaW9uIGFzc2Vzc21lbnQiCiAgICB9LAogICAgImluc3RydWN0aW9ucyI6ICJGb2xsb3cgdGhlIHNlcXVlbnRpYWwgYW5hbHlzaXMgZm9ybWF0IGV4YWN0bHkuIEVhY2ggc3RlcCBtdXN0IGluY2x1ZGUgc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZSwgbnVtZXJpY2FsIHNjb3JlcyAoMC4wLTEuMCksIHNhbGllbmNlIGFzc2Vzc21lbnQsIGFuZCBjb25maWRlbmNlIHJhdGluZy4gRmluYWwgaW50ZWdyYXRpb24gbXVzdCBjYWxjdWxhdGUgYWxsIHRlbnNpb24gc2NvcmVzIGFuZCBhcHBseSBwYXR0ZXJuIGNsYXNzaWZpY2F0aW9ucy4iCiAgfSwKICAicmVsaWFiaWxpdHlfcnVicmljIjogewogICAgImNyb25iYWNoc19hbHBoYSI6IHsKICAgICAgImV4Y2VsbGVudCI6IFswLjgwLCAxLjBdLAogICAgICAiZ29vZCI6IFswLjcwLCAwLjc5XSwKICAgICAgImFjY2VwdGFibGUiOiBbMC42MCwgMC42OV0sCiAgICAgICJwb29yIjogWzAuMCwgMC41OV0KICAgIH0sCiAgICAibm90ZXMiOiAiRGVmaW5lcyBxdWFsaXR5IHRocmVzaG9sZHMgZm9yIGZyYW1ld29yayByZWxpYWJpbGl0eS4gVGhlIFN5bnRoZXNpcyBBZ2VudCB1c2VzIHRoaXMgZm9yIGF1dG9tYXRlZCBmaXQgYXNzZXNzbWVudC4iCiAgfSwKICAiZ2Fza2V0X3NjaGVtYSI6IHsKICAgICJ2ZXJzaW9uIjogInY3LjMiLAogICAgImV4dHJhY3Rpb25fbWV0aG9kIjogImludGVsbGlnZW50X2V4dHJhY3RvciIsCiAgICAidGFyZ2V0X2tleXMiOiBbCiAgICAgICJ0cmliYWxfZG9taW5hbmNlX3Njb3JlIiwgImluZGl2aWR1YWxfZGlnbml0eV9zY29yZSIsICJ0cmliYWxfZG9taW5hbmNlX3NhbGllbmNlIiwgImluZGl2aWR1YWxfZGlnbml0eV9zYWxpZW5jZSIsICJ0cmliYWxfZG9taW5hbmNlX2NvbmZpZGVuY2UiLCAiaW5kaXZpZHVhbF9kaWduaXR5X2NvbmZpZGVuY2UiLAogICAgICAiZmVhcl9zY29yZSIsICJob3BlX3Njb3JlIiwgImZlYXJfc2FsaWVuY2UiLCAiaG9wZV9zYWxpZW5jZSIsICJmZWFyX2NvbmZpZGVuY2UiLCAiaG9wZV9jb25maWRlbmNlIiwKICAgICAgImVudnlfc2NvcmUiLCAiY29tcGVyc2lvbl9zY29yZSIsICJlbnZ5X3NhbGllbmNlIiwgImNvbXBlcnNpb25fc2FsaWVuY2UiLCAiZW52eV9jb25maWRlbmNlIiwgImNvbXBlcnNpb25fY29uZmlkZW5jZSIsCiAgICAgICJlbm1pdHlfc2NvcmUiLCAiYW1pdHlfc2NvcmUiLCAiZW5taXR5X3NhbGllbmNlIiwgImFtaXR5X3NhbGllbmNlIiwgImVubWl0eV9jb25maWRlbmNlIiwgImFtaXR5X2NvbmZpZGVuY2UiLAogICAgICAiZnJhZ21lbnRhdGl2ZV9nb2Fsc19zY29yZSIsICJjb2hlc2l2ZV9nb2Fsc19zY29yZSIsICJmcmFnbWVudGF0aXZlX2dvYWxzX3NhbGllbmNlIiwgImNvaGVzaXZlX2dvYWxzX3NhbGllbmNlIiwgImZyYWdtZW50YXRpdmVfZ29hbHNfY29uZmlkZW5jZSIsICJjb2hlc2l2ZV9nb2Fsc19jb25maWRlbmNlIgogICAgXSwKICAgICJleHRyYWN0aW9uX3BhdHRlcm5zIjogewogICAgICAidHJpYmFsX2RvbWluYW5jZV9zY29yZSI6IFsidHJpYmFsLnswLDIwfWRvbWluYW5jZS57MCwyMH1zY29yZS57MCwyMH0oWzAtOV1cXC5bMC05XSkiLCAidHJpYmFsLnswLDIwfWRvbWluYW5jZS57MCwyMH0oWzAtOV1cXC5bMC05XSkiLCAiZG9taW5hbmNlXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJpbmRpdmlkdWFsX2RpZ25pdHlfc2NvcmUiOiBbImluZGl2aWR1YWwuezAsMjB9ZGlnbml0eS57MCwyMH1zY29yZS57MCwyMH0oWzAtOV1cXC5bMC05XSkiLCAiaW5kaXZpZHVhbC57MCwyMH1kaWduaXR5LnswLDIwfShbMC05XVxcLlswLTldKSIsICJkaWduaXR5XFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJmZWFyX3Njb3JlIjogWyJmZWFyLnswLDIwfXNjb3JlLnswLDIwfShbMC05XVxcLlswLTldKSIsICJmZWFyLnswLDIwfShbMC05XVxcLlswLTldKSIsICJmZWFyXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJob3BlX3Njb3JlIjogWyJob3BlLnswLDIwfXNjb3JlLnswLDIwfShbMC05XVxcLlswLTldKSIsICJob3BlLnswLDIwfShbMC05XVxcLlswLTldKSIsICJob3BlXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJlbnZ5X3Njb3JlIjogWyJlbnZ5LnswLDIwfXNjb3JlLnswLDIwfShbMC05XVxcLlswLTldKSIsICJlbnZ5LnswLDIwfShbMC05XVxcLlswLTldKSIsICJlbnZ5XFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJjb21wZXJzaW9uX3Njb3JlIjogWyJjb21wZXJzaW9uLnswLDIwfXNjb3JlLnswLDIwfShbMC05XVxcLlswLTldKSIsICJjb21wZXJzaW9uLnswLDIwfShbMC05XVxcLlswLTldKSIsICJjb21wZXJzaW9uXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJlbm1pdHlfc2NvcmUiOiBbImVubWl0eS57MCwyMH1zY29yZS57MCwyMH0oWzAtOV1cXC5bMC05XSkiLCAiZW5taXR5LnswLDIwfShbMC05XVxcLlswLTldKSIsICJlbm1pdHlcXHMqOlxccyooWzAtOV1cXC5bMC05XSkiXSwKICAgICAgImFtaXR5X3Njb3JlIjogWyJhbWl0eS57MCwyMH1zY29yZS57MCwyMH0oWzAtOV1cXC5bMC05XSkiLCAiYW1pdHkuezAsMjB9KFswLTldXFwuWzAtOV0pIiwgImFtaXR5XFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJmcmFnbWVudGF0aXZlX2dvYWxzX3Njb3JlIjogWyJmcmFnbWVudGF0aXZlLnswLDIwfWdvYWxzLnswLDIwfXNjb3JlLnswLDIwfShbMC05XVxcLlswLTldKSIsICJmcmFnbWVudGF0aXZlLnswLDIwfWdvYWxzLnswLDIwfShbMC05XVxcLlswLTldKSIsICJmcmFnbWVudGF0aXZlX2dvYWxzXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJjb2hlc2l2ZV9nb2Fsc19zY29yZSI6IFsiY29oZXNpdmUuezAsMjB9Z29hbHMuezAsMjB9c2NvcmUuezAsMjB9KFswLTldXFwuWzAtOV0pIiwgImNvaGVzaXZlLnswLDIwfWdvYWxzLnswLDIwfShbMC05XVxcLlswLTldKSIsICJjb2hlc2l2ZV9nb2Fsc1xccyo6XFxzKihbMC05XVxcLlswLTldKSJdCiAgICB9LAogICAgInZhbGlkYXRpb25fcnVsZXMiOiB7CiAgICAgICJyZXF1aXJlZF9maWVsZHMiOiBbCiAgICAgICAgInRyaWJhbF9kb21pbmFuY2Vfc2NvcmUiLCAiaW5kaXZpZHVhbF9kaWduaXR5X3Njb3JlIiwgImZlYXJfc2NvcmUiLCAiaG9wZV9zY29yZSIsICJlbnZ5X3Njb3JlIiwgImNvbXBlcnNpb25fc2NvcmUiLCAiZW5taXR5X3Njb3JlIiwgImFtaXR5X3Njb3JlIiwgImZyYWdtZW50YXRpdmVfZ29hbHNfc2NvcmUiLCAiY29oZXNpdmVfZ29hbHNfc2NvcmUiCiAgICAgIF0sCiAgICAgICJzY29yZV9yYW5nZXMiOiB7Im1pbiI6IDAuMCwgIm1heCI6IDEuMH0sCiAgICAgICJtZXRhZGF0YV9yYW5nZXMiOiB7CiAgICAgICAgInNhbGllbmNlIjogeyJtaW4iOiAwLjAsICJtYXgiOiAxLjB9LAogICAgICAgICJjb25maWRlbmNlIjogeyJtaW4iOiAwLjAsICJtYXgiOiAxLjB9CiAgICAgIH0sCiAgICAgICJmYWxsYmFja19zdHJhdGVneSI6ICJ1c2VfZGVmYXVsdF92YWx1ZXMiCiAgICB9CiAgfQp9CmBgYAoKPC9kZXRhaWxzPg==\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: bernie_sanders_2025_fighting_oligarchy.txt\nHash: 9795fe30035d...\nVGhlIEFtZXJpY2FuIHBlb3BsZSBhcmUgb3V0cmFnZWQgYXQgd2hhdCdzIGdvaW5nIG9uLCBhbmQgdGhlIEFtZXJpY2FuIHBlb3BsZSBhcmUgc2F5aW5nIGxvdWQgYW5kIGNsZWFyLCAiV2Ugd2lsbCBub3QgYWNjZXB0IGFuIG9saWdhcmNoaWMgZm9ybSBvZiBzb2NpZXR5LiBXZSB3aWxsIG5vdCBhY2NlcHQgdGhlIHJpY2hlc3QgZ3V5IGluIHRoZSB3b3JsZCBydW5uaW5nIGFsbCBvdmVyIFdhc2hpbmd0b24sIG1ha2luZyBjdXRzIHRvIHRoZSBTb2NpYWwgU2VjdXJpdHkgQWRtaW5pc3RyYXRpb24sIGN1dHMgdG8gdGhlIFZldGVyYW5zIEFkbWluaXN0cmF0aW9uLCBhbG1vc3QgZGVzdHJveWluZyB0aGUgRGVwYXJ0bWVudCBvZiBFZHVjYXRpb24sIGFsbCBzbyB0aGF0IHRoZXkgY291bGQgZ2l2ZSBvdmVyIGEgdHJpbGxpb24gZG9sbGFycyBpbiB0YXggYnJlYWtzIHRvIHRoZSB3ZWFsdGhpZXN0IDElLiIKVG9kYXkgeW91IGhhdmUgbW9yZSBjb25jZW50cmF0aW9uIG9mIG93bmVyc2hpcCBpbiBBbWVyaWNhIHRoYW4gd2UgaGF2ZSBldmVyIGhhZCBpbiB0aGUgaGlzdG9yeSBvZiB0aGlzIGNvdW50cnkgaW4gc2VjdG9yIGFmdGVyIHNlY3Rvciwgd2hldGhlciBpdCBpcyBhZ3JpY3VsdHVyZSwgdHJhbnNwb3J0YXRpb24sIG1lZGlhLCBmaW5hbmNpYWwgc2VydmljZXMsIHdoYXQgeW91IGhhdmUgaXMgYSBzbWFsbCBudW1iZXIgb2YgZXh0cmFvcmRpbmFyaWx5IGxhcmdlIGNvcnBvcmF0aW9ucyB3aG8gY2hhcmdlIHVzIG91dHJhZ2VvdXMgcHJpY2VzIGZvciB0aGUgcHJvZHVjdHMgdGhhdCB3ZSBoYXZlIHRvIGJ1eS4KVG9kYXkgeW91J3ZlIGdvdCB0aHJlZSBXYWxsIFN0cmVldCBmaXJtcywgQmxhY2tSb2NrLCBWYW5ndWFyZCwgYW5kIFN0YXRlIFN0cmVldC4gQ29tYmluZWQsIHRoZXNlIHRocmVlIGludmVzdG1lbnQgZmlybXMgYXJlIHRoZSBtYWpvcml0eSBzdG9ja2hvbGRlcnMgaW4gOTUlIG9mIEFtZXJpY2FuIGNvcnBvcmF0aW9ucy4gVGhlc2UgZ3V5cywgSSB3YW50IHRvIHRlbGwgeW91IHNvbWV0aGluZyBiZWNhdXNlIEkgYnVtcCBpbnRvIHRoZW0gaW4gbXkgbGluZSBvZiB3b3JrLCB0aGV5IGFyZSBub3QgbmljZSBndXlzLiBJIGtub3cgb24gVFYgdGhleSBjb21lIGFjcm9zcy4uLiBBbmQgaW4geW91ciBjb21tdW5pdHksIHRoZXkgbWFrZSBhIGRvbmF0aW9uIHRvIHRoZSBob3NwaXRhbCBvciB0aGUgQm95cyAmIEdpcmxzIENsdWJzIG9yIHRoZSBmb29kIHNoZWxmLiBUaGV5J3JlIGp1c3QgdmVyeSBuaWNlLiBCdXQgdGhleSdyZSBub3QuCkluIEFtZXJpY2EgdG9kYXksIGFzIEkgdGhpbmsgYWxsIG9mIHlvdSBrbm93LCBzYWRseSBhbmQgdHJhZ2ljYWxseSwgYW5kIHdlJ3ZlIGdvdCB0byBkZWFsIHdpdGggaXQsIHdlIGhhdmUgbWFqb3IgZXBpZGVtaWNzIGRlYWxpbmcgd2l0aCBhZGRpY3Rpb24uIEkgdGhpbmsgd2UgbG9zdCBhIGh1bmRyZWQgdGhvdXNhbmQgQW1lcmljYW5zIGxhc3QgeWVhciBiZWNhdXNlIG9mIGRydWcgb3ZlcmRvc2UuIEl0J3MgYSBzZXJpb3VzIHByb2JsZW0gaW4gbXkgc3RhdGUuIFdlIGhhdmUgcGVvcGxlIGFkZGljdGVkIHRvIGFsY29ob2wsIHNlcmlvdXMgcHJvYmxlbXMgd2l0aCBhbGNvaG9saXNtLiBXZSBoYXZlIHBlb3BsZSB3aG8gd2VyZSBhZGRpY3RlZCB0byB0b2JhY2NvLiBNeSBmYXRoZXIgc21va2VkIHR3byBwYWNrcyBvZiBjaWdhcmV0dGVzIGEgZGF5IGFuZCBoZSBkaWVkIGJlZm9yZSBoZSB3YXMgNjAuIFBlb3BsZSBhZGRpY3RlZCB0byBmb29kLiBCdXQgSSB3aWxsIHRlbGwgeW91IHRoaXMsIGluIHRoZSBtaWRzdCBvZiBhbGwgb2YgdGhlc2UgYWRkaWN0aW9ucywgdGhlIHdvcnN0IGFuZCBtb3N0IGRhbmdlcm91cyBhZGRpY3Rpb24gd2UgaGF2ZSBpcyB0aGUgZ3JlZWQgb2YgdGhlIG9saWdhcmNocy4KTm93IGV2ZXJ5Ym9keSB3YW50cyB0byBkbyB3ZWxsIGluIGxpZmUuIEV2ZXJ5Ym9keSB3YW50cyB0byBtYWtlIG1vbmV5LiBCdXQgeW91IHdvdWxkIHRoaW5rIHRoYXQgaWYgeW91IGhhZCBhIGZldyBiaWxsaW9uIGRvbGxhcnMgb3IgJDEwIG9yICQyMCBiaWxsaW9uLCB5b3Ugd291bGQgbm90IGZlZWwgb2JsaWdlZCB0byBzdGVwIG9uIHRoZSBiYWNrcyBvZiBwb29yIHBlb3BsZSB0byBiZWNvbWUgZXZlbiByaWNoZXIuIEJ1dCB0aGF0IGlzIGV4YWN0bHkgd2hhdCB0aGV5IGFyZSBkb2luZyByaWdodCBub3cuIFRoZXkgYXJlIHByZXBhcmVkIHRvIGRlc3Ryb3kgU29jaWFsIFNlY3VyaXR5LCBNZWRpY2FpZCwgTWVkaWNhcmUsIHRoZSBWZXRlcmFucyBBZG1pbmlzdHJhdGlvbiBpbiBvcmRlciB0byBtYWtlIHRoZW1zZWx2ZXMgZXZlbiByaWNoZXIuClRoZXNlIGd1eXMgaGF2ZSBubyBzZW5zZSBvZiB3aGF0IGdvZXMgb24gaW4gdGhlIHJlYWwgd29ybGQuIFRoZXkgbGl2ZSBpbiBhbm90aGVyIHBsYW5ldC4gVGhleSBvd24gbWFuc2lvbnMgYWxsIG92ZXIgdGhlIHdvcmxkLiBUaGV5IGdvIG9uIHZhY2F0aW9ucyB0byB0aGVpciBvd24gcHJpdmF0ZSBpc2xhbmRzLiBXaGVuIHRoZXkgd2FudCB0byBnbyBzb21lcGxhY2UsIHRoZXkgZG9uJ3QgZ28gaW50byB0aGVpciBjYXIuIFRoZXkgZ28gaW50byB0aGUgcGxhbmVzIG9yIHRoZSBoZWxpY29wdGVycyB0aGF0IHRoZXkgb3duLiBTZW5kIHRoZWlyIGtpZHMgdG8gdGhlIGJlc3QgcHJpdmF0ZSBzY2hvb2xzIGFuZCBjb2xsZWdlcy4gVGhhdCBpcyB0aGVpciB3b3JsZC4KQWJyYWhhbSBMaW5jb2xuIHRhbGtlZCBhYm91dCBhIGdvdmVybm1lbnQgb2YgdGhlIHBlb3BsZSwgYnkgdGhlIHBlb3BsZSwgZm9yIHRoZSBwZW9wbGUuIFdlbGwsIFRydW1wIGhhcyBhIGdvdmVybm1lbnQgb2YgdGhlIGJpbGxpb25haXJlcywgYnkgdGhlIGJpbGxpb25haXJlcywgYW5kIGZvciB0aGUgYmlsbGlvbmFpcmVzLgpBbmQgd2hhdCB0aGVzZSBndXlzIGFyZSBidXN5IGRvaW5nIHJpZ2h0IG5vdyBpcyBnb2luZyBhZnRlciBNZWRpY2FpZCwgZ29pbmcgYWZ0ZXIgU29jaWFsIFNlY3VyaXR5LCBnb2luZyBhZnRlciBudXRyaXRpb24uIFRoZSByaWNoIHdhbnQgdG8gZ2V0IHJpY2hlciBhbmQgdGhleSBkb24ndCBjYXJlIHdobyB0aGV5IHN0ZXAgb24uCllvdSBrbm93IHdoeSB0aGUgQW1lcmljYW4gcGVvcGxlIGFyZSBhbmdyeSBhbmQgdGhleSBhcmUgYW5ncnkgYWxsIG92ZXIgdGhpcyBjb3VudHJ5PyBUaGV5IGFyZSBhbmdyeSBiZWNhdXNlLCBiZWxpZXZlIGl0IG9yIG5vdCwgZGVzcGl0ZSBhIGh1Z2UgaW5jcmVhc2UgaW4gd29ya2VyIHByb2R1Y3Rpdml0eSBvdmVyIHRoZSBsYXN0IDUyIHllYXJzLCBpZiB5b3UgY291bGQgYmVsaWV2ZSBpdCwgcmVhbCBpbmZsYXRpb24gYWNjb3VudGVkIGZvciB3YWdlcyB0b2RheSBhcmUgbG93ZXIgdGhhbiB0aGV5IHdlcmUgNTIgeWVhcnMgYWdvLiBNZWFud2hpbGUsIHRoZXJlIGhhcyBiZWVuIGEgJDc1IHRyaWxsaW9uIHRyYW5zZmVyIG9mIHdlYWx0aCBmcm9tIHRoZSBib3R0b20gOTAlIHRvIHRoZSB0b3AgMSUuIFRoYXQgaXMgd2hhdCBhIHJpZ2dlZCBlY29ub215IGlzIGFib3V0LCBhbmQgdGhhdCBpcyB3aGF0IHdlIGFyZSBnb2luZyB0byBjaGFuZ2UuCllvdSBnb3QgYSBQcmVzaWRlbnQgVHJ1bXAgZ2V0dGluZyBpbmF1Z3VyYXRlZC4gQW5kIEkgbXVzdCB0ZWxsIHlvdSBvbmUgb2YgdGhlIG1vcmUgYml6YXJyZSBleHBlcmllbmNlcyBvZiBteSBsaWZlIHdhcyBJIHdhcyBraW5kIG9mIHB1c2hlZCBpbnRvIHRoZSBmcm9udCByb3cgb2YgdGhhdC4gQW5kIHRoZXJlIEkgYW0sIHRoZXJlJ3MgVHJ1bXAsIGFuZCByaWdodCBiZWhpbmQgaGltLCB5b3UgZ290IE11c2ssIEJlem9zLCBhbmQgWnVja2VyYmVyZywgdGhyZWUgd2VhbHRoaWVzdCBndXlzIGluIHRoZSBjb3VudHJ5LiBBbmQgdGhlbiBiZWhpbmQgdGhlbSwgeW91IGdvdCAxMyBvdGhlciBiaWxsaW9uYWlyZXMgd2hvIFRydW1wIG5vbWluYXRlZCB0byBoZWFkIHVwIHZhcmlvdXMgZ292ZXJubWVudCBhZ2VuY2llcy4KSSBkb24ndCBjYXJlIGlmIHlvdSBhcmUgYSBSZXB1YmxpY2FuLCBEZW1vY3JhdCwgb3IgaW5kZXBlbmRlbnQsIEkgZG9uJ3QgdGhpbmsgdGhlcmUncyBhbnlib2R5IHdobyB0aGlua3MgaXQgdmFndWVseSBtYWtlcyBzZW5zZSB0aGF0IHRoZSByaWNoZXN0IGd1eSBpbiB0aGUgd29ybGQgY291bGQgc3BlbmQgJDI3MCBtaWxsaW9uIHRvIGdldCBUcnVtcCBlbGVjdGVkIGFuZCB0aGVuIGJlY29tZSB0aGUgbW9zdCBwb3dlcmZ1bCBwZXJzb24gaW4gdGhlIGdvdmVybm1lbnQuIFRoYXQncyBub3QganVzdCBSZXB1YmxpY2Fucy4gTGV0J3MgYmUgY2xlYXIuIEJpbGxpb25haXJlcyBhcmUgZnVuZGluZyB0aGUgRGVtb2NyYXRpYyBQYXJ0eSBhbmQgcHJldmVudGluZyB0aGF0IHBhcnR5IGZyb20gc3RhbmRpbmcgdXAgZm9yIHdvcmtpbmcgZmFtaWxpZXMuCkkgZG9uJ3QgaGF2ZSBhIFBoRCBpbiBtYXRoZW1hdGljcywgYnV0IEkgZG8ga25vdyB0aGlzLCB0aGF0IDk5JSBpcyBhIGhlbGwgb2YgYSBsb3QgbGFyZ2VyIG51bWJlciB0aGFuIDElLiBTbyBpZiB3ZSBzdGFuZCB0b2dldGhlciwgYXJlIHN0cm9uZywgYXJlIGRpc2NpcGxpbmVkLCBhcmUgc21hcnQsIEkgaGF2ZSBldmVyeSByZWFzb24gdG8gYmVsaWV2ZSBkZWVwbHkgaW4gbXkgaGVhcnQgdGhhdCBub3Qgb25seSB3aWxsIHdlIGRlZmVhdCBUcnVtcGlzbSwgYnV0IHdlIGNhbiBjcmVhdGUgdGhlIGtpbmQgb2YgbmF0aW9uIHRoYXQgd2UgZGVzZXJ2ZS4g\n\n\n---\n\nBegin analysis now for batch `batch_9debd01b2473`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"cohesive_flourishing_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis conducted by applying the Cohesive Flourishing Framework (CFF) v7.3 to the provided document. The analysis followed a step-by-step approach, focusing on identifying linguistic markers and semantic concepts related to each dimension as defined in the framework. Confidence levels reflect the clarity and directness of evidence found in the text.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"bernie_sanders_2025_fighting_oligarchy.txt\",\n      \"dimensional_scores\": {\n        \"tribal_dominance\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.9\n        },\n        \"individual_dignity\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"fear\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.5,\n          \"confidence\": 0.6\n        },\n        \"hope\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"envy\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"competition\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        },\n        \"enmity\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.6,\n          \"confidence\": 0.75\n        },\n        \"amity\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.3,\n          \"confidence\": 0.4\n        },\n        \"fragmentative_goals\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.9\n        },\n        \"cohesive_goals\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.4,\n          \"confidence\": 0.5\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"tribal_dominance\",\n          \"quote_text\": \"The American people are outraged at what's going on, and the American people are saying loud and clear, \\\"We will not accept an oligarchic form of society. We will not accept the richest guy in the world running all over Washington\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"tribal_dominance\",\n          \"quote_text\": \"You got a President Trump getting inaugurated. And I must tell you one of the more bizarre experiences of my life was I was kind of pushed into the front row of that.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"narrative_example\"\n        },\n        {\n          \"dimension\": \"individual_dignity\",\n          \"quote_text\": \"Now everybody wants to do well in life. Everybody wants to make money. But you would think that if you had a few billion dollars or $10 or $20 billion, you would not feel obliged to step on the backs of poor people to become even richer.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"rhetorical_question\"\n        },\n        {\n          \"dimension\": \"hope\",\n          \"quote_text\": \"So if we stand together, are strong, are disciplined, are smart, I have every reason to believe deeply in my heart that not only will we defeat Trumpism, but we can create the kind of nation that we deserve.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"declarative_statement\"\n        },\n        {\n          \"dimension\": \"envy\",\n          \"quote_text\": \"Today you have three Wall Street firms, BlackRock, Vanguard, and State Street. Combined, these three investment firms are the majority stockholders in 95% of American corporations. These guys, I want to tell you something because I bump into them in my line of work, they are not nice guys.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"critical_assessment\"\n        },\n        {\n          \"dimension\": \"competition\",\n          \"quote_text\": \"The rich want to get richer and they don't care who they step on.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"statement_of_intent\"\n        },\n        {\n          \"dimension\": \"enmity\",\n          \"quote_text\": \"They are prepared to destroy Social Security, Medicare, the Veterans Administration in order to make themselves even richer.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"accusation\"\n        },\n        {\n          \"dimension\": \"fragmentative_goals\",\n          \"quote_text\": \"They are prepared to destroy Social Security, Medicare, the Veterans Administration... all so that they could give over a trillion dollars in tax breaks to the wealthiest\",\n          \"confidence\": 0.9,\n          \"context_type\": \"description_of_actions\"\n        },\n        {\n          \"dimension\": \"cohesive_goals\",\n          \"quote_text\": \"So if we stand together, are strong, are disciplined, are smart, I have every reason to believe deeply in my heart that not only will we defeat Trumpism, but we can create the kind of nation that we deserve.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"aspirational_statement\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":53797,"response_length":5188,"metadata":{"batch_id":"batch_9debd01b2473","mathematical_validation":true,"tokens_input":365,"tokens_output":559},"session_id":"20250806T040021Z_05431ee3","timestamp":"2025-08-06T04:00:25.254661+00:00"}
{"log_type":"llm_interaction","interaction_hash":"5cae4a6b0a36bfc2","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_mccain_2008_concession.txt\nHash: 0639fa78ebb5...\\n\n\n---\n\nBegin analysis now for batch `batch_57bd907ff5eb`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"cohesive_flourishing_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis completed by following the sequential steps outlined in the framework. Focus was placed on identifying relevant semantic concepts and extracting strong textual evidence for each dimension.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_mccain_2008_concession.txt\",\n      \"dimensional_scores\": {\n        \"tribal_dominance\": {\n          \"raw_score\": 0.35,\n          \"salience\": 0.4,\n          \"confidence\": 0.8\n        },\n        \"individual_dignity\": {\n          \"raw_score\": 0.65,\n          \"salience\": 0.7,\n          \"confidence\": 0.9\n        },\n        \"fear\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.2,\n          \"confidence\": 0.7\n        },\n        \"hope\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"envy\": {\n          \"raw_score\": 0.15,\n          \"salience\": 0.3,\n          \"confidence\": 0.75\n        },\n        \"comprehension\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        },\n        \"enmity\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.2,\n          \"confidence\": 0.7\n        },\n        \"amity\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"fragmentative_goals\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.25,\n          \"confidence\": 0.7\n        },\n        \"cohesive_goals\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"individual_dignity\",\n          \"quote_text\": \"This is an historic election, and I recognize the special significance it has for African-Americans and for the special pride that must be theirs tonight.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"recognition of shared humanity\"\n        },\n        {\n          \"dimension\": \"individual_dignity\",\n          \"quote_text\": \"I've always believed that America offers opportunities to all who have the industry and will to seize it.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"universal worth and opportunity\"\n        },\n        {\n          \"dimension\": \"hope\",\n          \"quote_text\": \"But that he managed to do so by inspiring the hopes of so many millions of Americans who had once wrongly believed that they had little at stake or little influence in the election of an American president is something I deeply admire and commend him for achieving.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"optimistic vision of possibility\"\n        },\n        {\n          \"dimension\": \"hope\",\n          \"quote_text\": \"Senator Obama and I have had and argued our differences, and he has prevailed.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"acknowledgment of outcome with future orientation\"\n        },\n        {\n          \"dimension\": \"comprehension\",\n          \"quote_text\": \"Senator Obama and I have had and argued our differences, and he has prevailed. No doubt many of those differences remain.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"acknowledgment of differences and shared reality\"\n        },\n        {\n          \"dimension\": \"amity\",\n          \"quote_text\": \"Whatsoever our differences, we are fellow Americans, and please believe me when I say no association has ever meant more to me than that.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"fellowship and shared identity\"\n        },\n        {\n          \"dimension\": \"amity\",\n          \"quote_text\": \"I urge all Americans - I urge all Americans who supported me to join me in not just congratulating him, but offering our next president our good will and earnest effort to find ways to come together, to find the necessary compromises to bridge our differences and help restore our prosperity, defend our security in a dangerous world, and leave our children and grandchildren a stronger, better country than we inherited.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"cooperative intent and shared future\"\n        },\n        {\n          \"dimension\": \"cohesive_goals\",\n          \"quote_text\": \"I urge all Americans - I urge all Americans who supported me to join me in not just congratulating him, but offering our next president our good will and earnest effort to find ways to come together, to find the necessary compromises to bridge our differences and help restore our prosperity, defend our security in a dangerous world, and leave our children and grandchildren a stronger, better country than we inherited.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"integration of objectives for collective benefit\"\n        },\n        {\n          \"dimension\": \"cohesive_goals\",\n          \"quote_text\": \"Because nothing is inevitable here. Americans never quit. We never surrender. We never hide from history. We make history.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"shared resilience and collective action\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":56202,"response_length":5322,"metadata":{"batch_id":"batch_57bd907ff5eb","mathematical_validation":true,"tokens_input":365,"tokens_output":575},"session_id":"20250806T040021Z_05431ee3","timestamp":"2025-08-06T04:00:29.188939+00:00"}
