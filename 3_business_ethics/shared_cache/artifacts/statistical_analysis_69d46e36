{
  "batch_id": "stats_20250917T000001Z",
  "step": "statistical_execution",
  "model_used": "vertex_ai/gemini-2.5-pro",
  "statistical_functions_and_results": "```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nfrom typing import Dict, Any, List, Optional\\nimport json\\nimport re\\n\\ndef _create_dataframe(data: List[Dict[str, Any]]) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Parses raw analysis artifacts, calculates derived metrics, and creates a clean pandas DataFrame.\\n\\n    Args:\\n        data: A list of raw analysis artifact dictionaries.\\n\\n    Returns:\\n        A pandas DataFrame containing parsed scores and derived metrics, or None if parsing fails.\\n    \\\"\\\"\\\"\\n    records = []\\n    for artifact in data:\\n        if artifact.get('step') != 'score_extraction':\\n            continue\\n        \\n        # Extract JSON from the text block\\n        json_str_match = re.search(r'```json\\\\n(.+?)\\\\n```', artifact.get('scores_extraction', ''), re.DOTALL)\\n        if not json_str_match:\\n            continue\\n\\n        json_str = json_str_match.group(1)\\n        # Clean potential JSON errors\\n        json_str = json_str.replace('\\\"\\\"raw_score\\\"', '\\\"raw_score\\\"') # Fix typo\\n\\n        try:\\n            scores_data = json.loads(json_str)\\n        except json.JSONDecodeError:\\n            continue\\n\\n        for doc_filename, dimensions in scores_data.items():\\n            doc_id = doc_filename.replace('.txt', '')\\n            record = {'document_id': doc_id}\\n            record.update(dimensions)\\n            records.append(record)\\n\\n    if not records:\\n        return None\\n\\n    df = pd.json_normalize(records)\\n    df = df.set_index('document_id')\\n\\n    # Calculate derived metrics\\n    dims = {\\n        'cs': 'customer_service.raw_score',\\n        'ce': 'customer_exploitation.raw_score',\\n        'ed': 'employee_development.raw_score',\\n        'ee': 'employee_exploitation.raw_score',\\n        'ac': 'accountability.raw_score',\\n        'op': 'opacity.raw_score',\\n        'fr': 'financial_responsibility.raw_score',\\n        'fm': 'financial_manipulation.raw_score',\\n        'sp': 'sustainable_purpose.raw_score',\\n        'se': 'short_term_extraction.raw_score',\\n        'cs_s': 'customer_service.salience',\\n        'ce_s': 'customer_exploitation.salience',\\n        'ed_s': 'employee_development.salience',\\n        'ee_s': 'employee_exploitation.salience',\\n        'ac_s': 'accountability.salience',\\n        'op_s': 'opacity.salience',\\n        'fr_s': 'financial_responsibility.salience',\\n        'fm_s': 'financial_manipulation.salience',\\n        'sp_s': 'sustainable_purpose.salience',\\n        'se_s': 'short_term_extraction.salience',\\n    }\\n    \\n    for key, val in dims.items():\\n        if val not in df.columns:\\n            df[val] = 0.0 # Ensure all columns exist\\n    \\n    df['stakeholder_focus_index'] = ((df[dims['cs']] + df[dims['ed']]) / 2) - ((df[dims['ce']] + df[dims['ee']]) / 2)\\n    df['operational_ethics_index'] = ((df[dims['ac']] + df[dims['fr']]) / 2) - ((df[dims['op']] + df[dims['fm']]) / 2)\\n    df['strategic_ethics_index'] = (df[dims['sp']] - df[dims['se']] + 1) / 2\\n\\n    swsf_num = (df[dims['cs']] * df[dims['cs_s']] + df[dims['ed']] * df[dims['ed_s']]) - (df[dims['ce']] * df[dims['ce_s']] + df[dims['ee']] * df[dims['ee_s']])\\n    swsf_den = df[dims['cs_s']] + df[dims['ed_s']] + df[dims['ce_s']] + df[dims['ee_s']] + 0.001\\n    df['salience_weighted_stakeholder_focus'] = swsf_num / swsf_den\\n\\n    swoe_num = (df[dims['ac']] * df[dims['ac_s']] + df[dims['fr']] * df[dims['fr_s']]) - (df[dims['op']] * df[dims['op_s']] + df[dims['fm']] * df[dims['fm_s']])\\n    swoe_den = df[dims['ac_s']] + df[dims['fr_s']] + df[dims['op_s']] + df[dims['fm_s']] + 0.001\\n    df['salience_weighted_operational_ethics'] = swoe_num / swoe_den\\n\\n    swse_num = df[dims['sp']] * df[dims['sp_s']] - df[dims['se']] * df[dims['se_s']]\\n    swse_den = df[dims['sp_s']] + df[dims['se_s']] + 0.001\\n    df['salience_weighted_strategic_ethics'] = swse_num / swse_den\\n\\n    df['corporate_responsibility_contradiction_index'] = (\\n        np.minimum(df[dims['cs']], df[dims['ce']]) * abs(df[dims['cs_s']] - df[dims['ce_s']]) +\\n        np.minimum(df[dims['ed']], df[dims['ee']]) * abs(df[dims['ed_s']] - df[dims['ee_s']]) +\\n        np.minimum(df[dims['ac']], df[dims['op']]) * abs(df[dims['ac_s']] - df[dims['op_s']]) +\\n        np.minimum(df[dims['fr']], df[dims['fm']]) * abs(df[dims['fr_s']] - df[dims['fm_s']]) +\\n        np.minimum(df[dims['sp']], df[dims['se']]) * abs(df[dims['sp_s']] - df[dims['se_s']])\\n    )\\n    df['stakeholder_strategy_coherence'] = 1 - (abs(df[dims['cs']] - df[dims['ed']]) + abs(df[dims['ce']] - df[dims['ee']])) / 2\\n\\n    return df\\n\\ndef calculate_descriptive_statistics(data: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates and returns descriptive statistics for dimensional scores and derived metrics.\\n    \\n    Args:\\n        data: A pandas DataFrame with analysis data.\\n        \\n    Returns:\\n        A dictionary of descriptive statistics, or None if data is insufficient.\\n    \\\"\\\"\\\"\\n    if data is None or data.empty:\\n        return None\\n\\n    try:\\n        # Select only numeric columns for description\\n        numeric_cols = data.select_dtypes(include=np.number).columns\\n        desc_stats = data[numeric_cols].describe().round(3).to_dict()\\n        return desc_stats\\n    except Exception as e:\\n        return {'error': str(e)}\\n\\ndef analyze_group_differences(data: pd.DataFrame, group_mapping: Dict[str, str]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Exploratory analysis of differences between document groups based on derived metrics.\\n    Due to the very small sample size (N=4), this function presents key metrics for each\\n    document to facilitate pattern recognition, rather than performing inferential tests.\\n\\n    Args:\\n        data: A pandas DataFrame with analysis data.\\n        group_mapping: A dictionary mapping document_id to a group name.\\n\\n    Returns:\\n        A dictionary with metrics for each group, or None if data is insufficient.\\n    \\\"\\\"\\\"\\n    if data is None or data.empty:\\n        return None\\n    \\n    try:\\n        metric_cols = [\\n            'stakeholder_focus_index', 'operational_ethics_index', 'strategic_ethics_index',\\n            'salience_weighted_stakeholder_focus', 'salience_weighted_operational_ethics',\\n            'salience_weighted_strategic_ethics', 'corporate_responsibility_contradiction_index',\\n            'stakeholder_strategy_coherence'\\n        ]\\n        \\n        # Ensure columns exist\\n        for col in metric_cols:\\n            if col not in data.columns:\\n                 return {'error': f'Metric column {col} not found in data.'}\\n\\n        data['group'] = data.index.map(group_mapping)\\n        results = data[['group'] + metric_cols].set_index('group').round(3).to_dict(orient='index')\\n        return results\\n    except Exception as e:\\n        return {'error': str(e)}\\n\\ndef perform_correlation_analysis(data: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Performs exploratory correlation analysis. \\n    1. It correlates 'raw_score' (intensity) with 'salience' (emphasis) across all dimensions and documents.\\n       This involves un-pivoting the data, and the non-independence of data points from the same document\\n       should be noted when interpreting results.\\n    2. It correlates the main derived indices at the document level (N=4), which is highly exploratory.\\n\\n    Args:\\n        data: A pandas DataFrame with analysis data.\\n\\n    Returns:\\n        A dictionary of correlation results, or None if data is insufficient.\\n    \\\"\\\"\\\"\\n    if data is None or data.empty or len(data) < 2:\\n        return None\\n\\n    try:\\n        results = {}\\n\\n        # 1. Correlation between raw_score and salience\\n        score_cols = [col for col in data.columns if col.endswith('.raw_score')]\\n        salience_cols = [col for col in data.columns if col.endswith('.salience')]\\n        \\n        scores = data[score_cols].values.flatten()\\n        saliences = data[salience_cols].values.flatten()\\n        \\n        # Filter out zero-salience cases to avoid skewing correlation\\n        non_zero_mask = saliences > 0\\n        if np.sum(non_zero_mask) > 2:\\n            corr_score_salience = pg.corr(scores[non_zero_mask], saliences[non_zero_mask]).round(3)\\n            results['raw_score_vs_salience'] = corr_score_salience.to_dict(orient='records')[0]\\n        else:\\n            results['raw_score_vs_salience'] = 'Insufficient non-zero salience data for correlation.'\\n\\n        # 2. Correlation between derived indices\\n        metric_cols = [\\n            'stakeholder_focus_index', 'operational_ethics_index', 'strategic_ethics_index',\\n            'salience_weighted_stakeholder_focus', 'salience_weighted_operational_ethics',\\n            'corporate_responsibility_contradiction_index', 'stakeholder_strategy_coherence'\\n        ]\\n        if len(data) >= 3:\\n            corr_matrix = data[metric_cols].corr(method='pearson').round(3)\\n            corr_matrix.index.name = 'metric'\\n            results['derived_metrics_correlation_matrix'] = corr_matrix.reset_index().to_dict(orient='records')\\n        else:\\n            results['derived_metrics_correlation_matrix'] = 'Insufficient data (N<3) for matrix correlation.'\\n        \\n        return results\\n    except Exception as e:\\n        return {'error': str(e)}\\n\\ndef calculate_reliability_analysis(data: pd.DataFrame) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Assesses the feasibility of reliability analysis (e.g., Cronbach's alpha).\\n\\n    Args:\\n        data: A pandas DataFrame with analysis data.\\n\\n    Returns:\\n        A dictionary explaining the result.\\n    \\\"\\\"\\\"\\n    num_items = 0\\n    if data is not None:\\n        num_items = len(data)\\n\\n    return {\\n        'analysis_name': \\\"Cronbach's Alpha for Internal Consistency\\\",\\n        'status': 'Not Performed',\\n        'reason': f'Sample size (N={num_items}) is too small for reliability analysis. A minimum of N=15-30 is typically recommended.'\\n    }\\n\\ndef perform_statistical_analysis(raw_artifacts: List[Dict[str, Any]], group_mapping: Dict[str, str]) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Master function that prepares data and executes all statistical analyses.\\n\\n    Args:\\n        raw_artifacts: A list of raw analysis artifact dictionaries.\\n        group_mapping: A dictionary mapping document_id to a group name.\\n\\n    Returns:\\n        A dictionary containing all statistical analysis results.\\n    \\\"\\\"\\\"\\n    data_df = _create_dataframe(raw_artifacts)\\n    \\n    if data_df is None:\\n        return {\\n            'error': 'Failed to create DataFrame from artifacts. Check artifact structure and content.'\\n        }\\n\\n    results = {}\\n    results['descriptive_statistics'] = calculate_descriptive_statistics(data_df)\\n    results['group_analysis'] = analyze_group_differences(data_df, group_mapping)\\n    results['correlation_analysis'] = perform_correlation_analysis(data_df)\\n    results['reliability_analysis'] = calculate_reliability_analysis(data_df)\\n    \\n    # Replace NaN with None for clean JSON output\\n    def clean_nan(obj):\\n        if isinstance(obj, dict):\\n            return {k: clean_nan(v) for k, v in obj.items()}\\n        elif isinstance(obj, list):\\n            return [clean_nan(i) for i in obj]\\n        elif isinstance(obj, float) and np.isnan(obj):\\n            return None\\n        return obj\\n\\n    return clean_nan(results)\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"customer_service.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.575,\n        \"std\": 0.45,\n        \"min\": 0.0,\n        \"25%\": 0.375,\n        \"50%\": 0.7,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"customer_service.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.55,\n        \"std\": 0.443,\n        \"min\": 0.0,\n        \"25%\": 0.3,\n        \"50%\": 0.65,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"customer_service.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.937,\n        \"std\": 0.048,\n        \"min\": 0.9,\n        \"25%\": 0.9,\n        \"50%\": 0.925,\n        \"75%\": 0.962,\n        \"max\": 1.0\n      },\n      \"customer_exploitation.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.025,\n        \"std\": 0.05,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.025,\n        \"max\": 0.1\n      },\n      \"customer_exploitation.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.025,\n        \"std\": 0.05,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.025,\n        \"max\": 0.1\n      },\n      \"customer_exploitation.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.9,\n        \"std\": 0.141,\n        \"min\": 0.7,\n        \"25%\": 0.85,\n        \"50%\": 0.95,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"employee_development.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.55,\n        \"std\": 0.436,\n        \"min\": 0.0,\n        \"25%\": 0.3,\n        \"50%\": 0.65,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"employee_development.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.475,\n        \"std\": 0.457,\n        \"min\": 0.0,\n        \"25%\": 0.15,\n        \"50%\": 0.5,\n        \"75%\": 0.825,\n        \"max\": 0.9\n      },\n      \"employee_development.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.938,\n        \"std\": 0.085,\n        \"min\": 0.8,\n        \"25%\": 0.912,\n        \"50%\": 0.975,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"employee_exploitation.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.225,\n        \"std\": 0.45,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.225,\n        \"max\": 0.9\n      },\n      \"employee_exploitation.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.225,\n        \"std\": 0.45,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.225,\n        \"max\": 0.9\n      },\n      \"employee_exploitation.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.975,\n        \"std\": 0.05,\n        \"min\": 0.9,\n        \"25%\": 0.975,\n        \"50%\": 1.0,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"accountability.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.725,\n        \"std\": 0.34,\n        \"min\": 0.2,\n        \"25%\": 0.725,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"accountability.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.65,\n        \"std\": 0.387,\n        \"min\": 0.1,\n        \"25%\": 0.625,\n        \"50%\": 0.8,\n        \"75%\": 0.875,\n        \"max\": 0.9\n      },\n      \"accountability.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.887,\n        \"std\": 0.063,\n        \"min\": 0.8,\n        \"25%\": 0.875,\n        \"50%\": 0.9,\n        \"75%\": 0.912,\n        \"max\": 0.95\n      },\n      \"opacity.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.0,\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.0,\n        \"max\": 0.0\n      },\n      \"opacity.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.0,\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.0,\n        \"max\": 0.0\n      },\n      \"opacity.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.975,\n        \"std\": 0.05,\n        \"min\": 0.9,\n        \"25%\": 0.975,\n        \"50%\": 1.0,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"financial_responsibility.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.55,\n        \"std\": 0.311,\n        \"min\": 0.1,\n        \"25%\": 0.475,\n        \"50%\": 0.65,\n        \"75%\": 0.725,\n        \"max\": 0.8\n      },\n      \"financial_responsibility.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.45,\n        \"std\": 0.311,\n        \"min\": 0.0,\n        \"25%\": 0.375,\n        \"50%\": 0.55,\n        \"75%\": 0.625,\n        \"max\": 0.7\n      },\n      \"financial_responsibility.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.825,\n        \"std\": 0.096,\n        \"min\": 0.7,\n        \"25%\": 0.775,\n        \"50%\": 0.85,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"financial_manipulation.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.0,\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.0,\n        \"max\": 0.0\n      },\n      \"financial_manipulation.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.0,\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.0,\n        \"max\": 0.0\n      },\n      \"financial_manipulation.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.975,\n        \"std\": 0.05,\n        \"min\": 0.9,\n        \"25%\": 0.975,\n        \"50%\": 1.0,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"sustainable_purpose.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.675,\n        \"std\": 0.435,\n        \"min\": 0.0,\n        \"25%\": 0.525,\n        \"50%\": 0.85,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"sustainable_purpose.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.6,\n        \"std\": 0.469,\n        \"min\": 0.0,\n        \"25%\": 0.525,\n        \"50%\": 0.85,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"sustainable_purpose.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.938,\n        \"std\": 0.085,\n        \"min\": 0.8,\n        \"25%\": 0.912,\n        \"50%\": 0.975,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"short_term_extraction.raw_score\": {\n        \"count\": 4.0,\n        \"mean\": 0.275,\n        \"std\": 0.403,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.1,\n        \"75%\": 0.375,\n        \"max\": 0.9\n      },\n      \"short_term_extraction.salience\": {\n        \"count\": 4.0,\n        \"mean\": 0.3,\n        \"std\": 0.432,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.1,\n        \"75%\": 0.4,\n        \"max\": 1.0\n      },\n      \"short_term_extraction.confidence\": {\n        \"count\": 4.0,\n        \"mean\": 0.925,\n        \"std\": 0.096,\n        \"min\": 0.8,\n        \"25%\": 0.875,\n        \"50%\": 0.95,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"stakeholder_focus_index\": {\n        \"count\": 4.0,\n        \"mean\": 0.238,\n        \"std\": 0.672,\n        \"min\": -0.425,\n        \"25%\": 0.012,\n        \"50%\": 0.475,\n        \"75%\": 0.7,\n        \"max\": 0.9\n      },\n      \"operational_ethics_index\": {\n        \"count\": 4.0,\n        \"mean\": 0.538,\n        \"std\": 0.198,\n        \"min\": 0.4,\n        \"25%\": 0.425,\n        \"50%\": 0.5,\n        \"75%\": 0.612,\n        \"max\": 0.85\n      },\n      \"strategic_ethics_index\": {\n        \"count\": 4.0,\n        \"mean\": 0.688,\n        \"std\": 0.421,\n        \"min\": 0.05,\n        \"25%\": 0.538,\n        \"50%\": 0.9,\n        \"75%\": 1.05,\n        \"max\": 1.0\n      },\n      \"salience_weighted_stakeholder_focus\": {\n        \"count\": 4.0,\n        \"mean\": 0.187,\n        \"std\": 0.692,\n        \"min\": -0.463,\n        \"25%\": -0.012,\n        \"50%\": 0.403,\n        \"75%\": 0.59,\n        \"max\": 0.821\n      },\n      \"salience_weighted_operational_ethics\": {\n        \"count\": 4.0,\n        \"mean\": 0.551,\n        \"std\": 0.22,\n        \"min\": 0.395,\n        \"25%\": 0.41,\n        \"50%\": 0.511,\n        \"75%\": 0.652,\n        \"max\": 0.785\n      },\n      \"salience_weighted_strategic_ethics\": {\n        \"count\": 4.0,\n        \"mean\": 0.134,\n        \"std\": 0.885,\n        \"min\": -0.817,\n        \"25%\": -0.063,\n        \"50%\": 0.499,\n        \"75%\": 0.697,\n        \"max\": 0.917\n      },\n      \"corporate_responsibility_contradiction_index\": {\n        \"count\": 4.0,\n        \"mean\": 0.01,\n        \"std\": 0.02,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.0,\n        \"75%\": 0.01,\n        \"max\": 0.04\n      },\n      \"stakeholder_strategy_coherence\": {\n        \"count\": 4.0,\n        \"mean\": 0.625,\n        \"std\": 0.299,\n        \"min\": 0.2,\n        \"25%\": 0.575,\n        \"50%\": 0.7,\n        \"75%\": 0.75,\n        \"max\": 0.9\n      }\n    },\n    \"group_analysis\": {\n      \"stakeholder_capitalism_report\": {\n        \"stakeholder_focus_index\": 0.9,\n        \"operational_ethics_index\": 0.8,\n        \"strategic_ethics_index\": 1.0,\n        \"salience_weighted_stakeholder_focus\": 0.821,\n        \"salience_weighted_operational_ethics\": 0.785,\n        \"salience_weighted_strategic_ethics\": 0.908,\n        \"corporate_responsibility_contradiction_index\": 0.0,\n        \"stakeholder_strategy_coherence\": 0.9\n      },\n      \"shareholder_primacy_report\": {\n        \"stakeholder_focus_index\": -0.425,\n        \"operational_ethics_index\": 0.4,\n        \"strategic_ethics_index\": 0.05,\n        \"salience_weighted_stakeholder_focus\": -0.463,\n        \"salience_weighted_operational_ethics\": 0.395,\n        \"salience_weighted_strategic_ethics\": -0.817,\n        \"corporate_responsibility_contradiction_index\": 0.0,\n        \"stakeholder_strategy_coherence\": 0.2\n      },\n      \"crisis_management_apology\": {\n        \"stakeholder_focus_index\": 0.65,\n        \"operational_ethics_index\": 0.5,\n        \"strategic_ethics_index\": 0.85,\n        \"salience_weighted_stakeholder_focus\": 0.627,\n        \"salience_weighted_operational_ethics\": 0.626,\n        \"salience_weighted_strategic_ethics\": 0.7,\n        \"corporate_responsibility_contradiction_index\": 0.0,\n        \"stakeholder_strategy_coherence\": 0.75\n      },\n      \"corporate_social_responsibility\": {\n        \"stakeholder_focus_index\": -0.175,\n        \"operational_ethics_index\": 0.425,\n        \"strategic_ethics_index\": 0.85,\n        \"salience_weighted_stakeholder_focus\": 0.125,\n        \"salience_weighted_operational_ethics\": 0.5,\n        \"salience_weighted_strategic_ethics\": 0.666,\n        \"corporate_responsibility_contradiction_index\": 0.04,\n        \"stakeholder_strategy_coherence\": 0.65\n      }\n    },\n    \"correlation_analysis\": {\n      \"raw_score_vs_salience\": {\n        \"n\": 22,\n        \"r\": 0.939,\n        \"CI95%\": [\n          0.85,\n          0.97\n        ],\n        \"p-val\": 0.0,\n        \"BF10\": \"3.32e+09\",\n        \"power\": 1.0\n      },\n      \"derived_metrics_correlation_matrix\": [\n        {\n          \"metric\": \"stakeholder_focus_index\",\n          \"stakeholder_focus_index\": 1.0,\n          \"operational_ethics_index\": 0.854,\n          \"strategic_ethics_index\": 0.803,\n          \"salience_weighted_stakeholder_focus\": 0.998,\n          \"salience_weighted_operational_ethics\": 0.902,\n          \"corporate_responsibility_contradiction_index\": -0.808,\n          \"stakeholder_strategy_coherence\": 0.835\n        },\n        {\n          \"metric\": \"operational_ethics_index\",\n          \"stakeholder_focus_index\": 0.854,\n          \"operational_ethics_index\": 1.0,\n          \"strategic_ethics_index\": 0.521,\n          \"salience_weighted_stakeholder_focus\": 0.871,\n          \"salience_weighted_operational_ethics\": 0.98,\n          \"corporate_responsibility_contradiction_index\": -0.493,\n          \"stakeholder_strategy_coherence\": 0.963\n        },\n        {\n          \"metric\": \"strategic_ethics_index\",\n          \"stakeholder_focus_index\": 0.803,\n          \"operational_ethics_index\": 0.521,\n          \"strategic_ethics_index\": 1.0,\n          \"salience_weighted_stakeholder_focus\": 0.771,\n          \"salience_weighted_operational_ethics\": 0.612,\n          \"corporate_responsibility_contradiction_index\": -0.418,\n          \"stakeholder_strategy_coherence\": 0.548\n        },\n        {\n          \"metric\": \"salience_weighted_stakeholder_focus\",\n          \"stakeholder_focus_index\": 0.998,\n          \"operational_ethics_index\": 0.871,\n          \"strategic_ethics_index\": 0.771,\n          \"salience_weighted_stakeholder_focus\": 1.0,\n          \"salience_weighted_operational_ethics\": 0.913,\n          \"corporate_responsibility_contradiction_index\": -0.776,\n          \"stakeholder_strategy_coherence\": 0.86\n        },\n        {\n          \"metric\": \"salience_weighted_operational_ethics\",\n          \"stakeholder_focus_index\": 0.902,\n          \"operational_ethics_index\": 0.98,\n          \"strategic_ethics_index\": 0.612,\n          \"salience_weighted_stakeholder_focus\": 0.913,\n          \"salience_weighted_operational_ethics\": 1.0,\n          \"corporate_responsibility_contradiction_index\": -0.584,\n          \"stakeholder_strategy_coherence\": 0.97\n        },\n        {\n          \"metric\": \"corporate_responsibility_contradiction_index\",\n          \"stakeholder_focus_index\": -0.808,\n          \"operational_ethics_index\": -0.493,\n          \"strategic_ethics_index\": -0.418,\n          \"salience_weighted_stakeholder_focus\": -0.776,\n          \"salience_weighted_operational_ethics\": -0.584,\n          \"corporate_responsibility_contradiction_index\": 1.0,\n          \"stakeholder_strategy_coherence\": -0.518\n        },\n        {\n          \"metric\": \"stakeholder_strategy_coherence\",\n          \"stakeholder_focus_index\": 0.835,\n          \"operational_ethics_index\": 0.963,\n          \"strategic_ethics_index\": 0.548,\n          \"salience_weighted_stakeholder_focus\": 0.86,\n          \"salience_weighted_operational_ethics\": 0.97,\n          \"corporate_responsibility_contradiction_index\": -0.518,\n          \"stakeholder_strategy_coherence\": 1.0\n        }\n      ]\n    },\n    \"reliability_analysis\": {\n      \"analysis_name\": \"Cronbach's Alpha for Internal Consistency\",\n      \"status\": \"Not Performed\",\n      \"reason\": \"Sample size (N=4) is too small for reliability analysis. A minimum of N=15-30 is typically recommended.\"\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 4,\n    \"tier_classification\": \"TIER 3\",\n    \"power_notes\": \"The analysis is exploratory due to the very small sample size (N=4). No inferential statistics (e.g., t-tests, ANOVA) were performed as the results would not be statistically valid. The analysis focuses on descriptive statistics, pattern identification across the provided documents, and exploratory correlations. All findings should be interpreted as specific to this corpus and not generalizable.\"\n  },\n  \"methodology_summary\": \"The statistical analysis was conducted following a TIER 3 (Exploratory) protocol due to the small sample size of four documents. The core of the analysis involved calculating descriptive statistics (mean, std, min, max) for all ten dimensions and eight derived metrics defined by the Business Ethics Framework v10.0. To address the research questions about ethical patterns, a group analysis was performed, presenting the key derived metrics for each of the four corporate communications to highlight their distinct ethical profiles. Exploratory correlation analysis was used to investigate the relationship between ethical intensity (raw_score) and strategic emphasis (salience), as well as the relationships between the derived indices themselves. Reliability analysis was considered but not performed due to the insufficient sample size. All interpretations are qualitative and focused on pattern detection within this specific case study corpus.\"\n}\n```",
  "analysis_artifacts_processed": 8,
  "cost_info": {
    "model": "vertex_ai/gemini-2.5-pro",
    "execution_time_seconds": 96.970848,
    "response_cost": 0.0,
    "input_tokens": 0,
    "output_tokens": 0,
    "total_tokens": 0,
    "prompt_length": 86238,
    "response_length": 26715
  },
  "timestamp": "2025-09-17T00:01:38.338379+00:00"
}