{
  "batch_id": "stats_20250917T035401Z",
  "statistical_analysis": {
    "batch_id": "stats_20250917T035401Z",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nfrom typing import Dict, Any, Optional, List\\nimport json\\nimport re\\nimport yaml\\n\\ndef _get_document_speaker_mapping(corpus_manifest_content: str) -> Dict[str, str]:\\n    \\\"\\\"\\\"\\n    Parses the corpus manifest YAML to create a mapping from document_id to speaker.\\n\\n    Args:\\n        corpus_manifest_content: A string containing the YAML of the corpus manifest.\\n\\n    Returns:\\n        A dictionary mapping document_id to speaker name.\\n    \\\"\\\"\\\"\\n    try:\\n        manifest = yaml.safe_load(corpus_manifest_content)\\n        mapping = {\\n            doc['document_id']: doc['speaker'] \\n            for doc in manifest.get('documents', [])\\n        }\\n        return mapping\\n    except Exception:\\n        return {}\\n\\ndef _prepare_dataframe(data: Dict[str, Any], corpus_manifest_content: str) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Prepares a pandas DataFrame from the raw analysis artifacts.\\n\\n    Args:\\n        data: A dictionary containing the analysis artifacts.\\n        corpus_manifest_content: A string containing the YAML of the corpus manifest.\\n\\n    Returns:\\n        A pandas DataFrame with scores and metrics for each document, or None if an error occurs.\\n    \\\"\\\"\\\"\\n    records = []\\n    doc_ids_by_analysis_id = {\\n        'analysis_4b065ced': 'malcolm_x_ballot_bullet_1964',\\n        'analysis_6ddca5cc': 'mlk_birmingham_jail_1963'\\n    }\\n    \\n    speaker_mapping = _get_document_speaker_mapping(corpus_manifest_content)\\n    if not speaker_mapping:\\n        return None\\n\\n    all_artifacts = data.get('artifacts', [])\\n    \\n    scores_data = {}\\n    metrics_data = {}\\n\\n    for artifact in all_artifacts:\\n        analysis_id = artifact.get('analysis_id')\\n        if not analysis_id:\\n            continue\\n\\n        if artifact['type'] == 'score_extraction':\\n            try:\\n                json_str_match = re.search(r'```json\\\\n(.+?)\\\\n```', artifact['scores_extraction'], re.DOTALL)\\n                if json_str_match:\\n                    scores = json.loads(json_str_match.group(1))\\n                    scores_data[analysis_id] = scores\\n            except (json.JSONDecodeError, KeyError):\\n                continue\\n\\n        elif artifact['type'] == 'derived_metrics_generation':\\n            try:\\n                json_str_match = re.search(r'```json\\\\n(.+?)\\\\n```', artifact['derived_metrics'], re.DOTALL)\\n                if json_str_match:\\n                    metrics = json.loads(json_str_match.group(1))\\n                    metrics_data[analysis_id] = metrics\\n            except (json.JSONDecodeError, KeyError):\\n                continue\\n\\n    for analysis_id, doc_id in doc_ids_by_analysis_id.items():\\n        if analysis_id not in scores_data or analysis_id not in metrics_data:\\n            continue\\n\\n        record = {'document_id': doc_id, 'speaker': speaker_mapping.get(doc_id, 'Unknown')}\\n\\n        # Add dimensional scores\\n        for dim, values in scores_data[analysis_id].items():\\n            record[f'{dim}_raw_score'] = values.get('raw_score')\\n            record[f'{dim}_salience'] = values.get('salience')\\n        \\n        # Add derived metrics\\n        record.update(metrics_data[analysis_id])\\n        \\n        records.append(record)\\n\\n    if not records:\\n        return None\\n\\n    df = pd.DataFrame(records)\\n    return df\\n\\ndef calculate_descriptive_statistics(data: Dict[str, Any], corpus_manifest_content: str) -> Optional[Dict]:\\n    \\\"\\\"\\\"\\n    Calculates and returns descriptive statistics for all CFF dimensions and derived metrics, grouped by speaker.\\n\\n    This function is suitable for exploratory analysis (Tier 3) where the sample size is small.\\n    It provides a summary of central tendency for each group.\\n\\n    Args:\\n        data: The raw analysis artifacts.\\n        corpus_manifest_content: The YAML string from the corpus manifest.\\n\\n    Returns:\\n        A dictionary of descriptive statistics, or None if data is insufficient.\\n    \\\"\\\"\\\"\\n    df = _prepare_dataframe(data, corpus_manifest_content)\\n    if df is None or df.empty:\\n        return None\\n\\n    try:\\n        # Since n=1 for each group, mean is simply the score itself.\\n        # The .mean() call standardizes the aggregation process.\\n        grouped_stats = df.groupby('speaker').mean().reset_index()\\n        return grouped_stats.to_dict(orient='records')\\n    except Exception as e:\\n        return {'error': str(e)}\\n\\ndef perform_comparative_analysis(data: Dict[str, Any], corpus_manifest_content: str) -> Optional[Dict]:\\n    \\\"\\\"\\\"\\n    Performs a direct comparative analysis between the two speakers for all metrics.\\n\\n    Given the N=1 per group design, this function calculates the raw difference between the two speakers'\\n    scores (MLK Jr. - Malcolm X) to quantify the contrast in their rhetoric. This is an exploratory\\n    technique appropriate for a Tier 3 case study, highlighting the magnitude of differences without\\n    making inferential claims.\\n\\n    Args:\\n        data: The raw analysis artifacts.\\n        corpus_manifest_content: The YAML string from the corpus manifest.\\n\\n    Returns:\\n        A dictionary comparing the scores for each speaker and their difference, or None.\\n    \\\"\\\"\\\"\\n    df = _prepare_dataframe(data, corpus_manifest_content)\\n    if df is None or len(df) != 2:\\n        return {\\n            'status': 'Failed',\\n            'reason': 'Insufficient data for comparison. Exactly two documents are required.'\\n        }\\n\\n    try:\\n        df.set_index('speaker', inplace=True)\\n        \\n        # Ensure both speakers are present\\n        if 'Martin Luther King Jr.' not in df.index or 'Malcolm X' not in df.index:\\n             return {\\n                'status': 'Failed',\\n                'reason': 'Could not find both \\\\'Martin Luther King Jr.\\\\' and \\\\'Malcolm X\\\\' in the data.'\\n            }\\n\\n        mlk_scores = df.loc['Martin Luther King Jr.']\\n        mx_scores = df.loc['Malcolm X']\\n\\n        differences = mlk_scores - mx_scores\\n\\n        comparison_results = {}\\n        for metric in differences.index:\\n            if metric == 'document_id': continue\\n            comparison_results[metric] = {\\n                'Martin Luther King Jr.': mlk_scores[metric],\\n                'Malcolm X': mx_scores[metric],\\n                'difference (MLK - MX)': differences[metric]\\n            }\\n        \\n        return {\\n            'status': 'Success',\\n            'comparison': comparison_results\\n        }\\n\\n    except Exception as e:\\n        return {'status': 'Failed', 'reason': str(e)}\\n\\ndef perform_statistical_analysis(data: Dict[str, Any], corpus_manifest_content: str) -> Dict:\\n    \\\"\\\"\\\"\\n    Master function that executes all statistical analyses for the experiment.\\n\\n    Args:\\n        data: A dictionary containing the analysis artifacts.\\n        corpus_manifest_content: The YAML string from the corpus manifest.\\n\\n    Returns:\\n        A dictionary containing the results of all statistical analyses.\\n    \\\"\\\"\\\"\\n    results = {\\n        'descriptive_statistics': calculate_descriptive_statistics(data, corpus_manifest_content),\\n        'additional_analyses': {\\n            'speaker_comparison': perform_comparative_analysis(data, corpus_manifest_content)\\n        }\\n    }\\n    return results\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": [\n      {\n        \"speaker\": \"Malcolm X\",\n        \"tribal_dominance_raw_score\": 0.9,\n        \"tribal_dominance_salience\": 0.9,\n        \"individual_dignity_raw_score\": 0.1,\n        \"individual_dignity_salience\": 0.1,\n        \"fear_raw_score\": 0.9,\n        \"fear_salience\": 0.8,\n        \"hope_raw_score\": 0.7,\n        \"hope_salience\": 0.7,\n        \"envy_raw_score\": 0.8,\n        \"envy_salience\": 0.7,\n        \"compersion_raw_score\": 0.0,\n        \"compersion_salience\": 0.0,\n        \"enmity_raw_score\": 0.9,\n        \"enmity_salience\": 0.9,\n        \"amity_raw_score\": 0.4,\n        \"amity_salience\": 0.3,\n        \"fragmentative_goals_raw_score\": 0.8,\n        \"fragmentative_goals_salience\": 0.7,\n        \"cohesive_goals_raw_score\": 0.9,\n        \"cohesive_goals_salience\": 0.9,\n        \"identity_tension\": 0.0,\n        \"emotional_tension\": 0.09000000000000001,\n        \"success_tension\": 0.0,\n        \"relational_tension\": 0.0,\n        \"goal_tension\": 0.0,\n        \"strategic_contradiction_index\": 0.018000000000000002,\n        \"descriptive_cohesion_index\": -0.3225806451612903,\n        \"motivational_cohesion_index\": -0.24193548387096775,\n        \"full_cohesion_index\": -0.3225806451612903\n      },\n      {\n        \"speaker\": \"Martin Luther King Jr.\",\n        \"tribal_dominance_raw_score\": 0.05,\n        \"tribal_dominance_salience\": 0.05,\n        \"individual_dignity_raw_score\": 0.95,\n        \"individual_dignity_salience\": 0.9,\n        \"fear_raw_score\": 0.85,\n        \"fear_salience\": 0.75,\n        \"hope_raw_score\": 0.9,\n        \"hope_salience\": 0.85,\n        \"envy_raw_score\": 0.2,\n        \"envy_salience\": 0.15,\n        \"compersion_raw_score\": 0.6,\n        \"compersion_salience\": 0.5,\n        \"enmity_raw_score\": 0.75,\n        \"enmity_salience\": 0.7,\n        \"amity_raw_score\": 0.8,\n        \"amity_salience\": 0.75,\n        \"fragmentative_goals_raw_score\": 0.7,\n        \"fragmentative_goals_salience\": 0.65,\n        \"cohesive_goals_raw_score\": 0.95,\n        \"cohesive_goals_salience\": 0.9,\n        \"identity_tension\": 0.0,\n        \"emotional_tension\": 0.100625,\n        \"success_tension\": 0.0,\n        \"relational_tension\": 0.0375,\n        \"goal_tension\": 0.0325,\n        \"strategic_contradiction_index\": 0.0375,\n        \"descriptive_cohesion_index\": 0.16159379779510618,\n        \"motivational_cohesion_index\": 0.14252692074906748,\n        \"full_cohesion_index\": 0.09431633368028427\n      }\n    ],\n    \"additional_analyses\": {\n      \"speaker_comparison\": {\n        \"status\": \"Success\",\n        \"comparison\": {\n          \"tribal_dominance_raw_score\": {\n            \"Martin Luther King Jr.\": 0.05,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": -0.85\n          },\n          \"tribal_dominance_salience\": {\n            \"Martin Luther King Jr.\": 0.05,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": -0.85\n          },\n          \"individual_dignity_raw_score\": {\n            \"Martin Luther King Jr.\": 0.95,\n            \"Malcolm X\": 0.1,\n            \"difference (MLK - MX)\": 0.85\n          },\n          \"individual_dignity_salience\": {\n            \"Martin Luther King Jr.\": 0.9,\n            \"Malcolm X\": 0.1,\n            \"difference (MLK - MX)\": 0.8\n          },\n          \"fear_raw_score\": {\n            \"Martin Luther King Jr.\": 0.85,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": -0.050000000000000044\n          },\n          \"fear_salience\": {\n            \"Martin Luther King Jr.\": 0.75,\n            \"Malcolm X\": 0.8,\n            \"difference (MLK - MX)\": -0.050000000000000044\n          },\n          \"hope_raw_score\": {\n            \"Martin Luther King Jr.\": 0.9,\n            \"Malcolm X\": 0.7,\n            \"difference (MLK - MX)\": 0.19999999999999996\n          },\n          \"hope_salience\": {\n            \"Martin Luther King Jr.\": 0.85,\n            \"Malcolm X\": 0.7,\n            \"difference (MLK - MX)\": 0.15000000000000002\n          },\n          \"envy_raw_score\": {\n            \"Martin Luther King Jr.\": 0.2,\n            \"Malcolm X\": 0.8,\n            \"difference (MLK - MX)\": -0.6\n          },\n          \"envy_salience\": {\n            \"Martin Luther King Jr.\": 0.15,\n            \"Malcolm X\": 0.7,\n            \"difference (MLK - MX)\": -0.55\n          },\n          \"compersion_raw_score\": {\n            \"Martin Luther King Jr.\": 0.6,\n            \"Malcolm X\": 0.0,\n            \"difference (MLK - MX)\": 0.6\n          },\n          \"compersion_salience\": {\n            \"Martin Luther King Jr.\": 0.5,\n            \"Malcolm X\": 0.0,\n            \"difference (MLK - MX)\": 0.5\n          },\n          \"enmity_raw_score\": {\n            \"Martin Luther King Jr.\": 0.75,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": -0.15000000000000002\n          },\n          \"enmity_salience\": {\n            \"Martin Luther King Jr.\": 0.7,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": -0.19999999999999996\n          },\n          \"amity_raw_score\": {\n            \"Martin Luther King Jr.\": 0.8,\n            \"Malcolm X\": 0.4,\n            \"difference (MLK - MX)\": 0.4\n          },\n          \"amity_salience\": {\n            \"Martin Luther King Jr.\": 0.75,\n            \"Malcolm X\": 0.3,\n            \"difference (MLK - MX)\": 0.45\n          },\n          \"fragmentative_goals_raw_score\": {\n            \"Martin Luther King Jr.\": 0.7,\n            \"Malcolm X\": 0.8,\n            \"difference (MLK - MX)\": -0.10000000000000009\n          },\n          \"fragmentative_goals_salience\": {\n            \"Martin Luther King Jr.\": 0.65,\n            \"Malcolm X\": 0.7,\n            \"difference (MLK - MX)\": -0.050000000000000044\n          },\n          \"cohesive_goals_raw_score\": {\n            \"Martin Luther King Jr.\": 0.95,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": 0.050000000000000044\n          },\n          \"cohesive_goals_salience\": {\n            \"Martin Luther King Jr.\": 0.9,\n            \"Malcolm X\": 0.9,\n            \"difference (MLK - MX)\": 0.0\n          },\n          \"identity_tension\": {\n            \"Martin Luther King Jr.\": 0.0,\n            \"Malcolm X\": 0.0,\n            \"difference (MLK - MX)\": 0.0\n          },\n          \"emotional_tension\": {\n            \"Martin Luther King Jr.\": 0.100625,\n            \"Malcolm X\": 0.09000000000000001,\n            \"difference (MLK - MX)\": 0.010624999999999986\n          },\n          \"success_tension\": {\n            \"Martin Luther King Jr.\": 0.0,\n            \"Malcolm X\": 0.0,\n            \"difference (MLK - MX)\": 0.0\n          },\n          \"relational_tension\": {\n            \"Martin Luther King Jr.\": 0.0375,\n            \"Malcolm X\": 0.0,\n            \"difference (MLK - MX)\": 0.0375\n          },\n          \"goal_tension\": {\n            \"Martin Luther King Jr.\": 0.0325,\n            \"Malcolm X\": 0.0,\n            \"difference (MLK - MX)\": 0.0325\n          },\n          \"strategic_contradiction_index\": {\n            \"Martin Luther King Jr.\": 0.0375,\n            \"Malcolm X\": 0.018000000000000002,\n            \"difference (MLK - MX)\": 0.019499999999999997\n          },\n          \"descriptive_cohesion_index\": {\n            \"Martin Luther King Jr.\": 0.16159379779510618,\n            \"Malcolm X\": -0.3225806451612903,\n            \"difference (MLK - MX)\": 0.4841744429563965\n          },\n          \"motivational_cohesion_index\": {\n            \"Martin Luther King Jr.\": 0.14252692074906748,\n            \"Malcolm X\": -0.24193548387096775,\n            \"difference (MLK - MX)\": 0.38446240462003523\n          },\n          \"full_cohesion_index\": {\n            \"Martin Luther King Jr.\": 0.09431633368028427,\n            \"Malcolm X\": -0.3225806451612903,\n            \"difference (MLK - MX)\": 0.4168969788415746\n          }\n        }\n      }\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 2,\n    \"tier_classification\": \"TIER 3\",\n    \"power_notes\": \"With a total sample size of N=2 (n=1 per group), the analysis is classified as Tier 3 (Exploratory). Inferential statistical tests such as t-tests or ANOVA are statistically invalid and were not performed. The analysis is limited to descriptive statistics and a direct comparison of scores between the two texts. The results are valuable for this specific case study but cannot be generalized to a wider population of texts.\"\n  },\n  \"methodology_summary\": \"The statistical analysis was conducted in accordance with the Tier 3 (Exploratory) protocol due to the small sample size (N=2). The primary methods used were descriptive statistics and a direct comparative analysis. A helper function was created to parse the corpus manifest and map document IDs to their respective speakers (Martin Luther King Jr. and Malcolm X). The core analysis involved preparing a DataFrame containing all dimensional scores and derived metrics for both documents. Descriptive statistics (mean scores, which equal the raw scores in an n=1 scenario) were calculated for each speaker. A comparative analysis function was executed to compute the raw difference in scores between the two speakers for every metric, directly addressing the experiment's comparative research questions in an exploratory manner.\"\n}\n```",
    "analysis_artifacts_processed": 6,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 161.214684,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 447818,
      "response_length": 16531
    },
    "timestamp": "2025-09-17T03:56:43.100769+00:00",
    "artifact_hash": "e0a8b3aef457b13332161655104cb8e4f71764595048a39866df7518ccd15db8"
  },
  "verification": {
    "batch_id": "stats_20250917T035401Z",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "verified",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 0.655716,
      "prompt_length": 17029,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T03:56:43.759237+00:00",
    "artifact_hash": "35345e7b6de8118a20b776fb499cd298daf2584e3bddf35332e5f740e67819c3"
  },
  "csv_generation": {
    "batch_id": "stats_20250917T035401Z",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [
      {
        "filename": "scores.csv",
        "path": "/Volumes/code/discernus/projects/mlkmx/runs/20250917T035401Z/data/scores.csv",
        "size": 491
      },
      {
        "filename": "evidence.csv",
        "path": "/Volumes/code/discernus/projects/mlkmx/runs/20250917T035401Z/data/evidence.csv",
        "size": 47
      },
      {
        "filename": "metadata.csv",
        "path": "/Volumes/code/discernus/projects/mlkmx/runs/20250917T035401Z/data/metadata.csv",
        "size": 1353
      }
    ],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 31.335209,
      "prompt_length": 9078,
      "artifacts_processed": 2,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T03:57:15.104662+00:00",
    "artifact_hash": "7ec1091ae62a8f357dd57925f1441f197b5cffea7f49fa2fa7f3577825706d16"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 193.205609,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 161.214684,
      "verification_time": 0.655716,
      "csv_generation_time": 31.335209
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-17T03:57:15.106911+00:00",
  "agent_name": "StatisticalAgent"
}