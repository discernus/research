{
  "batch_id": "stats_20250917T035751Z",
  "step": "statistical_execution",
  "model_used": "vertex_ai/gemini-2.5-pro",
  "statistical_functions_and_results": "```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nfrom typing import Dict, Any, Optional, List\\nimport json\\nimport re\\n\\n\\ndef _extract_json_from_string(s: str) -> Optional[Dict]:\\n    \\\"\\\"\\\"Extracts the first valid JSON object from a string.\\\"\\\"\\\"\\n    # Use a non-greedy regex to find the first JSON object\\n    match = re.search(r'```json\\\\n({.*?})\\\\n```', s, re.DOTALL)\\n    if not match:\\n        match = re.search(r'({.*?})', s, re.DOTALL)\\n    \\n    if match:\\n        json_str = match.group(1)\\n        try:\\n            return json.loads(json_str)\\n        except json.JSONDecodeError:\\n            # Fallback for malformed JSON that might be Python dicts\\n            try:\\n                return eval(json_str)\\n            except:\\n                return None\\n    return None\\n\\ndef _prepare_data(data: Dict[str, Any], corpus_manifest_content: str) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Parses raw analysis artifacts and corpus manifest to create a clean DataFrame.\\n\\n    Args:\\n        data: The raw analysis artifacts dictionary.\\n        corpus_manifest_content: A string containing the corpus manifest YAML.\\n\\n    Returns:\\n        A pandas DataFrame with one row per document, containing all scores and metrics,\\n        or None if data cannot be prepared.\\n    \\\"\\\"\\\"\\n    try:\\n        artifacts = data.get('artifacts', [])\\n        if not artifacts:\\n            return None\\n\\n        # Create a mapping from document_id to speaker from the corpus manifest\\n        speaker_map = {}\\n        # Simplified parsing of the YAML-like manifest\\n        current_doc = None\\n        for line in corpus_manifest_content.splitlines():\\n            if 'filename:' in line:\\n                filename = line.split(':', 1)[1].strip().replace('\\\"', '')\\n                current_doc = filename.split('/')[-1]\\n            if 'speaker:' in line and current_doc:\\n                speaker = line.split(':', 1)[1].strip().replace('\\\"', '')\\n                if 'malcom_x' in current_doc:\\n                    speaker_map['malcolm_x_ballot_bullet_1964'] = speaker\\n                elif 'mlk' in current_doc:\\n                    speaker_map['mlk_birmingham_jail_1963'] = speaker\\n                current_doc = None\\n\\n        # Manually assign analysis_ids to document_ids based on evidence\\n        analysis_to_doc_id = {\\n            'analysis_4b065ced': 'malcolm_x_ballot_bullet_1964', # Inferred from evidence \\\"black nationalism\\\"\\n            'analysis_6ddca5cc': 'mlk_birmingham_jail_1963'    # Inferred from evidence \\\"My Dear Fellow Clergymen\\\"\\n        }\\n\\n        processed_data = {}\\n\\n        for artifact in artifacts:\\n            analysis_id = artifact.get('analysis_id')\\n            if analysis_id not in processed_data:\\n                processed_data[analysis_id] = {'analysis_id': analysis_id}\\n\\n            if artifact.get('step') == 'score_extraction':\\n                scores = _extract_json_from_string(artifact.get('scores_extraction', '{}'))\\n                if scores:\\n                    for dim, values in scores.items():\\n                        processed_data[analysis_id][f'{dim}_raw_score'] = values.get('raw_score')\\n                        processed_data[analysis_id][f'{dim}_salience'] = values.get('salience')\\n            \\n            elif artifact.get('step') == 'derived_metrics_generation':\\n                metrics_str = artifact.get('derived_metrics', '{}')\\n                metrics = _extract_json_from_string(metrics_str)\\n                if metrics:\\n                    processed_data[analysis_id].update(metrics)\\n\\n        df_list = []\\n        for analysis_id, doc_data in processed_data.items():\\n            doc_id = analysis_to_doc_id.get(analysis_id)\\n            if doc_id:\\n                doc_data['document_id'] = doc_id\\n                doc_data['speaker'] = speaker_map.get(doc_id)\\n                df_list.append(doc_data)\\n\\n        if not df_list:\\n            return None\\n            \\n        df = pd.DataFrame(df_list)\\n        return df\\n\\n    except Exception as e:\\n        print(f\\\"Error in _prepare_data: {e}\\\")\\n        return None\\n\\ndef perform_comparative_analysis(data: Dict[str, Any], corpus_manifest_content: str) -> Optional[Dict]:\\n    \\\"\\\"\\\"\\n    Performs a descriptive and comparative analysis of the two speakers.\\n\\n    Given the sample size of N=2 (1 per speaker), this function forgoes inferential\\n    statistics (like t-tests) and instead provides a direct comparison of scores.\\n    It calculates the absolute difference between the scores for Martin Luther King Jr.\\n    and Malcolm X to quantify the rhetorical distinctions, addressing the experiment's\\n    exploratory research questions.\\n\\n    Args:\\n        data: The raw analysis artifacts dictionary.\\n        corpus_manifest_content: A string containing the corpus manifest YAML.\\n\\n    Returns:\\n        A dictionary containing a comparative table of scores and differences,\\n        or None if the analysis cannot be performed.\\n    \\\"\\\"\\\"\\n    df = _prepare_data(data, corpus_manifest_content)\\n    if df is None or len(df) != 2 or 'speaker' not in df.columns:\\n        return {\\n            \\\"error\\\": \\\"Insufficient or malformed data for comparative analysis. Expected 2 documents.\\\",\\n            \\\"dataframe_info\\\": df.info() if df is not None else None\\n        }\\n\\n    try:\\n        df = df.set_index('speaker')\\n        df = df.drop(columns=['analysis_id', 'document_id'], errors='ignore')\\n\\n        # Ensure both speakers are present\\n        if 'Malcolm X' not in df.index or 'Martin Luther King Jr.' not in df.index:\\n            return {\\\"error\\\": \\\"One or both speakers are missing from the data.\\\"}\\n\\n        # Create a comparison dataframe\\n        comparison_df = df.loc[['Martin Luther King Jr.', 'Malcolm X']].T\\n        \\n        # Calculate the difference\\n        comparison_df['difference_mlk_minus_mx'] = comparison_df['Martin Luther King Jr.'] - comparison_df['Malcolm X']\\n        \\n        # Sort by magnitude of difference to highlight key distinctions\\n        comparison_df['abs_difference'] = comparison_df['difference_mlk_minus_mx'].abs()\\n        comparison_df = comparison_df.sort_values(by='abs_difference', ascending=False).drop(columns=['abs_difference'])\\n\\n        results = {\\n            \\\"comparative_scores\\\": comparison_df.to_dict('index'),\\n            \\\"summary\\\": \\\"Comparison of scores for Martin Luther King Jr. and Malcolm X. 'difference' is calculated as MLK's score minus Malcolm X's score.\\\"\\n        }\\n        return results\\n\\n    except Exception as e:\\n        return {\\\"error\\\": f\\\"An error occurred during comparative analysis: {e}\\\"}\\n\\n\\ndef perform_statistical_analysis(data: Dict[str, Any], corpus_manifest_content: str) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Master function that executes all statistical analyses appropriate for the dataset.\\n\\n    Args:\\n        data: The raw analysis artifacts dictionary.\\n        corpus_manifest_content: A string containing the corpus manifest YAML.\\n\\n    Returns:\\n        A dictionary containing the results of all statistical analyses.\\n    \\\"\\\"\\\"\\n    results = {}\\n\\n    # This is the primary analysis for a 2-document comparison\\n    results['descriptive_statistics'] = perform_comparative_analysis(data, corpus_manifest_content)\\n    \\n    # Note on inappropriateness of other tests for N=2\\n    inappropriate_test_note = {\\n        \\\"status\\\": \\\"Not Performed\\\",\\n        \\\"reason\\\": \\\"Inferential tests like correlations, t-tests, or ANOVA are not statistically valid for a sample size of N=2 (one document per group).\\\"\\n    }\\n\\n    results['correlation_analysis'] = inappropriate_test_note\\n    results['group_comparison'] = inappropriate_test_note\\n    results['reliability_analysis'] = inappropriate_test_note\\n    results['additional_analyses'] = {}\\n\\n    return results\\n\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"comparative_scores\": {\n        \"individual_dignity_raw_score\": {\n          \"Martin Luther King Jr.\": 0.95,\n          \"Malcolm X\": 0.1,\n          \"difference_mlk_minus_mx\": 0.85\n        },\n        \"individual_dignity_salience\": {\n          \"Martin Luther King Jr.\": 0.9,\n          \"Malcolm X\": 0.1,\n          \"difference_mlk_minus_mx\": 0.8\n        },\n        \"tribal_dominance_raw_score\": {\n          \"Martin Luther King Jr.\": 0.05,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": -0.85\n        },\n        \"tribal_dominance_salience\": {\n          \"Martin Luther King Jr.\": 0.05,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": -0.85\n        },\n        \"full_cohesion_index\": {\n          \"Martin Luther King Jr.\": 0.09431633368028427,\n          \"Malcolm X\": -0.3225806451612903,\n          \"difference_mlk_minus_mx\": 0.4168969788415746\n        },\n        \"compersion_raw_score\": {\n          \"Martin Luther King Jr.\": 0.6,\n          \"Malcolm X\": 0.0,\n          \"difference_mlk_minus_mx\": 0.6\n        },\n        \"compersion_salience\": {\n          \"Martin Luther King Jr.\": 0.5,\n          \"Malcolm X\": 0.0,\n          \"difference_mlk_minus_mx\": 0.5\n        },\n        \"motivational_cohesion_index\": {\n          \"Martin Luther King Jr.\": 0.14252692074906748,\n          \"Malcolm X\": -0.24193548387096775,\n          \"difference_mlk_minus_mx\": 0.3844624046200352\n        },\n        \"amity_raw_score\": {\n          \"Martin Luther King Jr.\": 0.8,\n          \"Malcolm X\": 0.4,\n          \"difference_mlk_minus_mx\": 0.4\n        },\n        \"amity_salience\": {\n          \"Martin Luther King Jr.\": 0.75,\n          \"Malcolm X\": 0.3,\n          \"difference_mlk_minus_mx\": 0.45\n        },\n        \"descriptive_cohesion_index\": {\n          \"Martin Luther King Jr.\": 0.16159379779510618,\n          \"Malcolm X\": -0.3225806451612903,\n          \"difference_mlk_minus_mx\": 0.4841744429563965\n        },\n        \"envy_raw_score\": {\n          \"Martin Luther King Jr.\": 0.2,\n          \"Malcolm X\": 0.8,\n          \"difference_mlk_minus_mx\": -0.6\n        },\n        \"envy_salience\": {\n          \"Martin Luther King Jr.\": 0.15,\n          \"Malcolm X\": 0.7,\n          \"difference_mlk_minus_mx\": -0.55\n        },\n        \"cohesive_goals_raw_score\": {\n          \"Martin Luther King Jr.\": 0.95,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": 0.050000000000000044\n        },\n        \"cohesive_goals_salience\": {\n          \"Martin Luther King Jr.\": 0.9,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": 0.0\n        },\n        \"emotional_tension\": {\n          \"Martin Luther King Jr.\": 0.100625,\n          \"Malcolm X\": 0.09000000000000001,\n          \"difference_mlk_minus_mx\": 0.010624999999999988\n        },\n        \"goal_tension\": {\n          \"Martin Luther King Jr.\": 0.0325,\n          \"Malcolm X\": 0.0,\n          \"difference_mlk_minus_mx\": 0.0325\n        },\n        \"strategic_contradiction_index\": {\n          \"Martin Luther King Jr.\": 0.0375,\n          \"Malcolm X\": 0.018000000000000002,\n          \"difference_mlk_minus_mx\": 0.019499999999999997\n        },\n        \"hope_raw_score\": {\n          \"Martin Luther King Jr.\": 0.9,\n          \"Malcolm X\": 0.7,\n          \"difference_mlk_minus_mx\": 0.19999999999999996\n        },\n        \"hope_salience\": {\n          \"Martin Luther King Jr.\": 0.85,\n          \"Malcolm X\": 0.7,\n          \"difference_mlk_minus_mx\": 0.15000000000000002\n        },\n        \"relational_tension\": {\n          \"Martin Luther King Jr.\": 0.0375,\n          \"Malcolm X\": 0.0,\n          \"difference_mlk_minus_mx\": 0.0375\n        },\n        \"enmity_raw_score\": {\n          \"Martin Luther King Jr.\": 0.75,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": -0.15000000000000002\n        },\n        \"enmity_salience\": {\n          \"Martin Luther King Jr.\": 0.7,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": -0.2\n        },\n        \"fear_raw_score\": {\n          \"Martin Luther King Jr.\": 0.85,\n          \"Malcolm X\": 0.9,\n          \"difference_mlk_minus_mx\": -0.050000000000000044\n        },\n        \"fear_salience\": {\n          \"Martin Luther King Jr.\": 0.75,\n          \"Malcolm X\": 0.8,\n          \"difference_mlk_minus_mx\": -0.05\n        },\n        \"fragmentative_goals_raw_score\": {\n          \"Martin Luther King Jr.\": 0.7,\n          \"Malcolm X\": 0.8,\n          \"difference_mlk_minus_mx\": -0.10000000000000009\n        },\n        \"fragmentative_goals_salience\": {\n          \"Martin Luther King Jr.\": 0.65,\n          \"Malcolm X\": 0.7,\n          \"difference_mlk_minus_mx\": -0.05\n        },\n        \"identity_tension\": {\n          \"Martin Luther King Jr.\": 0.0,\n          \"Malcolm X\": 0.0,\n          \"difference_mlk_minus_mx\": 0.0\n        },\n        \"success_tension\": {\n          \"Martin Luther King Jr.\": 0.0,\n          \"Malcolm X\": 0.0,\n          \"difference_mlk_minus_mx\": 0.0\n        }\n      },\n      \"summary\": \"Comparison of scores for Martin Luther King Jr. and Malcolm X. 'difference' is calculated as MLK's score minus Malcolm X's score.\"\n    },\n    \"correlation_analysis\": {\n      \"status\": \"Not Performed\",\n      \"reason\": \"Inferential tests like correlations, t-tests, or ANOVA are not statistically valid for a sample size of N=2 (one document per group).\"\n    },\n    \"group_comparison\": {\n      \"status\": \"Not Performed\",\n      \"reason\": \"Inferential tests like correlations, t-tests, or ANOVA are not statistically valid for a sample size of N=2 (one document per group).\"\n    },\n    \"reliability_analysis\": {\n      \"status\": \"Not Performed\",\n      \"reason\": \"Inferential tests like correlations, t-tests, or ANOVA are not statistically valid for a sample size of N=2 (one document per group).\"\n    },\n    \"additional_analyses\": {}\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 2,\n    \"tier_classification\": \"TIER 3 (Exploratory Analysis)\",\n    \"power_notes\": \"With N=2 (1 document per group), the analysis is strictly exploratory. Inferential statistical tests are inappropriate and have been omitted. The analysis focuses on descriptive comparison to quantify the magnitude of differences between the two texts, directly addressing the experiment's research questions.\"\n  },\n  \"methodology_summary\": \"The statistical analysis adheres to the TIER 3 (Exploratory Analysis) protocol due to the sample size of two documents. The core method is a descriptive comparative analysis. A function was created to parse the analysis artifacts and align them with speaker information from the corpus manifest. This function then computed a direct, side-by-side comparison of all CFF dimensional scores and derived metrics for Martin Luther King Jr. and Malcolm X. The difference between the scores for each speaker was calculated to highlight the magnitude and direction of rhetorical distinctions. No inferential tests were performed as they would be statistically invalid.\"\n}\n```",
  "analysis_artifacts_processed": 6,
  "cost_info": {
    "model": "vertex_ai/gemini-2.5-pro",
    "execution_time_seconds": 64.249154,
    "response_cost": 0.0,
    "input_tokens": 0,
    "output_tokens": 0,
    "total_tokens": 0,
    "prompt_length": 447818,
    "response_length": 14877
  },
  "timestamp": "2025-09-17T03:58:56.023477+00:00"
}