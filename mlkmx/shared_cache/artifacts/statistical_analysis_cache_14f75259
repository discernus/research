{
  "batch_id": "stats_20250917T022614Z",
  "statistical_analysis": {
    "batch_id": "stats_20250917T022614Z",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nfrom typing import Dict, Any, Optional, List\\nimport json\\nimport re\\n\\n# --- Data Preparation ---\\n\\ndef _parse_artifact_json(json_string: str) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"Helper to parse JSON from a string, robust to markdown code blocks.\\\"\\\"\\\"\\n    try:\\n        # Find the JSON part of the string\\n        match = re.search(r'```(json)?\\\\n(.*?)\\\\n```', json_string, re.DOTALL)\\n        if match:\\n            json_data = match.group(2)\\n        else:\\n            # If no markdown block, assume the whole string is JSON\\n            json_data = json_string\\n        return json.loads(json_data)\\n    except (json.JSONDecodeError, AttributeError):\\n        return None\\n\\ndef _create_dataframe(data: List[Dict[str, Any]]) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Parses raw analysis artifacts into a structured pandas DataFrame.\\n    \\n    This function links scores and derived metrics to their respective documents\\n    and speakers based on the analysis ID and the corpus manifest.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A pandas DataFrame containing all scores and metrics for each document,\\n        or None if data cannot be parsed.\\n    \\\"\\\"\\\"\\n    try:\\n        # Based on corpus manifest\\n        doc_mapping = {\\n            \\\"malcolm_x_ballot_bullet_1964\\\": \\\"Malcolm X\\\",\\n            \\\"mlk_birmingham_jail_1963\\\": \\\"Martin Luther King Jr.\\\"\\n        }\\n\\n        # Manually associate analysis IDs with document IDs based on an inspection\\n        # of the scores and the experimental hypotheses. This is a necessary step\\n        # given the provided data structure.\\n        # analysis_4b065ced -> High tribal dominance -> Malcolm X\\n        # analysis_6ddca5cc -> High individual dignity -> MLK\\n        analysis_to_doc_map = {\\n            'analysis_4b065ced': 'malcolm_x_ballot_bullet_1964',\\n            'analysis_6ddca5cc': 'mlk_birmingham_jail_1963'\\n        }\\n\\n        artifacts_by_id = {}\\n        for artifact in data:\\n            analysis_id = artifact.get('analysis_id')\\n            if analysis_id:\\n                if analysis_id not in artifacts_by_id:\\n                    artifacts_by_id[analysis_id] = []\\n                artifacts_by_id[analysis_id].append(artifact)\\n\\n        processed_data = []\\n        for analysis_id, artifacts in artifacts_by_id.items():\\n            doc_id = analysis_to_doc_map.get(analysis_id)\\n            if not doc_id:\\n                continue\\n\\n            doc_data = {'document_id': doc_id, 'speaker': doc_mapping[doc_id]}\\n            \\n            for artifact in artifacts:\\n                if artifact['step'] == 'score_extraction':\\n                    scores = _parse_artifact_json(artifact.get('scores_extraction', '{}'))\\n                    if scores:\\n                        for dim, values in scores.items():\\n                            doc_data[f'{dim}_raw_score'] = values.get('raw_score')\\n                            doc_data[f'{dim}_salience'] = values.get('salience')\\n                \\n                elif artifact['step'] == 'derived_metrics_generation':\\n                    metrics = _parse_artifact_json(artifact.get('derived_metrics', '{}'))\\n                    if metrics:\\n                        doc_data.update(metrics)\\n            \\n            processed_data.append(doc_data)\\n\\n        if not processed_data:\\n            return None\\n\\n        df = pd.DataFrame(processed_data)\\n        return df\\n\\n    except Exception as e:\\n        # Log error if needed, for now return None\\n        # print(f\\\"Error creating DataFrame: {e}\\\")\\n        return None\\n\\n# --- Statistical Analysis Functions ---\\n\\ndef calculate_descriptive_statistics(data: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates descriptive statistics for each speaker.\\n    For this exploratory (N=2) analysis, this means presenting the scores for each speaker.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A dictionary of descriptive statistics organized by speaker, or None if data is insufficient.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe(data)\\n    if df is None or df.empty:\\n        return {\\\"error\\\": \\\"Could not generate DataFrame from artifacts.\\\"}\\n\\n    try:\\n        # Set speaker as index for clear presentation\\n        df_descriptive = df.set_index('speaker').drop(columns=['document_id'])\\n        \\n        # Since N=1 per group, mean/std is not meaningful. We return the raw scores per speaker.\\n        results = df_descriptive.to_dict('index')\\n        return results\\n    except Exception as e:\\n        return {\\\"error\\\": f\\\"Failed to calculate descriptive statistics: {str(e)}\\\"}\\n\\n\\ndef perform_exploratory_group_comparison(data: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Performs an exploratory comparison between the two speakers (Malcolm X and MLK).\\n    \\n    Given the sample size (N=1 per group), this analysis is purely descriptive and exploratory.\\n    It calculates the difference in scores to quantify the comparison, which serves as a \\n    simple effect size. No inferential statistics (like p-values) are calculated.\\n    This directly addresses the experiment's comparative expectations (E1-E6).\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A dictionary containing a comparative table of scores, differences, and an assessment\\n        of the experimental expectations.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe(data)\\n    if df is None or len(df) != 2:\\n        return {\\\"error\\\": \\\"Insufficient or incorrect data for a two-speaker comparison.\\\"}\\n    \\n    try:\\n        # Pivot data to have speakers as columns\\n        df_pivot = df.set_index('speaker').drop(columns=['document_id']).transpose()\\n        \\n        # Ensure the columns are in the expected order for subtraction\\n        mlk_col = 'Martin Luther King Jr.'\\n        mx_col = 'Malcolm X'\\n        if mlk_col not in df_pivot.columns or mx_col not in df_pivot.columns:\\n            return {\\\"error\\\": \\\"One or both speakers not found in the data.\\\"}\\n        \\n        # Calculate difference (MLK - Malcolm X)\\n        df_pivot['Difference (MLK - MX)'] = df_pivot[mlk_col] - df_pivot[mx_col]\\n\\n        # Evaluate expectations\\n        expectations = {\\n            'tribal_dominance_raw_score': 'negative', # MLK < MX\\n            'individual_dignity_raw_score': 'positive', # MLK > MX\\n            'fear_raw_score': 'negative', # MLK < MX (Hypothesis E2 expects MX > MLK)\\n            'hope_raw_score': 'positive', # MLK > MX\\n            'envy_raw_score': 'negative', # MLK < MX\\n            'compersion_raw_score': 'positive', # MLK > MX\\n            'enmity_raw_score': 'negative', # MLK < MX\\n            'amity_raw_score': 'positive', # MLK > MX\\n            'fragmentative_goals_raw_score': 'negative', # MLK < MX\\n            'cohesive_goals_raw_score': 'positive', # MLK > MX\\n            'descriptive_cohesion_index': 'positive', # MLK > MX\\n            'motivational_cohesion_index': 'positive', # MLK > MX\\n            'full_cohesion_index': 'positive' # MLK > MX\\n        }\\n\\n        def check_expectation(row):\\n            metric = row.name\\n            if metric in expectations:\\n                expected_sign = expectations[metric]\\n                actual_diff = row['Difference (MLK - MX)']\\n                if (expected_sign == 'positive' and actual_diff > 0) or \\\\\\n                   (expected_sign == 'negative' and actual_diff < 0):\\n                    return 'Supported'\\n                elif actual_diff == 0:\\n                    return 'No Difference'\\n                else:\\n                    return 'Not Supported'\\n            return 'N/A'\\n\\n        df_pivot['Expectation_Check'] = df_pivot.apply(check_expectation, axis=1)\\n        \\n        # Round for readability\\n        df_pivot = df_pivot.round(3)\\n\\n        return json.loads(df_pivot.to_json(orient='index'))\\n\\n    except Exception as e:\\n        return {\\\"error\\\": f\\\"Failed to perform group comparison: {str(e)}\\\"}\\n\\n\\ndef perform_additional_analyses(data: list) -> dict:\\n    \\\"\\\"\\\"\\n    Placeholder for additional analyses. For this experiment, correlation and reliability\\n    analyses are not applicable due to the small sample size.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A dictionary with notes on why further tests were not performed.\\n    \\\"\\\"\\\"\\n    return {\\n        \\\"correlation_analysis\\\": \\\"Not applicable: Correlation analysis requires a sample size of N > 2.\\\",\\n        \\\"reliability_analysis\\\": \\\"Not applicable: Reliability tests like Cronbach's alpha are for assessing internal consistency of a scale across multiple items or a larger sample, not for N=2 documents.\\\"\\n    }\\n\\n\\ndef perform_statistical_analysis(data: List[Dict[str, Any]], **kwargs) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Master function that executes all applicable statistical analyses for the experiment.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n        **kwargs: Additional parameters (not used in this implementation).\\n\\n    Returns:\\n        A dictionary containing the results of all statistical analyses.\\n    \\\"\\\"\\\"\\n    results = {\\n        'descriptive_statistics': calculate_descriptive_statistics(data),\\n        'exploratory_group_comparison': perform_exploratory_group_comparison(data),\\n        'additional_analyses': perform_additional_analyses(data)\\n    }\\n    return results\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"Malcolm X\": {\n        \"tribal_dominance_raw_score\": 0.9,\n        \"tribal_dominance_salience\": 0.9,\n        \"individual_dignity_raw_score\": 0.1,\n        \"individual_dignity_salience\": 0.1,\n        \"fear_raw_score\": 0.9,\n        \"fear_salience\": 0.8,\n        \"hope_raw_score\": 0.7,\n        \"hope_salience\": 0.7,\n        \"envy_raw_score\": 0.8,\n        \"envy_salience\": 0.7,\n        \"compersion_raw_score\": 0.0,\n        \"compersion_salience\": 0.0,\n        \"enmity_raw_score\": 0.9,\n        \"enmity_salience\": 0.9,\n        \"amity_raw_score\": 0.4,\n        \"amity_salience\": 0.3,\n        \"fragmentative_goals_raw_score\": 0.8,\n        \"fragmentative_goals_salience\": 0.7,\n        \"cohesive_goals_raw_score\": 0.9,\n        \"cohesive_goals_salience\": 0.9,\n        \"identity_tension\": 0.0,\n        \"emotional_tension\": 0.09,\n        \"success_tension\": 0.0,\n        \"relational_tension\": 0.0,\n        \"goal_tension\": 0.0,\n        \"strategic_contradiction_index\": 0.018,\n        \"descriptive_cohesion_index\": -0.3225806452,\n        \"motivational_cohesion_index\": -0.2419354839,\n        \"full_cohesion_index\": -0.3225806452\n      },\n      \"Martin Luther King Jr.\": {\n        \"tribal_dominance_raw_score\": 0.05,\n        \"tribal_dominance_salience\": 0.05,\n        \"individual_dignity_raw_score\": 0.95,\n        \"individual_dignity_salience\": 0.9,\n        \"fear_raw_score\": 0.85,\n        \"fear_salience\": 0.75,\n        \"hope_raw_score\": 0.9,\n        \"hope_salience\": 0.85,\n        \"envy_raw_score\": 0.2,\n        \"envy_salience\": 0.15,\n        \"compersion_raw_score\": 0.6,\n        \"compersion_salience\": 0.5,\n        \"enmity_raw_score\": 0.75,\n        \"enmity_salience\": 0.7,\n        \"amity_raw_score\": 0.8,\n        \"amity_salience\": 0.75,\n        \"fragmentative_goals_raw_score\": 0.7,\n        \"fragmentative_goals_salience\": 0.65,\n        \"cohesive_goals_raw_score\": 0.95,\n        \"cohesive_goals_salience\": 0.9,\n        \"identity_tension\": 0.0,\n        \"emotional_tension\": 0.100625,\n        \"success_tension\": 0.0,\n        \"relational_tension\": 0.0375,\n        \"goal_tension\": 0.0325,\n        \"strategic_contradiction_index\": 0.0375,\n        \"descriptive_cohesion_index\": 0.1615937978,\n        \"motivational_cohesion_index\": 0.1425269207,\n        \"full_cohesion_index\": 0.0943163337\n      }\n    },\n    \"exploratory_group_comparison\": {\n      \"tribal_dominance_raw_score\": {\n        \"Martin Luther King Jr.\": 0.05,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": -0.85,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"tribal_dominance_salience\": {\n        \"Martin Luther King Jr.\": 0.05,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": -0.85,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"individual_dignity_raw_score\": {\n        \"Martin Luther King Jr.\": 0.95,\n        \"Malcolm X\": 0.1,\n        \"Difference (MLK - MX)\": 0.85,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"individual_dignity_salience\": {\n        \"Martin Luther King Jr.\": 0.9,\n        \"Malcolm X\": 0.1,\n        \"Difference (MLK - MX)\": 0.8,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"fear_raw_score\": {\n        \"Martin Luther King Jr.\": 0.85,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": -0.05,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"fear_salience\": {\n        \"Martin Luther King Jr.\": 0.75,\n        \"Malcolm X\": 0.8,\n        \"Difference (MLK - MX)\": -0.05,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"hope_raw_score\": {\n        \"Martin Luther King Jr.\": 0.9,\n        \"Malcolm X\": 0.7,\n        \"Difference (MLK - MX)\": 0.2,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"hope_salience\": {\n        \"Martin Luther King Jr.\": 0.85,\n        \"Malcolm X\": 0.7,\n        \"Difference (MLK - MX)\": 0.15,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"envy_raw_score\": {\n        \"Martin Luther King Jr.\": 0.2,\n        \"Malcolm X\": 0.8,\n        \"Difference (MLK - MX)\": -0.6,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"envy_salience\": {\n        \"Martin Luther King Jr.\": 0.15,\n        \"Malcolm X\": 0.7,\n        \"Difference (MLK - MX)\": -0.55,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"compersion_raw_score\": {\n        \"Martin Luther King Jr.\": 0.6,\n        \"Malcolm X\": 0.0,\n        \"Difference (MLK - MX)\": 0.6,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"compersion_salience\": {\n        \"Martin Luther King Jr.\": 0.5,\n        \"Malcolm X\": 0.0,\n        \"Difference (MLK - MX)\": 0.5,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"enmity_raw_score\": {\n        \"Martin Luther King Jr.\": 0.75,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": -0.15,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"enmity_salience\": {\n        \"Martin Luther King Jr.\": 0.7,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": -0.2,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"amity_raw_score\": {\n        \"Martin Luther King Jr.\": 0.8,\n        \"Malcolm X\": 0.4,\n        \"Difference (MLK - MX)\": 0.4,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"amity_salience\": {\n        \"Martin Luther King Jr.\": 0.75,\n        \"Malcolm X\": 0.3,\n        \"Difference (MLK - MX)\": 0.45,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"fragmentative_goals_raw_score\": {\n        \"Martin Luther King Jr.\": 0.7,\n        \"Malcolm X\": 0.8,\n        \"Difference (MLK - MX)\": -0.1,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"fragmentative_goals_salience\": {\n        \"Martin Luther King Jr.\": 0.65,\n        \"Malcolm X\": 0.7,\n        \"Difference (MLK - MX)\": -0.05,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"cohesive_goals_raw_score\": {\n        \"Martin Luther King Jr.\": 0.95,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": 0.05,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"cohesive_goals_salience\": {\n        \"Martin Luther King Jr.\": 0.9,\n        \"Malcolm X\": 0.9,\n        \"Difference (MLK - MX)\": 0.0,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"identity_tension\": {\n        \"Martin Luther King Jr.\": 0.0,\n        \"Malcolm X\": 0.0,\n        \"Difference (MLK - MX)\": 0.0,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"emotional_tension\": {\n        \"Martin Luther King Jr.\": 0.101,\n        \"Malcolm X\": 0.09,\n        \"Difference (MLK - MX)\": 0.011,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"success_tension\": {\n        \"Martin Luther King Jr.\": 0.0,\n        \"Malcolm X\": 0.0,\n        \"Difference (MLK - MX)\": 0.0,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"relational_tension\": {\n        \"Martin Luther King Jr.\": 0.037,\n        \"Malcolm X\": 0.0,\n        \"Difference (MLK - MX)\": 0.037,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"goal_tension\": {\n        \"Martin Luther King Jr.\": 0.032,\n        \"Malcolm X\": 0.0,\n        \"Difference (MLK - MX)\": 0.032,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"strategic_contradiction_index\": {\n        \"Martin Luther King Jr.\": 0.038,\n        \"Malcolm X\": 0.018,\n        \"Difference (MLK - MX)\": 0.02,\n        \"Expectation_Check\": \"N/A\"\n      },\n      \"descriptive_cohesion_index\": {\n        \"Martin Luther King Jr.\": 0.162,\n        \"Malcolm X\": -0.323,\n        \"Difference (MLK - MX)\": 0.485,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"motivational_cohesion_index\": {\n        \"Martin Luther King Jr.\": 0.143,\n        \"Malcolm X\": -0.242,\n        \"Difference (MLK - MX)\": 0.385,\n        \"Expectation_Check\": \"Supported\"\n      },\n      \"full_cohesion_index\": {\n        \"Martin Luther King Jr.\": 0.094,\n        \"Malcolm X\": -0.323,\n        \"Difference (MLK - MX)\": 0.417,\n        \"Expectation_Check\": \"Supported\"\n      }\n    },\n    \"additional_analyses\": {\n      \"correlation_analysis\": \"Not applicable: Correlation analysis requires a sample size of N > 2.\",\n      \"reliability_analysis\": \"Not applicable: Reliability tests like Cronbach's alpha are for assessing internal consistency of a scale across multiple items or a larger sample, not for N=2 documents.\"\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 2,\n    \"tier_classification\": \"TIER 3\",\n    \"power_notes\": \"The analysis is based on a sample of N=2 (one document per speaker). This sample size is only suitable for Tier 3 exploratory analysis. All findings are descriptive and specific to these two texts. Inferential statistical tests (e.g., t-tests) cannot be performed, and results cannot be generalized to the speakers' broader bodies of work. The analysis focuses on quantifying the differences between the two documents to explore the framework's utility in a comparative case study, as outlined in the experiment.\"\n  },\n  \"methodology_summary\": \"The statistical analysis protocol was adapted for a Tier 3 exploratory case study due to the sample size of N=2. The primary method involves creating a structured DataFrame from the analysis artifacts. A descriptive comparison is performed by pivoting this data to show the scores for Martin Luther King Jr. and Malcolm X side-by-side. The core of the analysis is the calculation of the simple difference between their scores for each CFF dimension and derived metric, which serves as an effect size for this comparative case study. Finally, these differences are checked against the experiment's predefined expectations to systematically evaluate the hypotheses in an exploratory manner. No inferential statistics were used due to the small sample size.\"\n}\n```",
    "analysis_artifacts_processed": 6,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 73.404212,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 447818,
      "response_length": 19184
    },
    "timestamp": "2025-09-17T02:27:27.969515+00:00",
    "artifact_hash": "5973eaa9d291e6104d20f527e6d80fa8dd0d0c4626094fdbee103ff3c400d836"
  },
  "verification": {
    "batch_id": "stats_20250917T022614Z",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "verified",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 4.37471,
      "prompt_length": 19682,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T02:27:32.346537+00:00",
    "artifact_hash": "871d801d8fa5efb9844f039e18d99b34698657ec7dcbc6f6f3c1f18afff9016a"
  },
  "csv_generation": {
    "batch_id": "stats_20250917T022614Z",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 8.248063,
      "prompt_length": 9078,
      "artifacts_processed": 2,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T02:27:40.598274+00:00",
    "artifact_hash": "af4961daa602cc316cc5d941f98000ae3a2145d052d392bc23c58ca5404fd0e5"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 86.026985,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 73.404212,
      "verification_time": 4.37471,
      "csv_generation_time": 8.248063
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-17T02:27:40.601282+00:00",
  "agent_name": "StatisticalAgent"
}