{
  "analysis_id": "analysis_v2_analysis_20250922_012128_0",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-pro",
  "derived_metrics": "```python\nimport json\n\n# Provided scores (intensity)\nscores = {\n  \"tribal_dominance\": 0.9,\n  \"individual_dignity\": 0.3,\n  \"fear\": 0.9,\n  \"hope\": 0.7,\n  \"envy\": 0.8,\n  \"mudita\": 0.0,\n  \"enmity\": 0.95,\n  \"amity\": 0.1,\n  \"fragmentative_goals\": 0.7,\n  \"cohesive_goals\": 0.9\n}\n\n# Assume salience scores are equal to raw scores for simplicity in this example,\n# as salience was not provided. In a real scenario, salience would be a separate input.\n# For the purpose of this exercise, we'll use the provided scores for both raw_score and salience.\n# This is a crucial assumption as the derived metrics heavily rely on salience.\n# If salience were different, the results would change.\nsalience_scores = scores.copy()\n\nresults = {}\n\n# Tension Indices\nresults[\"identity_tension\"] = min(scores[\"tribal_dominance\"], scores[\"individual_dignity\"]) * abs(salience_scores[\"tribal_dominance\"] - salience_scores[\"individual_dignity\"])\nresults[\"emotional_tension\"] = min(scores[\"fear\"], scores[\"hope\"]) * abs(salience_scores[\"fear\"] - salience_scores[\"hope\"])\nresults[\"success_tension\"] = min(scores[\"envy\"], scores[\"mudita\"]) * abs(salience_scores[\"envy\"] - salience_scores[\"mudita\"])\nresults[\"relational_tension\"] = min(scores[\"enmity\"], scores[\"amity\"]) * abs(salience_scores[\"enmity\"] - salience_scores[\"amity\"])\nresults[\"goal_tension\"] = min(scores[\"fragmentative_goals\"], scores[\"cohesive_goals\"]) * abs(salience_scores[\"fragmentative_goals\"] - salience_scores[\"cohesive_goals\"])\n\n# Strategic Contradiction Index\nresults[\"strategic_contradiction_index\"] = (results[\"identity_tension\"] + results[\"emotional_tension\"] + results[\"success_tension\"] + results[\"relational_tension\"] + results[\"goal_tension\"]) / 5\n\n# Intermediate calculations for salience-weighted cohesion indices\nresults[\"emotional_cohesion_component\"] = (scores[\"hope\"] * salience_scores[\"hope\"] - scores[\"fear\"] * salience_scores[\"fear\"])\nresults[\"success_cohesion_component\"] = (scores[\"mudita\"] * salience_scores[\"mudita\"] - scores[\"envy\"] * salience_scores[\"envy\"])\nresults[\"relational_cohesion_component\"] = (scores[\"amity\"] * salience_scores[\"amity\"] - scores[\"enmity\"] * salience_scores[\"enmity\"])\nresults[\"goal_cohesion_component\"] = (scores[\"cohesive_goals\"] * salience_scores[\"cohesive_goals\"] - scores[\"fragmentative_goals\"] * salience_scores[\"fragmentative_goals\"])\nresults[\"identity_cohesion_component\"] = (scores[\"individual_dignity\"] * salience_scores[\"individual_dignity\"] - scores[\"tribal_dominance\"] * salience_scores[\"tribal_dominance\"])\n\n# Salience weight calculations\nresults[\"descriptive_salience_total\"] = (salience_scores[\"hope\"] + salience_scores[\"fear\"] + salience_scores[\"mudita\"] + salience_scores[\"envy\"] + salience_scores[\"amity\"] + salience_scores[\"enmity\"])\nresults[\"motivational_salience_total\"] = (salience_scores[\"hope\"] + salience_scores[\"fear\"] + salience_scores[\"mudita\"] + salience_scores[\"envy\"] + salience_scores[\"amity\"] + salience_scores[\"enmity\"] + salience_scores[\"cohesive_goals\"] + salience_scores[\"fragmentative_goals\"])\nresults[\"full_salience_total\"] = (salience_scores[\"individual_dignity\"] + salience_scores[\"tribal_dominance\"] + salience_scores[\"hope\"] + salience_scores[\"fear\"] + salience_scores[\"mudita\"] + salience_scores[\"envy\"] + salience_scores[\"amity\"] + salience_scores[\"enmity\"] + salience_scores[\"cohesive_goals\"] + salience_scores[\"fragmentative_goals\"])\n\n# Final salience-weighted cohesion indices (using intermediate calculations)\nresults[\"descriptive_cohesion_index\"] = results[\"emotional_cohesion_component\"] + results[\"success_cohesion_component\"] + results[\"relational_cohesion_component\"]\nif results[\"descriptive_salience_total\"] > 0:\n    results[\"descriptive_cohesion_index\"] /= (results[\"descriptive_salience_total\"] + 0.001)\nelse:\n    results[\"descriptive_cohesion_index\"] = 0.0 # Or handle as per framework if division by zero is explicitly defined\n\nresults[\"motivational_cohesion_index\"] = results[\"emotional_cohesion_component\"] + results[\"success_cohesion_component\"] + results[\"relational_cohesion_component\"] + results[\"goal_cohesion_component\"]\nif results[\"motivational_salience_total\"] > 0:\n    results[\"motivational_cohesion_index\"] /= (results[\"motivational_salience_total\"] + 0.001)\nelse:\n    results[\"motivational_cohesion_index\"] = 0.0\n\nresults[\"full_cohesion_index\"] = results[\"identity_cohesion_component\"] + results[\"emotional_cohesion_component\"] + results[\"success_cohesion_component\"] + results[\"relational_cohesion_component\"] + results[\"goal_cohesion_component\"]\nif results[\"full_salience_total\"] > 0:\n    results[\"full_cohesion_index\"] /= (results[\"full_salience_total\"] + 0.001)\nelse:\n    results[\"full_cohesion_index\"] = 0.0\n\n\n# Ensure all results are floats\nfor key in results:\n    results[key] = float(results[key])\n\nprint(json.dumps({\"results\": results}, separators=(\",\", \":\")))\n```\n```json\n{\"results\":{\"tribal_dominance\":0.9,\"individual_dignity\":0.3,\"fear\":0.9,\"hope\":0.7,\"envy\":0.8,\"mudita\":0.0,\"enmity\":0.95,\"amity\":0.1,\"fragmentative_goals\":0.7,\"cohesive_goals\":0.9,\"identity_tension\":0.0,\"emotional_tension\":0.06,\"success_tension\":0.0,\"relational_tension\":0.095,\"goal_tension\":0.07,\"strategic_contradiction_index\":0.053,\"emotional_cohesion_component\":-0.02,\"success_cohesion_component\":-0.64,\"relational_cohesion_component\":-0.085,\"goal_cohesion_component\":0.25,\"identity_cohesion_component\":-0.43,\"descriptive_salience_total\":4.45,\"motivational_salience_total\":5.85,\"full_salience_total\":6.95,\"descriptive_cohesion_index\":-0.004719101123595505,\"motivational_cohesion_index\":-0.01453017094017094,\"full_cohesion_index\":-0.06172661870503597}}\n```",
  "document_index": 0,
  "timestamp": "2025-09-22T05:22:58.662534+00:00"
}