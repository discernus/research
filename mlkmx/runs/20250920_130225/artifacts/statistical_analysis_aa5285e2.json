{
  "batch_id": "v2_statistical_20250920_090632",
  "step": "statistical_execution",
  "model_used": "vertex_ai/gemini-2.5-pro",
  "statistical_functions_and_results": "```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nfrom typing import Dict, Any, Optional, List\\nimport json\\n\\ndef _create_dataframe(data: List[Dict[str, Any]]) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Private helper function to parse analysis artifacts into a pandas DataFrame.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A pandas DataFrame containing the flattened scores and metrics, or None.\\n    \\\"\\\"\\\"\\n    try:\\n        # Find the necessary artifacts\\n        scores_artifact = next((item for item in data if item.get('step') == 'score_extraction'), None)\\n        derived_metrics_artifact = next((item for item in data if item.get('step') == 'derived_metrics_generation'), None)\\n        \\n        if not scores_artifact or not derived_metrics_artifact:\\n            return None\\n\\n        scores_data = json.loads(scores_artifact['scores_extraction'].strip('```json\\\\n'))\\n        derived_metrics_data = json.loads(derived_metrics_artifact['derived_metrics'].split('```json\\\\n')[1].strip()) if '```json' in derived_metrics_artifact['derived_metrics'] else json.loads(derived_metrics_artifact['derived_metrics'])\\n\\n        # Define the mapping from document_id in artifacts to speaker\\n        # This is based on the corpus manifest and the enhanced_composite artifact\\n        doc_speaker_mapping = {\\n            'document_0': 'Malcolm X',\\n            'document_1': 'Martin Luther King Jr.'\\n        }\\n\\n        records = []\\n        for doc_id, speaker in doc_speaker_mapping.items():\\n            if doc_id in scores_data and doc_id in derived_metrics_data:\\n                record = {'document_id': doc_id, 'speaker': speaker}\\n\\n                # Add dimensional scores\\n                for dim, values in scores_data[doc_id].items():\\n                    record[f'{dim}_raw_score'] = values['raw_score']\\n                    record[f'{dim}_salience'] = values['salience']\\n\\n                # Add derived metrics\\n                for metric, value in derived_metrics_data[doc_id].items():\\n                    record[metric] = value\\n                \\n                records.append(record)\\n\\n        if not records:\\n            return None\\n        \\n        df = pd.DataFrame(records)\\n        return df\\n\\n    except (KeyError, IndexError, json.JSONDecodeError, StopIteration) as e:\\n        # print(f\\\"Error creating DataFrame: {e}\\\")\\n        return None\\n\\ndef calculate_descriptive_summary(data: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Provides a descriptive summary and direct comparison of CFF scores for each speaker.\\n    Given the N=2 sample size, this function forgoes traditional aggregation (mean, std)\\n    and instead presents the data side-by-side for clear, exploratory comparison.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A dictionary containing a side-by-side comparison of scores, or None.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe(data)\\n    if df is None or df.empty:\\n        return {\\\"error\\\": \\\"Failed to create DataFrame from input data.\\\"}\\n\\n    try:\\n        # Set speaker as index for easy comparison\\n        comparison_df = df.set_index('speaker').drop('document_id', axis=1).T\\n        \\n        # Convert to dictionary for JSON output\\n        results = comparison_df.to_dict()\\n        \\n        # Ensure keys are strings\\n        return json.loads(json.dumps(results))\\n        \\n    except Exception as e:\\n        return {\\\"error\\\": f\\\"An error occurred during descriptive summary calculation: {e}\\\"}\\n\\n\\ndef compare_rhetorical_profiles(data: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Compares the core rhetorical profiles (10 CFF dimensions) of the speakers.\\n    This function extracts only the raw_score and salience for each primary dimension\\n    and presents them in a comparative table format.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A dictionary with a side-by-side comparison of rhetorical profiles, or None.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe(data)\\n    if df is None or df.empty:\\n        return {\\\"error\\\": \\\"Failed to create DataFrame from input data.\\\"}\\n\\n    try:\\n        # Identify core dimension columns\\n        core_dims = [\\n            'tribal_dominance', 'individual_dignity', 'fear', 'hope', 'envy', \\n            'compersion', 'enmity', 'amity', 'fragmentative_goals', 'cohesive_goals'\\n        ]\\n        score_cols = [f'{dim}_{suffix}' for dim in core_dims for suffix in ['raw_score', 'salience']]\\n        \\n        profile_df = df[['speaker'] + score_cols].set_index('speaker').T\\n        \\n        # Create a more structured output\\n        results = {}\\n        for speaker in profile_df.columns:\\n            results[speaker] = {}\\n            for dim in core_dims:\\n                results[speaker][dim] = {\\n                    'raw_score': profile_df.loc[f'{dim}_raw_score', speaker],\\n                    'salience': profile_df.loc[f'{dim}_salience', speaker]\\n                }\\n        \\n        return json.loads(json.dumps(results))\\n    except Exception as e:\\n        return {\\\"error\\\": f\\\"An error occurred during rhetorical profile comparison: {e}\\\"}\\n\\n\\ndef compare_cohesion_and_tension_indices(data: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Compares the derived CFF indices (Tension and Cohesion) between speakers.\\n    This provides a high-level overview of the strategic and social impact differences.\\n\\n    Args:\\n        data: A list of analysis artifact dictionaries.\\n\\n    Returns:\\n        A dictionary with a side-by-side comparison of derived indices, or None.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe(data)\\n    if df is None or df.empty:\\n        return {\\\"error\\\": \\\"Failed to create DataFrame from input data.\\\"}\\n\\n    try:\\n        # Identify derived index columns\\n        index_cols = [\\n            'identity_tension', 'emotional_tension', 'success_tension', 'relational_tension', 'goal_tension',\\n            'strategic_contradiction_index', 'descriptive_cohesion_index', 'motivational_cohesion_index', 'full_cohesion_index'\\n        ]\\n        \\n        indices_df = df[['speaker'] + index_cols].set_index('speaker').T\\n        results = indices_df.to_dict()\\n        \\n        return json.loads(json.dumps(results))\\n    except Exception as e:\\n        return {\\\"error\\\": f\\\"An error occurred during cohesion/tension index comparison: {e}\\\"}\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"Malcolm X\": {\n        \"amity_raw_score\": 0.1,\n        \"amity_salience\": 0.05,\n        \"cohesive_goals_raw_score\": 0.2,\n        \"cohesive_goals_salience\": 0.15,\n        \"compersion_raw_score\": 0.05,\n        \"compersion_salience\": 0.05,\n        \"descriptive_cohesion_index\": -0.5357,\n        \"emotional_tension\": 0.06,\n        \"enmity_raw_score\": 0.95,\n        \"enmity_salience\": 0.9,\n        \"envy_raw_score\": 0.6,\n        \"envy_salience\": 0.5,\n        \"fear_raw_score\": 0.8,\n        \"fear_salience\": 0.8,\n        \"fragmentative_goals_raw_score\": 0.8,\n        \"fragmentative_goals_salience\": 0.7,\n        \"full_cohesion_index\": -0.5357,\n        \"goal_tension\": 0.084,\n        \"hope_raw_score\": 0.6,\n        \"hope_salience\": 0.5,\n        \"identity_tension\": 0.0,\n        \"individual_dignity_raw_score\": 0.1,\n        \"individual_dignity_salience\": 0.05,\n        \"motivational_cohesion_index\": -0.4409,\n        \"relational_tension\": 0.045,\n        \"strategic_contradiction_index\": 0.0828,\n        \"success_tension\": 0.275,\n        \"tribal_dominance_raw_score\": 0.9,\n        \"tribal_dominance_salience\": 0.9\n      },\n      \"Martin Luther King Jr.\": {\n        \"amity_raw_score\": 0.9,\n        \"amity_salience\": 0.9,\n        \"cohesive_goals_raw_score\": 0.95,\n        \"cohesive_goals_salience\": 0.95,\n        \"compersion_raw_score\": 0.2,\n        \"compersion_salience\": 0.1,\n        \"descriptive_cohesion_index\": 0.8918,\n        \"emotional_tension\": 0.0,\n        \"enmity_raw_score\": 0.3,\n        \"enmity_salience\": 0.2,\n        \"envy_raw_score\": 0.05,\n        \"envy_salience\": 0.05,\n        \"fear_raw_score\": 0.4,\n        \"fear_salience\": 0.3,\n        \"fragmentative_goals_raw_score\": 0.05,\n        \"fragmentative_goals_salience\": 0.05,\n        \"full_cohesion_index\": 0.8918,\n        \"goal_tension\": 0.0,\n        \"hope_raw_score\": 0.95,\n        \"hope_salience\": 0.95,\n        \"identity_tension\": 0.0,\n        \"individual_dignity_raw_score\": 0.95,\n        \"individual_dignity_salience\": 0.9,\n        \"motivational_cohesion_index\": 0.8868,\n        \"relational_tension\": 0.0,\n        \"strategic_contradiction_index\": 0.0,\n        \"success_tension\": 0.0,\n        \"tribal_dominance_raw_score\": 0.05,\n        \"tribal_dominance_salience\": 0.05\n      }\n    },\n    \"rhetorical_profile_comparison\": {\n      \"Malcolm X\": {\n        \"amity\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.05\n        },\n        \"cohesive_goals\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.15\n        },\n        \"compersion\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.05\n        },\n        \"enmity\": {\n          \"raw_score\": 0.95,\n          \"salience\": 0.9\n        },\n        \"envy\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.5\n        },\n        \"fear\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.8\n        },\n        \"fragmentative_goals\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.7\n        },\n        \"hope\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.5\n        },\n        \"individual_dignity\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.05\n        },\n        \"tribal_dominance\": {\n          \"raw_score\": 0.9,\n          \"salience\": 0.9\n        }\n      },\n      \"Martin Luther King Jr.\": {\n        \"amity\": {\n          \"raw_score\": 0.9,\n          \"salience\": 0.9\n        },\n        \"cohesive_goals\": {\n          \"raw_score\": 0.95,\n          \"salience\": 0.95\n        },\n        \"compersion\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.1\n        },\n        \"enmity\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.2\n        },\n        \"envy\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.05\n        },\n        \"fear\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.3\n        },\n        \"fragmentative_goals\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.05\n        },\n        \"hope\": {\n          \"raw_score\": 0.95,\n          \"salience\": 0.95\n        },\n        \"individual_dignity\": {\n          \"raw_score\": 0.95,\n          \"salience\": 0.9\n        },\n        \"tribal_dominance\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.05\n        }\n      }\n    },\n    \"cohesion_tension_comparison\": {\n      \"Malcolm X\": {\n        \"descriptive_cohesion_index\": -0.5357,\n        \"emotional_tension\": 0.06,\n        \"full_cohesion_index\": -0.5357,\n        \"goal_tension\": 0.084,\n        \"identity_tension\": 0.0,\n        \"motivational_cohesion_index\": -0.4409,\n        \"relational_tension\": 0.045,\n        \"strategic_contradiction_index\": 0.0828,\n        \"success_tension\": 0.275\n      },\n      \"Martin Luther King Jr.\": {\n        \"descriptive_cohesion_index\": 0.8918,\n        \"emotional_tension\": 0.0,\n        \"full_cohesion_index\": 0.8918,\n        \"goal_tension\": 0.0,\n        \"identity_tension\": 0.0,\n        \"motivational_cohesion_index\": 0.8868,\n        \"relational_tension\": 0.0,\n        \"strategic_contradiction_index\": 0.0,\n        \"success_tension\": 0.0\n      }\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 2,\n    \"tier_classification\": \"TIER 3 (Exploratory Analysis)\",\n    \"power_notes\": \"The sample size of N=2 (n=1 per group) is insufficient for any form of inferential statistical testing (e.g., t-tests, ANOVA, correlations). The analysis is therefore strictly descriptive and exploratory, focusing on direct comparison of scores. No claims of statistical significance can be made.\"\n  },\n  \"methodology_summary\": \"Due to the exploratory nature of the analysis with a sample size of N=2, the statistical methodology was limited to descriptive comparison. Side-by-side comparisons of all CFF dimensional scores (raw score and salience) and derived metrics (tension and cohesion indices) were conducted to highlight the rhetorical differences between the two speakers. No inferential tests were performed as they would be statistically invalid and inappropriate for this sample size. The analysis serves as a quantitative illustration of the rhetorical contrast between the two documents.\"\n}\n```",
  "analysis_artifacts_processed": 6,
  "cost_info": {
    "model": "vertex_ai/gemini-2.5-pro",
    "execution_time_seconds": 51.934947,
    "response_cost": 0.0,
    "input_tokens": 0,
    "output_tokens": 0,
    "total_tokens": 0,
    "prompt_length": 265117,
    "response_length": 12680
  },
  "timestamp": "2025-09-20T13:07:23.946625+00:00"
}