{
  "batch_id": "v2_statistical_20250920_105526",
  "statistical_analysis": {
    "batch_id": "v2_statistical_20250920_105526",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "An expert is generating and executing comprehensive statistical analysis functions.\n\n```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nfrom typing import Dict, Any, Optional, List\\nimport json\\nimport re\\n\\n# This speaker mapping is created based on the corpus manifest.\\n# Since the provided artifacts only contain data for one document,\\n# and the evidence quotes clearly identify it as MLK's letter,\\n# we map the placeholder document_id to the correct one from the manifest.\\n# In a real scenario, the artifact would contain the correct document_id.\\nSPEAKER_MAPPING = {\\n    \\\"mlk_birmingham_jail_1963\\\": \\\"Martin Luther King Jr.\\\",\\n    \\\"malcolm_x_ballot_bullet_1964\\\": \\\"Malcolm X\\\"\\n}\\n# Placeholder mapping for the document in the artifact\\nARTIFACT_DOC_ID_MAPPING = {\\n    \\\"document_1\\\": \\\"mlk_birmingham_jail_1963\\\"\\n}\\n\\ndef _get_corrected_derived_metrics(verification_artifact: Dict[str, Any]) -> Optional[Dict[str, float]]:\\n    \\\"\\\"\\\"Extracts the corrected derived metrics from the verification artifact's text.\\\"\\\"\\\"\\n    try:\\n        # The corrected JSON is at the end of the raw_verification_response\\n        all_json_blocks = re.findall(r'\\\\{.*?\\\\}', verification_artifact['raw_verification_response'], re.DOTALL)\\n        if all_json_blocks:\\n            # The last JSON block is the one with the final corrected numbers\\n            return json.loads(all_json_blocks[-1])\\n        return None\\n    except (json.JSONDecodeError, KeyError, IndexError):\\n        return None\\n\\ndef _create_dataframe_from_artifacts(data: List[Dict[str, Any]], speaker_mapping: Dict[str, str]) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Parses the raw analysis artifacts to create a clean pandas DataFrame.\\n    \\n    This function specifically looks for the 'enhanced_composite_analysis_generation'\\n    artifact for dimensional scores and the 'verification' artifact for corrected\\n    derived metrics, as the initial derived metrics were found to be incorrect.\\n    \\\"\\\"\\\"\\n    records = []\\n    \\n    # Find the main analysis and verification artifacts\\n    main_analysis_artifact = next((a for a in data if a.get('step') == 'enhanced_composite_analysis_generation'), None)\\n    verification_artifact = next((a for a in data if a.get('step') == 'verification'), None)\\n\\n    if not main_analysis_artifact or not verification_artifact:\\n        return None\\n        \\n    corrected_metrics = _get_corrected_derived_metrics(verification_artifact)\\n    if not corrected_metrics:\\n        # Fallback to the original derived metrics if parsing fails\\n        derived_metrics_artifact = next((a for a in data if a.get('step') == 'derived_metrics_generation'), None)\\n        if derived_metrics_artifact:\\n            try:\\n                json_str = derived_metrics_artifact['raw_metrics_response'].split('```json\\\\n')[-1].replace('\\\\n```', '')\\n                corrected_metrics = json.loads(json_str)\\n            except:\\n                return None # Cannot proceed without any derived metrics\\n        else:\\n            return None\\n\\n    document_analyses = main_analysis_artifact.get('document_analyses', [])\\n\\n    for doc_analysis in document_analyses:\\n        record = {}\\n        placeholder_id = doc_analysis.get('document_name')\\n        doc_id = ARTIFACT_DOC_ID_MAPPING.get(placeholder_id)\\n        \\n        if not doc_id:\\n            continue\\n\\n        record['document_id'] = doc_id\\n        record['speaker'] = speaker_mapping.get(doc_id)\\n        \\n        dimensional_scores = doc_analysis.get('dimensional_scores', {})\\n        for dim, scores in dimensional_scores.items():\\n            record[f\\\"{dim}_raw_score\\\"] = scores.get('raw_score')\\n            record[f\\\"{dim}_salience\\\"] = scores.get('salience')\\n            \\n        record.update(corrected_metrics)\\n        \\n        records.append(record)\\n\\n    if not records:\\n        return None\\n        \\n    df = pd.DataFrame(records)\\n    return df\\n\\ndef calculate_descriptive_statistics(data: List[Dict[str, Any]], speaker_mapping: Dict[str, str]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates and returns descriptive statistics for all numerical columns, grouped by speaker.\\n\\n    Args:\\n        data: A list of analysis artifacts.\\n        speaker_mapping: A dictionary mapping document IDs to speakers.\\n        \\n    Returns:\\n        A dictionary containing descriptive statistics, or None if data is insufficient.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe_from_artifacts(data, speaker_mapping)\\n    if df is None or df.empty:\\n        return {\\\"error\\\": \\\"Could not create a valid DataFrame from artifacts.\\\"}\\n\\n    desc_stats = df.describe().to_dict()\\n\\n    grouped_stats = {}\\n    if 'speaker' in df.columns:\\n        for speaker, group_df in df.groupby('speaker'):\\n            # Convert to dict and handle potential non-serializable types\\n            stats_dict = json.loads(group_df.describe().to_json())\\n            grouped_stats[speaker] = stats_dict\\n\\n    return {\\n        \\\"overall_descriptives\\\": json.loads(df.describe().to_json()),\\n        \\\"descriptives_by_speaker\\\": grouped_stats\\n    }\\n\\ndef perform_comparative_analysis(data: List[Dict[str, Any]], speaker_mapping: Dict[str, str]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Performs independent t-tests to compare speakers on all dimensions and derived metrics.\\n    \\n    Requires at least 2 documents per group for Tier 3 analysis.\\n\\n    Args:\\n        data: A list of analysis artifacts.\\n        speaker_mapping: A dictionary mapping document IDs to speakers.\\n\\n    Returns:\\n        A dictionary of t-test results, or a note on insufficient data.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe_from_artifacts(data, speaker_mapping)\\n    if df is None or 'speaker' not in df.columns:\\n        return {\\\"error\\\": \\\"DataFrame could not be created or is missing 'speaker' column.\\\"}\\n\\n    if df['speaker'].nunique() < 2:\\n        return {\\\"message\\\": f\\\"Insufficient data for comparative analysis. Only found {df['speaker'].nunique()} speaker group(s). Need 2.\\\"}\\n\\n    group_counts = df['speaker'].value_counts()\\n    if (group_counts < 2).any():\\n        return {\\n            \\\"message\\\": \\\"Exploratory analysis (Tier 3) not possible. T-tests require at least N=2 per group for variance calculation.\\\",\\n            \\\"sample_sizes\\\": group_counts.to_dict()\\n        }\\n        \\n    results = {}\\n    numerical_cols = df.select_dtypes(include=np.number).columns.tolist()\\n\\n    for col in numerical_cols:\\n        groups = [group_df[col].dropna() for _, group_df in df.groupby('speaker')]\\n        \\n        ttest_res = pg.ttest(groups[0], groups[1])\\n        ttest_res_dict = ttest_res.to_dict('records')[0]\\n        cleaned_res = {k: (v if not pd.isna(v) else None) for k, v in ttest_res_dict.items()}\\n        results[col] = cleaned_res\\n\\n    return {\\n        \\\"analysis_type\\\": \\\"Independent T-Tests (Welch's)\\\",\\n        \\\"groups_compared\\\": df['speaker'].unique().tolist(),\\n        \\\"test_results\\\": results\\n    }\\n\\ndef perform_correlation_analysis(data: List[Dict[str, Any]], speaker_mapping: Dict[str, str]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Performs Pearson correlation analysis on all numerical variables. Requires N >= 3.\\n\\n    Args:\\n        data: A list of analysis artifacts.\\n        speaker_mapping: A dictionary mapping document IDs to speakers.\\n\\n    Returns:\\n        A dictionary containing the correlation matrix, or a note on insufficient data.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe_from_artifacts(data, speaker_mapping)\\n    if df is None:\\n        return {\\\"error\\\": \\\"Could not create a valid DataFrame from artifacts.\\\"}\\n\\n    if len(df) < 3:\\n        return {\\\"message\\\": f\\\"Insufficient data for correlation analysis. Found {len(df)} documents, need at least 3 for meaningful analysis.\\\"}\\n\\n    numerical_df = df.select_dtypes(include=np.number)\\n    corr_matrix = numerical_df.rcorr(method='pearson')\\n    \\n    corr_dict = corr_matrix.stack().reset_index()\\n    corr_dict.columns = ['var1', 'var2', 'correlation']\\n    corr_dict = corr_dict[corr_dict['var1'] != corr_dict['var2']]\\n    corr_dict['var_pair'] = corr_dict.apply(lambda row: '_vs_'.join(sorted((row['var1'], row['var2']))), axis=1)\\n    corr_dict = corr_dict.drop_duplicates(subset='var_pair').drop(columns='var_pair')\\n\\n    return {\\n        \\\"analysis_type\\\": \\\"Pearson Correlation\\\",\\n        \\\"note\\\": \\\"Correlations with small N are unstable and should be interpreted with caution.\\\",\\n        \\\"correlation_results\\\": corr_dict.to_dict('records')\\n    }\\n\\ndef calculate_reliability_analysis(data: List[Dict[str, Any]], speaker_mapping: Dict[str, str]) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates Cronbach's alpha for 'cohesive' and 'fragmentative' constructs. Requires N >= 2.\\n\\n    Args:\\n        data: A list of analysis artifacts.\\n        speaker_mapping: A dictionary mapping document IDs to speakers.\\n        \\n    Returns:\\n        A dictionary with Cronbach's alpha results, or a note on insufficient data.\\n    \\\"\\\"\\\"\\n    df = _create_dataframe_from_artifacts(data, speaker_mapping)\\n    if df is None:\\n        return {\\\"error\\\": \\\"Could not create a valid DataFrame from artifacts.\\\"}\\n        \\n    if len(df) < 2:\\n         return {\\\"message\\\": f\\\"Insufficient data for reliability analysis. Found {len(df)} documents, need at least 2.\\\"}\\n\\n    note = f\\\"N={len(df)} is low for reliability analysis; results may be unstable.\\\"\\n\\n    cohesive_dims = [\\n        'individual_dignity_raw_score', 'hope_raw_score', 'compersion_raw_score',\\n        'amity_raw_score', 'cohesive_goals_raw_score'\\n    ]\\n    fragmentative_dims = [\\n        'tribal_dominance_raw_score', 'fear_raw_score', 'envy_raw_score',\\n        'enmity_raw_score', 'fragmentative_goals_raw_score'\\n    ]\\n    \\n    results = {\\\"note\\\": note}\\n    \\n    if all(c in df.columns for c in cohesive_dims):\\n        cohesive_alpha = pg.cronbach_alpha(data=df[cohesive_dims])\\n        results['cohesive_construct_alpha'] = {\\n            'alpha': cohesive_alpha[0],\\n            'confidence_interval_95': list(cohesive_alpha[1])\\n        }\\n    else:\\n        results['cohesive_construct_alpha'] = \\\"Missing one or more cohesive dimension columns.\\\"\\n\\n    if all(c in df.columns for c in fragmentative_dims):\\n        fragmentative_alpha = pg.cronbach_alpha(data=df[fragmentative_dims])\\n        results['fragmentative_construct_alpha'] = {\\n            'alpha': fragmentative_alpha[0],\\n            'confidence_interval_95': list(fragmentative_alpha[1])\\n        }\\n    else:\\n        results['fragmentative_construct_alpha'] = \\\"Missing one or more fragmentative dimension columns.\\\"\\n\\n    return results\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"overall_descriptives\": {\n        \"tribal_dominance_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.1,\n          \"std\": null,\n          \"min\": 0.1,\n          \"25%\": 0.1,\n          \"50%\": 0.1,\n          \"75%\": 0.1,\n          \"max\": 0.1\n        },\n        \"tribal_dominance_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.1,\n          \"std\": null,\n          \"min\": 0.1,\n          \"25%\": 0.1,\n          \"50%\": 0.1,\n          \"75%\": 0.1,\n          \"max\": 0.1\n        },\n        \"individual_dignity_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.9,\n          \"std\": null,\n          \"min\": 0.9,\n          \"25%\": 0.9,\n          \"50%\": 0.9,\n          \"75%\": 0.9,\n          \"max\": 0.9\n        },\n        \"individual_dignity_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.9,\n          \"std\": null,\n          \"min\": 0.9,\n          \"25%\": 0.9,\n          \"50%\": 0.9,\n          \"75%\": 0.9,\n          \"max\": 0.9\n        },\n        \"fear_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.7,\n          \"std\": null,\n          \"min\": 0.7,\n          \"25%\": 0.7,\n          \"50%\": 0.7,\n          \"75%\": 0.7,\n          \"max\": 0.7\n        },\n        \"fear_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.8,\n          \"std\": null,\n          \"min\": 0.8,\n          \"25%\": 0.8,\n          \"50%\": 0.8,\n          \"75%\": 0.8,\n          \"max\": 0.8\n        },\n        \"hope_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.9,\n          \"std\": null,\n          \"min\": 0.9,\n          \"25%\": 0.9,\n          \"50%\": 0.9,\n          \"75%\": 0.9,\n          \"max\": 0.9\n        },\n        \"hope_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.9,\n          \"std\": null,\n          \"min\": 0.9,\n          \"25%\": 0.9,\n          \"50%\": 0.9,\n          \"75%\": 0.9,\n          \"max\": 0.9\n        },\n        \"envy_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.0,\n          \"std\": null,\n          \"min\": 0.0,\n          \"25%\": 0.0,\n          \"50%\": 0.0,\n          \"75%\": 0.0,\n          \"max\": 0.0\n        },\n        \"envy_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.0,\n          \"std\": null,\n          \"min\": 0.0,\n          \"25%\": 0.0,\n          \"50%\": 0.0,\n          \"75%\": 0.0,\n          \"max\": 0.0\n        },\n        \"compersion_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.0,\n          \"std\": null,\n          \"min\": 0.0,\n          \"25%\": 0.0,\n          \"50%\": 0.0,\n          \"75%\": 0.0,\n          \"max\": 0.0\n        },\n        \"compersion_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.0,\n          \"std\": null,\n          \"min\": 0.0,\n          \"25%\": 0.0,\n          \"50%\": 0.0,\n          \"75%\": 0.0,\n          \"max\": 0.0\n        },\n        \"enmity_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.8,\n          \"std\": null,\n          \"min\": 0.8,\n          \"25%\": 0.8,\n          \"50%\": 0.8,\n          \"75%\": 0.8,\n          \"max\": 0.8\n        },\n        \"enmity_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.8,\n          \"std\": null,\n          \"min\": 0.8,\n          \"25%\": 0.8,\n          \"50%\": 0.8,\n          \"75%\": 0.8,\n          \"max\": 0.8\n        },\n        \"amity_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.5,\n          \"std\": null,\n          \"min\": 0.5,\n          \"25%\": 0.5,\n          \"50%\": 0.5,\n          \"75%\": 0.5,\n          \"max\": 0.5\n        },\n        \"amity_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.6,\n          \"std\": null,\n          \"min\": 0.6,\n          \"25%\": 0.6,\n          \"50%\": 0.6,\n          \"75%\": 0.6,\n          \"max\": 0.6\n        },\n        \"fragmentative_goals_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.1,\n          \"std\": null,\n          \"min\": 0.1,\n          \"25%\": 0.1,\n          \"50%\": 0.1,\n          \"75%\": 0.1,\n          \"max\": 0.1\n        },\n        \"fragmentative_goals_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.1,\n          \"std\": null,\n          \"min\": 0.1,\n          \"25%\": 0.1,\n          \"50%\": 0.1,\n          \"75%\": 0.1,\n          \"max\": 0.1\n        },\n        \"cohesive_goals_raw_score\": {\n          \"count\": 1.0,\n          \"mean\": 0.9,\n          \"std\": null,\n          \"min\": 0.9,\n          \"25%\": 0.9,\n          \"50%\": 0.9,\n          \"75%\": 0.9,\n          \"max\": 0.9\n        },\n        \"cohesive_goals_salience\": {\n          \"count\": 1.0,\n          \"mean\": 0.9,\n          \"std\": null,\n          \"min\": 0.9,\n          \"25%\": 0.9,\n          \"50%\": 0.9,\n          \"75%\": 0.9,\n          \"max\": 0.9\n        },\n        \"identity_tension\": {\n          \"count\": 1.0,\n          \"mean\": 0.08,\n          \"std\": null,\n          \"min\": 0.08,\n          \"25%\": 0.08,\n          \"50%\": 0.08,\n          \"75%\": 0.08,\n          \"max\": 0.08\n        },\n        \"emotional_tension\": {\n          \"count\": 1.0,\n          \"mean\": 0.07,\n          \"std\": null,\n          \"min\": 0.07,\n          \"25%\": 0.07,\n          \"50%\": 0.07,\n          \"75%\": 0.07,\n          \"max\": 0.07\n        },\n        \"success_tension\": {\n          \"count\": 1.0,\n          \"mean\": 0.0,\n          \"std\": null,\n          \"min\": 0.0,\n          \"25%\": 0.0,\n          \"50%\": 0.0,\n          \"75%\": 0.0,\n          \"max\": 0.0\n        },\n        \"relational_tension\": {\n          \"count\": 1.0,\n          \"mean\": 0.1,\n          \"std\": null,\n          \"min\": 0.1,\n          \"25%\": 0.1,\n          \"50%\": 0.1,\n          \"75%\": 0.1,\n          \"max\": 0.1\n        },\n        \"goal_tension\": {\n          \"count\": 1.0,\n          \"mean\": 0.08,\n          \"std\": null,\n          \"min\": 0.08,\n          \"25%\": 0.08,\n          \"50%\": 0.08,\n          \"75%\": 0.08,\n          \"max\": 0.08\n        },\n        \"strategic_contradiction_index\": {\n          \"count\": 1.0,\n          \"mean\": 0.066,\n          \"std\": null,\n          \"min\": 0.066,\n          \"25%\": 0.066,\n          \"50%\": 0.066,\n          \"75%\": 0.066,\n          \"max\": 0.066\n        },\n        \"descriptive_cohesion_index\": {\n          \"count\": 1.0,\n          \"mean\": -0.02999,\n          \"std\": null,\n          \"min\": -0.02999,\n          \"25%\": -0.02999,\n          \"50%\": -0.02999,\n          \"75%\": -0.02999,\n          \"max\": -0.02999\n        },\n        \"motivational_cohesion_index\": {\n          \"count\": 1.0,\n          \"mean\": 0.177456,\n          \"std\": null,\n          \"min\": 0.177456,\n          \"25%\": 0.177456,\n          \"50%\": 0.177456,\n          \"75%\": 0.177456,\n          \"max\": 0.177456\n        },\n        \"full_cohesion_index\": {\n          \"count\": 1.0,\n          \"mean\": 0.30194,\n          \"std\": null,\n          \"min\": 0.30194,\n          \"25%\": 0.30194,\n          \"50%\": 0.30194,\n          \"75%\": 0.30194,\n          \"max\": 0.30194\n        }\n      },\n      \"descriptives_by_speaker\": {\n        \"Martin Luther King Jr.\": {\n          \"tribal_dominance_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.1,\n            \"std\": null,\n            \"min\": 0.1,\n            \"25%\": 0.1,\n            \"50%\": 0.1,\n            \"75%\": 0.1,\n            \"max\": 0.1\n          },\n          \"tribal_dominance_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.1,\n            \"std\": null,\n            \"min\": 0.1,\n            \"25%\": 0.1,\n            \"50%\": 0.1,\n            \"75%\": 0.1,\n            \"max\": 0.1\n          },\n          \"individual_dignity_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.9,\n            \"std\": null,\n            \"min\": 0.9,\n            \"25%\": 0.9,\n            \"50%\": 0.9,\n            \"75%\": 0.9,\n            \"max\": 0.9\n          },\n          \"individual_dignity_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.9,\n            \"std\": null,\n            \"min\": 0.9,\n            \"25%\": 0.9,\n            \"50%\": 0.9,\n            \"75%\": 0.9,\n            \"max\": 0.9\n          },\n          \"fear_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.7,\n            \"std\": null,\n            \"min\": 0.7,\n            \"25%\": 0.7,\n            \"50%\": 0.7,\n            \"75%\": 0.7,\n            \"max\": 0.7\n          },\n          \"fear_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.8,\n            \"std\": null,\n            \"min\": 0.8,\n            \"25%\": 0.8,\n            \"50%\": 0.8,\n            \"75%\": 0.8,\n            \"max\": 0.8\n          },\n          \"hope_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.9,\n            \"std\": null,\n            \"min\": 0.9,\n            \"25%\": 0.9,\n            \"50%\": 0.9,\n            \"75%\": 0.9,\n            \"max\": 0.9\n          },\n          \"hope_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.9,\n            \"std\": null,\n            \"min\": 0.9,\n            \"25%\": 0.9,\n            \"50%\": 0.9,\n            \"75%\": 0.9,\n            \"max\": 0.9\n          },\n          \"envy_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.0,\n            \"std\": null,\n            \"min\": 0.0,\n            \"25%\": 0.0,\n            \"50%\": 0.0,\n            \"75%\": 0.0,\n            \"max\": 0.0\n          },\n          \"envy_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.0,\n            \"std\": null,\n            \"min\": 0.0,\n            \"25%\": 0.0,\n            \"50%\": 0.0,\n            \"75%\": 0.0,\n            \"max\": 0.0\n          },\n          \"compersion_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.0,\n            \"std\": null,\n            \"min\": 0.0,\n            \"25%\": 0.0,\n            \"50%\": 0.0,\n            \"75%\": 0.0,\n            \"max\": 0.0\n          },\n          \"compersion_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.0,\n            \"std\": null,\n            \"min\": 0.0,\n            \"25%\": 0.0,\n            \"50%\": 0.0,\n            \"75%\": 0.0,\n            \"max\": 0.0\n          },\n          \"enmity_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.8,\n            \"std\": null,\n            \"min\": 0.8,\n            \"25%\": 0.8,\n            \"50%\": 0.8,\n            \"75%\": 0.8,\n            \"max\": 0.8\n          },\n          \"enmity_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.8,\n            \"std\": null,\n            \"min\": 0.8,\n            \"25%\": 0.8,\n            \"50%\": 0.8,\n            \"75%\": 0.8,\n            \"max\": 0.8\n          },\n          \"amity_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.5,\n            \"std\": null,\n            \"min\": 0.5,\n            \"25%\": 0.5,\n            \"50%\": 0.5,\n            \"75%\": 0.5,\n            \"max\": 0.5\n          },\n          \"amity_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.6,\n            \"std\": null,\n            \"min\": 0.6,\n            \"25%\": 0.6,\n            \"50%\": 0.6,\n            \"75%\": 0.6,\n            \"max\": 0.6\n          },\n          \"fragmentative_goals_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.1,\n            \"std\": null,\n            \"min\": 0.1,\n            \"25%\": 0.1,\n            \"50%\": 0.1,\n            \"75%\": 0.1,\n            \"max\": 0.1\n          },\n          \"fragmentative_goals_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.1,\n            \"std\": null,\n            \"min\": 0.1,\n            \"25%\": 0.1,\n            \"50%\": 0.1,\n            \"75%\": 0.1,\n            \"max\": 0.1\n          },\n          \"cohesive_goals_raw_score\": {\n            \"count\": 1.0,\n            \"mean\": 0.9,\n            \"std\": null,\n            \"min\": 0.9,\n            \"25%\": 0.9,\n            \"50%\": 0.9,\n            \"75%\": 0.9,\n            \"max\": 0.9\n          },\n          \"cohesive_goals_salience\": {\n            \"count\": 1.0,\n            \"mean\": 0.9,\n            \"std\": null,\n            \"min\": 0.9,\n            \"25%\": 0.9,\n            \"50%\": 0.9,\n            \"75%\": 0.9,\n            \"max\": 0.9\n          },\n          \"identity_tension\": {\n            \"count\": 1.0,\n            \"mean\": 0.08,\n            \"std\": null,\n            \"min\": 0.08,\n            \"25%\": 0.08,\n            \"50%\": 0.08,\n            \"75%\": 0.08,\n            \"max\": 0.08\n          },\n          \"emotional_tension\": {\n            \"count\": 1.0,\n            \"mean\": 0.07,\n            \"std\": null,\n            \"min\": 0.07,\n            \"25%\": 0.07,\n            \"50%\": 0.07,\n            \"75%\": 0.07,\n            \"max\": 0.07\n          },\n          \"success_tension\": {\n            \"count\": 1.0,\n            \"mean\": 0.0,\n            \"std\": null,\n            \"min\": 0.0,\n            \"25%\": 0.0,\n            \"50%\": 0.0,\n            \"75%\": 0.0,\n            \"max\": 0.0\n          },\n          \"relational_tension\": {\n            \"count\": 1.0,\n            \"mean\": 0.1,\n            \"std\": null,\n            \"min\": 0.1,\n            \"25%\": 0.1,\n            \"50%\": 0.1,\n            \"75%\": 0.1,\n            \"max\": 0.1\n          },\n          \"goal_tension\": {\n            \"count\": 1.0,\n            \"mean\": 0.08,\n            \"std\": null,\n            \"min\": 0.08,\n            \"25%\": 0.08,\n            \"50%\": 0.08,\n            \"75%\": 0.08,\n            \"max\": 0.08\n          },\n          \"strategic_contradiction_index\": {\n            \"count\": 1.0,\n            \"mean\": 0.066,\n            \"std\": null,\n            \"min\": 0.066,\n            \"25%\": 0.066,\n            \"50%\": 0.066,\n            \"75%\": 0.066,\n            \"max\": 0.066\n          },\n          \"descriptive_cohesion_index\": {\n            \"count\": 1.0,\n            \"mean\": -0.02999,\n            \"std\": null,\n            \"min\": -0.02999,\n            \"25%\": -0.02999,\n            \"50%\": -0.02999,\n            \"75%\": -0.02999,\n            \"max\": -0.02999\n          },\n          \"motivational_cohesion_index\": {\n            \"count\": 1.0,\n            \"mean\": 0.177456,\n            \"std\": null,\n            \"min\": 0.177456,\n            \"25%\": 0.177456,\n            \"50%\": 0.177456,\n            \"75%\": 0.177456,\n            \"max\": 0.177456\n          },\n          \"full_cohesion_index\": {\n            \"count\": 1.0,\n            \"mean\": 0.30194,\n            \"std\": null,\n            \"min\": 0.30194,\n            \"25%\": 0.30194,\n            \"50%\": 0.30194,\n            \"75%\": 0.30194,\n            \"max\": 0.30194\n          }\n        }\n      }\n    },\n    \"correlation_analysis\": {\n      \"message\": \"Insufficient data for correlation analysis. Found 1 documents, need at least 3 for meaningful analysis.\"\n    },\n    \"anova_analysis\": null,\n    \"reliability_analysis\": {\n      \"message\": \"Insufficient data for reliability analysis. Found 1 documents, need at least 2.\"\n    },\n    \"additional_analyses\": null,\n    \"comparative_analysis\": {\n      \"message\": \"Insufficient data for comparative analysis. Only found 1 speaker group(s). Need 2.\"\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 1,\n    \"tier_classification\": \"TIER 3 (Exploratory Analysis)\",\n    \"power_notes\": \"Sample size (N=1) is very small. All analyses are exploratory. Focus on descriptive patterns and effect sizes. Inferential claims are not possible.\"\n  },\n  \"methodology_summary\": \"The analysis was conducted based on the Cohesive Flourishing Framework. Due to a sample size of N=1 (only data for one document was provided), the analysis is classified as Tier 3 (Exploratory) and is strictly descriptive. Functions for comparative analysis (t-tests), correlation, and reliability (Cronbach's alpha) were generated to demonstrate the full analytical protocol intended for a complete dataset, but could not be executed due to insufficient data. The results are limited to the descriptive statistics of the single analyzed text ('Letter from Birmingham Jail'), utilizing corrected derived metrics sourced from the provided verification artifact to ensure accuracy.\"\n}\n```",
    "analysis_artifacts_processed": 6,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 110.294898,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 170673,
      "response_length": 26261
    },
    "timestamp": "2025-09-20T14:57:16.829603+00:00",
    "artifact_hash": "9ce3e9dbc3b73a5fdd6722ce47b1ca81fa55de9d9e09920b95346e1f2947a71e"
  },
  "verification": {
    "batch_id": "v2_statistical_20250920_105526",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "verified",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 1.295808,
      "prompt_length": 26759,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-20T14:57:18.130223+00:00",
    "artifact_hash": "350f7750365c3c2c77a22d21048742bb18d6f0819876b190418b8a1b0cff4f0f"
  },
  "csv_generation": {
    "batch_id": "v2_statistical_20250920_105526",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [
      {
        "filename": "scores.csv",
        "path": "/Volumes/code/discernus/projects/mlkmx/runs/20250920T105827Z/data/scores.csv",
        "size": 590
      },
      {
        "filename": "evidence.csv",
        "path": "/Volumes/code/discernus/projects/mlkmx/runs/20250920T105827Z/data/evidence.csv",
        "size": 3301
      },
      {
        "filename": "metadata.csv",
        "path": "/Volumes/code/discernus/projects/mlkmx/runs/20250920T105827Z/data/metadata.csv",
        "size": 1273
      }
    ],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 69.668804,
      "prompt_length": 113941,
      "artifacts_processed": 6,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-20T14:58:27.806716+00:00",
    "artifact_hash": "249795447e999186fe855e0cbdb642c76fd54d94dcad73c3e02952d20d404d87"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 181.25950999999998,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 110.294898,
      "verification_time": 1.295808,
      "csv_generation_time": 69.668804
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-20T14:58:27.807975+00:00",
  "agent_name": "StatisticalAgent"
}