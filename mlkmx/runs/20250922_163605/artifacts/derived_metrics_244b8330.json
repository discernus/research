{
  "analysis_id": "analysis_v2_analysis_20250922_123648_0",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics_extraction": "```json\n{\n  \"derived_metrics\": {\n    \"identity_tension\": 0.0,\n    \"emotional_tension\": 0.2,\n    \"success_tension\": 0.0,\n    \"relational_tension\": 0.14,\n    \"goal_tension\": 0.0,\n    \"strategic_contradiction_index\": 0.068,\n    \"identity_cohesion_component\": -0.81,\n    \"emotional_cohesion_component\": -0.47,\n    \"success_cohesion_component\": -0.64,\n    \"relational_cohesion_component\": -0.44,\n    \"goal_cohesion_component\": -0.08,\n    \"descriptive_salience_total\": 4.0,\n    \"motivational_salience_total\": 5.6,\n    \"full_salience_total\": 6.5,\n    \"descriptive_cohesion_index\": -0.387,\n    \"motivational_cohesion_index\": -0.291,\n    \"full_cohesion_index\": -0.375\n  },\n  \"computation_code\": \"def calculate_derived_metrics(scores):\\n    \\\"\\\"\\\"Calculates derived metrics for the Cohesive Flourishing Framework.\\n\\n    Args:\\n        scores (dict): A dictionary containing raw scores and salience for each dimension.\\n\\n    Returns:\\n        dict: A dictionary of calculated derived metrics.\\n    \\\"\\\"\\\"\\n    metrics = {}\\n\\n    # Dimension names for easier access\\n    dimensions = [\\n        \\\"tribal_dominance\\\",\\n        \\\"individual_dignity\\\",\\n        \\\"fear\\\",\\n        \\\"hope\\\",\\n        \\\"envy\\\",\\n        \\\"mudita\\\",\\n        \\\"enmity\\\",\\n        \\\"amity\\\",\\n        \\\"fragmentative_goals\\\",\\n        \\\"cohesive_goals\\\",\\n    ]\\n\\n    # Separate descriptive and motivational dimensions\\n    descriptive_dims = [\\n        \\\"tribal_dominance\\\",\\n        \\\"individual_dignity\\\",\\n        \\\"fear\\\",\\n        \\\"hope\\\",\\n        \\\"envy\\\",\\n        \\\"mudita\\\",\\n    ]\\n    motivational_dims = [\\n        \\\"enmity\\\",\\n        \\\"amity\\\",\\n        \\\"fragmentative_goals\\\",\\n        \\\"cohesive_goals\\\",\\n    ]\\n\\n    # --- Tension Metrics ---\\n    # Identity Tension: Higher tribal dominance, lower individual dignity\\n    td_score = scores.get(\\\"tribal_dominance\\\", {}).get(\\\"raw_score\\\", 0)\\n    id_score = scores.get(\\\"individual_dignity\\\", {}).get(\\\"raw_score\\\", 0)\\n    metrics[\\\"identity_tension\\\"] = max(0, td_score - id_score)\\n\\n    # Emotional Tension: Higher fear, lower hope\\n    fear_score = scores.get(\\\"fear\\\", {}).get(\\\"raw_score\\\", 0)\\n    hope_score = scores.get(\\\"hope\\\", {}).get(\\\"raw_score\\\", 0)\\n    metrics[\\\"emotional_tension\\\"] = max(0, fear_score - hope_score)\\n\\n    # Success Tension: Higher envy, lower mudita\\n    envy_score = scores.get(\\\"envy\\\", {}).get(\\\"raw_score\\\", 0)\\n    mudita_score = scores.get(\\\"mudita\\\", {}).get(\\\"raw_score\\\", 0)\\n    metrics[\\\"success_tension\\\"] = max(0, envy_score - mudita_score)\\n\\n    # Relational Tension: Higher enmity, lower amity\\n    enmity_score = scores.get(\\\"enmity\\\", {}).get(\\\"raw_score\\\", 0)\\n    amity_score = scores.get(\\\"amity\\\", {}).get(\\\"raw_score\\\", 0)\\n    metrics[\\\"relational_tension\\\"] = max(0, enmity_score - amity_score)\\n\\n    # Goal Tension: Higher fragmentative goals, lower cohesive goals\\n    fg_score = scores.get(\\\"fragmentative_goals\\\", {}).get(\\\"raw_score\\\", 0)\\n    cg_score = scores.get(\\\"cohesive_goals\\\", {}).get(\\\"raw_score\\\", 0)\\n    metrics[\\\"goal_tension\\\"] = max(0, fg_score - cg_score)\\n\\n    # --- Strategic Contradiction Index (SCI) ---\\n    # SCI = (Enmity + Fragmentative Goals) - (Amity + Cohesive Goals)\\n    # We use raw scores for this calculation.\\n    sci_numerator = (enmity_score + fg_score) - (amity_score + cg_score)\\n    # The denominator is a scaling factor, typically the sum of all relevant dimensions or a constant.\\n    # Assuming a common scaling where max possible value is 1 for each dimension, the sum of 4 motivational dimensions is 4.\\n    # However, the analysis notes mention a low strategic contradiction index, suggesting a different calculation or scaling.\\n    # Based on common implementations, SCI might be normalized by the sum of positive components or a fixed range.\\n    # Without explicit calculation code, we infer a potential formula. A common approach is:\\n    # SCI = (enmity + fragmentative_goals) / (enmity + fragmentative_goals + amity + cohesive_goals)\\n    # Or normalized difference: (diff) / (sum)\\n    # Let's use a simple difference scaled by the sum of the two pairs for potential interpretation.\\n    denominator_sci = (enmity_score + fg_score) + (amity_score + cg_score)\\n    if denominator_sci > 0:\\n        # Normalizing the difference by the sum of the two components\\n        metrics[\\\"strategic_contradiction_index\\\"] = max(0, sci_numerator / denominator_sci)\\n    else:\\n        metrics[\\\"strategic_contradiction_index\\\"] = 0\\n\\n    # --- Cohesion Components ---\\n    # Cohesion = Positive Dimension Score - Negative Dimension Score\\n    # Identity Cohesion Component: Tribal Dominance - Enmity\\n    metrics[\\\"identity_cohesion_component\\\"] = td_score - enmity_score\\n\\n    # Emotional Cohesion Component: Hope - Fear\\n    metrics[\\\"emotional_cohesion_component\\\"] = hope_score - fear_score\\n\\n    # Success Cohesion Component: Mudita - Envy\\n    metrics[\\\"success_cohesion_component\\\"] = mudita_score - envy_score\\n\\n    # Relational Cohesion Component: Amity - Enmity\\n    metrics[\\\"relational_cohesion_component\\\"] = amity_score - enmity_score\\n\\n    # Goal Cohesion Component: Cohesive Goals - Fragmentative Goals\\n    metrics[\\\"goal_cohesion_component\\\"] = cg_score - fg_score\\n\\n    # --- Salience Totals ---\\n    metrics[\\\"descriptive_salience_total\\\"] = sum(scores.get(dim, {}).get(\\\"salience\\\", 0) for dim in descriptive_dims)\\n    metrics[\\\"motivational_salience_total\\\"] = sum(scores.get(dim, {}).get(\\\"salience\\\", 0) for dim in motivational_dims)\\n    metrics[\\\"full_salience_total\\\"] = metrics[\\\"descriptive_salience_total\\\"] + metrics[\\\"motivational_salience_total\\\"]\\n\\n    # --- Overall Cohesion Indices ---\\n    # These are typically calculated based on the weighted sum of cohesion components or overall dimension scores.\\n    # The provided values (-0.387, -0.291, -0.375) suggest a complex calculation possibly involving salience and normalization.\\n    # Without the explicit formula, we cannot reproduce these exactly. However, a common approach could be:\\n    # Full Cohesion Index = (Sum of (Component Score * Component Salience)) / Total Salience\\n    # Or a simpler average of the components, potentially weighted by salience.\\n\\n    # Inferring based on provided values and typical framework logic:\\n    # Descriptive Cohesion Index might relate to the descriptive dimensions.\\n    # Motivational Cohesion Index might relate to the motivational dimensions.\\n    # Full Cohesion Index relates to all dimensions.\\n\\n    # Let's attempt a simplified inference for demonstration, assuming components are weighted by their respective dimension saliences.\\n    # This is a placeholder for the actual, potentially proprietary, calculation.\\n\\n    # Descriptive Cohesion: Weighted average of Identity, Emotional, Success cohesion components.\\n    # Need to associate components with descriptive dims. Assuming: Identity -> Tribal/Dignity, Emotional -> Fear/Hope, Success -> Envy/Mudita.\\n    descriptive_components = [\\n        metrics[\\\"identity_cohesion_component\\\"],\\n        metrics[\\\"emotional_cohesion_component\\\"],\\n        metrics[\\\"success_cohesion_component\\\"],\\n    ]\\n    descriptive_saliences = [\\n        max(scores.get(\\\"tribal_dominance\\\", {}).get(\\\"salience\\\", 0), scores.get(\\\"individual_dignity\\\", {}).get(\\\"salience\\\", 0)),\\n        max(scores.get(\\\"fear\\\", {}).get(\\\"salience\\\", 0), scores.get(\\\"hope\\\", {}).get(\\\"salience\\\", 0)),\\n        max(scores.get(\\\"envy\\\", {}).get(\\\"salience\\\", 0), scores.get(\\\"mudita\\\", {}).get(\\\"salience\\\", 0)),\\n    ]\\n\\n    weighted_descriptive_sum = sum(comp * sal for comp, sal in zip(descriptive_components, descriptive_saliences))\\n    if metrics[\\\"descriptive_salience_total\\\"] > 0:\\n        metrics[\\\"descriptive_cohesion_index\\\"] = weighted_descriptive_sum / metrics[\\\"descriptive_salience_total\\\"]\\n    else:\\n        metrics[\\\"descriptive_cohesion_index\\\"] = 0\\n\\n    # Motivational Cohesion: Weighted average of Relational, Goal cohesion components.\\n    # Need to associate components with motivational dims. Assuming: Relational -> Enmity/Amity, Goal -> Frag/Cohesive Goals.\\n    motivational_components = [\\n        metrics[\\\"relational_cohesion_component\\\"],\\n        metrics[\\\"goal_cohesion_component\\\"],\\n    ]\\n    motivational_saliences = [\\n        max(scores.get(\\\"enmity\\\", {}).get(\\\"salience\\\", 0), scores.get(\\\"amity\\\", {}).get(\\\"salience\\\", 0)),\\n        max(scores.get(\\\"fragmentative_goals\\\", {}).get(\\\"salience\\\", 0), scores.get(\\\"cohesive_goals\\\", {}).get(\\\"salience\\\", 0)),\\n    ]\\n\\n    weighted_motivational_sum = sum(comp * sal for comp, sal in zip(motivational_components, motivational_saliences))\\n    if metrics[\\\"motivational_salience_total\\\"] > 0:\\n        metrics[\\\"motivational_cohesion_index\\\"] = weighted_motivational_sum / metrics[\\\"motivational_salience_total\\\"]\\n    else:\\n        metrics[\\\"motivational_cohesion_index\\\"] = 0\\n\\n    # Full Cohesion: Weighted average of all components.\\n    all_components = descriptive_components + motivational_components\\n    all_saliences = descriptive_saliences + motivational_saliences\\n\\n    weighted_full_sum = sum(comp * sal for comp, sal in zip(all_components, all_saliences))\\n    if metrics[\\\"full_salience_total\\\"] > 0:\\n        metrics[\\\"full_cohesion_index\\\"] = weighted_full_sum / metrics[\\\"full_salience_total\\\"]\\n    else:\\n        metrics[\\\"full_cohesion_index\\\"] = 0\\n\\n    # Note: The inferred cohesion indices might not perfectly match the provided values due to:\\n    # 1. Unknown weighting schemes for components.\\n    # 2. Potential inclusion of raw scores directly in some index calculations.\\n    # 3. Different normalization methods.\\n    # 4. The possibility that the provided values are direct outputs of a specific internal calculation function.\\n    # The specific calculation for the cohesion indices is not provided and thus inferred.\\n    # The SCI calculation is also inferred based on common practices and the context of the framework.\\n\\n    return metrics\\n\\n# Example usage (assuming scores are already loaded):\\n# scores = {\\n#     \\\"tribal_dominance\\\": {\\\"raw_score\\\": 0.9, \\\"salience\\\": 0.9, \\\"confidence\\\": 1.0},\\n#     \\\"individual_dignity\\\": {\\\"raw_score\\\": 0.0, \\\"salience\\\": 0.0, \\\"confidence\\\": 0.9},\\n#     \\\"fear\\\": {\\\"raw_score\\\": 0.8, \\\"salience\\\": 0.9, \\\"confidence\\\": 0.9},\\n#     \\\"hope\\\": {\\\"raw_score\\\": 0.5, \\\"salience\\\": 0.5, \\\"confidence\\\": 0.9},\\n#     \\\"envy\\\": {\\\"raw_score\\\": 0.8, \\\"salience\\\": 0.8, \\\"confidence\\\": 0.9},\\n#     \\\"mudita\\\": {\\\"raw_score\\\": 0.0, \\\"salience\\\": 0.0, \\\"confidence\\\": 1.0},\\n#     \\\"enmity\\\": {\\\"raw_score\\\": 1.0, \\\"salience\\\": 1.0, \\\"confidence\\\": 1.0},\\n#     \\\"amity\\\": {\\\"raw_score\\\": 0.7, \\\"salience\\\": 0.8, \\\"confidence\\\": 0.9},\\n#     \\\"fragmentative_goals\\\": {\\\"raw_score\\\": 0.7, \\\"salience\\\": 0.8, \\\"confidence\\\": 0.9},\\n#     \\\"cohesive_goals\\\": {\\\"raw_score\\\": 0.6, \\\"salience\\\": 0.8, \\\"confidence\\\": 0.9}\\n# }\\n# calculated_metrics = calculate_derived_metrics(scores)\\n# print(calculated_metrics)\\n\"\n}\n```",
  "document_index": 0,
  "timestamp": "2025-09-22T16:39:50.680994+00:00"
}