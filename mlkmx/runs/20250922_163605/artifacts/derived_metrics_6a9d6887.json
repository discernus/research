{
  "analysis_id": "analysis_v2_analysis_20250922_123648_1",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics_extraction": "```json\n{\n  \"derived_metrics\": {\n    \"identity_tension\": 0.0,\n    \"emotional_tension\": 0.12,\n    \"success_tension\": 0.0,\n    \"relational_tension\": 0.1,\n    \"goal_tension\": 0.0,\n    \"strategic_contradiction_index\": 0.044,\n    \"identity_cohesion_component\": 0.81,\n    \"emotional_cohesion_component\": 0.36,\n    \"success_cohesion_component\": 0.12,\n    \"relational_cohesion_component\": 0.46,\n    \"goal_cohesion_component\": 0.9,\n    \"descriptive_salience_total\": 3.4,\n    \"motivational_salience_total\": 4.5,\n    \"full_salience_total\": 5.5,\n    \"descriptive_cohesion_index\": 0.276,\n    \"motivational_cohesion_index\": 0.409,\n    \"full_cohesion_index\": 0.482\n  },\n  \"computation_code\": \"# Computation code for calculating derived metrics based on dimensional scores\\n\\ndef calculate_derived_metrics(scores):\\n    # Extracting individual dimension scores\\n    tribal_dominance_raw = scores.get('tribal_dominance', {}).get('raw_score', 0.0)\\n    individual_dignity_raw = scores.get('individual_dignity', {}).get('raw_score', 0.0)\\n    fear_raw = scores.get('fear', {}).get('raw_score', 0.0)\\n    hope_raw = scores.get('hope', {}).get('raw_score', 0.0)\\n    envy_raw = scores.get('envy', {}).get('raw_score', 0.0)\\n    mudita_raw = scores.get('mudita', {}).get('raw_score', 0.0)\\n    enmity_raw = scores.get('enmity', {}).get('raw_score', 0.0)\\n    amity_raw = scores.get('amity', {}).get('raw_score', 0.0)\\n    fragmentative_goals_raw = scores.get('fragmentative_goals', {}).get('raw_score', 0.0)\\n    cohesive_goals_raw = scores.get('cohesive_goals', {}).get('raw_score', 0.0)\\n\\n    # Extracting salience scores\\n    individual_dignity_salience = scores.get('individual_dignity', {}).get('salience', 0.0)\\n    amity_salience = scores.get('amity', {}).get('salience', 0.0)\\n    cohesive_goals_salience = scores.get('cohesive_goals', {}).get('salience', 0.0)\\n    fear_salience = scores.get('fear', {}).get('salience', 0.0)\\n    enmity_salience = scores.get('enmity', {}).get('salience', 0.0)\\n    hope_salience = scores.get('hope', {}).get('salience', 0.0)\\n    mudita_salience = scores.get('mudita', {}).get('salience', 0.0)\\n    envy_salience = scores.get('envy', {}).get('salience', 0.0)\\n    tribal_dominance_salience = scores.get('tribal_dominance', {}).get('salience', 0.0)\\n    fragmentative_goals_salience = scores.get('fragmentative_goals', {}).get('salience', 0.0)\\n\\n    # Tension Metrics Calculation\\n    identity_tension = abs(individual_dignity_raw - tribal_dominance_raw)\\n    emotional_tension = abs(hope_raw - fear_raw)\\n    success_tension = abs(mudita_raw - envy_raw)\\n    relational_tension = abs(amity_raw - enmity_raw)\\n    goal_tension = abs(cohesive_goals_raw - fragmentative_goals_raw)\\n\\n    # Cohesion Components Calculation\\n    identity_cohesion_component = (individual_dignity_raw + tribal_dominance_raw) / 2.0\\n    emotional_cohesion_component = (hope_raw + fear_raw) / 2.0\\n    success_cohesion_component = (mudita_raw + envy_raw) / 2.0\\n    relational_cohesion_component = (amity_raw + enmity_raw) / 2.0\\n    goal_cohesion_component = (cohesive_goals_raw + fragmentative_goals_raw) / 2.0\\n\\n    # Salience Totals Calculation\\n    descriptive_salience_total = fear_salience + enmity_salience + envy_salience + mudita_salience\\n    motivational_salience_total = hope_salience + amity_salience + cohesive_goals_salience + tribal_dominance_salience\\n    full_salience_total = descriptive_salience_total + motivational_salience_total\\n\\n    # Cohesion Indices Calculation\\n    # Simplified calculation based on assumed metric logic. Specific weights/formulas might be needed.\\n    # Assuming a direct relationship between positive dimensions and cohesion, and negative dimensions with tension.\\n    # The following are placeholder calculations that reflect general principles of cohesion.\\n    # Specific framework details would inform exact formulas.\\n\\n    # Strategic Contradiction Index (example: balancing opposing concepts)\\n    # A higher value might indicate more contradiction.\\n    strategic_contradiction_index = (fear_raw + enmity_raw + fragmentative_goals_raw) / 3.0 - (hope_raw + amity_raw + cohesive_goals_raw) / 3.0\\n    if strategic_contradiction_index < 0: strategic_contradiction_index = 0 # Ensure non-negative if logic implies it\\n\\n    # Descriptive Cohesion Index (example: weighted sum of 'descriptive' positive dimensions)\\n    # Using salience as weights.\\n    descriptive_cohesion_index = (\\n        fear_salience * fear_raw + \\n        enmity_salience * enmity_raw + \\n        envy_salience * envy_raw + \\n        mudita_salience * mudita_raw\\n    ) / (descriptive_salience_total if descriptive_salience_total > 0 else 1e-6)\\n\\n    # Motivational Cohesion Index (example: weighted sum of 'motivational' positive dimensions)\\n    motivational_cohesion_index = (\\n        hope_salience * hope_raw + \\n        amity_salience * amity_raw + \\n        cohesive_goals_salience * cohesive_goals_raw + \\n        tribal_dominance_salience * tribal_dominance_raw\\n    ) / (motivational_salience_total if motivational_salience_total > 0 else 1e-6)\\n\\n    # Full Cohesion Index (example: combines descriptive and motivational aspects)\\n    # A simple average of the two components, or a weighted average based on salience.\\n    full_cohesion_index = (descriptive_cohesion_index + motivational_cohesion_index) / 2.0\\n\\n    # Returning all calculated metrics\\n    return {\\n        \\\"identity_tension\\\": round(identity_tension, 2),\\n        \\\"emotional_tension\\\": round(emotional_tension, 2),\\n        \\\"success_tension\\\": round(success_tension, 2),\\n        \\\"relational_tension\\\": round(relational_tension, 2),\\n        \\\"goal_tension\\\": round(goal_tension, 2),\\n        \\\"strategic_contradiction_index\\\": round(max(0, 1 - (abs(strategic_contradiction_index))), 3), # Adjusted based on likely intent of 'low strategic contradiction'\\n        \\\"identity_cohesion_component\\\": round(identity_cohesion_component, 2),\\n        \\\"emotional_cohesion_component\\\": round(emotional_cohesion_component, 2),\\n        \\\"success_cohesion_component\\\": round(success_cohesion_component, 2),\\n        \\\"relational_cohesion_component\\\": round(relational_cohesion_component, 2),\\n        \\\"goal_cohesion_component\\\": round(goal_cohesion_component, 2),\\n        \\\"descriptive_salience_total\\\": round(descriptive_salience_total, 1),\\n        \\\"motivational_salience_total\\\": round(motivational_salience_total, 1),\\n        \\\"full_salience_total\\\": round(full_salience_total, 1),\\n        \\\"descriptive_cohesion_index\\\": round(descriptive_cohesion_index, 3),\\n        \\\"motivational_cohesion_index\\\": round(motivational_cohesion_index, 3),\\n        \\\"full_cohesion_index\\\": round(full_cohesion_index, 3)\\n    }\\n\\n# Example usage (assuming scores are available):\\n# all_scores = {\\n#     \\\"tribal_dominance\\\": {\\\"raw_score\\\": 0.0, \\\"salience\\\": 0.1, \\\"confidence\\\": 1.0},\\n#     \\\"individual_dignity\\\": {\\\"raw_score\\\": 0.9, \\\"salience\\\": 0.9, \\\"confidence\\\": 0.9},\\n#     \\\"fear\\\": {\\\"raw_score\\\": 0.6, \\\"salience\\\": 0.6, \\\"confidence\\\": 0.9},\\n#     \\\"hope\\\": {\\\"raw_score\\\": 0.9, \\\"salience\\\": 0.8, \\\"confidence\\\": 0.9},\\n#     \\\"envy\\\": {\\\"raw_score\\\": 0.0, \\\"salience\\\": 0.1, \\\"confidence\\\": 0.9},\\n#     \\\"mudita\\\": {\\\"raw_score\\\": 0.4, \\\"salience\\\": 0.3, \\\"confidence\\\": 0.9},\\n#     \\\"enmity\\\": {\\\"raw_score\\\": 0.5, \\\"salience\\\": 0.7, \\\"confidence\\\": 0.9},\\n#     \\\"amity\\\": {\\\"raw_score\\\": 0.9, \\\"salience\\\": 0.9, \\\"confidence\\\": 0.9},\\n#     \\\"fragmentative_goals\\\": {\\\"raw_score\\\": 0.0, \\\"salience\\\": 0.1, \\\"confidence\\\": 1.0},\\n#     \\\"cohesive_goals\\\": {\\\"raw_score\\\": 0.9, \\\"salience\\\": 1.0, \\\"confidence\\\": 0.9}\\n# }\\n# derived_metrics_result = calculate_derived_metrics(all_scores)\\n# print(derived_metrics_result)\\n\"\n}\n```",
  "document_index": 1,
  "timestamp": "2025-09-22T16:42:25.560578+00:00"
}