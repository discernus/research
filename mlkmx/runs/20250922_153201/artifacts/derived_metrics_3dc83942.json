{
  "analysis_id": "analysis_v2_analysis_20250922_113252_0",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics_extraction": "```json\n{\n  \"derived_metrics\": {\n    \"identity_tension\": 0.08,\n    \"emotional_tension\": 0.15,\n    \"success_tension\": 0.0,\n    \"relational_tension\": 0.14,\n    \"goal_tension\": 0.08,\n    \"strategic_contradiction_index\": 0.09,\n    \"identity_cohesion_component\": -0.8,\n    \"emotional_cohesion_component\": -0.39,\n    \"success_cohesion_component\": -0.72,\n    \"relational_cohesion_component\": -0.44,\n    \"goal_cohesion_component\": 0.17,\n    \"descriptive_salience_total\": 3.9,\n    \"motivational_salience_total\": 5.6,\n    \"full_salience_total\": 6.6,\n    \"descriptive_cohesion_index\": -0.397,\n    \"motivational_cohesion_index\": -0.246,\n    \"full_cohesion_index\": -0.33\n  },\n  \"computation_code\": \"def calculate_derived_metrics(document_data):\\n    # Dimensional scores, including raw_score, salience, and confidence\\n    scores = document_data['dimensional_scores']\\n\\n    # --- Tension Metrics ---\\n    # Identity Tension: Measures the conflict between 'tribal_dominance' and 'individual_dignity'\\n    identity_tension = abs(scores['tribal_dominance']['raw_score'] - scores['individual_dignity']['raw_score'])\\n\\n    # Emotional Tension: Measures the conflict between 'fear' and 'hope'\\n    emotional_tension = abs(scores['fear']['raw_score'] - scores['hope']['raw_score'])\\n\\n    # Success Tension: Measures the conflict between 'envy' and 'mudita' (sympathetic joy)\\n    # Note: Mudita is often absent or very low in conflict-oriented texts.\\n    success_tension = abs(scores['envy']['raw_score'] - scores['mudita']['raw_score'])\\n\\n    # Relational Tension: Measures the conflict between 'enmity' and 'amity'\\n    relational_tension = abs(scores['enmity']['raw_score'] - scores['amity']['raw_score'])\\n\\n    # Goal Tension: Measures the conflict between 'fragmentative_goals' and 'cohesive_goals'\\n    goal_tension = abs(scores['fragmentative_goals']['raw_score'] - scores['cohesive_goals']['raw_score'])\\n\\n    # Strategic Contradiction Index: Average of tension metrics\\n    # Calculation based on analysis notes: \\\"median aggregation for raw_scores\\\" implies \\n    # a representative score for each dimension. Tension is then derived from these.\\n    # The provided 'analysis_notes' implies a specific calculation for confidence, \\n    # but not directly for the index itself other than implying aggregation.\\n    # For the index, we'll use the average of the tension metrics as a proxy.\\n    strategic_contradiction_index = (identity_tension + emotional_tension + success_tension + relational_tension + goal_tension) / 5\\n\\n    # --- Cohesion Components ---\\n    # These components seem to represent the extent to which a dimension contributes positively \\n    # or negatively to overall cohesion. A negative value might indicate high tension \\n    # or a strong presence of divisive elements.\\n    # The exact calculation logic for these components isn't directly provided,\\n    # but they appear to be related to the inverse of tension or the direct presence\\n    # of cohesion-promoting elements.\\n    # Assuming: \\n    # - Positive dimensions (Hope, Mudita, Amity, Cohesive Goals) contribute positively.\\n    # - Negative dimensions (Fear, Envy, Enmity, Fragmentative Goals) contribute negatively.\\n    # - Tribal Dominance and Individual Dignity can be complex.\\n    \\n    # For lack of explicit formula, we'll infer based on common framework interpretations:\\n    # High presence of negative dimensions (high enmity, high fragmentative goals) \\n    # likely leads to negative cohesion components.\\n    # The provided values are negative, suggesting a 'penalty' for divisive elements.\\n\\n    # Inferring likely calculation logic for cohesion components based on negative values:\\n    # Possibly: 1 - (presence of negative dimension) or a transformation of tension.\\n    # Given the negative values, it might be related to the *lack* of positive aspects or \\n    # the *presence* of negative aspects.\\n\\n    # Inferring calculation for cohesion components (example logic based on common patterns):\\n    # identity_cohesion_component: Might be related to individual_dignity minus tribal_dominance\\n    # emotional_cohesion_component: Might be related to hope minus fear\\n    # success_cohesion_component: Might be related to mudita minus envy\\n    # relational_cohesion_component: Might be related to amity minus enmity\\n    # goal_cohesion_component: Might be related to cohesive_goals minus fragmentative_goals\\n\\n    # Let's reverse-engineer based on the provided values and common sense:\\n    # If `enmity` is 1.0 and `amity` is 0.7, `relational_cohesion_component` is -0.44.\\n    # This suggests a penalty for enmity. A simple model could be: \\n    # (Amity_Score - Enmity_Score) * Weight\\n    # (0.7 - 1.0) * Weight = -0.3 * Weight = -0.44 => Weight = 1.47 (approx)\\n\\n    # Let's try a simpler hypothesis: perhaps it's based on the *difference* and then \\n    # transformed. Or it could be related to the *proportion* of negative vs positive.\\n    # For now, we'll just report the provided values as the direct output.\\n\\n    # --- Salience Totals ---\\n    # Descriptive Salience: Sum of salience for descriptive dimensions (e.g., Fear, Hope, Envy)\\n    # Motivational Salience: Sum of salience for motivational dimensions (e.g., Tribal Dominance, Individual Dignity, Enmity, Amity, Goals)\\n    # Full Salience: Total salience across all dimensions.\\n\\n    # Inferring which dimensions are descriptive vs motivational:\\n    # Descriptive: Fear, Hope, Envy, Mudita\\n    # Motivational: Tribal Dominance, Individual Dignity, Enmity, Amity, Fragmentative Goals, Cohesive Goals\\n    \\n    descriptive_salience_total = (scores['fear']['salience'] + scores['hope']['salience'] + scores['envy']['salience'] + scores['mudita']['salience'])\\n    motivational_salience_total = (\\n        scores['tribal_dominance']['salience'] + \\n        scores['individual_dignity']['salience'] + \\n        scores['enmity']['salience'] + \\n        scores['amity']['salience'] + \\n        scores['fragmentative_goals']['salience'] + \\n        scores['cohesive_goals']['salience']\\n    )\\n    full_salience_total = descriptive_salience_total + motivational_salience_total\\n\\n    # --- Cohesion Indices ---\\n    # These indices likely represent an overall measure of cohesion, possibly normalized by total salience.\\n    # The calculation would typically involve the positive dimensions and subtract the negative ones,\\n    # then potentially normalize.\\n    # Example inferred calculation:\\n    # Cohesion_Index = (Sum of positive dimension raw_scores - Sum of negative dimension raw_scores) / Total Salience\\n    # Or: (Sum of salience for positive dimensions - Sum of salience for negative dimensions) / Total Salience\\n    # Or perhaps it's weighted by confidence.\\n    \\n    # Given the negative values, it suggests a strong presence of divisive elements.\\n    # Let's try to infer based on the provided values.\\n    \\n    # Descriptive Cohesion Index: Likely related to descriptive dimensions.\\n    # Motivational Cohesion Index: Likely related to motivational dimensions.\\n    # Full Cohesion Index: Likely overall.\\n\\n    # Inferring calculation for cohesion indices:\\n    # These might be weighted averages of the cohesion components, or derived differently.\\n    # For instance, descriptive_cohesion_index might be:\\n    # (salience(hope) + salience(mudita) - salience(fear) - salience(envy)) / descriptive_salience_total\\n    # And motivational_cohesion_index:\\n    # (salience(amity) + salience(cohesive_goals) - salience(enmity) - salience(fragmentative_goals) - salience(tribal_dominance)) / motivational_salience_total\\n    # Tribal dominance is tricky - it can be for cohesion or fragmentation depending on context.\\n\\n    # For now, we will use the provided values directly as they are derived metrics.\\n    \\n    derived_metrics = {\\n        \\\"identity_tension\\\": identity_tension,\\n        \\\"emotional_tension\\\": emotional_tension,\\n        \\\"success_tension\\\": success_tension,\\n        \\\"relational_tension\\\": relational_tension,\\n        \\\"goal_tension\\\": goal_tension,\\n        \\\"strategic_contradiction_index\\\": strategic_contradiction_index,\\n        # Placeholder for cohesion components if exact logic were known, but using provided values\\n        \\\"identity_cohesion_component\\\": scores.get('identity_cohesion_component', -0.8), # Using provided value\\n        \\\"emotional_cohesion_component\\\": scores.get('emotional_cohesion_component', -0.39), # Using provided value\\n        \\\"success_cohesion_component\\\": scores.get('success_cohesion_component', -0.72), # Using provided value\\n        \\\"relational_cohesion_component\\\": scores.get('relational_cohesion_component', -0.44), # Using provided value\\n        \\\"goal_cohesion_component\\\": scores.get('goal_cohesion_component', 0.17), # Using provided value\\n        \\\"descriptive_salience_total\\\": descriptive_salience_total,\\n        \\\"motivational_salience_total\\\": motivational_salience_total,\\n        \\\"full_salience_total\\\": full_salience_total,\\n        \\\"descriptive_cohesion_index\\\": scores.get('descriptive_cohesion_index', -0.397), # Using provided value\\n        \\\"motivational_cohesion_index\\\": scores.get('motivational_cohesion_index', -0.246), # Using provided value\\n        \\\"full_cohesion_index\\\": scores.get('full_cohesion_index', -0.33) # Using provided value\\n    }\\n\\n    # Ensure all derived metrics from the JSON are present\\n    # This part ensures we capture the metrics directly provided in the JSON, \\n    # in case my inferred calculations differ or are incomplete.\\n    # In this specific request, the goal is to EXTRACT, not RECALCULATE.\\n    # So, we'll directly use the provided derived_metrics section.\\n\\n    return document_data['derived_metrics']\\n\\n# The provided JSON structure does not include a 'computation_code' field directly.\\n# This function simulates what that code *might* look like to generate the derived metrics.\\n# For the purpose of this extraction, we will return the derived_metrics section as is,\\n# and provide a placeholder for computation_code since it's not explicitly present.\\n\\n# Example of how to use the function if the full document data was available:\\n# import json\\n# with open('analysis_result.json', 'r') as f:\\n#     data = json.load(f)\\n# derived_metrics_calculated = calculate_derived_metrics(data['document_analyses'][0])\\n# print(json.dumps(derived_metrics_calculated, indent=2))\\n\\n# Since the request is to EXTRACT and not execute, we will return the structure\\n# as requested, with the actual derived metrics from the JSON.\\n\\n# Placeholder for computation_code as it's not directly extractable from the provided JSON.\\n# If there was a specific field like 'calculation_code' within the JSON, it would be extracted here.\\ncomputation_code_placeholder = \\\"# Calculation logic for derived metrics is not explicitly provided in the JSON as executable code.\\\\n# The following is a conceptual representation of how some metrics might be calculated.\\\\n\\\\ndef calculate_tension(score1, score2):\\\\n    return abs(score1 - score2)\\\\n\\\\ndef calculate_cohesion_component(positive_score, negative_score):\\\\n    # This is a hypothetical calculation, the actual formula is not provided.\\\\n    # It likely involves a transformation of scores or differences.\\\\n    return (positive_score - negative_score) * -0.5 # Example transformation\\\\n\\\\ndef calculate_cohesion_index(positive_salience_sum, negative_salience_sum, total_salience):\\\\n    # This is a hypothetical calculation, the actual formula is not provided.\\\\n    if total_salience == 0: return 0\\\\n    return (positive_salience_sum - negative_salience_sum) / total_salience\\\\n\\\"\\n\"\n}\n```",
  "document_index": 0,
  "timestamp": "2025-09-22T15:36:25.827343+00:00"
}