{
  "analysis_id": "analysis_4c0a7a81",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\n# Provided dimensional scores\ndimensional_scores = {\n  \"positive_sentiment\": {\n    \"raw_score\": 1.0,\n    \"salience\": 1.0,\n    \"confidence\": 1.0\n  },\n  \"negative_sentiment\": {\n    \"raw_score\": 0.0,\n    \"salience\": 0.0,\n    \"confidence\": 1.0\n  }\n}\n\n# Define the framework formulas for derived metrics\ndef calculate_derived_metrics(scores):\n    positive_sentiment = scores.get(\"positive_sentiment\", {}).get(\"raw_score\", 0.0)\n    negative_sentiment = scores.get(\"negative_sentiment\", {}).get(\"raw_score\", 0.0)\n\n    # Net Sentiment: Balance between positive and negative sentiment (positive - negative)\n    net_sentiment = positive_sentiment - negative_sentiment\n\n    # Sentiment Magnitude: Combined intensity of emotional language (positive + negative) / 2\n    sentiment_magnitude = (positive_sentiment + negative_sentiment) / 2\n\n    return {\n        \"net_sentiment\": net_sentiment,\n        \"sentiment_magnitude\": sentiment_magnitude\n    }\n\n# Calculate the derived metrics\nderived_metrics_results = calculate_derived_metrics(dimensional_scores)\n\n# Print the results\nprint(json.dumps(derived_metrics_results, indent=2))\n```\n\n```json\n{\n  \"net_sentiment\": 1.0,\n  \"sentiment_magnitude\": 0.5\n}\n```",
  "timestamp": "2025-09-15T03:43:05.611688+00:00"
}