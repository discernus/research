{
  "analysis_id": "analysis_bd093413",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\n# Input dimensional scores\ndimensional_scores = {\n  \"positive_sentiment\": {\n    \"raw_score\": 0.9,\n    \"salience\": 1.0,\n    \"confidence\": 1.0\n  },\n  \"negative_sentiment\": {\n    \"raw_score\": 0.0,\n    \"salience\": 0.0,\n    \"confidence\": 1.0\n  }\n}\n\n# Derived metrics formulas from the framework\ndef calculate_derived_metrics(scores):\n    positive_sentiment = scores[\"positive_sentiment\"][\"raw_score\"]\n    negative_sentiment = scores[\"negative_sentiment\"][\"raw_score\"]\n\n    # Net Sentiment: Balance between positive and negative sentiment (positive - negative)\n    net_sentiment = positive_sentiment - negative_sentiment\n\n    # Sentiment Magnitude: Combined intensity of emotional language (positive + negative)\n    # The framework's description says \"Average emotional intensity (positive + negative) / 2\"\n    # so we will implement that.\n    sentiment_magnitude = (positive_sentiment + negative_sentiment) / 2\n\n    return {\n        \"net_sentiment\": net_sentiment,\n        \"sentiment_magnitude\": sentiment_magnitude\n    }\n\n# Calculate the derived metrics\nderived_results = calculate_derived_metrics(dimensional_scores)\n\n# Print the results\nprint(json.dumps(derived_results, indent=2))\n```\n\n```json\n{\n  \"net_sentiment\": 0.9,\n  \"sentiment_magnitude\": 0.45\n}\n```",
  "timestamp": "2025-09-15T02:23:51.583595+00:00"
}