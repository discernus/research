{
  "analysis_id": "analysis_7738138b",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\n# Provided scores\nscores_data = {\n  \"negative_test_2.txt\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 0.95,\n      \"salience\": 0.95,\n      \"confidence\": 1.0\n    }\n  }\n}\n\n# Derived metrics calculations\nderived_metrics_results = {}\n\nfor filename, sentiment_scores in scores_data.items():\n    positive_sentiment = sentiment_scores[\"positive_sentiment\"][\"raw_score\"]\n    negative_sentiment = sentiment_scores[\"negative_sentiment\"][\"raw_score\"]\n\n    # Net Sentiment: Balance between positive and negative sentiment (positive - negative)\n    net_sentiment = positive_sentiment - negative_sentiment\n\n    # Sentiment Magnitude: Combined intensity of emotional language (positive + negative) / 2\n    sentiment_magnitude = (positive_sentiment + negative_sentiment) / 2\n\n    derived_metrics_results[filename] = {\n        \"net_sentiment\": net_sentiment,\n        \"sentiment_magnitude\": sentiment_magnitude\n    }\n\n# Print the results\nprint(json.dumps(derived_metrics_results, indent=2))\n```\n\n```json\n{\n  \"negative_test_2.txt\": {\n    \"net_sentiment\": -0.95,\n    \"sentiment_magnitude\": 0.475\n  }\n}\n```",
  "timestamp": "2025-09-15T03:42:34.137516+00:00"
}