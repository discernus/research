{
  "analysis_id": "analysis_0f02f96a",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\n# Provided dimensional scores\nscores = {\n  \"document_id\": \"negative_test_2\",\n  \"positive_sentiment\": {\n    \"raw_score\": 0.0,\n    \"salience\": 0.0,\n    \"confidence\": 1.0\n  },\n  \"negative_sentiment\": {\n    \"raw_score\": 1.0,\n    \"salience\": 1.0,\n    \"confidence\": 1.0\n  }\n}\n\n# Calculate derived metrics based on the framework\n\n# Net Sentiment: Balance between positive and negative sentiment (positive - negative)\nnet_sentiment = scores[\"positive_sentiment\"][\"raw_score\"] - scores[\"negative_sentiment\"][\"raw_score\"]\n\n# Sentiment Magnitude: Combined intensity of emotional language (positive + negative) / 2\n# The framework description states \"positive + negative\" but the formula in yaml\n# has a division by 2. We'll follow the formula in the yaml for precision.\nsentiment_magnitude = (scores[\"positive_sentiment\"][\"raw_score\"] + scores[\"negative_sentiment\"][\"raw_score\"]) / 2\n\n# Prepare the results\nderived_metrics_results = {\n    \"document_id\": scores[\"document_id\"],\n    \"net_sentiment\": net_sentiment,\n    \"sentiment_magnitude\": sentiment_magnitude\n}\n\n# Print the results\nprint(derived_metrics_results)\n```\n\n```json\n{\n  \"document_id\": \"negative_test_2\",\n  \"net_sentiment\": -1.0,\n  \"sentiment_magnitude\": 0.5\n}\n```",
  "timestamp": "2025-09-15T13:50:49.040748+00:00"
}