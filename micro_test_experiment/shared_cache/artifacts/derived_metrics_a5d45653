{
  "analysis_id": "analysis_686731a1",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\nscores = {\n  \"negative_test_1.txt\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 1.0,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    }\n  }\n}\n\ndef calculate_derived_metrics(scores_data):\n    results = {}\n    for filename, dimensions in scores_data.items():\n        positive_sentiment = dimensions.get(\"positive_sentiment\", {}).get(\"raw_score\", 0.0)\n        negative_sentiment = dimensions.get(\"negative_sentiment\", {}).get(\"raw_score\", 0.0)\n\n        # Net Sentiment: Balance between positive and negative sentiment (positive - negative)\n        net_sentiment = positive_sentiment - negative_sentiment\n\n        # Sentiment Magnitude: Combined intensity of emotional language (positive + negative) / 2\n        sentiment_magnitude = (positive_sentiment + negative_sentiment) / 2\n\n        results[filename] = {\n            \"net_sentiment\": net_sentiment,\n            \"sentiment_magnitude\": sentiment_magnitude\n        }\n    return results\n\nderived_metrics_results = calculate_derived_metrics(scores)\nprint(json.dumps(derived_metrics_results, indent=2))\n```\n\n```json\n{\n  \"negative_test_1.txt\": {\n    \"net_sentiment\": -1.0,\n    \"sentiment_magnitude\": 0.5\n  }\n}\n```",
  "timestamp": "2025-09-15T13:24:52.715099+00:00"
}