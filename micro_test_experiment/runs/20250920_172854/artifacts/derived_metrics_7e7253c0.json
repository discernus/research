{
  "analysis_id": "analysis_6f57b3fd",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "raw_metrics_response": "```python\nimport json\n\n# Provided dimensional scores for document_2\ndocument_scores = {\n  \"document_2\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 1.0,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    }\n  }\n}\n\n# Function to calculate derived metrics\ndef calculate_derived_metrics(scores):\n    derived_metrics = {}\n    for doc_id, dims in scores.items():\n        pos_score = dims.get(\"positive_sentiment\", {}).get(\"raw_score\", 0.0)\n        neg_score = dims.get(\"negative_sentiment\", {}).get(\"raw_score\", 0.0)\n\n        # Net Sentiment: positive - negative\n        net_sentiment = pos_score - neg_score\n\n        # Sentiment Magnitude: (positive + negative) / 2\n        sentiment_magnitude = (pos_score + neg_score) / 2\n\n        derived_metrics[doc_id] = {\n            \"net_sentiment\": net_sentiment,\n            \"sentiment_magnitude\": sentiment_magnitude\n        }\n    return derived_metrics\n\n# Calculate the derived metrics\nresults = calculate_derived_metrics(document_scores)\n\n# Print the results\nprint(json.dumps(results, indent=2))\n```\n\n```json\n{\n  \"document_2\": {\n    \"net_sentiment\": -1.0,\n    \"sentiment_magnitude\": 0.5\n  }\n}\n```",
  "document_index": 2,
  "document_name": "document_2",
  "timestamp": "2025-09-20T17:30:21.983263+00:00"
}