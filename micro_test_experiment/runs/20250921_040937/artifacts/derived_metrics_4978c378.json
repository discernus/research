{
  "analysis_id": "analysis_v2_analysis_20250921_000937_0",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\ndef calculate_derived_metrics(dimensional_scores):\n    \"\"\"\n    Calculates derived sentiment metrics based on the provided dimensional scores.\n\n    Args:\n        dimensional_scores (dict): A dictionary containing the raw scores for\n                                   'positive_sentiment' and 'negative_sentiment'.\n                                   Example: {\"positive_sentiment\": 1.0, \"negative_sentiment\": 0.0}\n\n    Returns:\n        dict: A dictionary containing the calculated derived metrics:\n              'net_sentiment' and 'sentiment_magnitude'.\n    \"\"\"\n\n    # Ensure the required dimensional scores are present\n    if \"positive_sentiment\" not in dimensional_scores or \"negative_sentiment\" not in dimensional_scores:\n        raise ValueError(\"Input 'dimensional_scores' must contain 'positive_sentiment' and 'negative_sentiment'.\")\n\n    positive_score = dimensional_scores[\"positive_sentiment\"]\n    negative_score = dimensional_scores[\"negative_sentiment\"]\n\n    # --- Calculate Net Sentiment ---\n    # Net Sentiment = Positive Sentiment - Negative Sentiment\n    # This metric indicates the overall balance of sentiment.\n    # A positive value suggests a net positive sentiment,\n    # a negative value suggests a net negative sentiment,\n    # and zero indicates a neutral or balanced sentiment.\n    net_sentiment = positive_score - negative_score\n\n    # --- Calculate Sentiment Magnitude ---\n    # Sentiment Magnitude = (Positive Sentiment + Negative Sentiment) / 2\n    # This metric represents the average emotional intensity, regardless of polarity.\n    # A higher value indicates stronger emotional expression, either positive or negative.\n    sentiment_magnitude = (positive_score + negative_score) / 2\n\n    derived_metrics = {\n        \"net_sentiment\": net_sentiment,\n        \"sentiment_magnitude\": sentiment_magnitude\n    }\n\n    return derived_metrics\n\n# Provided dimensional scores\nscores_input = {\n  \"positive_sentiment\": 1.0,\n  \"negative_sentiment\": 0.0\n}\n\n# Calculate the derived metrics\ncalculated_metrics = calculate_derived_metrics(scores_input)\n\n# Display the results\nprint(\"--- Input Dimensional Scores ---\")\nprint(json.dumps(scores_input, indent=2))\nprint(\"\\n--- Calculated Derived Metrics ---\")\nprint(json.dumps(calculated_metrics, indent=2))\n\n# Interpretation of results based on the framework:\nprint(\"\\n--- Interpretation of Results ---\")\nprint(f\"Net Sentiment: {calculated_metrics['net_sentiment']:.2f}\")\nif calculated_metrics['net_sentiment'] > 0:\n    print(\"  Interpretation: Net positive sentiment.\")\nelif calculated_metrics['net_sentiment'] == 0:\n    print(\"  Interpretation: Balanced sentiment.\")\nelse:\n    print(\"  Interpretation: Net negative sentiment.\")\n\nprint(f\"\\nSentiment Magnitude: {calculated_metrics['sentiment_magnitude']:.2f}\")\nif calculated_metrics['sentiment_magnitude'] > 0.5:\n    print(\"  Interpretation: High emotional intensity.\")\nelif 0.25 <= calculated_metrics['sentiment_magnitude'] <= 0.5:\n    print(\"  Interpretation: Moderate emotional intensity.\")\nelse:\n    print(\"  Interpretation: Low emotional intensity.\")\n```\n\n```text\n--- Input Dimensional Scores ---\n{\n  \"positive_sentiment\": 1.0,\n  \"negative_sentiment\": 0.0\n}\n\n--- Calculated Derived Metrics ---\n{\n  \"net_sentiment\": 1.0,\n  \"sentiment_magnitude\": 0.5\n}\n\n--- Interpretation of Results ---\nNet Sentiment: 1.00\n  Interpretation: Net positive sentiment.\n\nSentiment Magnitude: 0.50\n  Interpretation: Moderate emotional intensity.\n```",
  "document_index": 0,
  "timestamp": "2025-09-21T04:09:51.623923+00:00"
}