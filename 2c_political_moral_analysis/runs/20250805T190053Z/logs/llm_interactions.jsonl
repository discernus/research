{"log_type":"llm_interaction","interaction_hash":"ebaeaf4a253ddb1c","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: alexandria_ocasio_cortez_2025_fighting_oligarchy.txt\nHash: 1661752fdc6c...\nV2UgYXJlIHdpdG5lc3NpbmcgYW4gb2xpZ2FyY2h5IGluIEFtZXJpY2EuIEFuZCB0aGF0IGlzIHdoZW4gdGhvc2Ugd2l0aCB0aGUgbW9zdCBlY29ub21pYywgcG9saXRpY2FsLCBhbmQgdGVjaG5vbG9naWNhbCBwb3dlciBkZXN0cm95IHRoZSBwdWJsaWMgZ29vZCB0byBlbnJpY2ggdGhlbXNlbHZlcyB3aGlsZSBtaWxsaW9ucyBvZiBBbWVyaWNhbnMgcGF5IHRoZSBwcmljZS4gQW5kIG91ciBwb2xpdGljYWwgc3lzdGVtIGlzIGlsbC1wcmVwYXJlZCBmb3IgdGhpcyBhYnVzZSBvZiBwb3dlci4gSW4gZmFjdCwgbXVjaCBvZiBvdXIgcG9saXRpY2FsIHN5c3RlbSBlbmFibGVzIGl0LCBzdGFydGluZyB3aXRoIHRoZSByb2xlIG9mIG1vbmV5IGluIHBvbGl0aWNzLgpUaGUgc2FtZSBiaWxsaW9uYWlyZXMgYXJlIHRha2luZyBhIHdyZWNraW5nIGJhbGwgdG8gb3VyIGNvdW50cnkgYW5kIHRoZXkgZGVyaXZlIHRoZWlyIHBvd2VyIGZyb20gZGl2aWRpbmcgd29ya2luZyBwZW9wbGUgYXBhcnQuIFRoZXkgc3BlY2lhbGl6ZSBpbiBnZXR0aW5nIHVzIHRvIHR1cm4gb24gb25lIGFub3RoZXIgYW5kIHRoZXkgZ2V0IHVzIHRvIHR1cm4gb24gb25lIGFub3RoZXIgYWxvbmcgbGluZXMgb2YgbGVmdCBhbmQgcmlnaHQsIHJhY2UgYW5kIGdlbmRlciwgY3JlZWQgYW5kIGN1bHR1cmUuIFRoZXknbGwgdGhyb3cgb3V0IGV2ZXJ5IGxhYmVsIGFuZCBqdWRnbWVudCBhbmQgY3VsdHVyYWwgZGViYXRlIGluIHRoZSBib29rIHRvIGtlZXAgdXMgZGlzdHJhY3RlZCBiZWNhdXNlIHRoZSBsYXN0IHRoaW5nIHRoZXkgd2FudCB1cyB0byByZWFsaXplIGlzIHRoYXQgdGhlIGRpdmlzaW9uIHRoYXQgaXMgYWN0dWFsbHkgaHVydGluZyBvdXIgY291bnRyeSB0aGUgbW9zdCBpcyBob3cgZW5kbGVzcyBncmVlZCBpcyBjb3N0aW5nIHRoZSBsaXZlcyBvZiBldmVyeW9uZSBlbHNlLgpUaGV5IHdhbnQgdXMgdG8gdGhpbmsgdGhhdCBvdXIgbGl2ZXMgYXJlIHN1ZmZlcmluZyBiZWNhdXNlIG9mIHRoZSBMR0JUIGtpZCBkb3duIHRoZSBzdHJlZXQgb3IgYmVjYXVzZSBvZiB0aGUgbWl4ZWQgc3RhdHVzIGZhbWlseSBvciB0aGUgZHJlYW1lciBkb3duIHRoZSBibG9jayB3aG8ncyBqdXN0IHRyeWluZyB0byBtYWtlIGEgYmV0dGVyIGxpZmUgZm9yIHRoZW1zZWx2ZXMuIEJ1dCB3ZSdyZSBzbWFydGVyIHRoYW4gdGhhdCBHcmVlbGV5LiBXZSBrbm93IGJldHRlciB0aGFuIHRoYXQuCkFuZCBJIHVuZGVyc3RhbmQgdGhhdCB0aGlzIGtpbmQgb2YgZGlzZGFpbiB0aGF0IHRoZSB3ZWFsdGhpZXN0LCB3ZWFsdGhpZXN0IHBlb3BsZSBpbiB0aGlzIGNvdW50cnkgaGF2ZSBmb3IgdGhlIHdvcmtpbmcgY2xhc3MgZG9lc24ndCBqdXN0IGNvbWUgZnJvbSB0aGVtIG5vdCBiZWluZyByYWlzZWQgcmlnaHQuIEl0J3Mgc2hvcnRoYW5kIGZvciB0aGUgcmlnaHQgd2luZydzIGVudGlyZSBwb2xpdGljYWwgYWdlbmRhIGFuZCBhIGNlcnRhaW4gdWdseSBraW5kIG9mIHBvbGl0aWNzLCBhIHBvbGl0aWNzIHRoYXQgaW52b2x2ZXMgbHlpbmcgdG8gYW5kIHNjcmV3aW5nIG92ZXIgd29ya2luZyBhbmQgbWlkZGxlIGNsYXNzIEFtZXJpY2FucyBzbyB0aGF0IHRoZXkgY2FuIHN0ZWFsIGZyb20gb3VyIGhlYWx0aGNhcmUsIFNvY2lhbCBTZWN1cml0eSwgYW5kIHZldGVyYW5zJyBiZW5lZml0cyB0byBwYXkgZm9yIHRheCBjdXRzIGZvciB0aGUgd2VhbHRoaWVzdCBhbmQgYmFpbG91dHMgZm9yIHRoZWlyIGNyeXB0byBiaWxsaW9uYWlyZSBmcmllbmRzLiBBbmQgR3JlZWxleSwgdGhlcmUncyBhIHdvcmQgZm9yIHRoaXMga2luZCBvZiB0aGluZywgY29ycnVwdGlvbi4KRG9uYWxkIFRydW1wIGRvZXMgc2VlIHRoZSBpbW1lbnNlIHByZXNzdXJlIHRoYXQgd29ya2luZyBwZW9wbGUgYXJlIHVuZGVyLiBCdXQgaGlzIGFuc3dlciBpcyBhbiBBbWVyaWNhIHRoYXQgb3BlcmF0ZXMgb24gdGhlIHByaW5jaXBsZSBvZiBldmVyeSBtYW4gZm9yIGhpbXNlbGYsIGRpdmlkZSBhbmQgY29ucXVlci4gQW5kIG5vdyB0aGF0IFRydW1wIGlzIGJhY2sgaW4gcG93ZXIsIHdlIHNlZSBpdCBjbGVhciBhcyBkYXkuIEhlJ3MgaGFuZGVkIHRoZSBrZXlzIHRvIEVsb24gTXVzayBhbmQgaXMgc2VsbGluZyBvZmYgb3VyIGNvdW50cnkgZm9yIHBhcnRzIHRvIHRoZSB3ZWFsdGhpZXN0IHBlb3BsZSBpbiB0aGUgd29ybGQgZm9yIGEga2lja2JhY2suIEFuZCBpbiBleGNoYW5nZSwgdGhvc2UgYmlsbGlvbmFpcmVzIGFuZCBvbGlnYXJjaHMgd2lsbCBiYWNrIGhpcyBjYW1wYWlnbnMgYW5kIGJhbmtyb2xsIHRob3NlIG9mIGhpcyBhbGxpZXMuIFRoZXkgc2NyYXRjaCBoaXMgYmFjayBhbmQgaGUgc2NyYXRjaGVzIHRoZWlycy4gQW5kIGFsbCBvZiB1cyBhcmUgbGVmdCBiZWhpbmQuCkFuZCB0aGUgY2xldmVyIHRoaW5nIHRoYXQgdGhlc2UgZ3V5cyBzZWxsIGlzIG1ha2luZyB3b3JraW5nIHBlb3BsZSBsaWtlIHlvdSBhbmQgbWUgYmVsaWV2ZSB0aGF0IHdlJ3JlIGp1c3Qgb25lIHN0ZXAgb3V0c2lkZSBmcm9tIHRoYXQgY2x1YiwgdGhhdCB3ZSdyZSBqdXN0IGEgbGl0dGxlIGJpdCBvdXQgZnJvbSBiZWluZyBhYmxlIHRvIGJlIGEgYmlsbGlvbmFpcmUgdG9vLiBBbnkgYmlsbGlvbmFpcmVzIGluIHRoaXMgcm9vbT8gSSBkaWRuJ3QgdGhpbmsgc28uCk5vdyBpdCdzIHRoaXMgaWRlYSB0aGF0IGlmIHdlIGp1c3Qgd29yayBoYXJkLCB3ZSB0b28gY2FuIGhhdmUgbmF0aW9uLXN0YXRlIGxldmVsIG1vbmV5LCBleGNlcHQgdGhlc2Uga2luZHMgb2Ygc3BvaWxzIGFyZW4ndCBlYXJuZWQgcmVhbGx5LiBUaGV5IGFyZW4ndCB3b3JraW5nIGZvciB0aGVzZSBiaWxsaW9ucy4gVGhleSdyZSBzdGVhbGluZyB0aGVtLiBUaGV5J3JlIHN0ZWFsaW5nIHRoZW0uIFRoZXkncmUgc3RlYWxpbmcgdGhlbSBmcm9tIHlvdSBhbmQgeW91IGFuZCBtZS4KSnVzdCBsb29rIGF0IHdoYXQgRWxvbiBNdXNrIGFuZCBEb25hbGQgVHJ1bXAgYXJlIGRvaW5nIHRvIG91ciBoZWFsdGhjYXJlLCBvdXIgdmV0ZXJhbnMnIGJlbmVmaXRzLCBhbmQgU29jaWFsIFNlY3VyaXR5LiBUaGV5IGFyZSBzbGFzaGluZyBwcm9ncmFtcyB0aGF0IHdlIGFuZCB5b3UgaGF2ZSBzcGVudCBhIGxpZmV0aW1lIHBheWluZyBpbnRvLiBBbmQgYnkgdGhlIHdheSwgbm90IHRoZW0sIGJlY2F1c2UgdGhvc2UgYmlsbGlvbmFpcmVzIGhhdmVuJ3QgcGFpZCB0aGVpciBmYWlyIHNoYXJlIG9mIHRheGVzIGluIHllYXJzLgpBbmQgbGV0J3MgdGFsayBhYm91dCBNZWRpY2FpZCBhbmQgTWVkaWNhcmUgZm9yIGEgc2Vjb25kIGJlY2F1c2UgeW91ciByZXByZXNlbnRhdGl2ZSwgRGF2ZSBFdmFucywgeW91IGtub3cgdGhhdCBndXkgdGhhdCBoYXNuJ3QgYmVlbiBzaG93aW5nIHVwIGZvciB0aGUgbGFzdCBjb3VwbGUgbW9udGhzPyBNYXliZSBoZSBoYXNuJ3QgYmVlbiBzaG93aW5nIHVwIGJlY2F1c2UgaGUgdm90ZWQgdG8gY3V0IE1lZGljYWlkLgpJbiBmYWN0LCBldmVyeSBzaW5nbGUgSG91c2UgUmVwdWJsaWNhbiB2b3RlZCB0byBjdXQgTWVkaWNhaWQgYW5kIHRoZXknbGwgdGVsbCB5b3UsICJObywgSSBkaWRuJ3QuIEkgZGlkbid0IHNheSB0aGF0LCIgYnV0IGhlcmUncyB3aGF0IGl0IGlzLiBUaGV5IHZvdGVkIG9uIGEgYnVkZ2V0IHRoYXQgY3V0cyAkODgwIGJpbGxpb24gZnJvbSB0aGUgY29tbWl0dGVlIHRoYXQncyBpbiBjaGFyZ2Ugb2YgTWVkaWNhaWQuIEFuZCBzbyBub3cgdGhleSdyZSB0cnlpbmcgdG8gcGxheSBhIGdhbWUgYW5kIHNheSwgIldlIGRpZG4ndCBkbyB0aGF0LCIgYmVjYXVzZSB0aGV5IGRpZCBieSBwcm94eS4gU28gbGV0J3Mgc2V0IHRoZSByZWNvcmQgc3RyYWlnaHQuCk1hc3MgbWVkaWEgYW5kIEZveCBOZXdzLCBhbmQgdGhlIHJpZ2h0IHdlbGwgaGF2ZSB5b3UgYmVsaWV2ZSB0aGF0IHRoZXNlIEFtZXJpY2FuIHZhbHVlcyBhcmUgc29tZXRoaW5nIG91dCBvZiB0aGUgQ29tbXVuaXN0IE1hbmlmZXN0by4gVGhleSBiZWxpZXZlIHRoYXQgd2UgdGhpbmsgdGhlc2UgdGhpbmdzLCBiZWNhdXNlIHdlIHdlbnQgdG8gc29tZSBmYW5jeSBjb2xsZWdlIGFuZCByZWFkIHRoZW0gaW4gYSBib29rIHNvbWV3aGVyZS4gQnV0IEknbGwgdGVsbCB5b3UsIEkgZG9uJ3QgYmVsaWV2ZSBpbiBoZWFsdGhjYXJlLCBsYWJvciBhbmQgaHVtYW4gZGlnbml0eSwgYmVjYXVzZSBJJ20gYW4gZXh0cmVtaXN0IG9yIGEgTWFyeGlzdC4gSSBiZWxpZXZlIGl0IGJlY2F1c2UgSSB3YXMgYSB3YWl0cmVzcywgYmVjYXVzZSBJJ3ZlIHNjcnViYmVkIHRvaWxldHMgd2l0aCBteSBtb20gdG8gYWZmb3JkIHNjaG9vbCwgYmVjYXVzZSBJJ3ZlIHdvcmtlZCBkb3VibGUgc2hpZnRzIHRvIGtlZXAgdGhlIGxpZ2h0cyBvbiwgYmVjYXVzZSBJIGxvc3QgbXkgZGFkIHRvIGNhbmNlciBhcyBhIGtpZCBhbmQgaGFkIHRvIHNlZSBteSBtb20gb3BlbiBob3NwaXRhbCBiaWxscyBpbiB0aGUgZGF5cyBhZnRlci4gQW5kIEkgZG9uJ3Qgd2FudCB1cyB0byBsaXZlIGxpa2UgdGhpcyBhbnltb3JlLCBHcmVlbGV5LgpUaGlzIGlzbid0IGp1c3QgYWJvdXQgUmVwdWJsaWNhbnMuIFdlIG5lZWQgYSBEZW1vY3JhdGljIFBhcnR5IHRoYXQgZmlnaHRzIGhhcmRlciBmb3IgdXMgdG9vLiBCdXQsIEdyZWVsZXksIHRoYXQgbWVhbnMgb3VyIGNvbW11bml0aWVzIGNob29zaW5nIGFuZCB2b3RpbmcgZm9yIERlbW9jcmF0cyBhbmQgZWxlY3RlZCBvZmZpY2lhbHMgd2hvIGtub3cgaG93IHRvIHN0YW5kIGZvciB0aGUgd29ya2luZyBjbGFzcy4KWW91IGtub3cgd2hpY2ggQ29sb3JhZGFucyBkaWQgdm90ZSB0byBndXQgTWVkaWNhaWQgYW5kIGphY2sgdXAgaGVhbHRoY2FyZSBjb3N0cz8gR2FiZSBFdmFucyBhbmQgTGF1cmVuIEJvZWJlcnQgcmlnaHQgbmV4dCBkb29yLiBTbyBmb2xrcywgeW91IGtub3cgd2hhdCB0aGF0IG1lYW5zLCByaWdodD8gV2UgbmVlZCB0byBjb21lIHRvZ2V0aGVyIGFuZCBzcGVuZCBldmVyeSBkYXkgYmV0d2VlbiBub3cgYW5kIGVsZWN0aW9uIGRheSB3b3JraW5nIHRvIGVkdWNhdGUgb3VyIG5laWdoYm9ycywgYW5kIGdpdmUgRXZhbnMgYW5kIEJvZWJlcnQgdGhlIGJvb3QsIGFuZCByZXBsYWNlIHRoZW0gd2l0aCBhIGJyYXdsaW5nIERlbW9jcmF0IHdobyB3aWxsIHN0YW5kIGZvciBDb2xvcmFkby4KU28gdG8gYWxsIG9mIHRob3NlIHdobyBjYW1lIGhlcmUgdG9kYXksIHVuc3VyZSBvZiB3aGV0aGVyIHRoaXMgaXMgd2hlcmUgeW91IGJlbG9uZywgSSB3YW50IHRvIHRlbGwgeW91IHRoYXQgeW91IGRvLiBZb3UgZG8uIEhvbmVzdGx5LCBubyBtYXR0ZXIgd2hvIHlvdSB2b3RlZCBmb3IgaW4gdGhlIHBhc3QuIE5vIG1hdHRlciBpZiB5b3Uga25vdyBhbGwgdGhlIHJpZ2h0IHdvcmRzIHRvIHNheSwgbm8gbWF0dGVyIHlvdXIgcmFjZSwgcmVsaWdpb24sIGdlbmRlciBpZGVudGl0eSwgb3Igc3RhdHVzLCBubyBtYXR0ZXIgaWYgeW91IGRpc2FncmVlIHdpdGggbWUgb24gYSBjb3VwbGUgb2YgdGhpbmdzLiBJZiB5b3UgYXJlIHdpbGxpbmcgdG8gZmlnaHQgZm9yIHNvbWVvbmUgeW91IGRvbid0IGtub3csIHlvdSBhcmUgd2VsY29tZSBoZXJlLgpJZiB5b3UgYXJlIHdpbGxpbmcgdG8gZmlnaHQgZm9yIHdvcmtpbmcgcGVvcGxlIHJlZ2FyZGxlc3Mgb2Ygd2hvIHRoZXkgYXJlLCBob3cgdGhleSBpZGVudGlmeSwgb3Igd2hlcmUgdGhleSBjb21lIGZyb20sIHlvdSBhcmUgd2VsY29tZSBoZXJlLiBCdXQgSSB3aWxsIHNheSB0aGlzLCB0aG9zZSBsZWFkZXJzIG9uIGVpdGhlciBzaWRlIG9mIHRoZSBhaXNsZSB3aG8gYXJlIHdpbGxpbmcgdG8gcHV0IHRoZWlyIGZlbGxvdyBBbWVyaWNhbnMgZG93biwgc28gdGhhdCB0aGV5IGNhbiBnZXQgYWhlYWQgb3IgZmVlbCBiZXR0ZXIgYWJvdXQgdGhlbXNlbHZlcywgdGhvc2UgZm9sa3MgbWF5IGJlc3QgZmluZCBhIGhvbWUgc29tZXdoZXJlIGVsc2UuIEJlY2F1c2UgaW4gdGhpcyBob3VzZSwgd2Ugc3RhbmQgdG9nZXRoZXIsIHdlIGtub3cgdGhhdCwgdGhhdCBpdCdzIG91ciBvbmx5IGNob2ljZSBiZWNhdXNlIHdlIGtub3cgdGhhdCB3aXRob3V0IGV4Y2VwdGlvbiwgaWYgd2Ugc3RhbmQgdG9nZXRoZXIsIGl0IGlzIHRoZSBvbmx5IHdheSB0aGF0IHdlIGNhbiB3aW4uClNvIEkgaG9wZSB0aGF0IHlvdSBzZWUgdGhpcyBtb3ZlbWVudCBpcyBub3QgYWJvdXQgcGFydGlzYW4gbGFiZWxzIG9yIHB1cml0eSB0ZXN0cywgYnV0IGFib3V0IGNsYXNzIHNvbGlkYXJpdHkuCkl0J3MgYWJvdXQgdGhlIHRob3VzYW5kcyBvZiB5b3Ugd2hvIGNhbWUgb3V0IHRvZGF5IHRvIHN0YW5kIHRvZ2V0aGVyIGFuZCBzYXksICJPdXIgbGl2ZXMgZGVzZXJ2ZSBkaWduaXR5IGFuZCBvdXIgd29yayBkZXNlcnZlcyByZXNwZWN0LiIg\n\n\n---\n\nBegin analysis now for batch `batch_f367789996eb`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis followed a sequential chain-of-thought process, examining each moral foundation independently before integration. Evidence extraction focused on semantic concepts over literal keyword matching, ensuring a nuanced understanding of the speaker's intent. Confidence levels reflect the clarity and directness of the expressed moral concepts.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"alexandria_ocasio_cortez_2025_fighting_oligarchy.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.75,\n          \"confidence\": 0.9\n        },\n        \"harm\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.8,\n          \"confidence\": 0.85\n        },\n        \"fairness\": {\n          \"raw_score\": 0.9,\n          \"salience\": 0.95,\n          \"confidence\": 0.95\n        },\n        \"cheating\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.65,\n          \"confidence\": 0.75\n        },\n        \"authority\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.2,\n          \"confidence\": 0.6\n        },\n        \"subversion\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.15,\n          \"confidence\": 0.5\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.05,\n          \"confidence\": 0.4\n        },\n        \"degradation\": {\n          \"raw_score\": 0.0,\n          \"salience\": 0.0,\n          \"confidence\": 0.3\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"And I understand that this kind of disdain that the wealthiest, wealthiest people in this country have for the working class doesn't just come from them not being raised right. It's shorthand for the right wing's entire political agenda and a certain ugly kind of politics, a politics that involves lying to and screwing over working and middle class Americans...\",\n          \"confidence\": 0.85,\n          \"context_type\": \"nurturing appeals\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"We are witnessing an oligarchy in America. And that is when those with the most economic, political, and technological power destroy the public good to enrich themselves while millions of Americans pay the price. And our political system is ill-prepared for this abuse of power.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"suffering prevention\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"The same billionaires are taking a wrecking ball to our country and they derive their power from dividing working people apart. They specialize in getting us to turn on one another and they get us to turn on one another along lines of left and right, race and gender, creed and culture.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"equal opportunity\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"Donald Trump does see the immense pressure that working people are under. But his answer is an America that operates on the principle of every man for himself, divide and conquer. And now that Trump is back in power, we see it clear as day. He's handed the keys to Elon Musk and is selling off our country for parts to the wealthiest people in the world for a kickback.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"abuse of power\"\n        },\n        {\n          \"dimension\": \"loyalty\",\n          \"quote_text\": \"So to all of those who came here today, unsure of whether this is where you belong, I want to tell you that you do. You do. Honestly, no matter who you voted for in the past. No matter if you know all the right words to say, no matter your race, religion, gender identity, or status, no matter if you disagree with me on a couple of things. If you are willing to fight for someone you don't know, you are welcome here.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"group solidarity\"\n        },\n        {\n          \"dimension\": \"betrayal\",\n          \"quote_text\": \"They betray our values... They betray trust. They are stealing them from you and you and me.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"breaking trust\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"This isn't just about Republicans. We need a Democratic Party that fights harder for us too. But, Green, that means our communities choosing and voting for Democrats and elected officials who know how to stand for the working class.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"leader deference\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"They voted on a budget that cuts $880 billion from the committee that's in charge of Medica... And so now they're trying to play a game and say, 'We didn't do that.' Because they did by proxy. So let's set the record straight.\",\n          \"confidence\": 0.5,\n          \"context_type\": \"challenging authority\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":36783,"response_length":5529,"metadata":{"batch_id":"batch_f367789996eb","mathematical_validation":true,"tokens_input":365,"tokens_output":658},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:00:58.543554+00:00"}
{"log_type":"llm_interaction","interaction_hash":"108d6a5f786ecae8","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: bernie_sanders_2025_fighting_oligarchy.txt\nHash: 9795fe30035d...\nVGhlIEFtZXJpY2FuIHBlb3BsZSBhcmUgb3V0cmFnZWQgYXQgd2hhdCdzIGdvaW5nIG9uLCBhbmQgdGhlIEFtZXJpY2FuIHBlb3BsZSBhcmUgc2F5aW5nIGxvdWQgYW5kIGNsZWFyLCAiV2Ugd2lsbCBub3QgYWNjZXB0IGFuIG9saWdhcmNoaWMgZm9ybSBvZiBzb2NpZXR5LiBXZSB3aWxsIG5vdCBhY2NlcHQgdGhlIHJpY2hlc3QgZ3V5IGluIHRoZSB3b3JsZCBydW5uaW5nIGFsbCBvdmVyIFdhc2hpbmd0b24sIG1ha2luZyBjdXRzIHRvIHRoZSBTb2NpYWwgU2VjdXJpdHkgQWRtaW5pc3RyYXRpb24sIGN1dHMgdG8gdGhlIFZldGVyYW5zIEFkbWluaXN0cmF0aW9uLCBhbG1vc3QgZGVzdHJveWluZyB0aGUgRGVwYXJ0bWVudCBvZiBFZHVjYXRpb24sIGFsbCBzbyB0aGF0IHRoZXkgY291bGQgZ2l2ZSBvdmVyIGEgdHJpbGxpb24gZG9sbGFycyBpbiB0YXggYnJlYWtzIHRvIHRoZSB3ZWFsdGhpZXN0IDElLiIKVG9kYXkgeW91IGhhdmUgbW9yZSBjb25jZW50cmF0aW9uIG9mIG93bmVyc2hpcCBpbiBBbWVyaWNhIHRoYW4gd2UgaGF2ZSBldmVyIGhhZCBpbiB0aGUgaGlzdG9yeSBvZiB0aGlzIGNvdW50cnkgaW4gc2VjdG9yIGFmdGVyIHNlY3Rvciwgd2hldGhlciBpdCBpcyBhZ3JpY3VsdHVyZSwgdHJhbnNwb3J0YXRpb24sIG1lZGlhLCBmaW5hbmNpYWwgc2VydmljZXMsIHdoYXQgeW91IGhhdmUgaXMgYSBzbWFsbCBudW1iZXIgb2YgZXh0cmFvcmRpbmFyaWx5IGxhcmdlIGNvcnBvcmF0aW9ucyB3aG8gY2hhcmdlIHVzIG91dHJhZ2VvdXMgcHJpY2VzIGZvciB0aGUgcHJvZHVjdHMgdGhhdCB3ZSBoYXZlIHRvIGJ1eS4KVG9kYXkgeW91J3ZlIGdvdCB0aHJlZSBXYWxsIFN0cmVldCBmaXJtcywgQmxhY2tSb2NrLCBWYW5ndWFyZCwgYW5kIFN0YXRlIFN0cmVldC4gQ29tYmluZWQsIHRoZXNlIHRocmVlIGludmVzdG1lbnQgZmlybXMgYXJlIHRoZSBtYWpvcml0eSBzdG9ja2hvbGRlcnMgaW4gOTUlIG9mIEFtZXJpY2FuIGNvcnBvcmF0aW9ucy4gVGhlc2UgZ3V5cywgSSB3YW50IHRvIHRlbGwgeW91IHNvbWV0aGluZyBiZWNhdXNlIEkgYnVtcCBpbnRvIHRoZW0gaW4gbXkgbGluZSBvZiB3b3JrLCB0aGV5IGFyZSBub3QgbmljZSBndXlzLiBJIGtub3cgb24gVFYgdGhleSBjb21lIGFjcm9zcy4uLiBBbmQgaW4geW91ciBjb21tdW5pdHksIHRoZXkgbWFrZSBhIGRvbmF0aW9uIHRvIHRoZSBob3NwaXRhbCBvciB0aGUgQm95cyAmIEdpcmxzIENsdWJzIG9yIHRoZSBmb29kIHNoZWxmLiBUaGV5J3JlIGp1c3QgdmVyeSBuaWNlLiBCdXQgdGhleSdyZSBub3QuCkluIEFtZXJpY2EgdG9kYXksIGFzIEkgdGhpbmsgYWxsIG9mIHlvdSBrbm93LCBzYWRseSBhbmQgdHJhZ2ljYWxseSwgYW5kIHdlJ3ZlIGdvdCB0byBkZWFsIHdpdGggaXQsIHdlIGhhdmUgbWFqb3IgZXBpZGVtaWNzIGRlYWxpbmcgd2l0aCBhZGRpY3Rpb24uIEkgdGhpbmsgd2UgbG9zdCBhIGh1bmRyZWQgdGhvdXNhbmQgQW1lcmljYW5zIGxhc3QgeWVhciBiZWNhdXNlIG9mIGRydWcgb3ZlcmRvc2UuIEl0J3MgYSBzZXJpb3VzIHByb2JsZW0gaW4gbXkgc3RhdGUuIFdlIGhhdmUgcGVvcGxlIGFkZGljdGVkIHRvIGFsY29ob2wsIHNlcmlvdXMgcHJvYmxlbXMgd2l0aCBhbGNvaG9saXNtLiBXZSBoYXZlIHBlb3BsZSB3aG8gd2VyZSBhZGRpY3RlZCB0byB0b2JhY2NvLiBNeSBmYXRoZXIgc21va2VkIHR3byBwYWNrcyBvZiBjaWdhcmV0dGVzIGEgZGF5IGFuZCBoZSBkaWVkIGJlZm9yZSBoZSB3YXMgNjAuIFBlb3BsZSBhZGRpY3RlZCB0byBmb29kLiBCdXQgSSB3aWxsIHRlbGwgeW91IHRoaXMsIGluIHRoZSBtaWRzdCBvZiBhbGwgb2YgdGhlc2UgYWRkaWN0aW9ucywgdGhlIHdvcnN0IGFuZCBtb3N0IGRhbmdlcm91cyBhZGRpY3Rpb24gd2UgaGF2ZSBpcyB0aGUgZ3JlZWQgb2YgdGhlIG9saWdhcmNocy4KTm93IGV2ZXJ5Ym9keSB3YW50cyB0byBkbyB3ZWxsIGluIGxpZmUuIEV2ZXJ5Ym9keSB3YW50cyB0byBtYWtlIG1vbmV5LiBCdXQgeW91IHdvdWxkIHRoaW5rIHRoYXQgaWYgeW91IGhhZCBhIGZldyBiaWxsaW9uIGRvbGxhcnMgb3IgJDEwIG9yICQyMCBiaWxsaW9uLCB5b3Ugd291bGQgbm90IGZlZWwgb2JsaWdlZCB0byBzdGVwIG9uIHRoZSBiYWNrcyBvZiBwb29yIHBlb3BsZSB0byBiZWNvbWUgZXZlbiByaWNoZXIuIEJ1dCB0aGF0IGlzIGV4YWN0bHkgd2hhdCB0aGV5IGFyZSBkb2luZyByaWdodCBub3cuIFRoZXkgYXJlIHByZXBhcmVkIHRvIGRlc3Ryb3kgU29jaWFsIFNlY3VyaXR5LCBNZWRpY2FpZCwgTWVkaWNhcmUsIHRoZSBWZXRlcmFucyBBZG1pbmlzdHJhdGlvbiBpbiBvcmRlciB0byBtYWtlIHRoZW1zZWx2ZXMgZXZlbiByaWNoZXIuClRoZXNlIGd1eXMgaGF2ZSBubyBzZW5zZSBvZiB3aGF0IGdvZXMgb24gaW4gdGhlIHJlYWwgd29ybGQuIFRoZXkgbGl2ZSBpbiBhbm90aGVyIHBsYW5ldC4gVGhleSBvd24gbWFuc2lvbnMgYWxsIG92ZXIgdGhlIHdvcmxkLiBUaGV5IGdvIG9uIHZhY2F0aW9ucyB0byB0aGVpciBvd24gcHJpdmF0ZSBpc2xhbmRzLiBXaGVuIHRoZXkgd2FudCB0byBnbyBzb21lcGxhY2UsIHRoZXkgZG9uJ3QgZ28gaW50byB0aGVpciBjYXIuIFRoZXkgZ28gaW50byB0aGUgcGxhbmVzIG9yIHRoZSBoZWxpY29wdGVycyB0aGF0IHRoZXkgb3duLiBTZW5kIHRoZWlyIGtpZHMgdG8gdGhlIGJlc3QgcHJpdmF0ZSBzY2hvb2xzIGFuZCBjb2xsZWdlcy4gVGhhdCBpcyB0aGVpciB3b3JsZC4KQWJyYWhhbSBMaW5jb2xuIHRhbGtlZCBhYm91dCBhIGdvdmVybm1lbnQgb2YgdGhlIHBlb3BsZSwgYnkgdGhlIHBlb3BsZSwgZm9yIHRoZSBwZW9wbGUuIFdlbGwsIFRydW1wIGhhcyBhIGdvdmVybm1lbnQgb2YgdGhlIGJpbGxpb25haXJlcywgYnkgdGhlIGJpbGxpb25haXJlcywgYW5kIGZvciB0aGUgYmlsbGlvbmFpcmVzLgpBbmQgd2hhdCB0aGVzZSBndXlzIGFyZSBidXN5IGRvaW5nIHJpZ2h0IG5vdyBpcyBnb2luZyBhZnRlciBNZWRpY2FpZCwgZ29pbmcgYWZ0ZXIgU29jaWFsIFNlY3VyaXR5LCBnb2luZyBhZnRlciBudXRyaXRpb24uIFRoZSByaWNoIHdhbnQgdG8gZ2V0IHJpY2hlciBhbmQgdGhleSBkb24ndCBjYXJlIHdobyB0aGV5IHN0ZXAgb24uCllvdSBrbm93IHdoeSB0aGUgQW1lcmljYW4gcGVvcGxlIGFyZSBhbmdyeSBhbmQgdGhleSBhcmUgYW5ncnkgYWxsIG92ZXIgdGhpcyBjb3VudHJ5PyBUaGV5IGFyZSBhbmdyeSBiZWNhdXNlLCBiZWxpZXZlIGl0IG9yIG5vdCwgZGVzcGl0ZSBhIGh1Z2UgaW5jcmVhc2UgaW4gd29ya2VyIHByb2R1Y3Rpdml0eSBvdmVyIHRoZSBsYXN0IDUyIHllYXJzLCBpZiB5b3UgY291bGQgYmVsaWV2ZSBpdCwgcmVhbCBpbmZsYXRpb24gYWNjb3VudGVkIGZvciB3YWdlcyB0b2RheSBhcmUgbG93ZXIgdGhhbiB0aGV5IHdlcmUgNTIgeWVhcnMgYWdvLiBNZWFud2hpbGUsIHRoZXJlIGhhcyBiZWVuIGEgJDc1IHRyaWxsaW9uIHRyYW5zZmVyIG9mIHdlYWx0aCBmcm9tIHRoZSBib3R0b20gOTAlIHRvIHRoZSB0b3AgMSUuIFRoYXQgaXMgd2hhdCBhIHJpZ2dlZCBlY29ub215IGlzIGFib3V0LCBhbmQgdGhhdCBpcyB3aGF0IHdlIGFyZSBnb2luZyB0byBjaGFuZ2UuCllvdSBnb3QgYSBQcmVzaWRlbnQgVHJ1bXAgZ2V0dGluZyBpbmF1Z3VyYXRlZC4gQW5kIEkgbXVzdCB0ZWxsIHlvdSBvbmUgb2YgdGhlIG1vcmUgYml6YXJyZSBleHBlcmllbmNlcyBvZiBteSBsaWZlIHdhcyBJIHdhcyBraW5kIG9mIHB1c2hlZCBpbnRvIHRoZSBmcm9udCByb3cgb2YgdGhhdC4gQW5kIHRoZXJlIEkgYW0sIHRoZXJlJ3MgVHJ1bXAsIGFuZCByaWdodCBiZWhpbmQgaGltLCB5b3UgZ290IE11c2ssIEJlem9zLCBhbmQgWnVja2VyYmVyZywgdGhyZWUgd2VhbHRoaWVzdCBndXlzIGluIHRoZSBjb3VudHJ5LiBBbmQgdGhlbiBiZWhpbmQgdGhlbSwgeW91IGdvdCAxMyBvdGhlciBiaWxsaW9uYWlyZXMgd2hvIFRydW1wIG5vbWluYXRlZCB0byBoZWFkIHVwIHZhcmlvdXMgZ292ZXJubWVudCBhZ2VuY2llcy4KSSBkb24ndCBjYXJlIGlmIHlvdSBhcmUgYSBSZXB1YmxpY2FuLCBEZW1vY3JhdCwgb3IgaW5kZXBlbmRlbnQsIEkgZG9uJ3QgdGhpbmsgdGhlcmUncyBhbnlib2R5IHdobyB0aGlua3MgaXQgdmFndWVseSBtYWtlcyBzZW5zZSB0aGF0IHRoZSByaWNoZXN0IGd1eSBpbiB0aGUgd29ybGQgY291bGQgc3BlbmQgJDI3MCBtaWxsaW9uIHRvIGdldCBUcnVtcCBlbGVjdGVkIGFuZCB0aGVuIGJlY29tZSB0aGUgbW9zdCBwb3dlcmZ1bCBwZXJzb24gaW4gdGhlIGdvdmVybm1lbnQuIFRoYXQncyBub3QganVzdCBSZXB1YmxpY2Fucy4gTGV0J3MgYmUgY2xlYXIuIEJpbGxpb25haXJlcyBhcmUgZnVuZGluZyB0aGUgRGVtb2NyYXRpYyBQYXJ0eSBhbmQgcHJldmVudGluZyB0aGF0IHBhcnR5IGZyb20gc3RhbmRpbmcgdXAgZm9yIHdvcmtpbmcgZmFtaWxpZXMuCkkgZG9uJ3QgaGF2ZSBhIFBoRCBpbiBtYXRoZW1hdGljcywgYnV0IEkgZG8ga25vdyB0aGlzLCB0aGF0IDk5JSBpcyBhIGhlbGwgb2YgYSBsb3QgbGFyZ2VyIG51bWJlciB0aGFuIDElLiBTbyBpZiB3ZSBzdGFuZCB0b2dldGhlciwgYXJlIHN0cm9uZywgYXJlIGRpc2NpcGxpbmVkLCBhcmUgc21hcnQsIEkgaGF2ZSBldmVyeSByZWFzb24gdG8gYmVsaWV2ZSBkZWVwbHkgaW4gbXkgaGVhcnQgdGhhdCBub3Qgb25seSB3aWxsIHdlIGRlZmVhdCBUcnVtcGlzbSwgYnV0IHdlIGNhbiBjcmVhdGUgdGhlIGtpbmQgb2YgbmF0aW9uIHRoYXQgd2UgZGVzZXJ2ZS4g\n\n\n---\n\nBegin analysis now for batch `batch_62985f94fd1c`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis conducted using a sequential chain-of-thought approach, focusing on defined moral dimensions. Evidence extraction prioritizes direct quotes reflecting the core concepts of each dimension.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"bernie_sanders_2025_fighting_oligarchy.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"harm\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        },\n        \"fairness\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"cheating\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.15,\n          \"confidence\": 0.7\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.25,\n          \"confidence\": 0.75\n        },\n        \"authority\": {\n          \"raw_score\": 0.1,\n          \"salience\": 0.1,\n          \"confidence\": 0.65\n        },\n        \"subversion\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.65,\n          \"confidence\": 0.8\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.15,\n          \"salience\": 0.1,\n          \"confidence\": 0.7\n        },\n        \"degradation\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.15,\n          \"confidence\": 0.7\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"We will not accept an oligarchic form of society. We will not accept the richest guy in the world running all over Washington, making cuts to the Social Security Administration, cuts to the Vete­rans Administration, almost destroying the Department of Education, all so that they could give over a trillion dollars in tax breaks to the wealthiest.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"support_vulnerable\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"But I will tell you this, in the midst of all of these addiction, the worst and most dangerous addiction we have is the greed of the oligarchs.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"prevent_harm\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"In America today, as I think all of you know, sadly and tragically, and we've got to deal with it, we have major epidemics dealing with addiction. I think we lost a hundred thousand Americans last year because of drug overdoses. It's a serious problem in my state.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"equality_concern\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"These guys, I want to tell you something because I bump into them in my line of work, they are not nice guys.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"prevent_exploitation\"\n        },\n        {\n          \"dimension\": \"loyalty\",\n          \"quote_text\": \"So if we stand together, are strong, are disciplined, are smart, I have every reason to believe deeply in my heart that not only will we defeat Trumpism, but we can create the kind of nation that we deserve.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"group_solidarity\"\n        },\n        {\n          \"dimension\": \"betrayal\",\n          \"quote_text\": \"The rich want to get richer and they don't care who they step on.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"group_abandonment\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"Abraham Lincoln talked about a government of the people, by the people, for the people. Well, Trump has a government of the billionaires, by the billionaires, and for the billionaires.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"respect_authority\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"What these guys are busy doing right now is going after Medica­id, going after Social Security, going after nutrition. The rich want to get richer and they don't care who they step on.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"challenge_authority\"\n        },\n        {\n          \"dimension\": \"sanctity\",\n          \"quote_text\": \"You got a President Trump getting inaugurated. And I must tell you one of the more bizarre experiences of my life was I was kind of pushed into the front row of that. And there I am, there's Trump, and right behind him, you got Musk, Bezos, and Zuckerberg, three wealthiest guys in the country.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"sacred_values\"\n        },\n        {\n          \"dimension\": \"degradation\",\n          \"quote_text\": \"That is what a rigged economy is about, and that is what we are going to change.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"moral_decay\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":34617,"response_length":5292,"metadata":{"batch_id":"batch_62985f94fd1c","mathematical_validation":true,"tokens_input":365,"tokens_output":582},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:02.733337+00:00"}
{"log_type":"llm_interaction","interaction_hash":"b8869f0b54b814ec","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: cory_booker_2018_first_step_act.txt\nHash: c17e2dffe9d2...\\n\n\n---\n\nBegin analysis now for batch `batch_14d08b07749c`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis conducted using the Moral Foundations Theory Framework v7.3. The process involved a sequential chain-of-thought analysis, evaluating each moral foundation independently before integration, adhering strictly to the framework's dimensional definitions and evidence extraction guidelines. Confidence is high due to clear textual indicators and the structured nature of the analysis prompt.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"cory_booker_2018_first_step_act.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.85,\n          \"salience\": 0.90,\n          \"confidence\": 0.95\n        },\n        \"harm\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.85,\n          \"confidence\": 0.90\n        },\n        \"fairness\": {\n          \"raw_score\": 0.90,\n          \"salience\": 0.95,\n          \"confidence\": 0.98\n        },\n        \"cheating\": {\n          \"raw_score\": 0.60,\n          \"salience\": 0.50,\n          \"confidence\": 0.80\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.40,\n          \"salience\": 0.30,\n          \"confidence\": 0.70\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.15,\n          \"salience\": 0.10,\n          \"confidence\": 0.60\n        },\n        \"authority\": {\n          \"raw_score\": 0.30,\n          \"salience\": 0.20,\n          \"confidence\": 0.65\n        },\n        \"subversion\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.15,\n          \"confidence\": 0.60\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.10,\n          \"salience\": 0.05,\n          \"confidence\": 0.50\n        },\n        \"degradation\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.05,\n          \"confidence\": 0.50\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"Our criminal justice system, as it stands right now, is a gaping gash self-inflicted wound. This bill is a step - a step towards healing.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"healing_metaphor\"\n        },\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"This is a system that hurts people, and it hurts people that are already struggling, often already hurt.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"harm_description\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"Since 1980 alone, our federal prison population has exploded by eight hundred percent – an 800 percent increase in our prison population.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"systemic_harm_data\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"But what do we do in this country with a nonviolent drug offense? What we do to people in this country with a nonviolent drug offense is like getting a life sentence for the rest of your life.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"disproportionate_punishment\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"Our criminal justice system violates those values. We profess – we actually swear an oath to the flag – that we are a nation of liberty and justice for all. But our criminal justice system violates those values.\",\n          \"confidence\": 0.98,\n          \"context_type\": \"violation_of_principles\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"We have a system that – over a century, we in a nation have overcome slavery, decades of Jim Crow – but as one author, Michelle Alexander, calls our criminal justice system, she calls it the new Jim Crow because of its disproportionate impact on people of color.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"historical_comparison\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"There's no difference between blacks and whites for using drugs or selling drugs in the United States of America. No difference. But if you are black, you are almost four times more likely to get arrested for selling drugs and almost three times more likely to be arrested for possession of drugs.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"disparate_application_of_law\"\n        },\n        {\n          \"dimension\": \"loyalty\",\n          \"quote_text\": \"We are Americans. We have ideals of restoration, of rehabilitation. Ultimately, in the United States of America, we all believe that this is a nation where redemption is possible.\",\n          \"confidence\": 0.70,\n          \"context_type\": \"national_identity_ideal\"\n        },\n        {\n          \"dimension\": \"betrayal\",\n          \"quote_text\": \"This is a system that still subjects young people to what other countries and human rights activists in this nation call torture – juvenile solitary confinement.\",\n          \"confidence\": 0.60,\n          \"context_type\": \"torture_analogy\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"We need to remember that all rivers can change courses.\",\n          \"confidence\": 0.65,\n          \"context_type\": \"metaphor_for_change\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"It was Senator Al Franken.\",\n          \"confidence\": 0.60,\n          \"context_type\": \"attribution_of_past_actions\"\n        },\n        {\n          \"dimension\": \"sanctity\",\n          \"quote_text\": \"As Dr. King said, justice is indivisible, and he was right.\",\n          \"confidence\": 0.50,\n          \"context_type\": \"quotation_on_justice\"\n        },\n        {\n          \"dimension\": \"degradation\",\n          \"quote_text\": \"This system as a whole is a cancer on the soul of our country, and it's hurting every single American.\",\n          \"confidence\": 0.50,\n          \"context_type\": \"cancer_metaphor\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":55610,"response_length":6090,"metadata":{"batch_id":"batch_14d08b07749c","mathematical_validation":true,"tokens_input":365,"tokens_output":633},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:07.550237+00:00"}
{"log_type":"llm_interaction","interaction_hash":"b157ed9f77f0cd4c","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: jd_vance_2022_natcon_conference.txt\nHash: 9528fee13b53...\\n\n\n---\n\nBegin analysis now for batch `batch_d065e0a38fe6`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis followed the sequential chain-of-thought process, assessing each moral foundation independently before integration. Emphasis was placed on identifying semantic concepts rather than literal keyword matching, adhering to the framework's guidance.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"jd_vance_2022_natcon_conference.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.25,\n          \"confidence\": 0.70\n        },\n        \"harm\": {\n          \"raw_score\": 0.10,\n          \"salience\": 0.15,\n          \"confidence\": 0.65\n        },\n        \"fairness\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.80,\n          \"confidence\": 0.90\n        },\n        \"cheating\": {\n          \"raw_score\": 0.70,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.60,\n          \"salience\": 0.65,\n          \"confidence\": 0.80\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.55,\n          \"salience\": 0.60,\n          \"confidence\": 0.75\n        },\n        \"authority\": {\n          \"raw_score\": 0.40,\n          \"salience\": 0.45,\n          \"confidence\": 0.70\n        },\n        \"subversion\": {\n          \"raw_score\": 0.30,\n          \"salience\": 0.35,\n          \"confidence\": 0.65\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.50,\n          \"salience\": 0.55,\n          \"confidence\": 0.75\n        },\n        \"degradation\": {\n          \"raw_score\": 0.45,\n          \"salience\": 0.50,\n          \"confidence\": 0.70\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"The real threat to American democracy is that American voters keep on voting for less immigration and our politicians keep on rewarding us with more. That is the threat to American democracy.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"fairness\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"But my Tory friends, I have to say, um, you guys have got to get, you got to get a handle on this.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"fairness\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"We should also not let the Chinese make all of our stuff. And yet, I've, I've seen the Wall Street Journal editorial page for the last couple of years say we can indefinitely send munitions and weapons of war to Ukraine after for the past two generations abdicating that we ship our industrial base overseas.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"cheating\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"It's sort of the perfect encapsulation of the dumbest way to govern our country. Let's send our entire machinery for making war to countries that hate us and then let's spend what little stockpiles that we have on a war that has no obvious end in sight.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"cheating\"\n        },\n        {\n          \"dimension\": \"loyalty\",\n          \"quote_text\": \"That's why it has stood the test of time. But America is not just an idea. Though we were founded on great ideas, America is a nation. It is a group of people with a common history and a common future.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"loyalty\"\n        },\n        {\n          \"dimension\": \"betrayal\",\n          \"quote_text\": \"The places in our own communities, in our own, uh, states that have the highest immigration rates are the places with the highest home prices.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"betrayal\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"The leader of the Republican party is a guy who actually plans to put American citizens first, and that's Donald Trump.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"authority\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"And you know, one of the big dangers in the, in the world, of course, is nuclear proliferation, though of course the Biden administration doesn't care about it.\",\n          \"confidence\": 0.70,\n          \"context_type\": \"subversion\"\n        },\n        {\n          \"dimension\": \"sanctity\",\n          \"quote_text\": \"They are very hard working people and they are very good people. And they are people who love this country not because it's a good idea, but because in their bones they know that this is their home and it will be their children's home and they would die fighting to protect it.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"sanctity\"\n        },\n        {\n          \"dimension\": \"degradation\",\n          \"quote_text\": \"Our elites don't seem to care about it. And why don't our elites seem to care about it? Well, number one, they really benefit from the cheap labor.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"degradation\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":50934,"response_length":5322,"metadata":{"batch_id":"batch_d065e0a38fe6","mathematical_validation":true,"tokens_input":365,"tokens_output":597},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:12.572969+00:00"}
{"log_type":"llm_interaction","interaction_hash":"312ff81c81f9c82b","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_lewis_1963_march_on_washington.txt\nHash: 5d90554fc13f...\nV2UgY29tZSBoZXJlIHRvZGF5IHdpdGggYSBncmVhdCBzZW5zZSBvZiBtaXNnaXZpbmcuIEl0IGlzIHRydWUgdGhhdCB3ZSBzdXBwb3J0IHRoZSBhZG1pbmlzdHJhdGlvbidzIGNpdmlsIHJpZ2h0cyBiaWxsLiBXZSBzdXBwb3J0IGl0IHdpdGggZ3JlYXQgcmVzZXJ2YXRpb25zLCBob3dldmVyLiBVbmxlc3MgVGl0bGUgVGhyZWUgaXMgcHV0IGluIHRoaXMgYmlsbCwgdGhlcmUncyBub3RoaW5nIHRvIHByb3RlY3QgdGhlIHlvdW5nIGNoaWxkcmVuIGFuZCBvbGQgd29tZW4gd2hvIG11c3QgZmFjZSBwb2xpY2UgZG9ncyBhbmQgZmlyZSBob3NlcyBpbiB0aGUgU291dGggd2hpbGUgdGhleSBlbmdhZ2UgaW4gcGVhY2VmdWwgZGVtb25zdHJhdGlvbnMuIEluIGl0cyBwcmVzZW50IGZvcm0sIHRoaXMgYmlsbCB3aWxsIG5vdCBwcm90ZWN0IHRoZSBjaXRpemVucyBvZiBEYW52aWxsZSwgVmlyZ2luaWEsIHdobyBtdXN0IGxpdmUgaW4gY29uc3RhbnQgZmVhciBvZiBhIHBvbGljZSBzdGF0ZS4gSXQgd2lsbCBub3QgcHJvdGVjdCB0aGUgaHVuZHJlZHMgYW5kIHRob3VzYW5kcyBvZiBwZW9wbGUgd2hvIGhhdmUgYmVlbiBhcnJlc3RlZCB1cG9uIHRydW1wZWQtdXAgY2hhcmdlcy4KV2hhdCBhYm91dCB0aGUgdGhyZWUgeW91bmcgbWVuIC0gU05DQyBmaWVsZCBzZWNyZXRhcmllcyBpbiBBbWVyaWN1cywgR2VvcmdpYSAtIHdobyBmYWNlIHRoZSBkZWF0aCBwZW5hbHR5IGZvciBlbmdhZ2luZyBpbiBwZWFjZWZ1bCBwcm90ZXN0PyBBcyBpdCBzdGFuZHMgbm93LCB0aGUgdm90aW5nIHNlY3Rpb24gb2YgdGhpcyBiaWxsIHdpbGwgbm90IGhlbHAgdGhlIHRob3VzYW5kcyBvZiBibGFjayBwZW9wbGUgd2hvIHdhbnQgdG8gdm90ZS4gSXQgd2lsbCBub3QgaGVscCB0aGUgY2l0aXplbnMgb2YgTWlzc2lzc2lwcGksIG9mIEFsYWJhbWEsIGFuZCBHZW9yZ2lhLCB3aG8gYXJlIHF1YWxpZmllZCB0byB2b3RlIGJ1dCBsYWNrIGEgc2l4dGgtZ3JhZGUgZWR1Y2F0aW9uLgpXZSBtdXN0IGhhdmUgbGVnaXNsYXRpb24gdGhhdCB3aWxsIHByb3RlY3QgdGhlIE1pc3Npc3NpcHBpIHNoYXJlY3JvcHBlciB3aG8gaXMgcHV0IG9mZiBvZiBoaXMgZmFybSBiZWNhdXNlIGhlIGRhcmVzIHRvIHJlZ2lzdGVyIHRvIHZvdGUuIFdlIG5lZWQgYSBiaWxsIHRoYXQgd2lsbCBwcm92aWRlIGZvciB0aGUgaG9tZWxlc3MgYW5kIHN0YXJ2aW5nIHBlb3BsZSBvZiB0aGlzIG5hdGlvbi4gV2UgbmVlZCBhIGJpbGwgdG8gZW5zdXJlIHRoZSBlcXVhbGl0eSBvZiBhIG1haWQgd2hvIGVhcm5zIGZpdmUgZG9sbGFycyBhIHdlZWsgaW4gdGhlIGhvbWUgb2YgYSBmYW1pbHkgd2hvc2UgdG90YWwgaW5jb21lIGlzIG9uZSBodW5kcmVkIHRob3VzYW5kIGRvbGxhcnMgYSB5ZWFyLiBXZSBtdXN0IGhhdmUgYSBnb29kIEZFUEMgYmlsbC4KTXkgZnJpZW5kcywgbGV0IHVzIG5vdCBmb3JnZXQgdGhhdCB3ZSBhcmUgaW52b2x2ZWQgaW4gYSBzZXJpb3VzIHNvY2lhbCByZXZvbHV0aW9uLiBCeSBhbmQgbGFyZ2UsIEFtZXJpY2FuIHBvbGl0aWNzIGlzIGRvbWluYXRlZCBieSBwb2xpdGljaWFucyB3aG8gYnVpbGQgdGhlaXIgY2FyZWVycyBvbiBpbW1vcmFsIGNvbXByb21pc2VzIGFuZCBhbGx5IHRoZW1zZWx2ZXMgd2l0aCBvcGVuIGZvcm1zIG9mIHBvbGl0aWNhbCwgZWNvbm9taWMsIGFuZCBzb2NpYWwgZXhwbG9pdGF0aW9uLiBUaGVyZSBhcmUgZXhjZXB0aW9ucywgb2YgY291cnNlIC0gd2Ugc2FsdXRlIHRob3NlIC0gYnV0IHdoYXQgcG9saXRpY2FsIGxlYWRlciBjYW4gc3RhbmQgdXAgYW5kIHNheSwgIk15IHBhcnR5IGlzIHRoZSBwYXJ0eSBvZiBwcmluY2lwbGVzIj8gRm9yIHRoZSBwYXJ0eSBvZiBLZW5uZWR5IGlzIGFsc28gdGhlIHBhcnR5IG9mIEVhc3RsYW5kLiBUaGUgcGFydHkgb2YgSmF2aXRzIGlzIGFsc28gdGhlIHBhcnR5IG9mIEdvbGR3YXRlci4KV2hlcmUgaXMgb3VyIHBhcnR5PyBXaGVyZSBpcyB0aGUgcG9saXRpY2FsIHBhcnR5IHRoYXQgd2lsbCBtYWtlIGl0IHVubmVjZXNzYXJ5IHRvIG1hcmNoIG9uIFdhc2hpbmd0b24/IFdoZXJlIGlzIHRoZSBwb2xpdGljYWwgcGFydHkgdGhhdCB3aWxsIG1ha2UgaXQgdW5uZWNlc3NhcnkgdG8gbWFyY2ggaW4gdGhlIHN0cmVldHMgb2YgQmlybWluZ2hhbT8gV2hlcmUgaXMgdGhlIHBvbGl0aWNhbCBwYXJ0eSB0aGF0IHdpbGwgcHJvdGVjdCB0aGUgY2l0aXplbnMgb2YgQWxiYW55LCBHZW9yZ2lhPyBEbyB5b3Uga25vdyB0aGF0IGluIEFsYmFueSwgR2VvcmdpYSwgbmluZSBvZiBvdXIgbGVhZGVycyBoYXZlIGJlZW4gaW5kaWN0ZWQsIG5vdCBieSBEaXhpZWNyYXRzLCBidXQgYnkgdGhlIGZlZGVyYWwgZ292ZXJubWVudCBmb3IgcGVhY2VmdWwgcHJvdGVzdD8KQnV0IHdoYXQgZGlkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgZG8gd2hlbiBBbGJhbnkgcG9saWNlIGRlcHV0aWVzIGJlYXQgQXR0b3JuZXkgQy5CLiBLaW5nIGFuZCBsZWZ0IGhpbSBoYWxmLWRlYWQ/IFdoYXQgZGlkIHRoZSBmZWRlcmFsIGdvdmVybm1lbnQgZG8gd2hlbiBsb2NhbCBwb2xpY2Ugb2ZmaWNpYWxzIGtpY2tlZCBhbmQgYXNzYXVsdGVkIHRoZSBwcmVnbmFudCB3aWZlIG9mIFNsYXRlciBLaW5nLCBhbmQgc2hlIGxvc3QgaGVyIGJhYnk/IFRvIHRob3NlIHdobyBoYXZlIHNhaWQsICJCZSBwYXRpZW50IGFuZCB3YWl0LCIgd2UgbXVzdCBzYXkgdGhhdCB3ZSBjYW5ub3QgYmUgcGF0aWVudC4gV2UgZG8gbm90IHdhbnQgb3VyIGZyZWVkb20gZ3JhZHVhbGx5LCBidXQgd2Ugd2FudCB0byBiZSBmcmVlIG5vdyEKW0FwcGxhdXNlXSBbTXVzaWNdIFtBcHBsYXVzZV0gCldlIGFyZSB0aXJlZCEgV2UgYXJlIHRpcmVkIG9mIGJlaW5nIGJlYXRlbiBieSBwb2xpY2VtZW4uIFdlIGFyZSB0aXJlZCBvZiBzZWVpbmcgb3VyIHBlb3BsZSBsb2NrZWQgdXAgaW4gamFpbHMgb3ZlciBhbmQgb3ZlciBhZ2Fpbi4gQW5kIHRoZW4geW91IGhvbGxlciwgIkJlIHBhdGllbnQuIiBIb3cgbG9uZyBjYW4gd2UgYmUgcGF0aWVudD8gV2Ugd2FudCBvdXIgZnJlZWRvbSBhbmQgd2Ugd2FudCBpdCBub3chCltBcHBsYXVzZV0gCldlIGRvIG5vdCB3YW50IHRvIGdvIHRvIGphaWwsIGJ1dCB3ZSB3aWxsIGdvIHRvIGphaWwgaWYgdGhpcyBpcyB0aGUgcHJpY2Ugd2UgbXVzdCBwYXkgZm9yIGxvdmUsIGJyb3RoZXJob29kLCBhbmQgdHJ1ZSBwZWFjZS4gSSBhcHBlYWwgdG8gYWxsIG9mIHlvdSB0byBnZXQgaW4gdGhpcyBncmVhdCByZXZvbHV0aW9uIHRoYXQgaXMgc3dlZXBpbmcgdGhpcyBuYXRpb24uIEdldCBpbiBhbmQgc3RheSBpbiB0aGUgc3RyZWV0cyBvZiBldmVyeSBjaXR5LCBldmVyeSB2aWxsYWdlIGFuZCBoYW1sZXQgb2YgdGhpcyBuYXRpb24gdW50aWwgdHJ1ZSBmcmVlZG9tIGNvbWVzLCB1bnRpbCB0aGUgcmV2b2x1dGlvbiBvZiAxNzc2IGlzIGNvbXBsZXRlLgpXZSBtdXN0IGdldCBpbiB0aGlzIHJldm9sdXRpb24gYW5kIGNvbXBsZXRlIHRoZSByZXZvbHV0aW9uLiBGb3IgaW4gdGhlIERlbHRhIG9mIE1pc3Npc3NpcHBpLCBpbiBzb3V0aHdlc3QgR2VvcmdpYSwgaW4gdGhlIEJsYWNrIEJlbHQgb2YgQWxhYmFtYSwgaW4gSGFybGVtLCBpbiBDaGljYWdvLCBEZXRyb2l0LCBQaGlsYWRlbHBoaWEsIGFuZCBhbGwgb3ZlciB0aGlzIG5hdGlvbiwgdGhlIGJsYWNrIG1hc3NlcyBhcmUgb24gdGhlIG1hcmNoIGZvciBqb2JzIGFuZCBmcmVlZG9tLgpUaGV5J3JlIHRhbGtpbmcgYWJvdXQgc2xvdyBkb3duIGFuZCBzdG9wLiBXZSB3aWxsIG5vdCBzdG9wISBBbGwgb2YgdGhlIGZvcmNlcyBvZiBFYXN0bGFuZCwgQmFybmV0dCwgV2FsbGFjZSwgYW5kIFRodXJtb25kIHdpbGwgbm90IHN0b3AgdGhpcyByZXZvbHV0aW9uIQpbQXBwbGF1c2VdIApJZiB3ZSBkbyBub3QgZ2V0IG1lYW5pbmdmdWwgbGVnaXNsYXRpb24gb3V0IG9mIHRoaXMgQ29uZ3Jlc3MsIHRoZSB0aW1lIHdpbGwgY29tZSB3aGVuIHdlIHdpbGwgbm90IGNvbmZpbmUgb3VyIG1hcmNoaW5nIHRvIFdhc2hpbmd0b24uIFdlIHdpbGwgbWFyY2ggdGhyb3VnaCB0aGUgU291dGgsIHRocm91Z2ggdGhlIHN0cmVldHMgb2YgSmFja3NvbiwgdGhyb3VnaCB0aGUgc3RyZWV0cyBvZiBEYW52aWxsZSwgdGhyb3VnaCB0aGUgc3RyZWV0cyBvZiBDYW1icmlkZ2UsIHRocm91Z2ggdGhlIHN0cmVldHMgb2YgQmlybWluZ2hhbS4gQnV0IHdlIHdpbGwgbWFyY2ggd2l0aCB0aGUgc3Bpcml0IG9mIGxvdmUgYW5kIHdpdGggdGhlIHNwaXJpdCBvZiBkaWduaXR5IHRoYXQgd2UgaGF2ZSBzaG93biBoZXJlIHRvZGF5LgpbTXVzaWNdIFtBcHBsYXVzZV0gCkJ5IHRoZSBmb3JjZXMgb2Ygb3VyIGRlbWFuZHMsIG91ciBkZXRlcm1pbmF0aW9uLCBhbmQgb3VyIG51bWJlcnMsIHdlIHNoYWxsIHNwbGludGVyIHRoZSBzZWdyZWdhdGVkIFNvdXRoIGludG8gYSB0aG91c2FuZCBwaWVjZXMgYW5kIHB1dCB0aGVtIHRvZ2V0aGVyIGluIHRoZSBpbWFnZSBvZiBHb2QgYW5kIGRlbW9jcmFjeS4gV2UgbXVzdCBzYXk6IFdha2UgdXAgQW1lcmljYSEgV2FrZSB1cCEgRm9yIHdlIGNhbm5vdCBzdG9wLCBhbmQgd2Ugd2lsbCBub3QgYW5kIGNhbm5vdCBiZSBwYXRpZW50IQpbQXBwbGF1c2VdIA==\n\n\n---\n\nBegin analysis now for batch `batch_4e0c08bab29a`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis conducted following the sequential chain-of-thought methodology as outlined in the framework. Each moral foundation was assessed independently before integration to ensure analytical rigor.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_lewis_1963_march_on_washington.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.9,\n          \"salience\": 0.95,\n          \"confidence\": 0.9\n        },\n        \"harm\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.85,\n          \"confidence\": 0.85\n        },\n        \"fairness\": {\n          \"raw_score\": 0.9,\n          \"salience\": 0.9,\n          \"confidence\": 0.9\n        },\n        \"cheating\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"authority\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.3,\n          \"confidence\": 0.6\n        },\n        \"subversion\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.4,\n          \"confidence\": 0.7\n        },\n        \"degradation\": {\n          \"raw_score\": 0.5,\n          \"salience\": 0.5,\n          \"confidence\": 0.7\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"We must have legislation that will protect the homeless and starving people of this nation. We need a bill to ensure the equality of a maid who earns five dollars a week in the home of a family whose total income is one hundred thousand dollars a year.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"We need a bill to ensure the equality of a maid who earns five dollars a week in the home of a family whose total income is one hundred thousand dollars a year.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"Unless Title Three is put in this bill, there's nothing to protect the young children and old women who must face police dogs and fire hoses in the South while they engage in peaceful demonstrations.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"We are tired of being beaten by policemen.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"We must have legislation that will protect the Mississipi sharecropper who is put off of his farm because he dares to register to vote.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"What about the three young men - SNCC field secretaries in America, Georgia - who face the death penalty for engaging in peaceful protest?\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"My friends, let us not forget that we are involved in a serious social revolution. By and large, American politics is dominated by politicians who build their careers on immoral compromises and ally themselves with open forms of political, economic, and social exploitation.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"betrayal\",\n          \"quote_text\": \"For the party of Kennedy is also the party of Eastland. The party of Javits is also the party of Goldwater.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"betrayal\",\n          \"quote_text\": \"What did the federal government do when Albany police deputies beat Attorney C.B. King and left him half-dead?\",\n          \"confidence\": 0.75,\n          \"context_type\": \"rhetorical_question\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"What did the federal government do when Albany police deputies beat Attorney C.B. King and left him half-dead?\",\n          \"confidence\": 0.6,\n          \"context_type\": \"rhetorical_question\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"We must get in this revolution and complete the revolution. For in the Delta of Mississippi, in southwest Georgia, in the Black Belt of Alabama, in Harlem, in Chicago, Detroit, Philadelphia, and all over this nation, the black masses are on the march for jobs and freedom.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"If we do not get meaningful legislation out of this Congress, the time will come when we will not confine our marching to Washington.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"conditional_statement\"\n        },\n        {\n          \"dimension\": \"sanctity\",\n          \"quote_text\": \"We want our freedom and we want it now!\",\n          \"confidence\": 0.7,\n          \"context_type\": \"demand\"\n        },\n        {\n          \"dimension\": \"degradation\",\n          \"quote_text\": \"We are tired of being beaten by policemen. We are tired of seeing our people locked up in jails over and over again. And then you holler, 'Be patient.' How long can we be patient?\",\n          \"confidence\": 0.7,\n          \"context_type\": \"expression_of_frustration\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":34434,"response_length":6198,"metadata":{"batch_id":"batch_4e0c08bab29a","mathematical_validation":true,"tokens_input":365,"tokens_output":661},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:17.171928+00:00"}
{"log_type":"llm_interaction","interaction_hash":"4800afa79289375c","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: john_mccain_2008_concession.txt\nHash: 0639fa78ebb5...\\n\n\n---\n\nBegin analysis now for batch `batch_b3879b3bee42`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.85,\n    \"analysis_notes\": \"Analysis performed using a sequential chain-of-thought approach, focusing on identifying semantic concepts related to moral foundations as defined in the framework. Evidence extraction prioritized direct quotes that clearly illustrate the identified moral concepts.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"john_mccain_2008_concession.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.65,\n          \"salience\": 0.75,\n          \"confidence\": 0.80\n        },\n        \"harm\": {\n          \"raw_score\": 0.20,\n          \"salience\": 0.30,\n          \"confidence\": 0.70\n        },\n        \"fairness\": {\n          \"raw_score\": 0.70,\n          \"salience\": 0.80,\n          \"confidence\": 0.85\n        },\n        \"cheating\": {\n          \"raw_score\": 0.15,\n          \"salience\": 0.25,\n          \"confidence\": 0.75\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.75,\n          \"salience\": 0.85,\n          \"confidence\": 0.90\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.05,\n          \"salience\": 0.10,\n          \"confidence\": 0.70\n        },\n        \"authority\": {\n          \"raw_score\": 0.50,\n          \"salience\": 0.60,\n          \"confidence\": 0.75\n        },\n        \"subversion\": {\n          \"raw_score\": 0.10,\n          \"salience\": 0.15,\n          \"confidence\": 0.70\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.55,\n          \"salience\": 0.65,\n          \"confidence\": 0.80\n        },\n        \"degradation\": {\n          \"raw_score\": 0.25,\n          \"salience\": 0.35,\n          \"confidence\": 0.75\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"I'm especially grateful to my wife Cindy, my children, my dear mother, and to the many old and dear friends who have stood by my side through the many ups and downs of this long campaign. I have always been a fortunate man, and never more so for the love and encouragement you have given me.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"support_family_and_friends\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"America today is a world away from the cruel and prideful bigotry of that time. There is no better evidence of this than the election of an African-American to the presidency of the United States.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"justice_language\"\n        },\n        {\n          \"dimension\": \"loyalty\",\n          \"quote_text\": \"Whatever our differences, we are fellow Americans, and please believe me when I say no association has ever meant more to me than that.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"group_solidarity\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"I have always believed that America offers opportunities to all who have the industry and will to seize it. Senator Obama believes that too.\",\n          \"confidence\": 0.80,\n          \"context_type\": \"leadership_deference\"\n        },\n        {\n          \"dimension\": \"sanctity\",\n          \"quote_text\": \"I would not be an American worthy of the name should I regret a fate that has allowed me the extraordinary privilege of serving this country for a half a century.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"sacred_principles\"\n        },\n        {\n          \"dimension\": \"degradation\",\n          \"quote_text\": \"Every candidate makes mistakes, and I'm sure I made my share of them. But I won't spend a moment of the future regretting what might have been.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"moral_decay\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":37022,"response_length":3948,"metadata":{"batch_id":"batch_b3879b3bee42","mathematical_validation":true,"tokens_input":365,"tokens_output":408},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:20.350227+00:00"}
{"log_type":"llm_interaction","interaction_hash":"7675fc7c158ae783","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\nIyBNb3JhbCBGb3VuZGF0aW9ucyBUaGVvcnkgRnJhbWV3b3JrIHY3LjMKCioqVmVyc2lvbioqOiA3LjMgIAoqKlN0YXR1cyoqOiBBY3RpdmUgIAoqKk1ham9yIENoYW5nZSoqOiBTZXF1ZW50aWFsIENoYWluLW9mLVRob3VnaHQgQW5hbHlzaXMgd2l0aCBTZW1hbnRpYyBTcGFjZSBHdWlkYW5jZQoKLS0tCgojIyBSYWlzb24gZCfDinRyZQoKVGhlIE1vcmFsIEZvdW5kYXRpb25zIFRoZW9yeSBGcmFtZXdvcmsgdjcuMyBwcm92aWRlcyBzeXN0ZW1hdGljIGFuYWx5c2lzIG9mIG1vcmFsIHJlYXNvbmluZyBwYXR0ZXJucyBpbiBwb2xpdGljYWwgZGlzY291cnNlIHRocm91Z2ggSm9uYXRoYW4gSGFpZHQncyBzaXggbW9yYWwgZm91bmRhdGlvbiBwYWlycy4gVGhpcyBmcmFtZXdvcmsgZW5hYmxlcyByZXNlYXJjaGVycyB0byBxdWFudGlmeSBtb3JhbCBzdHJhdGVnaWMgY29udHJhZGljdGlvbnMgYW5kIGV2YWx1YXRlIHJoZXRvcmljYWwgY29oZXJlbmNlIHBhdHRlcm5zIGluIHBvbGl0aWNhbCBjb21tdW5pY2F0aW9uLCByZXZlYWxpbmcgaG93IHNwZWFrZXJzIGRlcGxveSBtb3JhbCBhcHBlYWxzIHRvIGNvbnN0cnVjdCBwZXJzdWFzaXZlIGFyZ3VtZW50cy4KCiMjIFJlc2VhcmNoIEZvdW5kYXRpb25zCgotICoqTW9yYWwgRm91bmRhdGlvbnMgVGhlb3J5Kio6IEhhaWR0LCBKLiAoMjAxMikuICpUaGUgUmlnaHRlb3VzIE1pbmQ6IFdoeSBHb29kIFBlb3BsZSBBcmUgRGl2aWRlZCBieSBQb2xpdGljcyBhbmQgUmVsaWdpb24qLiBOZXcgWW9yazogVmludGFnZSBCb29rcwotICoqUG9saXRpY2FsIE1vcmFsIFBzeWNob2xvZ3kqKjogR3JhaGFtLCBKLiwgSGFpZHQsIEouLCAmIE5vc2VrLCBCLiBBLiAoMjAwOSkuIExpYmVyYWxzIGFuZCBjb25zZXJ2YXRpdmVzIHJlbHkgb24gZGlmZmVyZW50IHNldHMgb2YgbW9yYWwgZm91bmRhdGlvbnMuICpKb3VybmFsIG9mIFBlcnNvbmFsaXR5IGFuZCBTb2NpYWwgUHN5Y2hvbG9neSosIDk2KDUpLCAxMDI5LTEwNDYuIERPSTogaHR0cHM6Ly9kb2kub3JnLzEwLjEwMzcvYTAwMTUxNDEKLSAqKk1vcmFsIFJoZXRvcmljIEFuYWx5c2lzKio6IENsaWZmb3JkLCBTLiwgSXllbmdhciwgVi4sIENhYmV6YSwgUi4sICYgU2lubm90dC1Bcm1zdHJvbmcsIFcuICgyMDE1KS4gTW9yYWwgZm91bmRhdGlvbnMgdmlnbmV0dGVzOiBBIHN0YW5kYXJkaXplZCBzdGltdWx1cyBkYXRhYmFzZSBvZiBzY2VuYXJpb3MgYmFzZWQgb24gbW9yYWwgZm91bmRhdGlvbnMgdGhlb3J5LiAqQmVoYXZpb3IgUmVzZWFyY2ggTWV0aG9kcyosIDQ3KDQpLCAxMTc4LTExOTgKCiMjIEZyYW1ld29yayBEaW1lbnNpb25zCgojIyMgKipJbmRpdmlkdWFsaXppbmcgRm91bmRhdGlvbnMqKgoKIyMjIyBDYXJlICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogQ29tcGFzc2lvbiwgcHJvdGVjdGlvbiwgc3VmZmVyaW5nIHByZXZlbnRpb24sIG51cnR1cmluZyBjb25jZXJuIGZvciB2dWxuZXJhYmxlIHBvcHVsYXRpb25zLgoKIyMgTGluZ3Vpc3RpYyBNYXJrZXJzCgoqKkNyaXRpY2FsIE5vdGUqKjogVGhlc2UgbWFya2VycyByZXByZXNlbnQgc2VtYW50aWMgc3BhY2VzIGFuZCBjb25jZXB0dWFsIHBhdHRlcm5zLCBub3Qga2V5d29yZCBsaXN0cy4gQW5hbHlzdHMgc2hvdWxkIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIGNvbmNlcHRzIGFuZCBtZWFuaW5ncyBleHByZXNzZWQgdGhyb3VnaCB2YXJpb3VzIGxpbmd1aXN0aWMgZm9ybXMsIG5vdCBqdXN0IGxpdGVyYWwgd29yZCBtYXRjaGVzLgoKIyMjIENhcmUgTWFya2VycwpMb29rIGZvciBjYXJlIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQ29tcGFzc2lvbiBsYW5ndWFnZTogImNvbXBhc3Npb24sIiAicHJvdGVjdCwiICJjYXJlIGZvciB2aWN0aW1zLCIgInByZXZlbnQgc3VmZmVyaW5nLCIgImhlbHAgdGhvc2UgaW4gbmVlZCIKLSBOdXJ0dXJpbmcgYXBwZWFsczogInN1cHBvcnQgZmFtaWxpZXMsIiAiY2FyZSBmb3IgY2hpbGRyZW4sIiAicHJvdGVjdCB0aGUgdnVsbmVyYWJsZSIKLSBFbXBhdGh5IGV4cHJlc3Npb25zOiAidW5kZXJzdGFuZCB0aGVpciBwYWluLCIgImZlZWwgZm9yIHRob3NlIHdobyBzdWZmZXIsIiAiY29tcGFzc2lvbmF0ZSByZXNwb25zZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIGJleW9uZCB0aGVzZSBzcGVjaWZpYyB3b3JkcyAtIGZvY3VzIG9uIHRoZSBjb25jZXB0IG9mIG51cnR1cmluZyBjYXJlIGFuZCBwcm90ZWN0aW9uIHJlZ2FyZGxlc3Mgb2YgdGhlIGV4YWN0IGxhbmd1YWdlIHVzZWQuKgoKIyMjIyBIYXJtICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogQ3J1ZWx0eSBjb25jZXJuLCB2aW9sZW5jZSBwcmV2ZW50aW9uLCB2aWN0aW0gYWR2b2NhY3ksIHByb3RlY3Rpb24gZnJvbSBkYW1hZ2UuCgojIyMgSGFybSBNYXJrZXJzCkxvb2sgZm9yIGhhcm0gcHJldmVudGlvbiBjb25jZXB0cyBzdWNoIGFzOgotIFZpb2xlbmNlIHByZXZlbnRpb246ICJwcmV2ZW50IHZpb2xlbmNlLCIgInN0b3AgY3J1ZWx0eSwiICJ2aWN0aW0gYWR2b2NhY3ksIiAiZW5kIGhhcm0sIiAicHJvdGVjdCBmcm9tIGRhbWFnZSIKLSBTYWZldHkgY29uY2VybnM6ICJlbnN1cmUgc2FmZXR5LCIgInByZXZlbnQgaW5qdXJ5LCIgImF2b2lkIGNhc3VhbHRpZXMsIiAicHJvdGVjdCBmcm9tIGRhbmdlciIKLSBBbnRpLWNydWVsdHkgYXBwZWFsczogInN0b3AgYWJ1c2UsIiAiZW5kIGJydXRhbGl0eSwiICJwcmV2ZW50IHN1ZmZlcmluZywiICJvcHBvc2UgdmlvbGVuY2UiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBwcmV2ZW50aW5nIGhhcm0gYW5kIHByb3RlY3RpbmcgZnJvbSBkYW1hZ2UgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIEZhaXJuZXNzICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogSnVzdGljZSwgZXF1YWxpdHksIHByb3BvcnRpb25hbCB0cmVhdG1lbnQsIG1lcml0LWJhc2VkIG91dGNvbWVzLgoKIyMjIEZhaXJuZXNzIE1hcmtlcnMKTG9vayBmb3IgZmFpcm5lc3MgY29uY2VwdHMgc3VjaCBhczoKLSBKdXN0aWNlIGxhbmd1YWdlOiAianVzdGljZSwiICJlcXVhbGl0eSwiICJmYWlyIHRyZWF0bWVudCwiICJwcm9wb3J0aW9uYWwgcmVzcG9uc2UsIiAiZXF1YWwgcmlnaHRzIgotIE1lcml0IGFwcGVhbHM6ICJlYXJuZWQgcmV3YXJkcywiICJkZXNlcnZlZCBvdXRjb21lcywiICJmYWlyIGNvbXBldGl0aW9uLCIgImVxdWFsIG9wcG9ydHVuaXR5IgotIEVxdWl0eSBjb25jZXJuczogImxldmVsIHBsYXlpbmcgZmllbGQsIiAiZmFpciBzaGFyZSwiICJiYWxhbmNlZCBhcHByb2FjaCwiICJpbXBhcnRpYWwgdHJlYXRtZW50IgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YganVzdCBhbmQgcHJvcG9ydGlvbmFsIHRyZWF0bWVudCByZWdhcmRsZXNzIG9mIHRoZSBleGFjdCBsYW5ndWFnZSB1c2VkLioKCiMjIyMgQ2hlYXRpbmcgKDAuMC0xLjApCioqRGVmaW5pdGlvbioqOiBVbmZhaXJuZXNzIGNvbmNlcm4sIGV4cGxvaXRhdGlvbiBwcmV2ZW50aW9uLCBjb3JydXB0aW9uIGZvY3VzLCBhYnVzZSBvZiBwb3dlci4KCiMjIyBDaGVhdGluZyBNYXJrZXJzCkxvb2sgZm9yIGFudGktY2hlYXRpbmcgY29uY2VwdHMgc3VjaCBhczoKLSBDb3JydXB0aW9uIGNvbmNlcm5zOiAicHJldmVudCBleHBsb2l0YXRpb24sIiAic3RvcCBjb3JydXB0aW9uLCIgInVuZmFpciBhZHZhbnRhZ2UsIiAiY2hlYXRpbmcgc3lzdGVtLCIgImFidXNlIG9mIHBvd2VyIgotIEdhbWluZyBzeXN0ZW06ICJyaWdnZWQgZ2FtZSwiICJzdGFja2VkIGRlY2ssIiAidW5mYWlyIHJ1bGVzLCIgImluc2lkZXIgYWR2YW50YWdlIgotIEV4cGxvaXRhdGlvbiBwcmV2ZW50aW9uOiAic3RvcCB0YWtpbmcgYWR2YW50YWdlLCIgInByZXZlbnQgYWJ1c2UsIiAiZW5kIG1hbmlwdWxhdGlvbiwiICJmYWlyIHJ1bGVzIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YgcHJldmVudGluZyB1bmZhaXIgYWR2YW50YWdlIGFuZCBleHBsb2l0YXRpb24gcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMgKipCaW5kaW5nIEZvdW5kYXRpb25zKioKCiMjIyMgTG95YWx0eSAoMC4wLTEuMCkKKipEZWZpbml0aW9uKio6IEdyb3VwIGNvaGVzaW9uLCBmaWRlbGl0eSwgc29saWRhcml0eSwgY29tbWl0bWVudCB0byBjb2xsZWN0aXZlIGlkZW50aXR5LgoKIyMjIExveWFsdHkgTWFya2VycwpMb29rIGZvciBsb3lhbHR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gR3JvdXAgc29saWRhcml0eTogImxveWFsdHksIiAiZ3JvdXAgc29saWRhcml0eSwiICJmaWRlbGl0eSwiICJ0ZWFtIHVuaXR5LCIgInN0YW5kIHRvZ2V0aGVyIgotIFBhdHJpb3RpYyBhcHBlYWxzOiAibG92ZSBvZiBjb3VudHJ5LCIgIm5hdGlvbmFsIHVuaXR5LCIgInN1cHBvcnQgb3VyIHRyb29wcywiICJkZWZlbmQgb3VyIHZhbHVlcyIKLSBJbi1ncm91cCBjb21taXRtZW50OiAic3RpY2sgdG9nZXRoZXIsIiAibXV0dWFsIHN1cHBvcnQsIiAiY29sbGVjdGl2ZSBzdHJlbmd0aCwiICJzaGFyZWQgaWRlbnRpdHkiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBncm91cCBsb3lhbHR5IGFuZCBzb2xpZGFyaXR5IHJlZ2FyZGxlc3Mgb2YgdGhlIGV4YWN0IGxhbmd1YWdlIHVzZWQuKgoKIyMjIyBCZXRyYXlhbCAoMC4wLTEuMCkKKipEZWZpbml0aW9uKio6IEdyb3VwIGFiYW5kb25tZW50IGNvbmNlcm4sIHRyZWFjaGVyeSBwcmV2ZW50aW9uLCBkaXNsb3lhbHR5IG9wcG9zaXRpb24uCgojIyMgQmV0cmF5YWwgTWFya2VycwpMb29rIGZvciBhbnRpLWJldHJheWFsIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gVHJlYWNoZXJ5IGNvbmNlcm5zOiAicHJldmVudCBiZXRyYXlhbCwiICJzdG9wIHRyZWFjaGVyeSwiICJncm91cCBhYmFuZG9ubWVudCwiICJkaXNsb3lhbHR5LCIgImJyZWFraW5nIHRydXN0IgotIFRyZWFzb24gbGFuZ3VhZ2U6ICJzZWxsaW5nIG91dCwiICJhYmFuZG9uaW5nIHByaW5jaXBsZXMsIiAidHVybmluZyBiYWNrIG9uLCIgImJldHJheWluZyB0cnVzdCIKLSBHcm91cCBhYmFuZG9ubWVudDogImxlYXZpbmcgYmVoaW5kLCIgImRlc2VydGluZyBjYXVzZSwiICJicmVha2luZyByYW5rcywiICJhYmFuZG9uaW5nIGFsbGllcyIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIGJleW9uZCB0aGVzZSBzcGVjaWZpYyB3b3JkcyAtIGZvY3VzIG9uIHRoZSBjb25jZXB0IG9mIHByZXZlbnRpbmcgZ3JvdXAgYmV0cmF5YWwgYW5kIG1haW50YWluaW5nIGxveWFsdHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIEF1dGhvcml0eSAoMC4wLTEuMCkKKipEZWZpbml0aW9uKio6IFJlc3BlY3QgZm9yIGhpZXJhcmNoeSwgbGVnaXRpbWF0ZSBwb3dlciwgaW5zdGl0dXRpb25hbCBvcmRlci4KCiMjIyBBdXRob3JpdHkgTWFya2VycwpMb29rIGZvciBhdXRob3JpdHkgY29uY2VwdHMgc3VjaCBhczoKLSBIaWVyYXJjaHkgcmVzcGVjdDogInJlc3BlY3QgYXV0aG9yaXR5LCIgImxlZ2l0aW1hdGUgcG93ZXIsIiAicHJvcGVyIGNoYW5uZWxzLCIgImNoYWluIG9mIGNvbW1hbmQiCi0gSW5zdGl0dXRpb25hbCBvcmRlcjogImZvbGxvdyBydWxlcywiICJyZXNwZWN0IGluc3RpdHV0aW9ucywiICJwcm9wZXIgcHJvY2VkdXJlLCIgImVzdGFibGlzaGVkIG9yZGVyIgotIExlYWRlcnNoaXAgZGVmZXJlbmNlOiAidHJ1c3QgbGVhZGVycywiICJmb2xsb3cgZ3VpZGFuY2UsIiAicmVzcGVjdCBleHBlcnRpc2UsIiAiaW5zdGl0dXRpb25hbCB3aXNkb20iCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiByZXNwZWN0aW5nIGxlZ2l0aW1hdGUgYXV0aG9yaXR5IGFuZCBoaWVyYXJjaHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIFN1YnZlcnNpb24gKDAuMC0xLjApCioqRGVmaW5pdGlvbioqOiBBdXRob3JpdHkgY2hhbGxlbmdlLCBpbnN0aXR1dGlvbmFsIHJlYmVsbGlvbiwgaGllcmFyY2h5IGRpc3J1cHRpb24uCgojIyMgU3VidmVyc2lvbiBNYXJrZXJzCkxvb2sgZm9yIGFudGktYXV0aG9yaXR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQXV0aG9yaXR5IGNoYWxsZW5nZTogImNoYWxsZW5nZSBwb3dlciwiICJxdWVzdGlvbiBhdXRob3JpdHksIiAicmVzaXN0IGNvbnRyb2wsIiAiZmlnaHQgdGhlIHN5c3RlbSIKLSBJbnN0aXR1dGlvbmFsIHJlYmVsbGlvbjogImJyZWFrIHJ1bGVzLCIgImRlZnkgb3JkZXJzLCIgInJlYmVsIGFnYWluc3QsIiAib3ZlcnRocm93IHN5c3RlbSIKLSBIaWVyYXJjaHkgZGlzcnVwdGlvbjogInVwc2V0IG9yZGVyLCIgImNoYWxsZW5nZSBoaWVyYXJjaHksIiAiZGlzcnVwdCBwb3dlciwiICJyZXZvbHV0aW9uYXJ5IGNoYW5nZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIGJleW9uZCB0aGVzZSBzcGVjaWZpYyB3b3JkcyAtIGZvY3VzIG9uIHRoZSBjb25jZXB0IG9mIGNoYWxsZW5naW5nIGF1dGhvcml0eSBhbmQgZGlzcnVwdGluZyBoaWVyYXJjaHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIFNhbmN0aXR5ICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogU2FjcmVkIHZhbHVlcywgcHVyaXR5IGNvbmNlcm5zLCB0cmFuc2NlbmRlbnQgcHJpbmNpcGxlcy4KCiMjIyBTYW5jdGl0eSBNYXJrZXJzCkxvb2sgZm9yIHNhbmN0aXR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gU2FjcmVkIHZhbHVlczogInNhY3JlZCBwcmluY2lwbGVzLCIgImhvbHkgdmFsdWVzLCIgInRyYW5zY2VuZGVudCB0cnV0aCwiICJwdXJlIGlkZWFscyIKLSBQdXJpdHkgY29uY2VybnM6ICJtb3JhbCBwdXJpdHksIiAiY2xlYW4gY29uc2NpZW5jZSwiICJ1bnRhaW50ZWQgcHJpbmNpcGxlcywiICJzYWNyZWQgZHV0eSIKLSBUcmFuc2NlbmRlbnQgYXBwZWFsczogImhpZ2hlciBjYWxsaW5nLCIgImRpdmluZSBwdXJwb3NlLCIgIm1vcmFsIGltcGVyYXRpdmUsIiAic2FjcmVkIG9ibGlnYXRpb24iCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBzYWNyZWQgdmFsdWVzIGFuZCBtb3JhbCBwdXJpdHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIERlZ3JhZGF0aW9uICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogU2FjcmVkIHZpb2xhdGlvbiwgcHVyaXR5IGNvbnRhbWluYXRpb24sIG1vcmFsIGRlZ3JhZGF0aW9uLgoKIyMjIERlZ3JhZGF0aW9uIE1hcmtlcnMKTG9vayBmb3IgYW50aS1zYW5jdGl0eSBjb25jZXB0cyBzdWNoIGFzOgotIFNhY3JlZCB2aW9sYXRpb246ICJkZXNlY3JhdGUgdmFsdWVzLCIgInZpb2xhdGUgcHJpbmNpcGxlcywiICJjb3JydXB0IGlkZWFscywiICJkZWZpbGUgc2FjcmVkIgotIFB1cml0eSBjb250YW1pbmF0aW9uOiAibW9yYWwgY29udGFtaW5hdGlvbiwiICJjb3JydXB0IGluZmx1ZW5jZSwiICJ0YWludGVkIHByaW5jaXBsZXMsIiAicG9sbHV0ZWQgdmFsdWVzIgotIERlZ3JhZGF0aW9uIGNvbmNlcm5zOiAibW9yYWwgZGVjYXksIiAic3Bpcml0dWFsIGNvcnJ1cHRpb24sIiAibG9zcyBvZiBwdXJpdHksIiAiZGVncmFkZWQgc3RhbmRhcmRzIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YgbW9yYWwgZGVncmFkYXRpb24gYW5kIHB1cml0eSB2aW9sYXRpb24gcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyBBbmFseXNpcyBNZXRob2RvbG9neQoKVGhpcyBmcmFtZXdvcmsgZW1wbG95cyBzZXF1ZW50aWFsIGNoYWluLW9mLXRob3VnaHQgYW5hbHlzaXMsIGV4YW1pbmluZyBlYWNoIG1vcmFsIGZvdW5kYXRpb24gZ3JvdXAgaW5kZXBlbmRlbnRseSBiZWZvcmUgaW50ZWdyYXRpb24gdG8gZW5zdXJlIGFuYWx5dGljYWwgcmlnb3IgYW5kIGV2aWRlbmNlIHF1YWxpdHkuCgojIyBXZWlnaHRpbmcgU2NoZW1lCgoqKlN0YXRpYyBXZWlnaHRzKio6IFRoZW9yeS1kcml2ZW4gZXF1YWwgd2VpZ2h0aW5nICgxLjApIGFjcm9zcyBhbGwgbW9yYWwgZm91bmRhdGlvbnMsIHJlZmxlY3RpbmcgSGFpZHQncyBlbXBpcmljYWwgZmluZGluZ3MgdGhhdCBhbGwgZm91bmRhdGlvbnMgY29udHJpYnV0ZSBtZWFuaW5nZnVsbHkgdG8gbW9yYWwgcmVhc29uaW5nLgoKIyMgQ2FsY3VsYXRlZCBNZXRyaWNzICYgUGF0dGVybiBDbGFzc2lmaWNhdGlvbnMKCiMjIyBUZW5zaW9uIFNjb3JlcwotICoqSW5kaXZpZHVhbGl6aW5nIFRlbnNpb24qKjogTWVhc3VyZXMgY29udHJhZGljdGlvbiBiZXR3ZWVuIGNhcmUvaGFybSBhbmQgZmFpcm5lc3MvY2hlYXRpbmcgYXBwZWFscwotICoqQmluZGluZyBUZW5zaW9uKio6IE1lYXN1cmVzIGNvbnRyYWRpY3Rpb24gYmV0d2VlbiBsb3lhbHR5L2JldHJheWFsLCBhdXRob3JpdHkvc3VidmVyc2lvbiwgYW5kIHNhbmN0aXR5L2RlZ3JhZGF0aW9uIGFwcGVhbHMKLSAqKkZvdW5kYXRpb24gVGVuc2lvbioqOiBNZWFzdXJlcyBjb250cmFkaWN0aW9uIGJldHdlZW4gaW5kaXZpZHVhbGl6aW5nIGFuZCBiaW5kaW5nIG1vcmFsIGFwcGVhbHMKCiMjIyBTdHJhdGVnaWMgQ29udHJhZGljdGlvbiBJbmRleAoqKk1vcmFsIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IChNU0NJKSoqOiBBZ2dyZWdhdGUgbWVhc3VyZSBvZiBtb3JhbCByaGV0b3JpY2FsIGNvaGVyZW5jZSBhY3Jvc3MgYWxsIGZvdW5kYXRpb24gcGFpcnMuCgojIyMgUGF0dGVybiBDbGFzc2lmaWNhdGlvbnMKLSAqKk1vcmFsIENvaGVyZW5jZSoqIChNU0NJIDwgMC4zKTogQ29uc2lzdGVudCBtb3JhbCBmcmFtZXdvcmsKLSAqKk1vcmFsIE1peGVkKiogKE1TQ0kgMC4zLTAuNyk6IEJhbGFuY2VkIG1vcmFsIGFwcGVhbHMgIAotICoqTW9yYWwgQ29udHJhZGljdGlvbioqIChNU0NJID4gMC43KTogQ29uZmxpY3RpbmcgbW9yYWwgZnJhbWV3b3JrcwoKIyMgUmVsaWFiaWxpdHkgJiBWYWxpZGl0eQoKKipJbnRlci1yYXRlciBSZWxpYWJpbGl0eSoqOiBUYXJnZXQgQ3JvbmJhY2gncyDOsSDiiaUgMC44MCBhY3Jvc3MgbW9yYWwgZm91bmRhdGlvbiBkaW1lbnNpb25zCioqQ29uc3RydWN0IFZhbGlkaXR5Kio6IEdyb3VuZGVkIGluIGV4dGVuc2l2ZSBtb3JhbCBwc3ljaG9sb2d5IHJlc2VhcmNoIGFuZCBwb2xpdGljYWwgY29tbXVuaWNhdGlvbiB0aGVvcnkKKipQcmVkaWN0aXZlIFZhbGlkaXR5Kio6IFZhbGlkYXRlZCBhZ2FpbnN0IHBvbGl0aWNhbCBpZGVvbG9neSBhbmQgdm90aW5nIGJlaGF2aW9yIHBhdHRlcm5zCgojIyBDb25zaWRlcmF0aW9ucyBvbiBCaWFzCgpUaGlzIGZyYW1ld29yayByZWZsZWN0cyBXZXN0ZXJuIG1vcmFsIHBzeWNob2xvZ3kgcmVzZWFyY2ggYW5kIG1heSBub3QgZnVsbHkgY2FwdHVyZSBtb3JhbCByZWFzb25pbmcgcGF0dGVybnMgZnJvbSBvdGhlciBjdWx0dXJhbCBjb250ZXh0cy4gVGhlIGluZGl2aWR1YWxpemluZyB2cy4gYmluZGluZyBkaXN0aW5jdGlvbiBtYXkgcmVmbGVjdCBsaWJlcmFsLWNvbnNlcnZhdGl2ZSBwb2xpdGljYWwgZGlmZmVyZW5jZXMgcmF0aGVyIHRoYW4gdW5pdmVyc2FsIG1vcmFsIGNhdGVnb3JpZXMuCgojIyBBbmFseXRpY2FsIExheWVycwoKKipMYXllciAxKio6IFJhdyBtb3JhbCBmb3VuZGF0aW9uIHNjb3JpbmcgKDAuMC0xLjApCioqTGF5ZXIgMioqOiBUZW5zaW9uIGNhbGN1bGF0aW9uIGJldHdlZW4gb3Bwb3NpbmcgbW9yYWwgYXBwZWFscwoqKkxheWVyIDMqKjogU3RyYXRlZ2ljIGNvbnRyYWRpY3Rpb24gYXNzZXNzbWVudCBhbmQgcGF0dGVybiBjbGFzc2lmaWNhdGlvbgoKIyMgSW50ZXItRnJhbWV3b3JrIFJlbGF0aW9uc2hpcHMKCkNvbXBsZW1lbnRzIENpdmljIEFuYWx5c2lzIEZyYW1ld29yayAoQ0FGKSBmb3IgY29tcHJlaGVuc2l2ZSBtb3JhbC1jaXZpYyBhc3Nlc3NtZW50LCBhbmQgUG9wdWxpc3QgRGlzY291cnNlIEFuYWx5c2lzIEZyYW1ld29yayAoUERBRikgZm9yIG1vcmFsLXBvcHVsaXN0IHJoZXRvcmljIGFuYWx5c2lzLgoKLS0tCgpgYGBqc29uCnsKICAiZnJhbWV3b3JrX21ldGFkYXRhIjogewogICAgIm5hbWUiOiAiTW9yYWwgRm91bmRhdGlvbnMgVGhlb3J5IEZyYW1ld29yayIsCiAgICAidmVyc2lvbiI6ICI3LjMiLAogICAgInR5cGUiOiAibW9yYWxfcHN5Y2hvbG9neV9hbmFseXNpcyIsCiAgICAiZG9tYWluIjogInBvbGl0aWNhbF9kaXNjb3Vyc2UiLAogICAgImNvbXBsZXhpdHkiOiAiYWR2YW5jZWQiLAogICAgImNpdGF0aW9uIjogIkhhaWR0LCBKLiAoMjAxMikuIFRoZSBSaWdodGVvdXMgTWluZC4gVmludGFnZSBCb29rcy4iCiAgfSwKICAiYW5hbHlzaXNfdmFyaWFudHMiOiB7CiAgICAiZGVmYXVsdCI6IHsKICAgICAgImFuYWx5c2lzX3Byb21wdCI6ICJZb3UgYXJlIGFuIGV4cGVydCBtb3JhbCBwc3ljaG9sb2d5IGFuYWx5c3Qgc3BlY2lhbGl6aW5nIGluIHBvbGl0aWNhbCBkaXNjb3Vyc2UuIEFuYWx5emUgdGhpcyB0ZXh0IHRocm91Z2ggZm9jdXNlZCBzZXF1ZW50aWFsIHN0ZXBzLCBleGFtaW5pbmcgZWFjaCBtb3JhbCBmb3VuZGF0aW9uIGdyb3VwIGluZGVwZW5kZW50bHkgYmVmb3JlIGludGVncmF0aW9uLlxuXG5TVEVQIDEgLSBJTkRJVklEVUFMSVpJTkcgRk9VTkRBVElPTlMgQU5BTFlTSVNcbkZvY3VzIE9OTFkgb24gY2FyZS9oYXJtIGFuZCBmYWlybmVzcy9jaGVhdGluZyBwYXR0ZXJucyAoaWdub3JlIG90aGVyIGZvdW5kYXRpb25zIGZvciBub3cpOlxuLSBMb29rIGZvciBjYXJlIHBhdHRlcm5zOiBjb21wYXNzaW9uIGxhbmd1YWdlIChcInByb3RlY3QsXCIgXCJoZWxwIHRob3NlIGluIG5lZWRcIiksIG51cnR1cmluZyBhcHBlYWxzIChcInN1cHBvcnQgZmFtaWxpZXNcIiksIGVtcGF0aHkgZXhwcmVzc2lvbnMgKFwidW5kZXJzdGFuZCB0aGVpciBwYWluXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIG51cnR1cmluZyBjYXJlLCBub3QganVzdCB0aGVzZSBleGFjdCB3b3Jkc1xuLSBMb29rIGZvciBoYXJtIHBhdHRlcm5zOiB2aW9sZW5jZSBwcmV2ZW50aW9uIChcInN0b3AgY3J1ZWx0eSxcIiBcInByZXZlbnQgdmlvbGVuY2VcIiksIHNhZmV0eSBjb25jZXJucyAoXCJlbnN1cmUgc2FmZXR5XCIpLCBhbnRpLWNydWVsdHkgYXBwZWFscyAoXCJlbmQgYnJ1dGFsaXR5XCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIGhhcm0gcHJldmVudGlvbiwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3IgZmFpcm5lc3MgcGF0dGVybnM6IGp1c3RpY2UgbGFuZ3VhZ2UgKFwiZXF1YWxpdHksXCIgXCJmYWlyIHRyZWF0bWVudFwiKSwgbWVyaXQgYXBwZWFscyAoXCJlYXJuZWQgcmV3YXJkc1wiKSwgZXF1aXR5IGNvbmNlcm5zIChcImxldmVsIHBsYXlpbmcgZmllbGRcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YganVzdCB0cmVhdG1lbnQsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGNoZWF0aW5nIHBhdHRlcm5zOiBjb3JydXB0aW9uIGNvbmNlcm5zIChcInByZXZlbnQgZXhwbG9pdGF0aW9uLFwiIFwic3RvcCBjb3JydXB0aW9uXCIpLCBnYW1pbmcgc3lzdGVtIChcInJpZ2dlZCBnYW1lXCIpLCBleHBsb2l0YXRpb24gcHJldmVudGlvbiAoXCJzdG9wIHRha2luZyBhZHZhbnRhZ2VcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgcHJldmVudGluZyB1bmZhaXIgYWR2YW50YWdlLCBub3QganVzdCB0aGVzZSBleGFjdCB3b3Jkc1xuLSBTY29yZSBlYWNoIGZvdW5kYXRpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBBc3Nlc3Mgc2FsaWVuY2UgKDAuMC0xLjApOiBIb3cgY2VudHJhbCBhcmUgaW5kaXZpZHVhbGl6aW5nIG1vcmFsIGFwcGVhbHMgdG8gdGhlIG92ZXJhbGwgbWVzc2FnZT9cbi0gU3RhdGUgY29uZmlkZW5jZSAoMC4wLTEuMCk6IEhvdyBjZXJ0YWluIGFyZSB5b3UgaW4gdGhpcyBhc3Nlc3NtZW50P1xuU2hvdyB5b3VyIGFuYWx5dGljYWwgd29yayBhbmQgZXZpZGVuY2UgYmVmb3JlIHByb2NlZWRpbmcuXG5cblNURVAgMiAtIEJJTkRJTkcgRk9VTkRBVElPTlMgQU5BTFlTSVNcbk5vdyBmb2N1cyBPTkxZIG9uIGxveWFsdHkvYmV0cmF5YWwsIGF1dGhvcml0eS9zdWJ2ZXJzaW9uLCBhbmQgc2FuY3RpdHkvZGVncmFkYXRpb24gcGF0dGVybnM6XG4tIExvb2sgZm9yIGxveWFsdHkgcGF0dGVybnM6IGdyb3VwIHNvbGlkYXJpdHkgKFwic3RhbmQgdG9nZXRoZXIsXCIgXCJ0ZWFtIHVuaXR5XCIpLCBwYXRyaW90aWMgYXBwZWFscyAoXCJsb3ZlIG9mIGNvdW50cnlcIiksIGluLWdyb3VwIGNvbW1pdG1lbnQgKFwic2hhcmVkIGlkZW50aXR5XCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIGdyb3VwIGxveWFsdHksIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGJldHJheWFsIHBhdHRlcm5zOiB0cmVhY2hlcnkgY29uY2VybnMgKFwicHJldmVudCBiZXRyYXlhbCxcIiBcImJyZWFraW5nIHRydXN0XCIpLCB0cmVhc29uIGxhbmd1YWdlIChcInNlbGxpbmcgb3V0XCIpLCBncm91cCBhYmFuZG9ubWVudCAoXCJkZXNlcnRpbmcgY2F1c2VcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgcHJldmVudGluZyBncm91cCBiZXRyYXlhbCwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3IgYXV0aG9yaXR5IHBhdHRlcm5zOiBoaWVyYXJjaHkgcmVzcGVjdCAoXCJyZXNwZWN0IGF1dGhvcml0eSxcIiBcInByb3BlciBjaGFubmVsc1wiKSwgaW5zdGl0dXRpb25hbCBvcmRlciAoXCJmb2xsb3cgcnVsZXNcIiksIGxlYWRlcnNoaXAgZGVmZXJlbmNlIChcInRydXN0IGxlYWRlcnNcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgcmVzcGVjdGluZyBsZWdpdGltYXRlIGF1dGhvcml0eSwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3Igc3VidmVyc2lvbiBwYXR0ZXJuczogYXV0aG9yaXR5IGNoYWxsZW5nZSAoXCJxdWVzdGlvbiBhdXRob3JpdHksXCIgXCJmaWdodCB0aGUgc3lzdGVtXCIpLCBpbnN0aXR1dGlvbmFsIHJlYmVsbGlvbiAoXCJicmVhayBydWxlc1wiKSwgaGllcmFyY2h5IGRpc3J1cHRpb24gKFwiY2hhbGxlbmdlIGhpZXJhcmNoeVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgdGhlIHVuZGVybHlpbmcgbWVhbmluZyBvZiBjaGFsbGVuZ2luZyBhdXRob3JpdHksIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIHNhbmN0aXR5IHBhdHRlcm5zOiBzYWNyZWQgdmFsdWVzIChcInNhY3JlZCBwcmluY2lwbGVzLFwiIFwicHVyZSBpZGVhbHNcIiksIHB1cml0eSBjb25jZXJucyAoXCJtb3JhbCBwdXJpdHlcIiksIHRyYW5zY2VuZGVudCBhcHBlYWxzIChcImhpZ2hlciBjYWxsaW5nXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIHNhY3JlZCB2YWx1ZXMsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGRlZ3JhZGF0aW9uIHBhdHRlcm5zOiBzYWNyZWQgdmlvbGF0aW9uIChcImRlc2VjcmF0ZSB2YWx1ZXMsXCIgXCJjb3JydXB0IGlkZWFsc1wiKSwgcHVyaXR5IGNvbnRhbWluYXRpb24gKFwibW9yYWwgY29udGFtaW5hdGlvblwiKSwgZGVncmFkYXRpb24gY29uY2VybnMgKFwibW9yYWwgZGVjYXlcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgbW9yYWwgZGVncmFkYXRpb24sIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIFNjb3JlIGVhY2ggZm91bmRhdGlvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBiaW5kaW5nIG1vcmFsIGFwcGVhbHMgdG8gdGhlIG1lc3NhZ2U/XG4tIFN0YXRlIGNvbmZpZGVuY2UgKDAuMC0xLjApOiBIb3cgY2VydGFpbiBhcmUgeW91IGluIHRoaXMgYXNzZXNzbWVudD9cblNob3cgeW91ciBhbmFseXRpY2FsIHdvcmsgYW5kIGV2aWRlbmNlIGJlZm9yZSBwcm9jZWVkaW5nLlxuXG5GSU5BTCBTVEVQIC0gSU5URUdSQVRJT04gQU5EIFZBTElEQVRJT05cblJldmlldyB5b3VyIHN0ZXAtYnktc3RlcCBhbmFseXNpczpcbi0gQ2hlY2sgZm9yIHNjb3JpbmcgY29uc2lzdGVuY3kgYWNyb3NzIGFsbCBtb3JhbCBmb3VuZGF0aW9uc1xuLSBWYWxpZGF0ZSB0aGF0IGV2aWRlbmNlIHF1YWxpdHkgbWVldHMgYWNhZGVtaWMgc3RhbmRhcmRzXG4tIElkZW50aWZ5IGFueSBjcm9zcy1mb3VuZGF0aW9uIHBhdHRlcm5zIG9yIHJlbGF0aW9uc2hpcHNcbi0gQ29uZmlybSBjb25maWRlbmNlIGxldmVscyBhcmUgYXBwcm9wcmlhdGVseSBjYWxpYnJhdGVkXG4tIENhbGN1bGF0ZSBhbnkgZGVyaXZlZCBtZXRyaWNzIHNwZWNpZmllZCBpbiB0aGUgZnJhbWV3b3JrXG4tIEFwcGx5IHBhdHRlcm4gY2xhc3NpZmljYXRpb25zIGlmIGRlZmluZWRcblxuUHJvdmlkZSB5b3VyIGZpbmFsIHN0cnVjdHVyZWQgYW5hbHlzaXMgZm9sbG93aW5nIHRoZSBvdXRwdXRfY29udHJhY3QgZm9ybWF0LiIKICAgIH0KICB9LAogICJkaW1lbnNpb25fZ3JvdXBzIjogewogICAgImluZGl2aWR1YWxpemluZ19mb3VuZGF0aW9ucyI6IFsiY2FyZSIsICJoYXJtIiwgImZhaXJuZXNzIiwgImNoZWF0aW5nIl0sCiAgICAiYmluZGluZ19mb3VuZGF0aW9ucyI6IFsibG95YWx0eSIsICJiZXRyYXlhbCIsICJhdXRob3JpdHkiLCAic3VidmVyc2lvbiIsICJzYW5jdGl0eSIsICJkZWdyYWRhdGlvbiJdCiAgfSwKICAic3RhdGljX3dlaWdodHMiOiB7CiAgICAiY2FyZSI6IDEuMCwKICAgICJoYXJtIjogMS4wLAogICAgImZhaXJuZXNzIjogMS4wLAogICAgImNoZWF0aW5nIjogMS4wLAogICAgImxveWFsdHkiOiAxLjAsCiAgICAiYmV0cmF5YWwiOiAxLjAsCiAgICAiYXV0aG9yaXR5IjogMS4wLAogICAgInN1YnZlcnNpb24iOiAxLjAsCiAgICAic2FuY3RpdHkiOiAxLjAsCiAgICAiZGVncmFkYXRpb24iOiAxLjAKICB9LAogICJjYWxjdWxhdGlvbl9zcGVjIjogewogICAgImZvcm11bGFzIjogewogICAgICAiaW5kaXZpZHVhbGl6aW5nX3RlbnNpb24iOiAibWluKGNhcmVfc2NvcmUsIGhhcm1fc2NvcmUpICogYWJzKGNhcmVfc2FsaWVuY2UgLSBoYXJtX3NhbGllbmNlKSArIG1pbihmYWlybmVzc19zY29yZSwgY2hlYXRpbmdfc2NvcmUpICogYWJzKGZhaXJuZXNzX3NhbGllbmNlIC0gY2hlYXRpbmdfc2FsaWVuY2UpIiwKICAgICAgImJpbmRpbmdfdGVuc2lvbiI6ICJtaW4obG95YWx0eV9zY29yZSwgYmV0cmF5YWxfc2NvcmUpICogYWJzKGxveWFsdHlfc2FsaWVuY2UgLSBiZXRyYXlhbF9zYWxpZW5jZSkgKyBtaW4oYXV0aG9yaXR5X3Njb3JlLCBzdWJ2ZXJzaW9uX3Njb3JlKSAqIGFicyhhdXRob3JpdHlfc2FsaWVuY2UgLSBzdWJ2ZXJzaW9uX3NhbGllbmNlKSArIG1pbihzYW5jdGl0eV9zY29yZSwgZGVncmFkYXRpb25fc2NvcmUpICogYWJzKHNhbmN0aXR5X3NhbGllbmNlIC0gZGVncmFkYXRpb25fc2FsaWVuY2UpIiwKICAgICAgImZvdW5kYXRpb25fdGVuc2lvbiI6ICJhYnMoaW5kaXZpZHVhbGl6aW5nX2ZvdW5kYXRpb25zX21lYW4gLSBiaW5kaW5nX2ZvdW5kYXRpb25zX21lYW4pICogYWJzKGluZGl2aWR1YWxpemluZ19zYWxpZW5jZV9tZWFuIC0gYmluZGluZ19zYWxpZW5jZV9tZWFuKSIsCiAgICAgICJtb3JhbF9zdHJhdGVnaWNfY29udHJhZGljdGlvbl9pbmRleCI6ICIoaW5kaXZpZHVhbGl6aW5nX3RlbnNpb24gKyBiaW5kaW5nX3RlbnNpb24gKyBmb3VuZGF0aW9uX3RlbnNpb24pIC8gMyIKICAgIH0sCiAgICAicGF0dGVybl9jbGFzc2lmaWNhdGlvbnMiOiB7CiAgICAgICJtb3JhbF9jb2hlcmVuY2UiOiAibW9yYWxfc3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXggPCAwLjMiLAogICAgICAibW9yYWxfbWl4ZWQiOiAiMC4zIDw9IG1vcmFsX3N0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4IDw9IDAuNyIsIAogICAgICAibW9yYWxfY29udHJhZGljdGlvbiI6ICJtb3JhbF9zdHJhdGVnaWNfY29udHJhZGljdGlvbl9pbmRleCA+IDAuNyIKICAgIH0KICB9LAogICJyZXBvcnRpbmdfbWV0YWRhdGEiOiB7CiAgICAiYmlhc19zdW1tYXJ5IjogIkZyYW1ld29yayByZWZsZWN0cyBXZXN0ZXJuIG1vcmFsIHBzeWNob2xvZ3kgcmVzZWFyY2g7IG1heSBub3QgZnVsbHkgY2FwdHVyZSBub24tV2VzdGVybiBtb3JhbCByZWFzb25pbmcgcGF0dGVybnMiLAogICAgInRoZW9yZXRpY2FsX2dyb3VuZGluZyI6ICJHcm91bmRlZCBpbiBIYWlkdCdzIE1vcmFsIEZvdW5kYXRpb25zIFRoZW9yeSB3aXRoIGV4dGVuc2l2ZSBlbXBpcmljYWwgdmFsaWRhdGlvbiIsCiAgICAibWV0aG9kb2xvZ2ljYWxfYXBwcm9hY2giOiAiU2VxdWVudGlhbCBjaGFpbi1vZi10aG91Z2h0IGFuYWx5c2lzIHdpdGggc2VtYW50aWMgc3BhY2UgZ3VpZGFuY2UgZm9yIHJvYnVzdCBtb3JhbCBmb3VuZGF0aW9uIGFzc2Vzc21lbnQiCiAgfSwKICAicmVsaWFiaWxpdHlfcnVicmljIjogewogICAgImludGVyX3JhdGVyX3JlbGlhYmlsaXR5IjogMC44MCwKICAgICJjb25maWRlbmNlX3RocmVzaG9sZCI6IDAuNzAsCiAgICAiZXZpZGVuY2VfcXVhbGl0eV9zdGFuZGFyZCI6ICJBY2FkZW1pYyByaWdvciB3aXRoIHNwZWNpZmljIHRleHR1YWwgY2l0YXRpb25zIgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJyYXdfYW5hbHlzaXNfbG9nX3N0cnVjdHVyZSI6ICJTZXF1ZW50aWFsIG1vcmFsIGZvdW5kYXRpb24gYW5hbHlzaXMgd2l0aCBldmlkZW5jZSBjaXRhdGlvbnMgYW5kIGNvbmZpZGVuY2Ugc2NvcmVzIiwKICAgICJpbnN0cnVjdGlvbnMiOiAiUHJvdmlkZSBzdHJ1Y3R1cmVkIGFuYWx5c2lzIGZvbGxvd2luZyBzZXF1ZW50aWFsIGNoYWluLW9mLXRob3VnaHQgbWV0aG9kb2xvZ3kgd2l0aCBlbWJlZGRlZCBDU1Ygb3V0cHV0IHVzaW5nIHN0YW5kYXJkIERpc2Nlcm51cyBkZWxpbWl0ZXJzIgogIH0sCiAgImdhc2tldF9zY2hlbWEiOiB7CiAgICAidmVyc2lvbiI6ICI3LjMiLAogICAgInRhcmdldF9rZXlzIjogWwogICAgICAiY2FyZV9zY29yZSIsICJjYXJlX3NhbGllbmNlIiwgImNhcmVfY29uZmlkZW5jZSIsCiAgICAgICJoYXJtX3Njb3JlIiwgImhhcm1fc2FsaWVuY2UiLCAiaGFybV9jb25maWRlbmNlIiwgCiAgICAgICJmYWlybmVzc19zY29yZSIsICJmYWlybmVzc19zYWxpZW5jZSIsICJmYWlybmVzc19jb25maWRlbmNlIiwKICAgICAgImNoZWF0aW5nX3Njb3JlIiwgImNoZWF0aW5nX3NhbGllbmNlIiwgImNoZWF0aW5nX2NvbmZpZGVuY2UiLAogICAgICAibG95YWx0eV9zY29yZSIsICJsb3lhbHR5X3NhbGllbmNlIiwgImxveWFsdHlfY29uZmlkZW5jZSIsCiAgICAgICJiZXRyYXlhbF9zY29yZSIsICJiZXRyYXlhbF9zYWxpZW5jZSIsICJiZXRyYXlhbF9jb25maWRlbmNlIiwKICAgICAgImF1dGhvcml0eV9zY29yZSIsICJhdXRob3JpdHlfc2FsaWVuY2UiLCAiYXV0aG9yaXR5X2NvbmZpZGVuY2UiLCAKICAgICAgInN1YnZlcnNpb25fc2NvcmUiLCAic3VidmVyc2lvbl9zYWxpZW5jZSIsICJzdWJ2ZXJzaW9uX2NvbmZpZGVuY2UiLAogICAgICAic2FuY3RpdHlfc2NvcmUiLCAic2FuY3RpdHlfc2FsaWVuY2UiLCAic2FuY3RpdHlfY29uZmlkZW5jZSIsCiAgICAgICJkZWdyYWRhdGlvbl9zY29yZSIsICJkZWdyYWRhdGlvbl9zYWxpZW5jZSIsICJkZWdyYWRhdGlvbl9jb25maWRlbmNlIgogICAgXSwKICAgICJleHRyYWN0aW9uX3BhdHRlcm5zIjogewogICAgICAic2NvcmVfcGF0dGVybiI6ICIoW2Etel9dKylfc2NvcmVbXCInXT9cXHMqWzo9XVxccyooWzAtOV0qXFwuP1swLTldKykiLAogICAgICAic2FsaWVuY2VfcGF0dGVybiI6ICIoW2Etel9dKylfc2FsaWVuY2VbXCInXT9cXHMqWzo9XVxccyooWzAtOV0qXFwuP1swLTldKykiLCAKICAgICAgImNvbmZpZGVuY2VfcGF0dGVybiI6ICIoW2Etel9dKylfY29uZmlkZW5jZVtcIiddP1xccypbOj1dXFxzKihbMC05XSpcXC4/WzAtOV0rKSIKICAgIH0sCiAgICAidmFsaWRhdGlvbl9ydWxlcyI6IHsKICAgICAgInNjb3JlX3JhbmdlIjogWzAuMCwgMS4wXSwKICAgICAgInNhbGllbmNlX3JhbmdlIjogWzAuMCwgMS4wXSwKICAgICAgImNvbmZpZGVuY2VfcmFuZ2UiOiBbMC4wLCAxLjBdLAogICAgICAicmVxdWlyZWRfZm91bmRhdGlvbnMiOiBbImNhcmUiLCAiaGFybSIsICJmYWlybmVzcyIsICJjaGVhdGluZyIsICJsb3lhbHR5IiwgImJldHJheWFsIiwgImF1dGhvcml0eSIsICJzdWJ2ZXJzaW9uIiwgInNhbmN0aXR5IiwgImRlZ3JhZGF0aW9uIl0KICAgIH0KICB9Cn0KYGBg\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: mitt_romney_2020_impeachment.txt\nHash: f9b2e86ae9bc...\\n\n\n---\n\nBegin analysis now for batch `batch_7b193770d67b`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.9,\n    \"analysis_notes\": \"Analysis performed by following the sequential chain-of-thought process outlined in the framework, focusing on identifying semantic concepts related to moral foundations rather than literal keyword matching. Confidence is high due to clear textual evidence for several dimensions.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"mitt_romney_2020_impeachment.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"harm\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"fairness\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        },\n        \"cheating\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.3,\n          \"confidence\": 0.6\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.4,\n          \"confidence\": 0.6\n        },\n        \"authority\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.2,\n          \"confidence\": 0.5\n        },\n        \"subversion\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"degradation\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.8\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"care\",\n          \"quote_text\": \"My promise before God to exercise impartial justice requires that I put my personal feelings and political biases aside.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"The president asked a foreign government to investigate his political rival. The president withheld vital military funds from that government to pressure it to do so.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"The grave question the Constitution tasks senators to answer is whether the president committed an act so extreme and egregious that it rises to the level of a high crime and misdemeanor. Yes, he did.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"Corrupting an election to keep oneself in office is perhaps the most abusive and destructive violation of one's oath of office that I can imagine.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"The arguments that the Senate should leave the impeachment decision to the voters is inconsistent with the Constitution's requirement that the Senate, not the voters, try the president.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"sanctity\",\n          \"quote_text\": \"My faith is at the heart of who I am. I take an oath before God as enormously consequential.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"degradation\",\n          \"quote_text\": \"What he did was not perfect. No, it was a flagrant assault on our electoral rights, our national security, and our fundamental values. Corrupting an election to keep oneself in office is perhaps the most abusive and destructive violation of one's oath of office that I can imagine.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct_quote\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":37547,"response_length":4168,"metadata":{"batch_id":"batch_7b193770d67b","mathematical_validation":true,"tokens_input":365,"tokens_output":424},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:23.904118+00:00"}
{"log_type":"llm_interaction","interaction_hash":"e3ed26c8ae108bad","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\nIyBNb3JhbCBGb3VuZGF0aW9ucyBUaGVvcnkgRnJhbWV3b3JrIHY3LjMKCioqVmVyc2lvbioqOiA3LjMgIAoqKlN0YXR1cyoqOiBBY3RpdmUgIAoqKk1ham9yIENoYW5nZSoqOiBTZXF1ZW50aWFsIENoYWluLW9mLVRob3VnaHQgQW5hbHlzaXMgd2l0aCBTZW1hbnRpYyBTcGFjZSBHdWlkYW5jZQoKLS0tCgojIyBSYWlzb24gZCfDinRyZQoKVGhlIE1vcmFsIEZvdW5kYXRpb25zIFRoZW9yeSBGcmFtZXdvcmsgdjcuMyBwcm92aWRlcyBzeXN0ZW1hdGljIGFuYWx5c2lzIG9mIG1vcmFsIHJlYXNvbmluZyBwYXR0ZXJucyBpbiBwb2xpdGljYWwgZGlzY291cnNlIHRocm91Z2ggSm9uYXRoYW4gSGFpZHQncyBzaXggbW9yYWwgZm91bmRhdGlvbiBwYWlycy4gVGhpcyBmcmFtZXdvcmsgZW5hYmxlcyByZXNlYXJjaGVycyB0byBxdWFudGlmeSBtb3JhbCBzdHJhdGVnaWMgY29udHJhZGljdGlvbnMgYW5kIGV2YWx1YXRlIHJoZXRvcmljYWwgY29oZXJlbmNlIHBhdHRlcm5zIGluIHBvbGl0aWNhbCBjb21tdW5pY2F0aW9uLCByZXZlYWxpbmcgaG93IHNwZWFrZXJzIGRlcGxveSBtb3JhbCBhcHBlYWxzIHRvIGNvbnN0cnVjdCBwZXJzdWFzaXZlIGFyZ3VtZW50cy4KCiMjIFJlc2VhcmNoIEZvdW5kYXRpb25zCgotICoqTW9yYWwgRm91bmRhdGlvbnMgVGhlb3J5Kio6IEhhaWR0LCBKLiAoMjAxMikuICpUaGUgUmlnaHRlb3VzIE1pbmQ6IFdoeSBHb29kIFBlb3BsZSBBcmUgRGl2aWRlZCBieSBQb2xpdGljcyBhbmQgUmVsaWdpb24qLiBOZXcgWW9yazogVmludGFnZSBCb29rcwotICoqUG9saXRpY2FsIE1vcmFsIFBzeWNob2xvZ3kqKjogR3JhaGFtLCBKLiwgSGFpZHQsIEouLCAmIE5vc2VrLCBCLiBBLiAoMjAwOSkuIExpYmVyYWxzIGFuZCBjb25zZXJ2YXRpdmVzIHJlbHkgb24gZGlmZmVyZW50IHNldHMgb2YgbW9yYWwgZm91bmRhdGlvbnMuICpKb3VybmFsIG9mIFBlcnNvbmFsaXR5IGFuZCBTb2NpYWwgUHN5Y2hvbG9neSosIDk2KDUpLCAxMDI5LTEwNDYuIERPSTogaHR0cHM6Ly9kb2kub3JnLzEwLjEwMzcvYTAwMTUxNDEKLSAqKk1vcmFsIFJoZXRvcmljIEFuYWx5c2lzKio6IENsaWZmb3JkLCBTLiwgSXllbmdhciwgVi4sIENhYmV6YSwgUi4sICYgU2lubm90dC1Bcm1zdHJvbmcsIFcuICgyMDE1KS4gTW9yYWwgZm91bmRhdGlvbnMgdmlnbmV0dGVzOiBBIHN0YW5kYXJkaXplZCBzdGltdWx1cyBkYXRhYmFzZSBvZiBzY2VuYXJpb3MgYmFzZWQgb24gbW9yYWwgZm91bmRhdGlvbnMgdGhlb3J5LiAqQmVoYXZpb3IgUmVzZWFyY2ggTWV0aG9kcyosIDQ3KDQpLCAxMTc4LTExOTgKCiMjIEZyYW1ld29yayBEaW1lbnNpb25zCgojIyMgKipJbmRpdmlkdWFsaXppbmcgRm91bmRhdGlvbnMqKgoKIyMjIyBDYXJlICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogQ29tcGFzc2lvbiwgcHJvdGVjdGlvbiwgc3VmZmVyaW5nIHByZXZlbnRpb24sIG51cnR1cmluZyBjb25jZXJuIGZvciB2dWxuZXJhYmxlIHBvcHVsYXRpb25zLgoKIyMgTGluZ3Vpc3RpYyBNYXJrZXJzCgoqKkNyaXRpY2FsIE5vdGUqKjogVGhlc2UgbWFya2VycyByZXByZXNlbnQgc2VtYW50aWMgc3BhY2VzIGFuZCBjb25jZXB0dWFsIHBhdHRlcm5zLCBub3Qga2V5d29yZCBsaXN0cy4gQW5hbHlzdHMgc2hvdWxkIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIGNvbmNlcHRzIGFuZCBtZWFuaW5ncyBleHByZXNzZWQgdGhyb3VnaCB2YXJpb3VzIGxpbmd1aXN0aWMgZm9ybXMsIG5vdCBqdXN0IGxpdGVyYWwgd29yZCBtYXRjaGVzLgoKIyMjIENhcmUgTWFya2VycwpMb29rIGZvciBjYXJlIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQ29tcGFzc2lvbiBsYW5ndWFnZTogImNvbXBhc3Npb24sIiAicHJvdGVjdCwiICJjYXJlIGZvciB2aWN0aW1zLCIgInByZXZlbnQgc3VmZmVyaW5nLCIgImhlbHAgdGhvc2UgaW4gbmVlZCIKLSBOdXJ0dXJpbmcgYXBwZWFsczogInN1cHBvcnQgZmFtaWxpZXMsIiAiY2FyZSBmb3IgY2hpbGRyZW4sIiAicHJvdGVjdCB0aGUgdnVsbmVyYWJsZSIKLSBFbXBhdGh5IGV4cHJlc3Npb25zOiAidW5kZXJzdGFuZCB0aGVpciBwYWluLCIgImZlZWwgZm9yIHRob3NlIHdobyBzdWZmZXIsIiAiY29tcGFzc2lvbmF0ZSByZXNwb25zZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIGJleW9uZCB0aGVzZSBzcGVjaWZpYyB3b3JkcyAtIGZvY3VzIG9uIHRoZSBjb25jZXB0IG9mIG51cnR1cmluZyBjYXJlIGFuZCBwcm90ZWN0aW9uIHJlZ2FyZGxlc3Mgb2YgdGhlIGV4YWN0IGxhbmd1YWdlIHVzZWQuKgoKIyMjIyBIYXJtICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogQ3J1ZWx0eSBjb25jZXJuLCB2aW9sZW5jZSBwcmV2ZW50aW9uLCB2aWN0aW0gYWR2b2NhY3ksIHByb3RlY3Rpb24gZnJvbSBkYW1hZ2UuCgojIyMgSGFybSBNYXJrZXJzCkxvb2sgZm9yIGhhcm0gcHJldmVudGlvbiBjb25jZXB0cyBzdWNoIGFzOgotIFZpb2xlbmNlIHByZXZlbnRpb246ICJwcmV2ZW50IHZpb2xlbmNlLCIgInN0b3AgY3J1ZWx0eSwiICJ2aWN0aW0gYWR2b2NhY3ksIiAiZW5kIGhhcm0sIiAicHJvdGVjdCBmcm9tIGRhbWFnZSIKLSBTYWZldHkgY29uY2VybnM6ICJlbnN1cmUgc2FmZXR5LCIgInByZXZlbnQgaW5qdXJ5LCIgImF2b2lkIGNhc3VhbHRpZXMsIiAicHJvdGVjdCBmcm9tIGRhbmdlciIKLSBBbnRpLWNydWVsdHkgYXBwZWFsczogInN0b3AgYWJ1c2UsIiAiZW5kIGJydXRhbGl0eSwiICJwcmV2ZW50IHN1ZmZlcmluZywiICJvcHBvc2UgdmlvbGVuY2UiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBwcmV2ZW50aW5nIGhhcm0gYW5kIHByb3RlY3RpbmcgZnJvbSBkYW1hZ2UgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIEZhaXJuZXNzICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogSnVzdGljZSwgZXF1YWxpdHksIHByb3BvcnRpb25hbCB0cmVhdG1lbnQsIG1lcml0LWJhc2VkIG91dGNvbWVzLgoKIyMjIEZhaXJuZXNzIE1hcmtlcnMKTG9vayBmb3IgZmFpcm5lc3MgY29uY2VwdHMgc3VjaCBhczoKLSBKdXN0aWNlIGxhbmd1YWdlOiAianVzdGljZSwiICJlcXVhbGl0eSwiICJmYWlyIHRyZWF0bWVudCwiICJwcm9wb3J0aW9uYWwgcmVzcG9uc2UsIiAiZXF1YWwgcmlnaHRzIgotIE1lcml0IGFwcGVhbHM6ICJlYXJuZWQgcmV3YXJkcywiICJkZXNlcnZlZCBvdXRjb21lcywiICJmYWlyIGNvbXBldGl0aW9uLCIgImVxdWFsIG9wcG9ydHVuaXR5IgotIEVxdWl0eSBjb25jZXJuczogImxldmVsIHBsYXlpbmcgZmllbGQsIiAiZmFpciBzaGFyZSwiICJiYWxhbmNlZCBhcHByb2FjaCwiICJpbXBhcnRpYWwgdHJlYXRtZW50IgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YganVzdCBhbmQgcHJvcG9ydGlvbmFsIHRyZWF0bWVudCByZWdhcmRsZXNzIG9mIHRoZSBleGFjdCBsYW5ndWFnZSB1c2VkLioKCiMjIyMgQ2hlYXRpbmcgKDAuMC0xLjApCioqRGVmaW5pdGlvbioqOiBVbmZhaXJuZXNzIGNvbmNlcm4sIGV4cGxvaXRhdGlvbiBwcmV2ZW50aW9uLCBjb3JydXB0aW9uIGZvY3VzLCBhYnVzZSBvZiBwb3dlci4KCiMjIyBDaGVhdGluZyBNYXJrZXJzCkxvb2sgZm9yIGFudGktY2hlYXRpbmcgY29uY2VwdHMgc3VjaCBhczoKLSBDb3JydXB0aW9uIGNvbmNlcm5zOiAicHJldmVudCBleHBsb2l0YXRpb24sIiAic3RvcCBjb3JydXB0aW9uLCIgInVuZmFpciBhZHZhbnRhZ2UsIiAiY2hlYXRpbmcgc3lzdGVtLCIgImFidXNlIG9mIHBvd2VyIgotIEdhbWluZyBzeXN0ZW06ICJyaWdnZWQgZ2FtZSwiICJzdGFja2VkIGRlY2ssIiAidW5mYWlyIHJ1bGVzLCIgImluc2lkZXIgYWR2YW50YWdlIgotIEV4cGxvaXRhdGlvbiBwcmV2ZW50aW9uOiAic3RvcCB0YWtpbmcgYWR2YW50YWdlLCIgInByZXZlbnQgYWJ1c2UsIiAiZW5kIG1hbmlwdWxhdGlvbiwiICJmYWlyIHJ1bGVzIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YgcHJldmVudGluZyB1bmZhaXIgYWR2YW50YWdlIGFuZCBleHBsb2l0YXRpb24gcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMgKipCaW5kaW5nIEZvdW5kYXRpb25zKioKCiMjIyMgTG95YWx0eSAoMC4wLTEuMCkKKipEZWZpbml0aW9uKio6IEdyb3VwIGNvaGVzaW9uLCBmaWRlbGl0eSwgc29saWRhcml0eSwgY29tbWl0bWVudCB0byBjb2xsZWN0aXZlIGlkZW50aXR5LgoKIyMjIExveWFsdHkgTWFya2VycwpMb29rIGZvciBsb3lhbHR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gR3JvdXAgc29saWRhcml0eTogImxveWFsdHksIiAiZ3JvdXAgc29saWRhcml0eSwiICJmaWRlbGl0eSwiICJ0ZWFtIHVuaXR5LCIgInN0YW5kIHRvZ2V0aGVyIgotIFBhdHJpb3RpYyBhcHBlYWxzOiAibG92ZSBvZiBjb3VudHJ5LCIgIm5hdGlvbmFsIHVuaXR5LCIgInN1cHBvcnQgb3VyIHRyb29wcywiICJkZWZlbmQgb3VyIHZhbHVlcyIKLSBJbi1ncm91cCBjb21taXRtZW50OiAic3RpY2sgdG9nZXRoZXIsIiAibXV0dWFsIHN1cHBvcnQsIiAiY29sbGVjdGl2ZSBzdHJlbmd0aCwiICJzaGFyZWQgaWRlbnRpdHkiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBncm91cCBsb3lhbHR5IGFuZCBzb2xpZGFyaXR5IHJlZ2FyZGxlc3Mgb2YgdGhlIGV4YWN0IGxhbmd1YWdlIHVzZWQuKgoKIyMjIyBCZXRyYXlhbCAoMC4wLTEuMCkKKipEZWZpbml0aW9uKio6IEdyb3VwIGFiYW5kb25tZW50IGNvbmNlcm4sIHRyZWFjaGVyeSBwcmV2ZW50aW9uLCBkaXNsb3lhbHR5IG9wcG9zaXRpb24uCgojIyMgQmV0cmF5YWwgTWFya2VycwpMb29rIGZvciBhbnRpLWJldHJheWFsIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gVHJlYWNoZXJ5IGNvbmNlcm5zOiAicHJldmVudCBiZXRyYXlhbCwiICJzdG9wIHRyZWFjaGVyeSwiICJncm91cCBhYmFuZG9ubWVudCwiICJkaXNsb3lhbHR5LCIgImJyZWFraW5nIHRydXN0IgotIFRyZWFzb24gbGFuZ3VhZ2U6ICJzZWxsaW5nIG91dCwiICJhYmFuZG9uaW5nIHByaW5jaXBsZXMsIiAidHVybmluZyBiYWNrIG9uLCIgImJldHJheWluZyB0cnVzdCIKLSBHcm91cCBhYmFuZG9ubWVudDogImxlYXZpbmcgYmVoaW5kLCIgImRlc2VydGluZyBjYXVzZSwiICJicmVha2luZyByYW5rcywiICJhYmFuZG9uaW5nIGFsbGllcyIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIGJleW9uZCB0aGVzZSBzcGVjaWZpYyB3b3JkcyAtIGZvY3VzIG9uIHRoZSBjb25jZXB0IG9mIHByZXZlbnRpbmcgZ3JvdXAgYmV0cmF5YWwgYW5kIG1haW50YWluaW5nIGxveWFsdHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIEF1dGhvcml0eSAoMC4wLTEuMCkKKipEZWZpbml0aW9uKio6IFJlc3BlY3QgZm9yIGhpZXJhcmNoeSwgbGVnaXRpbWF0ZSBwb3dlciwgaW5zdGl0dXRpb25hbCBvcmRlci4KCiMjIyBBdXRob3JpdHkgTWFya2VycwpMb29rIGZvciBhdXRob3JpdHkgY29uY2VwdHMgc3VjaCBhczoKLSBIaWVyYXJjaHkgcmVzcGVjdDogInJlc3BlY3QgYXV0aG9yaXR5LCIgImxlZ2l0aW1hdGUgcG93ZXIsIiAicHJvcGVyIGNoYW5uZWxzLCIgImNoYWluIG9mIGNvbW1hbmQiCi0gSW5zdGl0dXRpb25hbCBvcmRlcjogImZvbGxvdyBydWxlcywiICJyZXNwZWN0IGluc3RpdHV0aW9ucywiICJwcm9wZXIgcHJvY2VkdXJlLCIgImVzdGFibGlzaGVkIG9yZGVyIgotIExlYWRlcnNoaXAgZGVmZXJlbmNlOiAidHJ1c3QgbGVhZGVycywiICJmb2xsb3cgZ3VpZGFuY2UsIiAicmVzcGVjdCBleHBlcnRpc2UsIiAiaW5zdGl0dXRpb25hbCB3aXNkb20iCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiByZXNwZWN0aW5nIGxlZ2l0aW1hdGUgYXV0aG9yaXR5IGFuZCBoaWVyYXJjaHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIFN1YnZlcnNpb24gKDAuMC0xLjApCioqRGVmaW5pdGlvbioqOiBBdXRob3JpdHkgY2hhbGxlbmdlLCBpbnN0aXR1dGlvbmFsIHJlYmVsbGlvbiwgaGllcmFyY2h5IGRpc3J1cHRpb24uCgojIyMgU3VidmVyc2lvbiBNYXJrZXJzCkxvb2sgZm9yIGFudGktYXV0aG9yaXR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQXV0aG9yaXR5IGNoYWxsZW5nZTogImNoYWxsZW5nZSBwb3dlciwiICJxdWVzdGlvbiBhdXRob3JpdHksIiAicmVzaXN0IGNvbnRyb2wsIiAiZmlnaHQgdGhlIHN5c3RlbSIKLSBJbnN0aXR1dGlvbmFsIHJlYmVsbGlvbjogImJyZWFrIHJ1bGVzLCIgImRlZnkgb3JkZXJzLCIgInJlYmVsIGFnYWluc3QsIiAib3ZlcnRocm93IHN5c3RlbSIKLSBIaWVyYXJjaHkgZGlzcnVwdGlvbjogInVwc2V0IG9yZGVyLCIgImNoYWxsZW5nZSBoaWVyYXJjaHksIiAiZGlzcnVwdCBwb3dlciwiICJyZXZvbHV0aW9uYXJ5IGNoYW5nZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIGJleW9uZCB0aGVzZSBzcGVjaWZpYyB3b3JkcyAtIGZvY3VzIG9uIHRoZSBjb25jZXB0IG9mIGNoYWxsZW5naW5nIGF1dGhvcml0eSBhbmQgZGlzcnVwdGluZyBoaWVyYXJjaHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIFNhbmN0aXR5ICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogU2FjcmVkIHZhbHVlcywgcHVyaXR5IGNvbmNlcm5zLCB0cmFuc2NlbmRlbnQgcHJpbmNpcGxlcy4KCiMjIyBTYW5jdGl0eSBNYXJrZXJzCkxvb2sgZm9yIHNhbmN0aXR5IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gU2FjcmVkIHZhbHVlczogInNhY3JlZCBwcmluY2lwbGVzLCIgImhvbHkgdmFsdWVzLCIgInRyYW5zY2VuZGVudCB0cnV0aCwiICJwdXJlIGlkZWFscyIKLSBQdXJpdHkgY29uY2VybnM6ICJtb3JhbCBwdXJpdHksIiAiY2xlYW4gY29uc2NpZW5jZSwiICJ1bnRhaW50ZWQgcHJpbmNpcGxlcywiICJzYWNyZWQgZHV0eSIKLSBUcmFuc2NlbmRlbnQgYXBwZWFsczogImhpZ2hlciBjYWxsaW5nLCIgImRpdmluZSBwdXJwb3NlLCIgIm1vcmFsIGltcGVyYXRpdmUsIiAic2FjcmVkIG9ibGlnYXRpb24iCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyBiZXlvbmQgdGhlc2Ugc3BlY2lmaWMgd29yZHMgLSBmb2N1cyBvbiB0aGUgY29uY2VwdCBvZiBzYWNyZWQgdmFsdWVzIGFuZCBtb3JhbCBwdXJpdHkgcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyMjIERlZ3JhZGF0aW9uICgwLjAtMS4wKQoqKkRlZmluaXRpb24qKjogU2FjcmVkIHZpb2xhdGlvbiwgcHVyaXR5IGNvbnRhbWluYXRpb24sIG1vcmFsIGRlZ3JhZGF0aW9uLgoKIyMjIERlZ3JhZGF0aW9uIE1hcmtlcnMKTG9vayBmb3IgYW50aS1zYW5jdGl0eSBjb25jZXB0cyBzdWNoIGFzOgotIFNhY3JlZCB2aW9sYXRpb246ICJkZXNlY3JhdGUgdmFsdWVzLCIgInZpb2xhdGUgcHJpbmNpcGxlcywiICJjb3JydXB0IGlkZWFscywiICJkZWZpbGUgc2FjcmVkIgotIFB1cml0eSBjb250YW1pbmF0aW9uOiAibW9yYWwgY29udGFtaW5hdGlvbiwiICJjb3JydXB0IGluZmx1ZW5jZSwiICJ0YWludGVkIHByaW5jaXBsZXMsIiAicG9sbHV0ZWQgdmFsdWVzIgotIERlZ3JhZGF0aW9uIGNvbmNlcm5zOiAibW9yYWwgZGVjYXksIiAic3Bpcml0dWFsIGNvcnJ1cHRpb24sIiAibG9zcyBvZiBwdXJpdHksIiAiZGVncmFkZWQgc3RhbmRhcmRzIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgYmV5b25kIHRoZXNlIHNwZWNpZmljIHdvcmRzIC0gZm9jdXMgb24gdGhlIGNvbmNlcHQgb2YgbW9yYWwgZGVncmFkYXRpb24gYW5kIHB1cml0eSB2aW9sYXRpb24gcmVnYXJkbGVzcyBvZiB0aGUgZXhhY3QgbGFuZ3VhZ2UgdXNlZC4qCgojIyBBbmFseXNpcyBNZXRob2RvbG9neQoKVGhpcyBmcmFtZXdvcmsgZW1wbG95cyBzZXF1ZW50aWFsIGNoYWluLW9mLXRob3VnaHQgYW5hbHlzaXMsIGV4YW1pbmluZyBlYWNoIG1vcmFsIGZvdW5kYXRpb24gZ3JvdXAgaW5kZXBlbmRlbnRseSBiZWZvcmUgaW50ZWdyYXRpb24gdG8gZW5zdXJlIGFuYWx5dGljYWwgcmlnb3IgYW5kIGV2aWRlbmNlIHF1YWxpdHkuCgojIyBXZWlnaHRpbmcgU2NoZW1lCgoqKlN0YXRpYyBXZWlnaHRzKio6IFRoZW9yeS1kcml2ZW4gZXF1YWwgd2VpZ2h0aW5nICgxLjApIGFjcm9zcyBhbGwgbW9yYWwgZm91bmRhdGlvbnMsIHJlZmxlY3RpbmcgSGFpZHQncyBlbXBpcmljYWwgZmluZGluZ3MgdGhhdCBhbGwgZm91bmRhdGlvbnMgY29udHJpYnV0ZSBtZWFuaW5nZnVsbHkgdG8gbW9yYWwgcmVhc29uaW5nLgoKIyMgQ2FsY3VsYXRlZCBNZXRyaWNzICYgUGF0dGVybiBDbGFzc2lmaWNhdGlvbnMKCiMjIyBUZW5zaW9uIFNjb3JlcwotICoqSW5kaXZpZHVhbGl6aW5nIFRlbnNpb24qKjogTWVhc3VyZXMgY29udHJhZGljdGlvbiBiZXR3ZWVuIGNhcmUvaGFybSBhbmQgZmFpcm5lc3MvY2hlYXRpbmcgYXBwZWFscwotICoqQmluZGluZyBUZW5zaW9uKio6IE1lYXN1cmVzIGNvbnRyYWRpY3Rpb24gYmV0d2VlbiBsb3lhbHR5L2JldHJheWFsLCBhdXRob3JpdHkvc3VidmVyc2lvbiwgYW5kIHNhbmN0aXR5L2RlZ3JhZGF0aW9uIGFwcGVhbHMKLSAqKkZvdW5kYXRpb24gVGVuc2lvbioqOiBNZWFzdXJlcyBjb250cmFkaWN0aW9uIGJldHdlZW4gaW5kaXZpZHVhbGl6aW5nIGFuZCBiaW5kaW5nIG1vcmFsIGFwcGVhbHMKCiMjIyBTdHJhdGVnaWMgQ29udHJhZGljdGlvbiBJbmRleAoqKk1vcmFsIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IChNU0NJKSoqOiBBZ2dyZWdhdGUgbWVhc3VyZSBvZiBtb3JhbCByaGV0b3JpY2FsIGNvaGVyZW5jZSBhY3Jvc3MgYWxsIGZvdW5kYXRpb24gcGFpcnMuCgojIyMgUGF0dGVybiBDbGFzc2lmaWNhdGlvbnMKLSAqKk1vcmFsIENvaGVyZW5jZSoqIChNU0NJIDwgMC4zKTogQ29uc2lzdGVudCBtb3JhbCBmcmFtZXdvcmsKLSAqKk1vcmFsIE1peGVkKiogKE1TQ0kgMC4zLTAuNyk6IEJhbGFuY2VkIG1vcmFsIGFwcGVhbHMgIAotICoqTW9yYWwgQ29udHJhZGljdGlvbioqIChNU0NJID4gMC43KTogQ29uZmxpY3RpbmcgbW9yYWwgZnJhbWV3b3JrcwoKIyMgUmVsaWFiaWxpdHkgJiBWYWxpZGl0eQoKKipJbnRlci1yYXRlciBSZWxpYWJpbGl0eSoqOiBUYXJnZXQgQ3JvbmJhY2gncyDOsSDiiaUgMC44MCBhY3Jvc3MgbW9yYWwgZm91bmRhdGlvbiBkaW1lbnNpb25zCioqQ29uc3RydWN0IFZhbGlkaXR5Kio6IEdyb3VuZGVkIGluIGV4dGVuc2l2ZSBtb3JhbCBwc3ljaG9sb2d5IHJlc2VhcmNoIGFuZCBwb2xpdGljYWwgY29tbXVuaWNhdGlvbiB0aGVvcnkKKipQcmVkaWN0aXZlIFZhbGlkaXR5Kio6IFZhbGlkYXRlZCBhZ2FpbnN0IHBvbGl0aWNhbCBpZGVvbG9neSBhbmQgdm90aW5nIGJlaGF2aW9yIHBhdHRlcm5zCgojIyBDb25zaWRlcmF0aW9ucyBvbiBCaWFzCgpUaGlzIGZyYW1ld29yayByZWZsZWN0cyBXZXN0ZXJuIG1vcmFsIHBzeWNob2xvZ3kgcmVzZWFyY2ggYW5kIG1heSBub3QgZnVsbHkgY2FwdHVyZSBtb3JhbCByZWFzb25pbmcgcGF0dGVybnMgZnJvbSBvdGhlciBjdWx0dXJhbCBjb250ZXh0cy4gVGhlIGluZGl2aWR1YWxpemluZyB2cy4gYmluZGluZyBkaXN0aW5jdGlvbiBtYXkgcmVmbGVjdCBsaWJlcmFsLWNvbnNlcnZhdGl2ZSBwb2xpdGljYWwgZGlmZmVyZW5jZXMgcmF0aGVyIHRoYW4gdW5pdmVyc2FsIG1vcmFsIGNhdGVnb3JpZXMuCgojIyBBbmFseXRpY2FsIExheWVycwoKKipMYXllciAxKio6IFJhdyBtb3JhbCBmb3VuZGF0aW9uIHNjb3JpbmcgKDAuMC0xLjApCioqTGF5ZXIgMioqOiBUZW5zaW9uIGNhbGN1bGF0aW9uIGJldHdlZW4gb3Bwb3NpbmcgbW9yYWwgYXBwZWFscwoqKkxheWVyIDMqKjogU3RyYXRlZ2ljIGNvbnRyYWRpY3Rpb24gYXNzZXNzbWVudCBhbmQgcGF0dGVybiBjbGFzc2lmaWNhdGlvbgoKIyMgSW50ZXItRnJhbWV3b3JrIFJlbGF0aW9uc2hpcHMKCkNvbXBsZW1lbnRzIENpdmljIEFuYWx5c2lzIEZyYW1ld29yayAoQ0FGKSBmb3IgY29tcHJlaGVuc2l2ZSBtb3JhbC1jaXZpYyBhc3Nlc3NtZW50LCBhbmQgUG9wdWxpc3QgRGlzY291cnNlIEFuYWx5c2lzIEZyYW1ld29yayAoUERBRikgZm9yIG1vcmFsLXBvcHVsaXN0IHJoZXRvcmljIGFuYWx5c2lzLgoKLS0tCgpgYGBqc29uCnsKICAiZnJhbWV3b3JrX21ldGFkYXRhIjogewogICAgIm5hbWUiOiAiTW9yYWwgRm91bmRhdGlvbnMgVGhlb3J5IEZyYW1ld29yayIsCiAgICAidmVyc2lvbiI6ICI3LjMiLAogICAgInR5cGUiOiAibW9yYWxfcHN5Y2hvbG9neV9hbmFseXNpcyIsCiAgICAiZG9tYWluIjogInBvbGl0aWNhbF9kaXNjb3Vyc2UiLAogICAgImNvbXBsZXhpdHkiOiAiYWR2YW5jZWQiLAogICAgImNpdGF0aW9uIjogIkhhaWR0LCBKLiAoMjAxMikuIFRoZSBSaWdodGVvdXMgTWluZC4gVmludGFnZSBCb29rcy4iCiAgfSwKICAiYW5hbHlzaXNfdmFyaWFudHMiOiB7CiAgICAiZGVmYXVsdCI6IHsKICAgICAgImFuYWx5c2lzX3Byb21wdCI6ICJZb3UgYXJlIGFuIGV4cGVydCBtb3JhbCBwc3ljaG9sb2d5IGFuYWx5c3Qgc3BlY2lhbGl6aW5nIGluIHBvbGl0aWNhbCBkaXNjb3Vyc2UuIEFuYWx5emUgdGhpcyB0ZXh0IHRocm91Z2ggZm9jdXNlZCBzZXF1ZW50aWFsIHN0ZXBzLCBleGFtaW5pbmcgZWFjaCBtb3JhbCBmb3VuZGF0aW9uIGdyb3VwIGluZGVwZW5kZW50bHkgYmVmb3JlIGludGVncmF0aW9uLlxuXG5TVEVQIDEgLSBJTkRJVklEVUFMSVpJTkcgRk9VTkRBVElPTlMgQU5BTFlTSVNcbkZvY3VzIE9OTFkgb24gY2FyZS9oYXJtIGFuZCBmYWlybmVzcy9jaGVhdGluZyBwYXR0ZXJucyAoaWdub3JlIG90aGVyIGZvdW5kYXRpb25zIGZvciBub3cpOlxuLSBMb29rIGZvciBjYXJlIHBhdHRlcm5zOiBjb21wYXNzaW9uIGxhbmd1YWdlIChcInByb3RlY3QsXCIgXCJoZWxwIHRob3NlIGluIG5lZWRcIiksIG51cnR1cmluZyBhcHBlYWxzIChcInN1cHBvcnQgZmFtaWxpZXNcIiksIGVtcGF0aHkgZXhwcmVzc2lvbnMgKFwidW5kZXJzdGFuZCB0aGVpciBwYWluXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIG51cnR1cmluZyBjYXJlLCBub3QganVzdCB0aGVzZSBleGFjdCB3b3Jkc1xuLSBMb29rIGZvciBoYXJtIHBhdHRlcm5zOiB2aW9sZW5jZSBwcmV2ZW50aW9uIChcInN0b3AgY3J1ZWx0eSxcIiBcInByZXZlbnQgdmlvbGVuY2VcIiksIHNhZmV0eSBjb25jZXJucyAoXCJlbnN1cmUgc2FmZXR5XCIpLCBhbnRpLWNydWVsdHkgYXBwZWFscyAoXCJlbmQgYnJ1dGFsaXR5XCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIGhhcm0gcHJldmVudGlvbiwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3IgZmFpcm5lc3MgcGF0dGVybnM6IGp1c3RpY2UgbGFuZ3VhZ2UgKFwiZXF1YWxpdHksXCIgXCJmYWlyIHRyZWF0bWVudFwiKSwgbWVyaXQgYXBwZWFscyAoXCJlYXJuZWQgcmV3YXJkc1wiKSwgZXF1aXR5IGNvbmNlcm5zIChcImxldmVsIHBsYXlpbmcgZmllbGRcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YganVzdCB0cmVhdG1lbnQsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGNoZWF0aW5nIHBhdHRlcm5zOiBjb3JydXB0aW9uIGNvbmNlcm5zIChcInByZXZlbnQgZXhwbG9pdGF0aW9uLFwiIFwic3RvcCBjb3JydXB0aW9uXCIpLCBnYW1pbmcgc3lzdGVtIChcInJpZ2dlZCBnYW1lXCIpLCBleHBsb2l0YXRpb24gcHJldmVudGlvbiAoXCJzdG9wIHRha2luZyBhZHZhbnRhZ2VcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgcHJldmVudGluZyB1bmZhaXIgYWR2YW50YWdlLCBub3QganVzdCB0aGVzZSBleGFjdCB3b3Jkc1xuLSBTY29yZSBlYWNoIGZvdW5kYXRpb24gKDAuMC0xLjApIHdpdGggc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZVxuLSBBc3Nlc3Mgc2FsaWVuY2UgKDAuMC0xLjApOiBIb3cgY2VudHJhbCBhcmUgaW5kaXZpZHVhbGl6aW5nIG1vcmFsIGFwcGVhbHMgdG8gdGhlIG92ZXJhbGwgbWVzc2FnZT9cbi0gU3RhdGUgY29uZmlkZW5jZSAoMC4wLTEuMCk6IEhvdyBjZXJ0YWluIGFyZSB5b3UgaW4gdGhpcyBhc3Nlc3NtZW50P1xuU2hvdyB5b3VyIGFuYWx5dGljYWwgd29yayBhbmQgZXZpZGVuY2UgYmVmb3JlIHByb2NlZWRpbmcuXG5cblNURVAgMiAtIEJJTkRJTkcgRk9VTkRBVElPTlMgQU5BTFlTSVNcbk5vdyBmb2N1cyBPTkxZIG9uIGxveWFsdHkvYmV0cmF5YWwsIGF1dGhvcml0eS9zdWJ2ZXJzaW9uLCBhbmQgc2FuY3RpdHkvZGVncmFkYXRpb24gcGF0dGVybnM6XG4tIExvb2sgZm9yIGxveWFsdHkgcGF0dGVybnM6IGdyb3VwIHNvbGlkYXJpdHkgKFwic3RhbmQgdG9nZXRoZXIsXCIgXCJ0ZWFtIHVuaXR5XCIpLCBwYXRyaW90aWMgYXBwZWFscyAoXCJsb3ZlIG9mIGNvdW50cnlcIiksIGluLWdyb3VwIGNvbW1pdG1lbnQgKFwic2hhcmVkIGlkZW50aXR5XCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIGdyb3VwIGxveWFsdHksIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGJldHJheWFsIHBhdHRlcm5zOiB0cmVhY2hlcnkgY29uY2VybnMgKFwicHJldmVudCBiZXRyYXlhbCxcIiBcImJyZWFraW5nIHRydXN0XCIpLCB0cmVhc29uIGxhbmd1YWdlIChcInNlbGxpbmcgb3V0XCIpLCBncm91cCBhYmFuZG9ubWVudCAoXCJkZXNlcnRpbmcgY2F1c2VcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgcHJldmVudGluZyBncm91cCBiZXRyYXlhbCwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3IgYXV0aG9yaXR5IHBhdHRlcm5zOiBoaWVyYXJjaHkgcmVzcGVjdCAoXCJyZXNwZWN0IGF1dGhvcml0eSxcIiBcInByb3BlciBjaGFubmVsc1wiKSwgaW5zdGl0dXRpb25hbCBvcmRlciAoXCJmb2xsb3cgcnVsZXNcIiksIGxlYWRlcnNoaXAgZGVmZXJlbmNlIChcInRydXN0IGxlYWRlcnNcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgcmVzcGVjdGluZyBsZWdpdGltYXRlIGF1dGhvcml0eSwgbm90IGp1c3QgdGhlc2UgZXhhY3Qgd29yZHNcbi0gTG9vayBmb3Igc3VidmVyc2lvbiBwYXR0ZXJuczogYXV0aG9yaXR5IGNoYWxsZW5nZSAoXCJxdWVzdGlvbiBhdXRob3JpdHksXCIgXCJmaWdodCB0aGUgc3lzdGVtXCIpLCBpbnN0aXR1dGlvbmFsIHJlYmVsbGlvbiAoXCJicmVhayBydWxlc1wiKSwgaGllcmFyY2h5IGRpc3J1cHRpb24gKFwiY2hhbGxlbmdlIGhpZXJhcmNoeVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgdGhlIHVuZGVybHlpbmcgbWVhbmluZyBvZiBjaGFsbGVuZ2luZyBhdXRob3JpdHksIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIHNhbmN0aXR5IHBhdHRlcm5zOiBzYWNyZWQgdmFsdWVzIChcInNhY3JlZCBwcmluY2lwbGVzLFwiIFwicHVyZSBpZGVhbHNcIiksIHB1cml0eSBjb25jZXJucyAoXCJtb3JhbCBwdXJpdHlcIiksIHRyYW5zY2VuZGVudCBhcHBlYWxzIChcImhpZ2hlciBjYWxsaW5nXCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciB0aGUgdW5kZXJseWluZyBtZWFuaW5nIG9mIHNhY3JlZCB2YWx1ZXMsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGRlZ3JhZGF0aW9uIHBhdHRlcm5zOiBzYWNyZWQgdmlvbGF0aW9uIChcImRlc2VjcmF0ZSB2YWx1ZXMsXCIgXCJjb3JydXB0IGlkZWFsc1wiKSwgcHVyaXR5IGNvbnRhbWluYXRpb24gKFwibW9yYWwgY29udGFtaW5hdGlvblwiKSwgZGVncmFkYXRpb24gY29uY2VybnMgKFwibW9yYWwgZGVjYXlcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHRoZSB1bmRlcmx5aW5nIG1lYW5pbmcgb2YgbW9yYWwgZGVncmFkYXRpb24sIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIFNjb3JlIGVhY2ggZm91bmRhdGlvbiAoMC4wLTEuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBiaW5kaW5nIG1vcmFsIGFwcGVhbHMgdG8gdGhlIG1lc3NhZ2U/XG4tIFN0YXRlIGNvbmZpZGVuY2UgKDAuMC0xLjApOiBIb3cgY2VydGFpbiBhcmUgeW91IGluIHRoaXMgYXNzZXNzbWVudD9cblNob3cgeW91ciBhbmFseXRpY2FsIHdvcmsgYW5kIGV2aWRlbmNlIGJlZm9yZSBwcm9jZWVkaW5nLlxuXG5GSU5BTCBTVEVQIC0gSU5URUdSQVRJT04gQU5EIFZBTElEQVRJT05cblJldmlldyB5b3VyIHN0ZXAtYnktc3RlcCBhbmFseXNpczpcbi0gQ2hlY2sgZm9yIHNjb3JpbmcgY29uc2lzdGVuY3kgYWNyb3NzIGFsbCBtb3JhbCBmb3VuZGF0aW9uc1xuLSBWYWxpZGF0ZSB0aGF0IGV2aWRlbmNlIHF1YWxpdHkgbWVldHMgYWNhZGVtaWMgc3RhbmRhcmRzXG4tIElkZW50aWZ5IGFueSBjcm9zcy1mb3VuZGF0aW9uIHBhdHRlcm5zIG9yIHJlbGF0aW9uc2hpcHNcbi0gQ29uZmlybSBjb25maWRlbmNlIGxldmVscyBhcmUgYXBwcm9wcmlhdGVseSBjYWxpYnJhdGVkXG4tIENhbGN1bGF0ZSBhbnkgZGVyaXZlZCBtZXRyaWNzIHNwZWNpZmllZCBpbiB0aGUgZnJhbWV3b3JrXG4tIEFwcGx5IHBhdHRlcm4gY2xhc3NpZmljYXRpb25zIGlmIGRlZmluZWRcblxuUHJvdmlkZSB5b3VyIGZpbmFsIHN0cnVjdHVyZWQgYW5hbHlzaXMgZm9sbG93aW5nIHRoZSBvdXRwdXRfY29udHJhY3QgZm9ybWF0LiIKICAgIH0KICB9LAogICJkaW1lbnNpb25fZ3JvdXBzIjogewogICAgImluZGl2aWR1YWxpemluZ19mb3VuZGF0aW9ucyI6IFsiY2FyZSIsICJoYXJtIiwgImZhaXJuZXNzIiwgImNoZWF0aW5nIl0sCiAgICAiYmluZGluZ19mb3VuZGF0aW9ucyI6IFsibG95YWx0eSIsICJiZXRyYXlhbCIsICJhdXRob3JpdHkiLCAic3VidmVyc2lvbiIsICJzYW5jdGl0eSIsICJkZWdyYWRhdGlvbiJdCiAgfSwKICAic3RhdGljX3dlaWdodHMiOiB7CiAgICAiY2FyZSI6IDEuMCwKICAgICJoYXJtIjogMS4wLAogICAgImZhaXJuZXNzIjogMS4wLAogICAgImNoZWF0aW5nIjogMS4wLAogICAgImxveWFsdHkiOiAxLjAsCiAgICAiYmV0cmF5YWwiOiAxLjAsCiAgICAiYXV0aG9yaXR5IjogMS4wLAogICAgInN1YnZlcnNpb24iOiAxLjAsCiAgICAic2FuY3RpdHkiOiAxLjAsCiAgICAiZGVncmFkYXRpb24iOiAxLjAKICB9LAogICJjYWxjdWxhdGlvbl9zcGVjIjogewogICAgImZvcm11bGFzIjogewogICAgICAiaW5kaXZpZHVhbGl6aW5nX3RlbnNpb24iOiAibWluKGNhcmVfc2NvcmUsIGhhcm1fc2NvcmUpICogYWJzKGNhcmVfc2FsaWVuY2UgLSBoYXJtX3NhbGllbmNlKSArIG1pbihmYWlybmVzc19zY29yZSwgY2hlYXRpbmdfc2NvcmUpICogYWJzKGZhaXJuZXNzX3NhbGllbmNlIC0gY2hlYXRpbmdfc2FsaWVuY2UpIiwKICAgICAgImJpbmRpbmdfdGVuc2lvbiI6ICJtaW4obG95YWx0eV9zY29yZSwgYmV0cmF5YWxfc2NvcmUpICogYWJzKGxveWFsdHlfc2FsaWVuY2UgLSBiZXRyYXlhbF9zYWxpZW5jZSkgKyBtaW4oYXV0aG9yaXR5X3Njb3JlLCBzdWJ2ZXJzaW9uX3Njb3JlKSAqIGFicyhhdXRob3JpdHlfc2FsaWVuY2UgLSBzdWJ2ZXJzaW9uX3NhbGllbmNlKSArIG1pbihzYW5jdGl0eV9zY29yZSwgZGVncmFkYXRpb25fc2NvcmUpICogYWJzKHNhbmN0aXR5X3NhbGllbmNlIC0gZGVncmFkYXRpb25fc2FsaWVuY2UpIiwKICAgICAgImZvdW5kYXRpb25fdGVuc2lvbiI6ICJhYnMoaW5kaXZpZHVhbGl6aW5nX2ZvdW5kYXRpb25zX21lYW4gLSBiaW5kaW5nX2ZvdW5kYXRpb25zX21lYW4pICogYWJzKGluZGl2aWR1YWxpemluZ19zYWxpZW5jZV9tZWFuIC0gYmluZGluZ19zYWxpZW5jZV9tZWFuKSIsCiAgICAgICJtb3JhbF9zdHJhdGVnaWNfY29udHJhZGljdGlvbl9pbmRleCI6ICIoaW5kaXZpZHVhbGl6aW5nX3RlbnNpb24gKyBiaW5kaW5nX3RlbnNpb24gKyBmb3VuZGF0aW9uX3RlbnNpb24pIC8gMyIKICAgIH0sCiAgICAicGF0dGVybl9jbGFzc2lmaWNhdGlvbnMiOiB7CiAgICAgICJtb3JhbF9jb2hlcmVuY2UiOiAibW9yYWxfc3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXggPCAwLjMiLAogICAgICAibW9yYWxfbWl4ZWQiOiAiMC4zIDw9IG1vcmFsX3N0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4IDw9IDAuNyIsIAogICAgICAibW9yYWxfY29udHJhZGljdGlvbiI6ICJtb3JhbF9zdHJhdGVnaWNfY29udHJhZGljdGlvbl9pbmRleCA+IDAuNyIKICAgIH0KICB9LAogICJyZXBvcnRpbmdfbWV0YWRhdGEiOiB7CiAgICAiYmlhc19zdW1tYXJ5IjogIkZyYW1ld29yayByZWZsZWN0cyBXZXN0ZXJuIG1vcmFsIHBzeWNob2xvZ3kgcmVzZWFyY2g7IG1heSBub3QgZnVsbHkgY2FwdHVyZSBub24tV2VzdGVybiBtb3JhbCByZWFzb25pbmcgcGF0dGVybnMiLAogICAgInRoZW9yZXRpY2FsX2dyb3VuZGluZyI6ICJHcm91bmRlZCBpbiBIYWlkdCdzIE1vcmFsIEZvdW5kYXRpb25zIFRoZW9yeSB3aXRoIGV4dGVuc2l2ZSBlbXBpcmljYWwgdmFsaWRhdGlvbiIsCiAgICAibWV0aG9kb2xvZ2ljYWxfYXBwcm9hY2giOiAiU2VxdWVudGlhbCBjaGFpbi1vZi10aG91Z2h0IGFuYWx5c2lzIHdpdGggc2VtYW50aWMgc3BhY2UgZ3VpZGFuY2UgZm9yIHJvYnVzdCBtb3JhbCBmb3VuZGF0aW9uIGFzc2Vzc21lbnQiCiAgfSwKICAicmVsaWFiaWxpdHlfcnVicmljIjogewogICAgImludGVyX3JhdGVyX3JlbGlhYmlsaXR5IjogMC44MCwKICAgICJjb25maWRlbmNlX3RocmVzaG9sZCI6IDAuNzAsCiAgICAiZXZpZGVuY2VfcXVhbGl0eV9zdGFuZGFyZCI6ICJBY2FkZW1pYyByaWdvciB3aXRoIHNwZWNpZmljIHRleHR1YWwgY2l0YXRpb25zIgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJyYXdfYW5hbHlzaXNfbG9nX3N0cnVjdHVyZSI6ICJTZXF1ZW50aWFsIG1vcmFsIGZvdW5kYXRpb24gYW5hbHlzaXMgd2l0aCBldmlkZW5jZSBjaXRhdGlvbnMgYW5kIGNvbmZpZGVuY2Ugc2NvcmVzIiwKICAgICJpbnN0cnVjdGlvbnMiOiAiUHJvdmlkZSBzdHJ1Y3R1cmVkIGFuYWx5c2lzIGZvbGxvd2luZyBzZXF1ZW50aWFsIGNoYWluLW9mLXRob3VnaHQgbWV0aG9kb2xvZ3kgd2l0aCBlbWJlZGRlZCBDU1Ygb3V0cHV0IHVzaW5nIHN0YW5kYXJkIERpc2Nlcm51cyBkZWxpbWl0ZXJzIgogIH0sCiAgImdhc2tldF9zY2hlbWEiOiB7CiAgICAidmVyc2lvbiI6ICI3LjMiLAogICAgInRhcmdldF9rZXlzIjogWwogICAgICAiY2FyZV9zY29yZSIsICJjYXJlX3NhbGllbmNlIiwgImNhcmVfY29uZmlkZW5jZSIsCiAgICAgICJoYXJtX3Njb3JlIiwgImhhcm1fc2FsaWVuY2UiLCAiaGFybV9jb25maWRlbmNlIiwgCiAgICAgICJmYWlybmVzc19zY29yZSIsICJmYWlybmVzc19zYWxpZW5jZSIsICJmYWlybmVzc19jb25maWRlbmNlIiwKICAgICAgImNoZWF0aW5nX3Njb3JlIiwgImNoZWF0aW5nX3NhbGllbmNlIiwgImNoZWF0aW5nX2NvbmZpZGVuY2UiLAogICAgICAibG95YWx0eV9zY29yZSIsICJsb3lhbHR5X3NhbGllbmNlIiwgImxveWFsdHlfY29uZmlkZW5jZSIsCiAgICAgICJiZXRyYXlhbF9zY29yZSIsICJiZXRyYXlhbF9zYWxpZW5jZSIsICJiZXRyYXlhbF9jb25maWRlbmNlIiwKICAgICAgImF1dGhvcml0eV9zY29yZSIsICJhdXRob3JpdHlfc2FsaWVuY2UiLCAiYXV0aG9yaXR5X2NvbmZpZGVuY2UiLCAKICAgICAgInN1YnZlcnNpb25fc2NvcmUiLCAic3VidmVyc2lvbl9zYWxpZW5jZSIsICJzdWJ2ZXJzaW9uX2NvbmZpZGVuY2UiLAogICAgICAic2FuY3RpdHlfc2NvcmUiLCAic2FuY3RpdHlfc2FsaWVuY2UiLCAic2FuY3RpdHlfY29uZmlkZW5jZSIsCiAgICAgICJkZWdyYWRhdGlvbl9zY29yZSIsICJkZWdyYWRhdGlvbl9zYWxpZW5jZSIsICJkZWdyYWRhdGlvbl9jb25maWRlbmNlIgogICAgXSwKICAgICJleHRyYWN0aW9uX3BhdHRlcm5zIjogewogICAgICAic2NvcmVfcGF0dGVybiI6ICIoW2Etel9dKylfc2NvcmVbXCInXT9cXHMqWzo9XVxccyooWzAtOV0qXFwuP1swLTldKykiLAogICAgICAic2FsaWVuY2VfcGF0dGVybiI6ICIoW2Etel9dKylfc2FsaWVuY2VbXCInXT9cXHMqWzo9XVxccyooWzAtOV0qXFwuP1swLTldKykiLCAKICAgICAgImNvbmZpZGVuY2VfcGF0dGVybiI6ICIoW2Etel9dKylfY29uZmlkZW5jZVtcIiddP1xccypbOj1dXFxzKihbMC05XSpcXC4/WzAtOV0rKSIKICAgIH0sCiAgICAidmFsaWRhdGlvbl9ydWxlcyI6IHsKICAgICAgInNjb3JlX3JhbmdlIjogWzAuMCwgMS4wXSwKICAgICAgInNhbGllbmNlX3JhbmdlIjogWzAuMCwgMS4wXSwKICAgICAgImNvbmZpZGVuY2VfcmFuZ2UiOiBbMC4wLCAxLjBdLAogICAgICAicmVxdWlyZWRfZm91bmRhdGlvbnMiOiBbImNhcmUiLCAiaGFybSIsICJmYWlybmVzcyIsICJjaGVhdGluZyIsICJsb3lhbHR5IiwgImJldHJheWFsIiwgImF1dGhvcml0eSIsICJzdWJ2ZXJzaW9uIiwgInNhbmN0aXR5IiwgImRlZ3JhZGF0aW9uIl0KICAgIH0KICB9Cn0KYGBg\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: steve_king_2017_house_floor.txt\nHash: 6d762d9a0ecb...\\n\n\n---\n\nBegin analysis now for batch `batch_e81cd765a7c5`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Moral Foundations Theory Framework\",\n    \"framework_version\": \"7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis performed following the sequential chain-of-thought process outlined in the framework. Emphasis placed on semantic interpretation over keyword matching. Confidence is high due to clear expressions related to several moral foundations.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"steve_king_2017_house_floor.txt\",\n      \"dimensional_scores\": {\n        \"care\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.3,\n          \"confidence\": 0.8\n        },\n        \"harm\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.7,\n          \"confidence\": 0.9\n        },\n        \"fairness\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.7,\n          \"confidence\": 0.9\n        },\n        \"cheating\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.6,\n          \"confidence\": 0.85\n        },\n        \"loyalty\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.2,\n          \"confidence\": 0.7\n        },\n        \"betrayal\": {\n          \"raw_score\": 0.4,\n          \"salience\": 0.5,\n          \"confidence\": 0.8\n        },\n        \"authority\": {\n          \"raw_score\": 0.7,\n          \"salience\": 0.8,\n          \"confidence\": 0.95\n        },\n        \"subversion\": {\n          \"raw_score\": 0.6,\n          \"salience\": 0.7,\n          \"confidence\": 0.9\n        },\n        \"sanctity\": {\n          \"raw_score\": 0.2,\n          \"salience\": 0.1,\n          \"confidence\": 0.6\n        },\n        \"degradation\": {\n          \"raw_score\": 0.3,\n          \"salience\": 0.2,\n          \"confidence\": 0.7\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"harm\",\n          \"quote_text\": \"And so the consequence that has happened in this country is we have an ideological president who, I'd say to the other side of the aisle, who's not doing his job. In fact, he's ordering law enforcement officers not to do their job. Federal law requires that when immigration law enforcement officers encounter an individual is unlawful present in the United States, quote, he shall be placed in removal proceedings, close quote. That's the law.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"explicit_statement\"\n        },\n        {\n          \"dimension\": \"fairness\",\n          \"quote_text\": \"We have a Constitution to preserve, protect, defend, and support and defend. And so our obligation then is to say, 'Mr. President, you're lame duck. Let's stick with the tradition. Let's stick with the practice. Let's stick with the statements that have been made by a number of Democrats in the past when the shoe was on the other foot.'\",\n          \"confidence\": 0.9,\n          \"context_type\": \"metaphorical_statement\"\n        },\n        {\n          \"dimension\": \"authority\",\n          \"quote_text\": \"The Senate determines what advice is and the Senate determines that which is consent. And no nomination to the federal court can move forward without the Senate's advice and consent. It's the Senate's job then to evaluate the nominations of the President. And they can do so with or without hearings, with or without interviews.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"descriptive_statement\"\n        },\n        {\n          \"dimension\": \"subversion\",\n          \"quote_text\": \"But the Supreme Court, wrapped in the cloak of Marbury versus Madison and their imagination of what precedent and star decision might mean to them, decides that they can write words into the law. A Supreme Court writing law.\",\n          .9,\n          \"context_type\": \"critical_statement\"\n        },\n        {\n          \"dimension\": \"cheating\",\n          \"quote_text\": \"It's a constitutional and it fits the structure of our our United States Constitution along with the various state constitutions and the structure of the rule of law. But if a court wants to manufacture a new right, let alone a new command, that's wrong.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"analytical_statement\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":63162,"response_length":4251,"metadata":{"batch_id":"batch_e81cd765a7c5","mathematical_validation":true,"tokens_input":365,"tokens_output":473},"session_id":"20250805T190053Z_84e3de6e","timestamp":"2025-08-05T19:01:28.064280+00:00"}
