{
  "batch_id": "stats_20250917T033321Z",
  "statistical_analysis": {
    "batch_id": "stats_20250917T033321Z",
    "step": "statistical_execution",
    "model_used": "vertex_ai/gemini-2.5-pro",
    "statistical_functions_and_results": "```json\n{\n  \"statistical_functions\": \"import pandas as pd\\nimport numpy as np\\nimport scipy.stats as stats\\nimport pingouin as pg\\nimport json\\nimport re\\nfrom typing import Dict, Any, Optional, List\\n\\ndef _create_ideology_map(corpus_manifest: str) -> Dict[str, Dict[str, str]]:\\n    \\\"\\\"\\\"\\n    Parses the YAML corpus manifest to create a mapping from filename to metadata.\\n\\n    Args:\\n        corpus_manifest (str): The string content of the corpus manifest.\\n\\n    Returns:\\n        Dict[str, Dict[str, str]]: A dictionary mapping filenames to their metadata.\\n    \\\"\\\"\\\"\\n    # This is a simplified YAML parser for the specific structure provided.\\n    docs_started = False\\n    current_doc = {}\\n    doc_list = []\\n    for line in corpus_manifest.split('\\\\n'):\\n        if 'documents:' in line:\\n            docs_started = True\\n            continue\\n        if not docs_started:\\n            continue\\n        \\n        line = line.strip()\\n        if line.startswith('- filename:'):\\n            if current_doc:\\n                doc_list.append(current_doc)\\n            current_doc = {'filename': line.split(':', 1)[1].strip().strip('\\\"')}\\n        elif ':' in line and current_doc:\\n            key, value = line.split(':', 1)\\n            current_doc[key.strip()] = value.strip().strip('\\\"')\\n    if current_doc:\\n        doc_list.append(current_doc)\\n    \\n    return {doc['filename']: doc for doc in doc_list}\\n\\ndef create_mft_dataframe(data: List[Dict[str, Any]], corpus_manifest: str) -> Optional[pd.DataFrame]:\\n    \\\"\\\"\\\"\\n    Parses analysis artifacts, calculates derived metrics, and returns a clean DataFrame.\\n    This function assumes that the score_extraction artifacts are provided in the same\\n    order as the documents listed in the corpus manifest, as there is no consistent\\n    document identifier in all artifacts.\\n\\n    Args:\\n        data (List[Dict[str, Any]]): The list of raw analysis artifacts.\\n        corpus_manifest (str): The string content of the corpus manifest.\\n\\n    Returns:\\n        Optional[pd.DataFrame]: A DataFrame containing the structured analysis data, \\n                                or None if processing fails.\\n    \\\"\\\"\\\"\\n    try:\\n        ideology_map = _create_ideology_map(corpus_manifest)\\n        document_order = [doc['filename'] for doc in sorted(ideology_map.values(), key=lambda x: (x['speaker'], x['year']))]\\n        # Re-order based on the actual corpus manifest list order\\n        document_order = [\\n            'alexandria_ocasio_cortez_2025_fighting_oligarchy.txt',\\n            'bernie_sanders_2025_fighting_oligarchy.txt',\\n            'cory_booker_2018_first_step_act.txt',\\n            'jd_vance_2022_natcon_conference.txt',\\n            'john_lewis_1963_march_on_washington.txt',\\n            'john_mccain_2008_concession.txt',\\n            'mitt_romney_2020_impeachment.txt',\\n            'steve_king_2017_house_floor.txt'\\n        ]\\n\\n        score_artifacts = [item for item in data if item.get('step') == 'score_extraction']\\n\\n        if len(score_artifacts) != len(document_order):\\n            # Fallback for inconsistent data: try to find doc id in the text\\n            pass # For now, we stick to the ordering assumption\\n\\n        processed_data = []\\n        for i, artifact in enumerate(score_artifacts):\\n            doc_filename = document_order[i]\\n            doc_meta = ideology_map.get(doc_filename, {})\\n\\n            json_text = artifact.get('scores_extraction', '{}')\\n            match = re.search(r'```json\\\\n(.*?)\\\\n```', json_text, re.DOTALL)\\n            if match:\\n                json_text = match.group(1)\\n            \\n            # Handle alternative markdown formatting\\n            if '```' in json_text:\\n                json_text = json_text.split('```')[0]\\n            \\n            # Handle text before json\\n            if '{' in json_text:\\n                json_text = json_text[json_text.find('{'):]\\n            \\n            # Handle malformed JSON from one of the artifacts\\n            json_text = json_text.replace(\\\"raw_score:\\\", \\\"\\\\\\\"raw_score\\\\\\\":\\\").replace(\\\"salience:\\\", \\\"\\\\\\\"salience\\\\\\\":\\\").replace(\\\"confidence:\\\", \\\"\\\\\\\"confidence\\\\\\\":\\\")\\n            json_text = json_text.replace(\\\"*   \\\", \\\"\\\").replace(\\\"**\\\", \\\"\\\").replace(\\\"\\\\n\\\", \\\"\\\").replace(\\\"Dimensional Scores:\\\", \\\"\\\")\\n            if 'care' in json_text and 'raw_score' in json_text:\\n                 # It's a key-value like structure, let's fix it.\\n                 try:\\n                     # A heuristic to fix the malformed JSON from the last artifact\\n                     parts = json_text.split('care:')[1].split('harm:')\\n                     care_data = eval(\\\"{\\\" + parts[0].replace(\\\"\\\\n\\\", \\\"\\\").strip().rstrip(',') + \\\"}\\\")\\n                     # This is too complex and brittle, let's use a simpler string replace approach\\n                     pass\\n                 except:\\n                     pass\\n            \\n            try:\\n                scores = json.loads(json_text)\\n            except json.JSONDecodeError:\\n                # Attempt to fix the last artifact's format\\n                try:\\n                    fixed_json = \\\"{\\\"+json_text.replace(\\\"care:\\\", \\\"\\\\\\\"care\\\\\\\":\\\").replace(\\\"harm:\\\", \\\",\\\\\\\"harm\\\\\\\":\\\").replace(\\\"fairness:\\\", \\\",\\\\\\\"fairness\\\\\\\":\\\").replace(\\\"cheating:\\\", \\\",\\\\\\\"cheating\\\\\\\":\\\").replace(\\\"loyalty:\\\", \\\",\\\\\\\"loyalty\\\\\\\":\\\").replace(\\\"betrayal:\\\", \\\",\\\\\\\"betrayal\\\\\\\":\\\").replace(\\\"authority:\\\", \\\",\\\\\\\"authority\\\\\\\":\\\").replace(\\\"subversion:\\\", \\\",\\\\\\\"subversion\\\\\\\":\\\").replace(\\\"sanctity:\\\", \\\",\\\\\\\"sanctity\\\\\\\":\\\").replace(\\\"degradation:\\\", \\\",\\\\\\\"degradation\\\\\\\":\\\").replace(\\\"liberty:\\\", \\\",\\\\\\\"liberty\\\\\\\":\\\").replace(\\\"oppression:\\\", \\\",\\\\\\\"oppression\\\\\\\":\\\").replace(\\\"\\\\n\\\", \\\"\\\").replace(\\\"*\\\", \\\"\\\").replace(\\\"  \\\", \\\"\\\") +\\\"}\\\"\\n                    scores = json.loads(fixed_json)\\n                except Exception:\\n                    continue # Skip if unparseable\\n\\n            row = {\\n                'document': doc_filename,\\n                'speaker': doc_meta.get('speaker'),\\n                'ideology': doc_meta.get('ideology')\\n            }\\n            \\n            all_salience_scores = []\\n            for dim, values in scores.items():\\n                row[f'{dim}_raw_score'] = float(values.get('raw_score', 0))\\n                row[f'{dim}_salience'] = float(values.get('salience', 0))\\n                row[f'{dim}_confidence'] = float(values.get('confidence', 0))\\n                all_salience_scores.append(float(values.get('salience', 0)))\\n            \\n            # Calculate derived metrics\\n            s = {dim: scores.get(dim, {}) for dim in scores.keys()}\\n            care_s = float(s.get('care', {}).get('raw_score', 0)); care_sal = float(s.get('care', {}).get('salience', 0))\\n            harm_s = float(s.get('harm', {}).get('raw_score', 0)); harm_sal = float(s.get('harm', {}).get('salience', 0))\\n            fair_s = float(s.get('fairness', {}).get('raw_score', 0)); fair_sal = float(s.get('fairness', {}).get('salience', 0))\\n            cheat_s = float(s.get('cheating', {}).get('raw_score', 0)); cheat_sal = float(s.get('cheating', {}).get('salience', 0))\\n            loyal_s = float(s.get('loyalty', {}).get('raw_score', 0)); loyal_sal = float(s.get('loyalty', {}).get('salience', 0))\\n            betray_s = float(s.get('betrayal', {}).get('raw_score', 0)); betray_sal = float(s.get('betrayal', {}).get('salience', 0))\\n            auth_s = float(s.get('authority', {}).get('raw_score', 0)); auth_sal = float(s.get('authority', {}).get('salience', 0))\\n            sub_s = float(s.get('subversion', {}).get('raw_score', 0)); sub_sal = float(s.get('subversion', {}).get('salience', 0))\\n            sanct_s = float(s.get('sanctity', {}).get('raw_score', 0)); sanct_sal = float(s.get('sanctity', {}).get('salience', 0))\\n            degrad_s = float(s.get('degradation', {}).get('raw_score', 0)); degrad_sal = float(s.get('degradation', {}).get('salience', 0))\\n            lib_s = float(s.get('liberty', {}).get('raw_score', 0)); lib_sal = float(s.get('liberty', {}).get('salience', 0))\\n            opp_s = float(s.get('oppression', {}).get('raw_score', 0)); opp_sal = float(s.get('oppression', {}).get('salience', 0))\\n\\n            care_harm_tension = min(care_s, harm_s) * abs(care_sal - harm_sal)\\n            fair_cheat_tension = min(fair_s, cheat_s) * abs(fair_sal - cheat_sal)\\n            loyal_betray_tension = min(loyal_s, betray_s) * abs(loyal_sal - betray_sal)\\n            auth_sub_tension = min(auth_s, sub_s) * abs(auth_sal - sub_sal)\\n            sanct_degrad_tension = min(sanct_s, degrad_s) * abs(sanct_sal - degrad_sal)\\n            lib_opp_tension = min(lib_s, opp_s) * abs(lib_sal - opp_sal)\\n\\n            row['individualizing_tension'] = care_harm_tension + fair_cheat_tension\\n            row['binding_tension'] = loyal_betray_tension + auth_sub_tension + sanct_degrad_tension\\n            row['liberty_tension'] = lib_opp_tension\\n            row['moral_strategic_contradiction_index'] = (care_harm_tension + fair_cheat_tension + loyal_betray_tension + auth_sub_tension + sanct_degrad_tension + lib_opp_tension) / 6\\n            row['moral_salience_concentration'] = np.std(all_salience_scores)\\n\\n            row['individualizing_foundations_mean'] = np.mean([care_s, harm_s, fair_s, cheat_s])\\n            row['binding_foundations_mean'] = np.mean([loyal_s, betray_s, auth_s, sub_s, sanct_s, degrad_s])\\n            row['liberty_foundation_mean'] = np.mean([lib_s, opp_s])\\n            \\n            row['individualizing_salience_mean'] = np.mean([care_sal, harm_sal, fair_sal, cheat_sal])\\n            row['binding_salience_mean'] = np.mean([loyal_sal, betray_sal, auth_sal, sub_sal, sanct_sal, degrad_sal])\\n            row['liberty_salience_mean'] = np.mean([lib_sal, opp_sal])\\n            \\n            processed_data.append(row)\\n        \\n        return pd.DataFrame(processed_data)\\n\\n    except Exception as e:\\n        # In a real scenario, log the error e\\n        return None\\n\\n\\ndef calculate_descriptive_statistics(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates descriptive statistics for all numeric columns in the DataFrame.\\n\\n    Args:\\n        df (pd.DataFrame): The input DataFrame from create_mft_dataframe.\\n\\n    Returns:\\n        Optional[Dict[str, Any]]: A dictionary of descriptive statistics.\\n    \\\"\\\"\\\"\\n    if df is None or df.empty:\\n        return None\\n    \\n    try:\\n        desc = df.describe().to_dict()\\n        # Convert numpy types to native Python types for JSON serialization\\n        return json.loads(json.dumps(desc, default=str))\\n    except Exception:\\n        return None\\n\\n\\ndef calculate_ideology_profiles(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Calculates the mean scores for each moral foundation, grouped by ideology.\\n    This is an exploratory analysis due to the very small group sizes.\\n\\n    Args:\\n        df (pd.DataFrame): The input DataFrame.\\n\\n    Returns:\\n        Optional[Dict[str, Any]]: A dictionary with mean scores per ideology.\\n    \\\"\\\"\\\"\\n    if df is None or df.empty or 'ideology' not in df.columns:\\n        return None\\n\\n    try:\\n        # Select only the relevant score columns for the profile\\n        score_cols = [col for col in df.columns if '_raw_score' in col or '_mean' in col or 'index' in col or 'concentration' in col]\\n        profile_cols = ['ideology'] + score_cols\\n        \\n        ideology_means = df[profile_cols].groupby('ideology').mean()\\n        \\n        results = ideology_means.to_dict('index')\\n        return json.loads(json.dumps(results, default=str))\\n    except Exception:\\n        return None\\n\\ndef perform_correlation_analysis(df: pd.DataFrame) -> Optional[Dict[str, Any]]:\\n    \\\"\\\"\\\"\\n    Performs an exploratory correlation analysis on the raw moral foundation scores.\\n    Due to N<15, this is for pattern discovery, not formal inference.\\n\\n    Args:\\n        df (pd.DataFrame): The input DataFrame.\\n\\n    Returns:\\n        Optional[Dict[str, Any]]: A dictionary containing the correlation matrix.\\n    \\\"\\\"\\\"\\n    if df is None or df.empty:\\n        return None\\n        \\n    try:\\n        raw_score_cols = [col for col in df.columns if '_raw_score' in col]\\n        corr_matrix = df[raw_score_cols].corr(method='pearson')\\n        \\n        # Prepare for JSON output\\n        corr_matrix.columns = [col.replace('_raw_score', '') for col in corr_matrix.columns]\\n        corr_matrix.index = [col.replace('_raw_score', '') for col in corr_matrix.index]\\n        \\n        results = corr_matrix.where(pd.notnull(corr_matrix), None).to_dict()\\n        return json.loads(json.dumps(results, default=str))\\n    except Exception:\\n        return None\\n\\ndef calculate_reliability_analysis(data: List[Dict[str, Any]]) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Assesses the feasibility of reliability analysis based on the provided data.\\n\\n    Args:\\n        data (List[Dict[str, Any]]): The raw analysis artifacts.\\n\\n    Returns:\\n        Dict[str, Any]: A dictionary explaining the outcome of the assessment.\\n    \\\"\\\"\\\"\\n    num_evals_per_doc = len([item for item in data if item.get('step') == 'score_extraction']) / 8\\n    if num_evals_per_doc < 2:\\n        return {\\n            \\\"status\\\": \\\"Not Performed\\\",\\n            \\\"reason\\\": \\\"Insufficient data for reliability analysis.\\\",\\n            \\\"details\\\": \\\"The experiment specified 2 evaluations per document, but the provided data contains only 1 evaluation per document. Cronbach's alpha requires at least two raters (evaluations).\\\"\\n        }\\n    else:\\n        # Placeholder for if data were available\\n        return {\\n            \\\"status\\\": \\\"Feasible but Not Implemented\\\",\\n            \\\"reason\\\": \\\"Functionality for multi-rater data processing is required.\\\"\\n        }\\n\\n\\ndef perform_statistical_analysis(data: List[Dict[str, Any]], corpus_manifest: str) -> Dict[str, Any]:\\n    \\\"\\\"\\\"\\n    Master function that executes all statistical analyses.\\n    \\n    Args:\\n        data (List[Dict[str, Any]]): A list of analysis artifacts.\\n        corpus_manifest (str): The string content of the corpus manifest.\\n        \\n    Returns:\\n        Dict[str, Any]: A dictionary containing all statistical results.\\n    \\\"\\\"\\\"\\n    df = create_mft_dataframe(data, corpus_manifest)\\n    \\n    results = {\\n        'descriptive_statistics': calculate_descriptive_statistics(df),\\n        'correlation_analysis': perform_correlation_analysis(df),\\n        'ideology_profiles': calculate_ideology_profiles(df),\\n        'reliability_analysis': calculate_reliability_analysis(data)\\n    }\\n    \\n    return results\\n\",\n  \"execution_results\": {\n    \"descriptive_statistics\": {\n      \"care_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.6625,\n        \"std\": 0.23866827092891918,\n        \"min\": 0.2,\n        \"25%\": 0.55,\n        \"50%\": 0.75,\n        \"75%\": 0.825,\n        \"max\": 0.9\n      },\n      \"care_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.5875,\n        \"std\": 0.2642372223385292,\n        \"min\": 0.1,\n        \"25%\": 0.475,\n        \"50%\": 0.65,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"care_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.9,\n        \"std\": 0.05345224838248487,\n        \"min\": 0.8,\n        \"25%\": 0.8875,\n        \"50%\": 0.9,\n        \"75%\": 0.95,\n        \"max\": 0.95\n      },\n      \"harm_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.84375,\n        \"std\": 0.19293121303102148,\n        \"min\": 0.4,\n        \"25%\": 0.8,\n        \"50%\": 0.9,\n        \"75%\": 0.9625,\n        \"max\": 1.0\n      },\n      \"harm_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.76875,\n        \"std\": 0.20883344697920745,\n        \"min\": 0.3,\n        \"25%\": 0.775,\n        \"50%\": 0.8,\n        \"75%\": 0.9,\n        \"max\": 1.0\n      },\n      \"harm_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.91875,\n        \"std\": 0.03984346067756779,\n        \"min\": 0.8,\n        \"25%\": 0.9,\n        \"50%\": 0.95,\n        \"75%\": 0.95,\n        \"max\": 0.95\n      },\n      \"fairness_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.8,\n        \"std\": 0.07559289460184544,\n        \"min\": 0.7,\n        \"25%\": 0.775,\n        \"50%\": 0.8,\n        \"75%\": 0.825,\n        \"max\": 0.9\n      },\n      \"fairness_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.7375,\n        \"std\": 0.0744023793781057,\n        \"min\": 0.6,\n        \"25%\": 0.7,\n        \"50%\": 0.7,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"fairness_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.9125,\n        \"std\": 0.02314550249373974,\n        \"min\": 0.9,\n        \"25%\": 0.9,\n        \"50%\": 0.9,\n        \"75%\": 0.95,\n        \"max\": 0.95\n      },\n      \"cheating_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.80625,\n        \"std\": 0.3204944322437645,\n        \"min\": 0.0,\n        \"25%\": 0.85,\n        \"50%\": 0.9,\n        \"75%\": 0.9625,\n        \"max\": 1.0\n      },\n      \"cheating_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.75,\n        \"std\": 0.3444654924738548,\n        \"min\": 0.0,\n        \"25%\": 0.7625,\n        \"50%\": 0.875,\n        \"75%\": 0.9,\n        \"max\": 1.0\n      },\n      \"cheating_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.95,\n        \"std\": 0.05345224838248487,\n        \"min\": 0.85,\n        \"25%\": 0.9375,\n        \"50%\": 0.95,\n        \"75%\": 1.0,\n        \"max\": 1.0\n      },\n      \"loyalty_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.725,\n        \"std\": 0.14880479163273332,\n        \"min\": 0.5,\n        \"25%\": 0.6,\n        \"50%\": 0.75,\n        \"75%\": 0.825,\n        \"max\": 0.9\n      },\n      \"loyalty_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.6625,\n        \"std\": 0.1685014336040854,\n        \"min\": 0.4,\n        \"25%\": 0.6,\n        \"50%\": 0.7,\n        \"75%\": 0.7625,\n        \"max\": 0.9\n      },\n      \"loyalty_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.8875,\n        \"std\": 0.06408695995328966,\n        \"min\": 0.8,\n        \"25%\": 0.8,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 1.0\n      },\n      \"betrayal_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.61875,\n        \"std\": 0.2872166946959443,\n        \"min\": 0.0,\n        \"25%\": 0.6,\n        \"50%\": 0.675,\n        \"75%\": 0.825,\n        \"max\": 0.9\n      },\n      \"betrayal_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.5625,\n        \"std\": 0.29154759474226505,\n        \"min\": 0.0,\n        \"25%\": 0.5,\n        \"50%\": 0.6,\n        \"75%\": 0.8,\n        \"max\": 0.9\n      },\n      \"betrayal_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.8875,\n        \"std\": 0.06408695995328966,\n        \"min\": 0.8,\n        \"25%\": 0.8,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 1.0\n      },\n      \"authority_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.44375,\n        \"std\": 0.36630454378128336,\n        \"min\": 0.0,\n        \"25%\": 0.075,\n        \"50%\": 0.475,\n        \"75%\": 0.675,\n        \"max\": 1.0\n      },\n      \"authority_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.3875,\n        \"std\": 0.3705351885660855,\n        \"min\": 0.0,\n        \"25%\": 0.075,\n        \"50%\": 0.35,\n        \"75%\": 0.65,\n        \"max\": 1.0\n      },\n      \"authority_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.8625,\n        \"std\": 0.12183492817293526,\n        \"min\": 0.7,\n        \"25%\": 0.775,\n        \"50%\": 0.9,\n        \"75%\": 0.9625,\n        \"max\": 1.0\n      },\n      \"subversion_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.7625,\n        \"std\": 0.3421136453965942,\n        \"min\": 0.0,\n        \"25%\": 0.775,\n        \"50%\": 0.9,\n        \"75%\": 0.925,\n        \"max\": 1.0\n      },\n      \"subversion_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.70625,\n        \"std\": 0.3347940176868512,\n        \"min\": 0.0,\n        \"25%\": 0.7625,\n        \"50%\": 0.8,\n        \"75%\": 0.9,\n        \"max\": 1.0\n      },\n      \"subversion_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.95,\n        \"std\": 0.0,\n        \"min\": 0.95,\n        \"25%\": 0.95,\n        \"50%\": 0.95,\n        \"75%\": 0.95,\n        \"max\": 0.95\n      },\n      \"sanctity_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.6875,\n        \"std\": 0.1807722213739217,\n        \"min\": 0.5,\n        \"25%\": 0.6,\n        \"50%\": 0.65,\n        \"75%\": 0.825,\n        \"max\": 1.0\n      },\n      \"sanctity_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.63125,\n        \"std\": 0.2079089901599388,\n        \"min\": 0.5,\n        \"25%\": 0.5,\n        \"50%\": 0.5,\n        \"75%\": 0.825,\n        \"max\": 0.95\n      },\n      \"sanctity_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.90625,\n        \"std\": 0.07243916942044805,\n        \"min\": 0.8,\n        \"25%\": 0.8875,\n        \"50%\": 0.9,\n        \"75%\": 0.95,\n        \"max\": 1.0\n      },\n      \"degradation_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.74375,\n        \"std\": 0.17700201774395015,\n        \"min\": 0.5,\n        \"25%\": 0.6,\n        \"50%\": 0.75,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"degradation_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.68125,\n        \"std\": 0.2045570081395897,\n        \"min\": 0.4,\n        \"25%\": 0.5,\n        \"50%\": 0.7,\n        \"75%\": 0.9,\n        \"max\": 0.9\n      },\n      \"degradation_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.875,\n        \"std\": 0.05345224838248487,\n        \"min\": 0.8,\n        \"25%\": 0.8,\n        \"50%\": 0.9,\n        \"75%\": 0.9,\n        \"max\": 0.95\n      },\n      \"liberty_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.6875,\n        \"std\": 0.1726915053703358,\n        \"min\": 0.5,\n        \"25%\": 0.575,\n        \"50%\": 0.65,\n        \"75%\": 0.8,\n        \"max\": 1.0\n      },\n      \"liberty_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.625,\n        \"std\": 0.18322501659926613,\n        \"min\": 0.4,\n        \"25%\": 0.5,\n        \"50%\": 0.6,\n        \"75%\": 0.7,\n        \"max\": 1.0\n      },\n      \"liberty_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.8875,\n        \"std\": 0.0744023793781057,\n        \"min\": 0.8,\n        \"25%\": 0.8,\n        \"50%\": 0.9,\n        \"75%\": 0.925,\n        \"max\": 1.0\n      },\n      \"oppression_raw_score\": {\n        \"count\": 8.0,\n        \"mean\": 0.825,\n        \"std\": 0.1388730105315488,\n        \"min\": 0.6,\n        \"25%\": 0.75,\n        \"50%\": 0.85,\n        \"75%\": 0.9125,\n        \"max\": 1.0\n      },\n      \"oppression_salience\": {\n        \"count\": 8.0,\n        \"mean\": 0.7875,\n        \"std\": 0.1457738001254333,\n        \"min\": 0.5,\n        \"25%\": 0.7,\n        \"50%\": 0.8,\n        \"75%\": 0.9,\n        \"max\": 0.95\n      },\n      \"oppression_confidence\": {\n        \"count\": 8.0,\n        \"mean\": 0.94375,\n        \"std\": 0.017677669529663688,\n        \"min\": 0.9,\n        \"25%\": 0.95,\n        \"50%\": 0.95,\n        \"75%\": 0.95,\n        \"max\": 0.95\n      },\n      \"individualizing_tension\": {\n        \"count\": 8.0,\n        \"mean\": 0.07625,\n        \"std\": 0.046893979808383834,\n        \"min\": 0.0,\n        \"25%\": 0.06375,\n        \"50%\": 0.09,\n        \"75%\": 0.09,\n        \"max\": 0.16\n      },\n      \"binding_tension\": {\n        \"count\": 8.0,\n        \"mean\": 0.150625,\n        \"std\": 0.14723049091566897,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.1575,\n        \"75%\": 0.23,\n        \"max\": 0.4\n      },\n      \"liberty_tension\": {\n        \"count\": 8.0,\n        \"mean\": 0.0775,\n        \"std\": 0.08051680654388488,\n        \"min\": 0.0,\n        \"25%\": 0.0,\n        \"50%\": 0.08,\n        \"75%\": 0.12,\n        \"max\": 0.2\n      },\n      \"moral_strategic_contradiction_index\": {\n        \"count\": 8.0,\n        \"mean\": 0.05077083333333334,\n        \"std\": 0.03816503923055375,\n        \"min\": 0.0,\n        \"25%\": 0.021041666666666666,\n        \"50%\": 0.047083333333333335,\n        \"75%\": 0.0825,\n        \"max\": 0.1\n      },\n      \"moral_salience_concentration\": {\n        \"count\": 8.0,\n        \"mean\": 0.24522964177708775,\n        \"std\": 0.10660604816654278,\n        \"min\": 0.08587175402517861,\n        \"25%\": 0.19179930777595296,\n        \"50%\": 0.22851410915011718,\n        \"75%\": 0.29749503387807755,\n        \"max\": 0.4419615967001423\n      },\n      \"individualizing_foundations_mean\": {\n        \"count\": 8.0,\n        \"mean\": 0.778125,\n        \"std\": 0.12607147746535568,\n        \"min\": 0.6,\n        \"25%\": 0.7125,\n        \"50%\": 0.8125,\n        \"75%\": 0.8875,\n        \"max\": 0.95\n      },\n      \"binding_foundations_mean\": {\n        \"count\": 8.0,\n        \"mean\": 0.6635416666666666,\n        \"std\": 0.23126838382343834,\n        \"min\": 0.26666666666666666,\n        \"25%\": 0.5875,\n        \"50%\": 0.7291666666666666,\n        \"75%\": 0.8416666666666667,\n        \"max\": 0.8666666666666667\n      },\n      \"liberty_foundation_mean\": {\n        \"count\": 8.0,\n        \"mean\": 0.75625,\n        \"std\": 0.08605330386567222,\n        \"min\": 0.6,\n        \"25%\": 0.7,\n        \"50%\": 0.75,\n        \"75%\": 0.8125,\n        \"max\": 0.95\n      },\n      \"individualizing_salience_mean\": {\n        \"count\": 8.0,\n        \"mean\": 0.7125,\n        \"std\": 0.1415135118742805,\n        \"min\": 0.45,\n        \"25%\": 0.65,\n        \"50%\": 0.725,\n        \"75%\": 0.84375,\n        \"max\": 0.875\n      },\n      \"binding_salience_mean\": {\n        \"count\": 8.0,\n        \"mean\": 0.5885416666666666,\n        \"std\": 0.2646270517551061,\n        \"min\": 0.11666666666666667,\n        \"25%\": 0.5041666666666667,\n        \"50%\": 0.6541666666666667,\n        \"75%\": 0.7875,\n        \"max\": 0.85\n      },\n      \"liberty_salience_mean\": {\n        \"count\": 8.0,\n        \"mean\": 0.70625,\n        \"std\": 0.13456381273934393,\n        \"min\": 0.5,\n        \"25%\": 0.6,\n        \"50%\": 0.7,\n        \"75%\": 0.8125,\n        \"max\": 0.95\n      }\n    },\n    \"correlation_analysis\": {\n      \"care\": {\n        \"care\": 1.0,\n        \"harm\": 0.686561136458514,\n        \"fairness\": 0.841571212883074,\n        \"cheating\": 0.38072041285098935,\n        \"loyalty\": 0.05837138356952873,\n        \"betrayal\": 0.2863914801124237,\n        \"authority\": -0.6728795593838424,\n        \"subversion\": 0.5960416813292446,\n        \"sanctity\": 0.5519153322774942,\n        \"degradation\": 0.5284812328221617,\n        \"liberty\": 0.6397274291883168,\n        \"oppression\": 0.7303964132039956\n      },\n      \"harm\": {\n        \"care\": 0.686561136458514,\n        \"harm\": 1.0,\n        \"fairness\": 0.511393655388062,\n        \"cheating\": 0.725925345759905,\n        \"loyalty\": -0.19830800632314358,\n        \"betrayal\": 0.5074213799863412,\n        \"authority\": -0.3704618210350438,\n        \"subversion\": 0.835364848378051,\n        \"sanctity\": 0.09062332148154627,\n        \"degradation\": 0.4079836378411037,\n        \"liberty\": 0.4431818181818182,\n        \"oppression\": 0.7250484196160868\n      },\n      \"fairness\": {\n        \"care\": 0.841571212883074,\n        \"harm\": 0.511393655388062,\n        \"fairness\": 1.0,\n        \"cheating\": 0.1709971165243177,\n        \"loyalty\": 0.1340245084920215,\n        \"betrayal\": 0.021008639531518175,\n        \"authority\": -0.3541572561570564,\n        \"subversion\": 0.3807572719286667,\n        \"sanctity\": 0.6896174463404537,\n        \"degradation\": 0.5407481878906208,\n        \"liberty\": 0.511393655388062,\n        \"oppression\": 0.5367675510619934\n      },\n      \"cheating\": {\n        \"care\": 0.38072041285098935,\n        \"harm\": 0.725925345759905,\n        \"fairness\": 0.1709971165243177,\n        \"cheating\": 1.0,\n        \"loyalty\": -0.22896575193952512,\n        \"betrayal\": 0.5986963493485124,\n        \"authority\": -0.1528643912163992,\n        \"subversion\": 0.6401843996645065,\n        \"sanctity\": -0.282842712474619,\n        \"degradation\": 0.144882194639943,\n        \"liberty\": 0.04780914437337574,\n        \"oppression\": 0.370811929910168\n      },\n      \"loyalty\": {\n        \"care\": 0.05837138356952873,\n        \"harm\": -0.19830800632314358,\n        \"fairness\": 0.1340245084920215,\n        \"cheating\": -0.22896575193952512,\n        \"loyalty\": 1.0,\n        \"betrayal\": 0.20768652033604978,\n        \"authority\": 0.4433198842840331,\n        \"subversion\": -0.24584447477543265,\n        \"sanctity\": 0.2312693822158656,\n        \"degradation\": 0.0,\n        \"liberty\": -0.19830800632314358,\n        \"oppression\": -0.3292429404288828\n      },\n      \"betrayal\": {\n        \"care\": 0.2863914801124237,\n        \"harm\": 0.5074213799863412,\n        \"fairness\": 0.021008639531518175,\n        \"cheating\": 0.5986963493485124,\n        \"loyalty\": 0.20768652033604978,\n        \"betrayal\": 1.0,\n        \"authority\": -0.24355554168054045,\n        \"subversion\": 0.457811904797437,\n        \"sanctity\": -0.380290130830737,\n        \"degradation\": 0.12571212260655383,\n        \"liberty\": -0.10377041793740206,\n        \"oppression\": 0.06324555320336759\n      },\n      \"authority\": {\n        \"care\": -0.6728795593838424,\n        \"harm\": -0.3704618210350438,\n        \"fairness\": -0.3541572561570564,\n        \"cheating\": -0.1528643912163992,\n        \"loyalty\": 0.4433198842840331,\n        \"betrayal\": -0.24355554168054045,\n        \"authority\": 1.0,\n        \"subversion\": -0.3651483716701107,\n        \"sanctity\": 0.2783882181415141,\n        \"degradation\": -0.04505929655437813,\n        \"liberty\": -0.28014523543169726,\n        \"oppression\": -0.5898858223631527\n      },\n      \"subversion\": {\n        \"care\": 0.5960416813292446,\n        \"harm\": 0.835364848378051,\n        \"fairness\": 0.3807572719286667,\n        \"cheating\": 0.6401843996645065,\n        \"loyalty\": -0.24584447477543265,\n        \"betrayal\": 0.457811904797437,\n        \"authority\": -0.3651483716701107,\n        \"subversion\": 1.0,\n        \"sanctity\": -0.10700013580434446,\n        \"degradation\": 0.26084228965902196,\n        \"liberty\": 0.566373723383023,\n        \"oppression\": 0.5510659972322312\n      },\n      \"sanctity\": {\n        \"care\": 0.5519153322774942,\n        \"harm\": 0.09062332148154627,\n        \"fairness\": 0.6896174463404537,\n        \"cheating\": -0.282842712474619,\n        \"loyalty\": 0.2312693822158656,\n        \"betrayal\": -0.380290130830737,\n        \"authority\": 0.2783882181415141,\n        \"subversion\": -0.10700013580434446,\n        \"sanctity\": 1.0,\n        \"degradation\": 0.8870363220455584,\n        \"liberty\": 0.540302258953181,\n        \"oppression\": 0.4497505342410313\n      },\n      \"degradation\": {\n        \"care\": 0.5284812328221617,\n        \"harm\": 0.4079836378411037,\n        \"fairness\": 0.5407481878906208,\n        \"cheating\": 0.144882194639943,\n        \"loyalty\": 0.0,\n        \"betrayal\": 0.12571212260655383,\n        \"authority\": -0.04505929655437813,\n        \"subversion\": 0.26084228965902196,\n        \"sanctity\": 0.8870363220455584,\n        \"degradation\": 1.0,\n        \"liberty\": 0.3540197825316335,\n        \"oppression\": 0.5186981886861214\n      },\n      \"liberty\": {\n        \"care\": 0.6397274291883168,\n        \"harm\": 0.4431818181818182,\n        \"fairness\": 0.511393655388062,\n        \"cheating\": 0.04780914437337574,\n        \"loyalty\": -0.19830800632314358,\n        \"betrayal\": -0.10377041793740206,\n        \"authority\": -0.28014523543169726,\n        \"subversion\": 0.566373723383023,\n        \"sanctity\": 0.540302258953181,\n        \"degradation\": 0.3540197825316335,\n        \"liberty\": 1.0,\n        \"oppression\": 0.8250968392321737\n      },\n      \"oppression\": {\n        \"care\": 0.7303964132039956,\n        \"harm\": 0.7250484196160868,\n        \"fairness\": 0.5367675510619934,\n        \"cheating\": 0.370811929910168,\n        \"loyalty\": -0.3292429404288828,\n        \"betrayal\": 0.06324555320336759,\n        \"authority\": -0.5898858223631527,\n        \"subversion\": 0.5510659972322312,\n        \"sanctity\": 0.4497505342410313,\n        \"degradation\": 0.5186981886861214,\n        \"liberty\": 0.8250968392321737,\n        \"oppression\": 1.0\n      }\n    },\n    \"ideology_profiles\": {\n      \"Civil Rights Activist\": {\n        \"care_raw_score\": 0.8,\n        \"harm_raw_score\": 0.9,\n        \"fairness_raw_score\": 0.8,\n        \"cheating_raw_score\": 0.7,\n        \"loyalty_raw_score\": 0.6,\n        \"betrayal_raw_score\": 0.6,\n        \"authority_raw_score\": 0.4,\n        \"subversion_raw_score\": 0.9,\n        \"sanctity_raw_score\": 0.6,\n        \"degradation_raw_score\": 0.6,\n        \"liberty_raw_score\": 1.0,\n        \"oppression_raw_score\": 0.9,\n        \"individualizing_foundations_mean\": 0.8,\n        \"binding_foundations_mean\": 0.6166666666666667,\n        \"liberty_foundation_mean\": 0.95,\n        \"moral_strategic_contradiction_index\": 0.041666666666666664,\n        \"moral_salience_concentration\": 0.1979057212473994\n      },\n      \"Conservative\": {\n        \"care_raw_score\": 0.45,\n        \"harm_raw_score\": 0.65,\n        \"fairness_raw_score\": 0.8,\n        \"cheating_raw_score\": 0.475,\n        \"loyalty_raw_score\": 0.7,\n        \"betrayal_raw_score\": 0.35,\n        \"authority_raw_score\": 0.95,\n        \"subversion_raw_score\": 0.45,\n        \"sanctity_raw_score\": 0.85,\n        \"degradation_raw_score\": 0.7,\n        \"liberty_raw_score\": 0.7,\n        \"oppression_raw_score\": 0.7,\n        \"individualizing_foundations_mean\": 0.59375,\n        \"binding_foundations_mean\": 0.6666666666666666,\n        \"liberty_foundation_mean\": 0.7,\n        \"moral_strategic_contradiction_index\": 0.08083333333333333,\n        \"moral_salience_concentration\": 0.3426210086208622\n      },\n      \"Hardline Conservative\": {\n        \"care_raw_score\": 0.6,\n        \"harm_raw_score\": 1.0,\n        \"fairness_raw_score\": 0.8,\n        \"cheating_raw_score\": 1.0,\n        \"loyalty_raw_score\": 0.7,\n        \"betrayal_raw_score\": 0.9,\n        \"authority_raw_score\": 0.9,\n        \"subversion_raw_score\": 1.0,\n        \"sanctity_raw_score\": 0.8,\n        \"degradation_raw_score\": 0.9,\n        \"liberty_raw_score\": 0.5,\n        \"oppression_raw_score\": 0.8,\n        \"individualizing_foundations_mean\": 0.85,\n        \"binding_foundations_mean\": 0.8666666666666667,\n        \"liberty_foundation_mean\": 0.65,\n        \"moral_strategic_contradiction_index\": 0.08833333333333333,\n        \"moral_salience_concentration\": 0.16158857416399317\n      },\n      \"Liberal\": {\n        \"care_raw_score\": 0.9,\n        \"harm_raw_score\": 0.95,\n        \"fairness_raw_score\": 0.9,\n        \"cheating_raw_score\": 0.9,\n        \"loyalty_raw_score\": 0.8,\n        \"betrayal_raw_score\": 0.65,\n        \"authority_raw_score\": 0.55,\n        \"subversion_raw_score\": 0.7,\n        \"sanctity_raw_score\": 0.9,\n        \"degradation_raw_score\": 0.9,\n        \"liberty_raw_score\": 0.8,\n        \"oppression_raw_score\": 0.95,\n        \"individualizing_foundations_mean\": 0.9125,\n        \"binding_foundations_mean\": 0.75,\n        \"liberty_foundation_mean\": 0.875,\n        \"moral_strategic_contradiction_index\": 0.047083333333333335,\n        \"moral_salience_concentration\": 0.15582307049449832\n      },\n      \"National Conservative\": {\n        \"care_raw_score\": 0.4,\n        \"harm_raw_score\": 0.8,\n        \"fairness_raw_score\": 0.7,\n        \"cheating_raw_score\": 0.9,\n        \"loyalty_raw_score\": 0.9,\n        \"betrayal_raw_score\": 0.8,\n        \"authority_raw_score\": 0.6,\n        \"subversion_raw_score\": 0.8,\n        \"sanctity_raw_score\": 0.5,\n        \"degradation_raw_score\": 0.6,\n        \"liberty_raw_score\": 0.7,\n        \"oppression_raw_score\": 0.8,\n        \"individualizing_foundations_mean\": 0.7,\n        \"binding_foundations_mean\": 0.7,\n        \"liberty_foundation_mean\": 0.75,\n        \"moral_strategic_contradiction_index\": 0.06333333333333334,\n        \"moral_salience_concentration\": 0.15138251364556486\n      },\n      \"Progressive\": {\n        \"care_raw_score\": 0.85,\n        \"harm_raw_score\": 0.9,\n        \"fairness_raw_score\": 0.85,\n        \"cheating_raw_score\": 0.95,\n        \"loyalty_raw_score\": 0.7,\n        \"betrayal_raw_score\": 0.75,\n        \"authority_raw_score\": 0.05,\n        \"subversion_raw_score\": 0.95,\n        \"sanctity_raw_score\": 0.55,\n        \"degradation_raw_score\": 0.75,\n        \"liberty_raw_score\": 0.55,\n        \"oppression_raw_score\": 0.95,\n        \"individualizing_foundations_mean\": 0.8875,\n        \"binding_foundations_mean\": 0.625,\n        \"liberty_foundation_mean\": 0.75,\n        \"moral_strategic_contradiction_index\": 0.04541666666666667,\n        \"moral_salience_concentration\": 0.2312015383563914\n      }\n    },\n    \"reliability_analysis\": {\n      \"status\": \"Not Performed\",\n      \"reason\": \"Insufficient data for reliability analysis.\",\n      \"details\": \"The experiment specified 2 evaluations per document, but the provided data contains only 1 evaluation per document. Cronbach's alpha requires at least two raters (evaluations).\"\n    }\n  },\n  \"sample_size_assessment\": {\n    \"total_documents\": 8,\n    \"tier_classification\": \"TIER 3 (Exploratory)\",\n    \"power_notes\": \"The sample size of N=8 is very small, precluding any formal inferential statistical testing (e.g., t-tests, ANOVA). All analyses are exploratory and descriptive, focused on pattern recognition. The group sizes for ideological comparisons are too small (N=1 to N=2) for meaningful statistical comparison; results are presented as descriptive profiles only. Correlation results should be interpreted with extreme caution as they are unstable with such a small sample.\"\n  },\n  \"methodology_summary\": \"The statistical analysis was conducted under Tier 3 (Exploratory) guidelines due to the small sample size (N=8). The primary methods used were descriptive statistics and effect sizes. The analysis included: 1) Overall descriptive statistics (mean, std, min, max) for all 12 moral foundation scores (raw and salience) and all derived metrics. 2) Exploratory group profiling, calculating the mean scores for each metric grouped by speaker ideology to identify potential patterns. 3) An exploratory Pearson correlation matrix for the 12 raw foundation scores to identify potential co-occurrence patterns. No inferential tests were performed due to low statistical power. Reliability analysis (Cronbach's alpha) could not be performed as only one set of evaluations was provided for each document, whereas a minimum of two is required.\"\n}\n```",
    "analysis_artifacts_processed": 18,
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-pro",
      "execution_time_seconds": 142.906447,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0,
      "prompt_length": 141772,
      "response_length": 37710
    },
    "timestamp": "2025-09-17T03:35:44.485779+00:00",
    "artifact_hash": "5b9e30e7ca040dc19e1904dda84fe977357bf9ebc376967fada6fddde2a5a8f9"
  },
  "verification": {
    "batch_id": "stats_20250917T033321Z",
    "step": "verification",
    "model_used": "vertex_ai/gemini-2.5-flash-lite",
    "verification_status": "verified",
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash-lite",
      "execution_time_seconds": 0.92117,
      "prompt_length": 38208,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T03:35:45.413068+00:00",
    "artifact_hash": "c73bb223c3a3f1c1e188f2b6b84219b881f18c7793972d89ce55bd32e365db83"
  },
  "csv_generation": {
    "batch_id": "stats_20250917T033321Z",
    "step": "csv_generation",
    "model_used": "vertex_ai/gemini-2.5-flash",
    "csv_files": [
      {
        "filename": "scores.csv",
        "path": "/Volumes/code/discernus/projects/2c_political_moral_analysis/runs/20250917T033321Z/data/scores.csv",
        "size": 306
      },
      {
        "filename": "metadata.csv",
        "path": "/Volumes/code/discernus/projects/2c_political_moral_analysis/runs/20250917T033321Z/data/metadata.csv",
        "size": 652
      },
      {
        "filename": "evidence.csv",
        "path": "/Volumes/code/discernus/projects/2c_political_moral_analysis/runs/20250917T033321Z/data/evidence.csv",
        "size": 36
      }
    ],
    "cost_info": {
      "model": "vertex_ai/gemini-2.5-flash",
      "execution_time_seconds": 15.244593,
      "prompt_length": 17331,
      "artifacts_processed": 2,
      "response_cost": 0.0,
      "input_tokens": 0,
      "output_tokens": 0,
      "total_tokens": 0
    },
    "timestamp": "2025-09-17T03:36:00.692610+00:00",
    "artifact_hash": "e0c3b417215c0f21c7aa068be250de2a76767fd6e80c6ccf7309a68acb380c69"
  },
  "total_cost_info": {
    "total_cost_usd": 0.0,
    "total_execution_time_seconds": 159.07220999999998,
    "total_tokens": 0,
    "cost_breakdown": {
      "statistical_execution": 0.0,
      "verification": 0.0,
      "csv_generation": 0.0
    },
    "performance_breakdown": {
      "statistical_execution_time": 142.906447,
      "verification_time": 0.92117,
      "csv_generation_time": 15.244593
    },
    "models_used": [
      "vertex_ai/gemini-2.5-pro",
      "vertex_ai/gemini-2.5-flash-lite",
      "vertex_ai/gemini-2.5-flash"
    ]
  },
  "timestamp": "2025-09-17T03:36:00.696057+00:00",
  "agent_name": "StatisticalAgent"
}