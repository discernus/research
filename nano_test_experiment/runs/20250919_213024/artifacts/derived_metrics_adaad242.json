{
  "analysis_id": "analysis_b6673e13",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport pandas as pd\n\n# Load the scores\nscores_data = [\n  {\n    \"document_id\": \"75223e7316afbb75\",\n    \"document_name\": \"document_0\",\n    \"positive_sentiment\": {\n      \"raw_score\": 1.0,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    }\n  },\n  {\n    \"document_id\": \"1818539970c2cbb3\",\n    \"document_name\": \"document_1\",\n    \"positive_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 1.0,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    }\n  }\n]\n\ndf = pd.DataFrame(scores_data)\n\n# Explode the nested 'positive_sentiment' and 'negative_sentiment' dictionaries\npositive_sentiment_df = pd.json_normalize(df['positive_sentiment'])\nnegative_sentiment_df = pd.json_normalize(df['negative_sentiment'])\n\n# Rename columns to avoid conflicts and add prefix\npositive_sentiment_df.columns = [f'pos_{col}' for col in positive_sentiment_df.columns]\nnegative_sentiment_df.columns = [f'neg_{col}' for col in negative_sentiment_df.columns]\n\n# Join the exploded columns back to the original DataFrame\ndf = pd.concat([df.drop(['positive_sentiment', 'negative_sentiment'], axis=1),\n                positive_sentiment_df,\n                negative_sentiment_df], axis=1)\n\n\n# Calculate derived metrics\n# 1. Sentiment Balance: (Positive Score - Negative Score)\ndf['sentiment_balance'] = df['pos_raw_score'] - df['neg_raw_score']\n\n# 2. Overall Sentiment Intensity: (Positive Score + Negative Score) / 2\ndf['overall_intensity'] = (df['pos_raw_score'] + df['neg_raw_score']) / 2\n\n# 3. Dominant Sentiment: 'Positive', 'Negative', or 'Neutral' based on balance\ndef get_dominant_sentiment(balance):\n    if balance > 0.2:\n        return 'Positive'\n    elif balance < -0.2:\n        return 'Negative'\n    else:\n        return 'Neutral'\n\ndf['dominant_sentiment'] = df['sentiment_balance'].apply(get_dominant_sentiment)\n\n# 4. Confidence Weighted Positive Score: Positive Raw Score * Positive Confidence\ndf['confidence_weighted_positive'] = df['pos_raw_score'] * df['pos_confidence']\n\n# 5. Confidence Weighted Negative Score: Negative Raw Score * Negative Confidence\ndf['confidence_weighted_negative'] = df['neg_raw_score'] * df['neg_confidence']\n\n# Select and format the derived metrics for output\nderived_metrics_output = df[[\n    'document_id',\n    'document_name',\n    'sentiment_balance',\n    'overall_intensity',\n    'dominant_sentiment',\n    'confidence_weighted_positive',\n    'confidence_weighted_negative'\n]].to_dict('records')\n\nprint(derived_metrics_output)\n```\n\n```json\n[\n  {\n    \"document_id\": \"75223e7316afbb75\",\n    \"document_name\": \"document_0\",\n    \"sentiment_balance\": 1.0,\n    \"overall_intensity\": 0.5,\n    \"dominant_sentiment\": \"Positive\",\n    \"confidence_weighted_positive\": 1.0,\n    \"confidence_weighted_negative\": 0.0\n  },\n  {\n    \"document_id\": \"1818539970c2cbb3\",\n    \"document_name\": \"document_1\",\n    \"sentiment_balance\": -1.0,\n    \"overall_intensity\": 0.5,\n    \"dominant_sentiment\": \"Negative\",\n    \"confidence_weighted_positive\": 0.0,\n    \"confidence_weighted_negative\": 1.0\n  }\n]\n```",
  "timestamp": "2025-09-19T21:31:12.003360+00:00"
}