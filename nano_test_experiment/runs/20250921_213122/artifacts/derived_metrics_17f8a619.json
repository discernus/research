{
  "analysis_id": "analysis_v2_analysis_20250921_173150_0",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-pro",
  "derived_metrics": "```python\nimport json\n\nscores = {\n  \"positive_sentiment\": 1.0,\n  \"negative_sentiment\": 0.0\n}\n\n# Derived Metric Calculation\nresults = {}\n\n# Overall Sentiment Polarity:\n# (Positive Sentiment - Negative Sentiment)\n# This metric indicates the net sentiment polarity of the text.\n# A value closer to 1.0 suggests predominantly positive sentiment.\n# A value closer to -1.0 suggests predominantly negative sentiment.\n# A value close to 0.0 suggests a neutral or mixed sentiment.\nresults[\"overall_sentiment_polarity\"] = scores.get(\"positive_sentiment\", 0.0) - scores.get(\"negative_sentiment\", 0.0)\n\n# Sentiment Intensity:\n# max(Positive Sentiment, Negative Sentiment)\n# This metric reflects the strength of the expressed sentiment, regardless of its polarity.\n# A higher value indicates a more intense emotional expression.\nresults[\"sentiment_intensity\"] = max(scores.get(\"positive_sentiment\", 0.0), scores.get(\"negative_sentiment\", 0.0))\n\n# Sentiment Balance Ratio:\n# (Positive Sentiment + epsilon) / (Negative Sentiment + epsilon)\n# This metric indicates the ratio of positive to negative sentiment.\n# Adding a small epsilon (e.g., 1e-9) to the denominator avoids division by zero.\n# A ratio > 1 suggests more positive than negative sentiment.\n# A ratio < 1 suggests more negative than positive sentiment.\nepsilon = 1e-9\nresults[\"sentiment_balance_ratio\"] = (scores.get(\"positive_sentiment\", 0.0) + epsilon) / (scores.get(\"negative_sentiment\", 0.0) + epsilon)\n\n# Dominant Sentiment:\n# Assign 'positive' if positive_sentiment > negative_sentiment, 'negative' otherwise.\n# If equal, it's considered 'neutral' for this derived metric.\n# For numeric output, we can represent this as:\n# 1.0 for positive, -1.0 for negative, 0.0 for neutral\nif scores.get(\"positive_sentiment\", 0.0) > scores.get(\"negative_sentiment\", 0.0):\n    results[\"dominant_sentiment_numeric\"] = 1.0\nelif scores.get(\"positive_sentiment\", 0.0) < scores.get(\"negative_sentiment\", 0.0):\n    results[\"dominant_sentiment_numeric\"] = -1.0\nelse:\n    results[\"dominant_sentiment_numeric\"] = 0.0\n\n# Sentiment Agreement:\n# min(Positive Sentiment, Negative Sentiment)\n# This metric indicates the degree to which both positive and negative sentiments are present.\n# A higher value suggests a more mixed sentiment where both aspects are detected.\nresults[\"sentiment_agreement\"] = min(scores.get(\"positive_sentiment\", 0.0), scores.get(\"negative_sentiment\", 0.0))\n\nprint(json.dumps({\"results\": results}, separators=(\",\", \":\")))\n```\n```json\n{\"results\":{\"overall_sentiment_polarity\":1.0,\"sentiment_intensity\":1.0,\"sentiment_balance_ratio\":inf,\"dominant_sentiment_numeric\":1.0,\"sentiment_agreement\":0.0}}\n```",
  "document_index": 0,
  "timestamp": "2025-09-21T21:32:09.221757+00:00"
}