{
  "analysis_id": "analysis_v2_analysis_20250921_174855_0",
  "step": "derived_metrics",
  "model_used": "vertex_ai/gemini-2.5-pro",
  "derived_metrics": "```python\nimport json\n\n# Provided scores\nscores = {\n  \"positive_sentiment\": 1.0,\n  \"negative_sentiment\": 0.0\n}\n\n# Calculate derived metrics\nresults = {}\n\n# Example: Overall Sentiment (Positive - Negative)\n# This metric can range from -1.0 (very negative) to 1.0 (very positive)\nresults[\"overall_sentiment\"] = scores[\"positive_sentiment\"] - scores[\"negative_sentiment\"]\n\n# Example: Sentiment Intensity (Sum of absolute scores, assuming they are independent indicators)\n# Note: The framework defines them as competing, so this might not be the most meaningful.\n# A more appropriate intensity might be max(positive, negative) if they are mutually exclusive.\n# Given the simple framework, we'll use the sum for demonstration.\nresults[\"sentiment_intensity\"] = scores[\"positive_sentiment\"] + scores[\"negative_sentiment\"]\n\n# Example: Purity (The degree to which sentiment is predominantly one-sided)\n# This metric will be high if one sentiment is dominant and the other is absent.\n# It's calculated as max(positive, negative) / (positive + negative) if sum > 0, else 0.\n# For this framework, it's more like max(positive, negative) as the sum can be > 1 if interpreted differently.\n# A simpler approach: if one score is high and the other is low, it's pure.\nif (scores[\"positive_sentiment\"] > 0.7 and scores[\"negative_sentiment\"] < 0.3) or \\\n   (scores[\"negative_sentiment\"] > 0.7 and scores[\"positive_sentiment\"] < 0.3):\n    results[\"sentiment_purity\"] = 1.0\nelif (scores[\"positive_sentiment\"] + scores[\"negative_sentiment\"]) > 0:\n    results[\"sentiment_purity\"] = max(scores[\"positive_sentiment\"], scores[\"negative_sentiment\"]) / (scores[\"positive_sentiment\"] + scores[\"negative_sentiment\"])\nelse:\n    results[\"sentiment_purity\"] = 0.0 # Handle case where both are 0\n\n# Another take on Purity: the dominant sentiment score, if it's clearly dominant\nresults[\"dominant_sentiment_strength\"] = max(scores[\"positive_sentiment\"], scores[\"negative_sentiment\"])\n\n\nprint(json.dumps({\"results\": results}, separators=(\",\", \":\")))\n```\n```json\n{\"results\":{\"overall_sentiment\":1.0,\"sentiment_intensity\":1.0,\"sentiment_purity\":1.0,\"dominant_sentiment_strength\":1.0}}\n```",
  "document_index": 0,
  "timestamp": "2025-09-21T21:49:14.095586+00:00"
}