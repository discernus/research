{
  "analysis_id": "analysis_1d764dbe",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\n# Provided scores\nscores_data = {\n  \"document_0\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.95,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 0.05,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    }\n  },\n  \"document_1\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 0.95,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    }\n  }\n}\n\n# Derived metrics calculation\nderived_metrics_results = {}\n\nfor doc_id, doc_scores in scores_data.items():\n    positive_score = doc_scores.get(\"positive_sentiment\", {}).get(\"raw_score\", 0.0)\n    negative_score = doc_scores.get(\"negative_sentiment\", {}).get(\"raw_score\", 0.0)\n\n    # Calculate a simple sentiment polarity score: (positive - negative)\n    sentiment_polarity = positive_score - negative_score\n\n    # Calculate a neutrality score: 1 - abs(positive - negative)\n    # This indicates how close the positive and negative scores are to each other.\n    # A score of 1.0 means they are equal (neutral), 0.0 means one dominates.\n    sentiment_neutrality = 1.0 - abs(positive_score - negative_score)\n\n    # Calculate an overall intensity score (sum of positive and negative scores)\n    # This could indicate how \"charged\" the text is, regardless of direction.\n    sentiment_intensity = positive_score + negative_score\n\n    derived_metrics_results[doc_id] = {\n        \"sentiment_polarity\": round(sentiment_polarity, 4),\n        \"sentiment_neutrality\": round(sentiment_neutrality, 4),\n        \"sentiment_intensity\": round(sentiment_intensity, 4)\n    }\n\n# Format the output\noutput = {\n    \"derived_metrics\": derived_metrics_results\n}\n\nprint(json.dumps(output, indent=2))\n```",
  "timestamp": "2025-09-19T22:01:42.792211+00:00"
}