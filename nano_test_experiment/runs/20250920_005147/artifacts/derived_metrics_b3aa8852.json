{
  "analysis_id": "analysis_49e58ebb",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\n# Scores for Document 1\nscores_doc1 = {\n    \"positive_sentiment\": {\"raw_score\": 0.95, \"salience\": 1.0, \"confidence\": 1.0},\n    \"negative_sentiment\": {\"raw_score\": 0.0, \"salience\": 0.0, \"confidence\": 1.0}\n}\n\n# Scores for Document 2\nscores_doc2 = {\n    \"positive_sentiment\": {\"raw_score\": 0.0, \"salience\": 0.0, \"confidence\": 1.0},\n    \"negative_sentiment\": {\"raw_score\": 0.95, \"salience\": 1.0, \"confidence\": 1.0}\n}\n\n# --- Derived Metrics Calculations ---\n\ndef calculate_sentiment_extremity(positive_score, negative_score):\n    \"\"\"Calculates the extremity of sentiment.\"\"\"\n    return abs(positive_score - negative_score)\n\ndef calculate_sentiment_balance(positive_score, negative_score):\n    \"\"\"Calculates the balance between positive and negative sentiment.\"\"\"\n    # Avoid division by zero if both scores are 0\n    if positive_score == 0 and negative_score == 0:\n        return 0.5 # Neutral balance\n    return positive_score / (positive_score + negative_score)\n\ndef calculate_overall_sentiment(positive_score, negative_score):\n    \"\"\"Calculates an overall sentiment score.\"\"\"\n    return positive_score - negative_score\n\n# --- Applying derived metrics to Document 1 ---\npos_score_doc1 = scores_doc1[\"positive_sentiment\"][\"raw_score\"]\nneg_score_doc1 = scores_doc1[\"negative_sentiment\"][\"raw_score\"]\n\nextremity_doc1 = calculate_sentiment_extremity(pos_score_doc1, neg_score_doc1)\nbalance_doc1 = calculate_sentiment_balance(pos_score_doc1, neg_score_doc1)\noverall_doc1 = calculate_overall_sentiment(pos_score_doc1, neg_score_doc1)\n\nderived_metrics_doc1 = {\n    \"sentiment_extremity\": {\"raw_score\": extremity_doc1},\n    \"sentiment_balance\": {\"raw_score\": balance_doc1},\n    \"overall_sentiment\": {\"raw_score\": overall_doc1}\n}\n\n# --- Applying derived metrics to Document 2 ---\npos_score_doc2 = scores_doc2[\"positive_sentiment\"][\"raw_score\"]\nneg_score_doc2 = scores_doc2[\"negative_sentiment\"][\"raw_score\"]\n\nextremity_doc2 = calculate_sentiment_extremity(pos_score_doc2, neg_score_doc2)\nbalance_doc2 = calculate_sentiment_balance(pos_score_doc2, neg_score_doc2)\noverall_doc2 = calculate_overall_sentiment(pos_score_doc2, neg_score_doc2)\n\nderived_metrics_doc2 = {\n    \"sentiment_extremity\": {\"raw_score\": extremity_doc2},\n    \"sentiment_balance\": {\"raw_score\": balance_doc2},\n    \"overall_sentiment\": {\"raw_score\": overall_doc2}\n}\n\n# --- Outputting the results ---\nresults = {\n    \"Document_0\": {\n        \"dimensional_scores\": scores_doc1,\n        \"derived_metrics\": derived_metrics_doc1\n    },\n    \"Document_1\": {\n        \"dimensional_scores\": scores_doc2,\n        \"derived_metrics\": derived_metrics_doc2\n    }\n}\n\nprint(json.dumps(results, indent=2))\n```",
  "timestamp": "2025-09-20T00:52:37.801725+00:00"
}