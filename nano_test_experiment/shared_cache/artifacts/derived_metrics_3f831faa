{
  "analysis_id": "analysis_12ed6a5a",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\nscores = {\n  \"negative_test.txt\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.0,\n      \"salience\": 0.0,\n      \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 1.0,\n      \"salience\": 1.0,\n      \"confidence\": 1.0\n    }\n  }\n}\n\nderived_metrics_results = {}\n\nfor filename, dimensions in scores.items():\n    positive_score = dimensions.get(\"positive_sentiment\", {}).get(\"raw_score\", 0.0)\n    negative_score = dimensions.get(\"negative_sentiment\", {}).get(\"raw_score\", 0.0)\n\n    # Derived Metric 1: Overall Sentiment Score (Positive - Negative)\n    overall_sentiment = positive_score - negative_score\n    derived_metrics_results[f\"{filename}_overall_sentiment\"] = overall_sentiment\n\n    # Derived Metric 2: Sentiment Balance (Positive / (Positive + Negative)) - handle division by zero\n    total_sentiment = positive_score + negative_score\n    sentiment_balance = (positive_score / total_sentiment) if total_sentiment > 0 else 0.5 # Neutral if no sentiment\n    derived_metrics_results[f\"{filename}_sentiment_balance\"] = sentiment_balance\n\n    # Derived Metric 3: Sentiment Intensity (Max of Positive and Negative)\n    sentiment_intensity = max(positive_score, negative_score)\n    derived_metrics_results[f\"{filename}_sentiment_intensity\"] = sentiment_intensity\n\nprint(json.dumps(derived_metrics_results, indent=2))\n```\n\n```json\n{\n  \"negative_test.txt_overall_sentiment\": -1.0,\n  \"negative_test.txt_sentiment_balance\": 0.0,\n  \"negative_test.txt_sentiment_intensity\": 1.0\n}\n```",
  "timestamp": "2025-09-16T19:40:05.115953+00:00"
}