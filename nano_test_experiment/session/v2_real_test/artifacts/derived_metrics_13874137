{
  "analysis_id": "analysis_6a1cabc4",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\n# Provided dimensional scores\nscores_doc0 = {\n    \"positive_sentiment\": {\n        \"raw_score\": 0.9,\n        \"salience\": 1.0,\n        \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n        \"raw_score\": 0.0,\n        \"salience\": 0.0,\n        \"confidence\": 1.0\n    }\n}\n\nscores_doc1 = {\n    \"positive_sentiment\": {\n        \"raw_score\": 0.0,\n        \"salience\": 0.0,\n        \"confidence\": 1.0\n    },\n    \"negative_sentiment\": {\n        \"raw_score\": 0.9,\n        \"salience\": 1.0,\n        \"confidence\": 1.0\n    }\n}\n\ndef calculate_derived_metrics(scores):\n    \"\"\"\n    Calculates derived metrics based on the provided dimensional scores.\n\n    Args:\n        scores (dict): A dictionary containing the dimensional scores.\n\n    Returns:\n        dict: A dictionary containing the calculated derived metrics.\n    \"\"\"\n    derived_metrics = {}\n\n    positive_score = scores.get(\"positive_sentiment\", {}).get(\"raw_score\", 0.0)\n    negative_score = scores.get(\"negative_sentiment\", {}).get(\"raw_score\", 0.0)\n\n    # 1. Sentiment Balance: (Positive - Negative)\n    # A higher score indicates a more positive sentiment, a lower score indicates a more negative sentiment.\n    sentiment_balance = positive_score - negative_score\n    derived_metrics[\"sentiment_balance\"] = round(sentiment_balance, 3)\n\n    # 2. Overall Sentiment Intensity: (Positive + Negative)\n    # This metric indicates the overall emotional intensity of the text, regardless of polarity.\n    overall_intensity = positive_score + negative_score\n    derived_metrics[\"overall_intensity\"] = round(overall_intensity, 3)\n\n    # 3. Dominant Sentiment: 'positive', 'negative', or 'neutral'\n    # Determines which sentiment is more prominent.\n    if positive_score > negative_score and positive_score > 0.5:\n        dominant_sentiment = \"positive\"\n    elif negative_score > positive_score and negative_score > 0.5:\n        dominant_sentiment = \"negative\"\n    else:\n        dominant_sentiment = \"neutral\"\n    derived_metrics[\"dominant_sentiment\"] = dominant_sentiment\n\n    return derived_metrics\n\n# Calculate derived metrics for each document\nderived_metrics_doc0 = calculate_derived_metrics(scores_doc0)\nderived_metrics_doc1 = calculate_derived_metrics(scores_doc1)\n\n# Store results\nresults = {\n    \"Document 0\": {\n        \"dimensional_scores\": scores_doc0,\n        \"derived_metrics\": derived_metrics_doc0\n    },\n    \"Document 1\": {\n        \"dimensional_scores\": scores_doc1,\n        \"derived_metrics\": derived_metrics_doc1\n    }\n}\n\nprint(json.dumps(results, indent=2))\n```",
  "timestamp": "2025-09-19T15:50:48.482739+00:00"
}