{
  "analysis_id": "analysis_a5228f66",
  "step": "derived_metrics_generation",
  "model_used": "vertex_ai/gemini-2.5-flash-lite",
  "derived_metrics": "```python\nimport json\n\nscores_data = {\n  \"document_id\": \"document_0\",\n  \"document_name\": \"Nano Test Corpus\",\n  \"dimensional_scores\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.1,\n      \"salience\": 0.1,\n      \"confidence\": 0.9\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 0.1,\n      \"salience\": 0.1,\n      \"confidence\": 0.9\n    }\n  }\n}\n\n# Calculate derived metrics\npositive_score = scores_data[\"dimensional_scores\"][\"positive_sentiment\"][\"raw_score\"]\nnegative_score = scores_data[\"dimensional_scores\"][\"negative_sentiment\"][\"raw_score\"]\n\n# 1. Sentiment Polarity: A single score representing overall sentiment.\n#    Formula: positive_sentiment - negative_sentiment\nsentiment_polarity = positive_score - negative_score\n\n# 2. Sentiment Intensity: A measure of how strong the sentiment is, regardless of direction.\n#    This could be the maximum of the two scores, or an average.\n#    Here, we'll use the maximum to indicate the dominant sentiment's strength.\nsentiment_intensity = max(positive_score, negative_score)\n\n# 3. Neutrality Score: Measures how close the sentiment is to neutral (0).\n#    Formula: 1 - abs(positive_sentiment - negative_sentiment)\nneutrality_score = 1 - abs(sentiment_polarity)\n\n# 4. Sentiment Contrast: Measures the difference between positive and negative sentiment.\n#    Formula: abs(positive_sentiment - negative_sentiment)\n#    This is the same as 1 - neutrality_score.\nsentiment_contrast = abs(positive_score - negative_score)\n\n# Store derived metrics\nderived_metrics = {\n    \"sentiment_polarity\": {\"value\": sentiment_polarity},\n    \"sentiment_intensity\": {\"value\": sentiment_intensity},\n    \"neutrality_score\": {\"value\": neutrality_score},\n    \"sentiment_contrast\": {\"value\": sentiment_contrast}\n}\n\n# Add derived metrics to the original scores_data\nscores_data[\"derived_metrics\"] = derived_metrics\n\nprint(json.dumps(scores_data, indent=2))\n```\n\n**Code Explanation:**\n\n1.  **Import `json`**: This is used to format the output nicely.\n2.  **Load Scores**: The provided `scores_data` JSON is loaded into a Python dictionary.\n3.  **Extract Scores**: The `positive_sentiment` and `negative_sentiment` raw scores are extracted for easier manipulation.\n4.  **Calculate Derived Metrics**:\n    *   **`sentiment_polarity`**: Calculated by subtracting the `negative_sentiment` from the `positive_sentiment`. A positive value indicates more positive sentiment, a negative value indicates more negative sentiment, and zero indicates neutrality.\n    *   **`sentiment_intensity`**: Calculated as the maximum of the `positive_sentiment` and `negative_sentiment` scores. This gives a sense of how strong the sentiment is, irrespective of whether it's positive or negative.\n    *   **`neutrality_score`**: Calculated by taking the absolute difference between the positive and negative scores and subtracting it from 1. A score close to 1 means the sentiment is balanced (neutral), while a score close to 0 means there's a strong leaning towards either positive or negative.\n    *   **`sentiment_contrast`**: Calculated as the absolute difference between the `positive_sentiment` and `negative_sentiment` scores. This directly quantifies how much the positive and negative sentiments diverge.\n5.  **Store Derived Metrics**: The calculated metrics are stored in a new dictionary called `derived_metrics`.\n6.  **Update Original Data**: The `derived_metrics` dictionary is added as a new key to the `scores_data` dictionary.\n7.  **Print Results**: The complete `scores_data` dictionary, now including the derived metrics, is printed in a formatted JSON string.\n\n**Execution Result:**\n\n```json\n{\n  \"document_id\": \"document_0\",\n  \"document_name\": \"Nano Test Corpus\",\n  \"dimensional_scores\": {\n    \"positive_sentiment\": {\n      \"raw_score\": 0.1,\n      \"salience\": 0.1,\n      \"confidence\": 0.9\n    },\n    \"negative_sentiment\": {\n      \"raw_score\": 0.1,\n      \"salience\": 0.1,\n      \"confidence\": 0.9\n    }\n  },\n  \"derived_metrics\": {\n    \"sentiment_polarity\": {\n      \"value\": 0.0\n    },\n    \"sentiment_intensity\": {\n      \"value\": 0.1\n    },\n    \"neutrality_score\": {\n      \"value\": 1.0\n    },\n    \"sentiment_contrast\": {\n      \"value\": 0.0\n    }\n  }\n}\n```",
  "timestamp": "2025-09-19T15:57:03.768583+00:00"
}