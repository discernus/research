{"log_type":"llm_interaction","interaction_hash":"501c24aa1bde964f","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: Trump_Inaugural_2017.txt\nHash: 333679e75571...\\n\n\n---\n\nBegin analysis now for batch `batch_999433bae3b8`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```json\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"populist_discourse_analysis_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis performed by applying the POPULIST DISCOURSE ANALYSIS FRAMEWORK (PDAF) v7.3. The analysis followed a step-by-step approach focusing on core anchors, then mechanisms, and finally boundary distinctions. Emphasis was placed on identifying the underlying concepts and semantic nuances within the text rather than literal keyword matching.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"Trump_Inaugural_2017.txt\",\n      \"dimensional_scores\": {\n        \"manichaean_people_elite_framing\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"crisis_restoration_narrative\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"popular_sovereignty_claims\": {\n          \"raw_score\": 1.9,\n          \"salience\": 0.95,\n          \"confidence\": 0.95\n        },\n        \"anti_pluralist_exclusion\": {\n          \"raw_score\": 1.0,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        },\n        \"elite_conspiracy_systemic_corruption\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"authenticity_vs_political_class\": {\n          \"raw_score\": 1.9,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"homogeneous_people_construction\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"nationalist_exclusion\": {\n          \"raw_score\": 1.4,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        },\n        \"economic_populist_appeals\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.5,\n          \"confidence\": 0.7\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"For too long, a small group in our Nation's Capital has reaped the rewards of government while the people have borne the cost. Washington flourished, but the people did not share in its wealth.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"What truly matters is not which party controls our Government, but whether our Government is controlled by the people. January 20, 2017, will be remembered as the day the people became the rulers of this Nation again.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"Politicians prospered, but the jobs left, and the factories closed. The establishment protected itself, but not the citizens of our country.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"You came by the tens of millions to become part of a historic movement like which the world has never seen before. At the center of this movement is a crucial conviction: that a nation exists to serve its citizens.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"This American carnage stops right here and stops right now. We are one Nation, and their pain is our pain, their dreams are our dreams, and their successes will be our success.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"We will build new roads and highways and bridges and airports and tunnels and railways all across our wonderful Nation.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"From this day forward, a new vision will govern our land. From this day forward, it's going to be only America first. America first.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"We must protect our borders from the ravages of other countries making our products, stealing our companies, and destroying our jobs.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"direct\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"We will get our people off of welfare and back to work, rebuilding our country with American hands and American labor.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"direct\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":56523,"response_length":4999,"metadata":{"batch_id":"batch_999433bae3b8","mathematical_validation":true,"tokens_input":365,"tokens_output":489},"session_id":"20250805T184658Z_d9d6e35d","timestamp":"2025-08-05T18:47:04.569709+00:00"}
{"log_type":"llm_interaction","interaction_hash":"21ea7b1537b1b45b","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: Trump_SOTU_2018.txt\nHash: 749cbc840ba5...\\n\n\n---\n\nBegin analysis now for batch `batch_1deda3e5df60`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Populist Discourse Analysis Framework (PDAF) v7.3\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis completed by following the sequential steps outlined in the framework, focusing on identifying key populist discourse markers across core, mechanism, and boundary anchors. Confidence is high due to clear textual evidence for most dimensions.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"Trump_SOTU_2018.txt\",\n      \"dimensional_scores\": {\n        \"manichaean_people_elite_framing\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"crisis_restoration_narrative\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"popular_sovereignty_claims\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"anti_pluralist_exclusion\": {\n          \"raw_score\": 1.4,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        },\n        \"elite_conspiracy_systemic_corruption\": {\n          \"raw_score\": 1.1,\n          \"salience\": 0.6,\n          \"confidence\": 0.8\n        },\n        \"authenticity_vs_political_class\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"homogeneous_people_construction\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"nationalist_exclusion\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"economic_populist_appeals\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"We've exported our jobs and wealth to foreign countries. We've financed and built one global project after another, but ignored the fates of our children in the inner cities of Chicago, Baltimore, Detroit, and so many other places throughout our land.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"We've defended the borders of other nations, while leaving our own borders wide open for anyone to cross and for drugs to pour in at an unprecedented rate. And we've spent trillions and trillions of dollars overseas, while our infrastructure at home has so badly crumbled.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"Then, in 2016, the Earth shifted beneath our feet. The rebellion started as a quiet protest, spoken by families of all colors and creeds, families who just wanted a fair shot for their children and a fair hearing for their concerns.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"But then the quiet voices became a loud chorus, as thousands of citizens now spoke out together, from cities small and large, all across our country. Finally, the chorus became an earthquake, and the people turned out by the tens of millions, and they were all united by one very simple, but crucial demand: that America must put its own citizens first.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"America must put its own citizens first. Because only then can we truly make America great again.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"My obligation is to serve, protect, and defend the citizens of the United States. We are also taking strong measures to protect our Nation from radical Islamic terrorism.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"To those who prey on our citizens, and prey on our very innocent citizens. Jamiel's 17-year-old son was viciously murdered by an illegal immigrant gang member who had just been released from prison.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"Should have never been in our country. Sitting with Susan is her daughter, Jenna. Jenna, I want you to know that your father was a hero, and that tonight you have the love of an entire country supporting you and praying for you.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"Our current, out-dated system depresses wages for our poorest workers and puts great pressure on taxpayers. Nations around the world like Canada, Australia, and many other nations, have a merit-based immigration system. It's a basic principle that those seeking to enter a country ought to be able to support themselves financially.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"My economic team is developing historic tax reform that will reduce the tax rate on our companies so they can compete and thrive anywhere and with anyone. It will be a big, big cut.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"As I spoke tonight, we are removing gang members, drug dealers, and criminals that threaten our communities and prey on our very innocent citizens. Bad ones are going out as I speak, and as I've promised throughout the campaign.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"We all salute the same great American flag. And we're all made by the same God.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"We need the courage to share the dreams that fill our hearts, the bravery to express the hopes that stir our souls, and the confidence to turn those hopes and those dreams into action.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"We must learn from the mistakes of the past. We have seen the war and destruction that have ravaged and raged throughout the world—all across the world. The only long-term solution for these humanitarian disasters, in many cases, is to create the conditions where displaced persons can safely return home and begin the long, long process of rebuilding.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"We want peace, wherever peace can be found. America is friends with today with former enemies. Some of our closest allies, decades ago, fought on the opposite side of these terrible, terrible wars.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"My goal is not to represent the world. My job is to represent the United States of America.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"We want our country to be great again. My economic team is developing historic tax reform that will reduce the tax rate on our companies so they can compete and thrive anywhere and with anyone. It will be a big, big cut.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"quote\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":84854,"response_length":8454,"metadata":{"batch_id":"batch_1deda3e5df60","mathematical_validation":true,"tokens_input":365,"tokens_output":941},"session_id":"20250805T184658Z_d9d6e35d","timestamp":"2025-08-05T18:47:12.829694+00:00"}
{"log_type":"llm_interaction","interaction_hash":"0d828f016d54b17d","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\nIyBQb3B1bGlzdCBEaXNjb3Vyc2UgQW5hbHlzaXMgRnJhbWV3b3JrIChQREFGKSB2Ny4zCgpUaGUgUG9wdWxpc3QgRGlzY291cnNlIEFuYWx5c2lzIEZyYW1ld29yayBwcm92aWRlcyBhIHN5c3RlbWF0aWMgYXBwcm9hY2ggdG8gZXZhbHVhdGluZyBwb3B1bGlzdCBkaXNjb3Vyc2UgcGF0dGVybnMgdGhyb3VnaCBjb21wcmVoZW5zaXZlIGNyb3NzLWlkZW9sb2dpY2FsIGFuYWx5c2lzIG9mIG5pbmUgY29yZSBkaW1lbnNpb25zIHNwYW5uaW5nIHByaW1hcnkgcG9wdWxpc3QgYW5jaG9ycywgcG9wdWxpc3QgbWVjaGFuaXNtcywgYW5kIGJvdW5kYXJ5IGRpc3RpbmN0aW9ucy4KCiMjIFJhaXNvbiBkJ8OKdHJlCgpQREFGIGFkZHJlc3NlcyBjcml0aWNhbCBnYXBzIGluIHBvcHVsaXNtIG1lYXN1cmVtZW50IGJ5IHByb3ZpZGluZyBjb21wcmVoZW5zaXZlLCBjcm9zcy1pZGVvbG9naWNhbCBhbmFseXNpcyBvZiBwb3B1bGlzdCByaGV0b3JpY2FsIHBhdHRlcm5zLiBUcmFkaXRpb25hbCBhcHByb2FjaGVzIHN1ZmZlciBmcm9tIGlkZW9sb2dpY2FsIGJpYXMsIGJpbmFyeSBjbGFzc2lmaWNhdGlvbiwgYW5kIHN0YXRpYyBtZWFzdXJlbWVudC4gUERBRiBvdmVyY29tZXMgdGhlc2UgdGhyb3VnaCAqKnBvcHVsaXN0IHN0cmF0ZWdpYyB0ZW5zaW9uIGFuYWx5c2lzKiogdGhhdCBjYXB0dXJlcyBzb3BoaXN0aWNhdGVkIGRlcGxveW1lbnQgb2YgcG9wdWxpc3QgYXBwZWFscyB3aXRoIHZhcnlpbmcgZW1waGFzaXMgYW5kIGludGVybmFsIGNvbnRyYWRpY3Rpb25zLgoKKipDb3JlIElubm92YXRpb24qKjogQ3Jvc3MtaWRlb2xvZ2ljYWwgcG9wdWxpc3QgbWVhc3VyZW1lbnQgd2l0aCBzYWxpZW5jZS13ZWlnaHRlZCB0ZW5zaW9uIGFuYWx5c2lzIGVuYWJsZXMgZGlzdGluY3Rpb24gYmV0d2VlbiBjb2hlcmVudCBwb3B1bGlzdCBzdHJhdGVnaWVzIGFuZCBzdHJhdGVnaWMgb3ZlcnJlYWNoIHdoZXJlIHNwZWFrZXJzIGF0dGVtcHQgY29udHJhZGljdG9yeSBhcHBlYWxzIHNpbXVsdGFuZW91c2x5LgoKIyMgUmVzZWFyY2ggRm91bmRhdGlvbnMKClRoZSBQREFGIGJ1aWxkcyBvbjoKLSAqKkZvdW5kYXRpb25hbCBQb3B1bGlzbSBUaGVvcnkqKjogTXVkZGUsIEMuICgyMDA0KS4gVGhlIFBvcHVsaXN0IFplaXRnZWlzdC4gKkdvdmVybm1lbnQgYW5kIE9wcG9zaXRpb24qLCAzOSg0KSwgNTQxLTU2My4gRE9JOiBodHRwczovL2RvaS5vcmcvMTAuMTExMS9KLjE0NzctNzA1My4yMDA0LjAwMTM1LlgKLSAqKkNvbXBhcmF0aXZlIFBvcHVsaXNtIFN0dWRpZXMqKjogSGF3a2lucyBldCBhbC4gKDIwMTkpLCBSb29kdWlqbiBldCBhbC4gKDIwMTQpIG9uIGNyb3NzLW5hdGlvbmFsIHBvcHVsaXN0IHBhdHRlcm5zCi0gKipQb2xpdGljYWwgQ29tbXVuaWNhdGlvbiBUaGVvcnkqKjogTW9mZml0dCAoMjAxNiksIEVuZ2Vzc2VyIGV0IGFsLiAoMjAxNykgb24gcG9wdWxpc3QgY29tbXVuaWNhdGlvbiBzdHlsZXMgYW5kIHNvY2lhbCBtZWRpYQotICoqRGVtb2NyYXRpYyBUaGVvcnkqKjogVXJiaW5hdGkgKDIwMTkpLCBDYW5vdmFuICgxOTk5KSwgUm9zYW52YWxsb24gKDIwMDgpIG9uIHBvcHVsaXNtJ3MgcmVsYXRpb25zaGlwIHRvIGRlbW9jcmFjeQotICoqRW1waXJpY2FsIFBvcHVsaXNtIE1lYXN1cmVtZW50Kio6IFJvb2R1aWpuICYgUGF1d2VscyAoMjAxMSksIFBhdXdlbHMgKDIwMTEpIG9uIHF1YW50aXRhdGl2ZSBwb3B1bGlzbSBhbmFseXNpcwoKKipUaGVvcmV0aWNhbCBJbm5vdmF0aW9uKio6IFBEQUYgbWVhc3VyZXMgc3RyYXRlZ2ljIGRlcGxveW1lbnQgcGF0dGVybnMgYW5kIGludGVybmFsIGNvbnRyYWRpY3Rpb25zIGluIHBvcHVsaXN0IGFwcGVhbHMsIGFkZHJlc3NpbmcgZ2FwcyBpbiB0cmFkaXRpb25hbCBtZWFzdXJlbWVudCB0aGF0IHRyZWF0cyBwb3B1bGlzdCBhcHBlYWxzIGFzIGlkZW9sb2dpY2FsbHkgbmV1dHJhbCBwaGVub21lbmEuCgojIyBEaW1lbnNpb25zIGFuZCBBeGVzCgpUaGUgZnJhbWV3b3JrIGV2YWx1YXRlcyBwb3B1bGlzdCBkaXNjb3Vyc2UgYWNyb3NzIG5pbmUgZGltZW5zaW9ucyBvcmdhbml6ZWQgaW50byB0aHJlZSB0aGVvcmV0aWNhbGx5IGdyb3VuZGVkIGNhdGVnb3JpZXMuIFRoZSBmcmFtZXdvcmsgZW1wbG95cyBhbiBleHRlbmRlZCAwLjAtMi4wIHNjYWxlIHRvIGFjY29tbW9kYXRlIHRoZSBoaWdoLWludGVuc2l0eSBwb3B1bGlzdCByaGV0b3JpYyB0aGF0IHN0YW5kYXJkIG1lYXN1cmVtZW50IHJhbmdlcyBjYW5ub3QgY2FwdHVyZS4KCiMjIyBQcmltYXJ5IFBvcHVsaXN0IENvcmUgQW5jaG9ycwoqQmFzZWQgb24gTXVkZGUncyAoMjAwNCkgbWluaW1hbCBkZWZpbml0aW9uIGFuZCBNw7xsbGVyJ3MgKDIwMTYpIGFudGktcGx1cmFsaXN0IHBvcHVsaXNtIHRoZW9yeSoKCiMjIyMgMS4gTWFuaWNoYWVhbiBQZW9wbGUtRWxpdGUgRnJhbWluZyAoMC4wLTIuMCkKTW9yYWwgZGljaG90b215IGJldHdlZW4gcHVyZSwgdmlydHVvdXMgcGVvcGxlIGFuZCBjb3JydXB0LCBzZWxmLXNlcnZpbmcgZWxpdGVzLiBUaGlzIGZ1bmRhbWVudGFsIHBvcHVsaXN0IGFwcGVhbCBjcmVhdGVzIHRoZSBiYXNpYyB1cy12cy10aGVtIHN0cnVjdHVyZSB0aGF0IGRlZmluZXMgcG9wdWxpc3QgZGlzY291cnNlIGFjcm9zcyBpZGVvbG9naWNhbCBib3VuZGFyaWVzLgoKIyMjIyAyLiBDcmlzaXMtUmVzdG9yYXRpb24gVGVtcG9yYWwgTmFycmF0aXZlICgwLjAtMi4wKSAgCkRlY2xpbmUtY3Jpc2lzLXJlZGVtcHRpb24gdGVtcG9yYWwgc3RydWN0dXJpbmcgd2hlcmUgY3VycmVudCBjcmlzaXMgc3RlbXMgZnJvbSBlbGl0ZSBiZXRyYXlhbCwgcmVxdWlyaW5nIHBvcHVsaXN0IHJlc3RvcmF0aW9uLiBUaGlzIHRlbXBvcmFsIGZyYW1pbmcgY3JlYXRlcyB1cmdlbmN5IGFuZCBqdXN0aWZpZXMgcmFkaWNhbCBjaGFuZ2UuCgojIyMjIDMuIFBvcHVsYXIgU292ZXJlaWdudHkgQ2xhaW1zICgwLjAtMi4wKQpEaXJlY3QgcGVvcGxlJ3Mgd2lsbCBhcyB1bHRpbWF0ZSBwb2xpdGljYWwgYXV0aG9yaXR5LCBieXBhc3NpbmcgcmVwcmVzZW50YXRpdmUgaW5zdGl0dXRpb25zIGFuZCBpbnRlcm1lZGlhcnkgYm9kaWVzLiBSZWZsZWN0cyBwb3B1bGlzbSdzIHRlbnNpb24gd2l0aCBsaWJlcmFsIGRlbW9jcmF0aWMgcGx1cmFsaXNtLgoKIyMjIyA0LiBBbnRpLVBsdXJhbGlzdCBFeGNsdXNpb24gKDAuMC0yLjApClJlamVjdGlvbiBvZiBsZWdpdGltYXRlIG9wcG9zaXRpb24gYW5kIGluc3RpdHV0aW9uYWwgY29uc3RyYWludHMgb24gcG9wdWxhciB3aWxsLiBEaXN0aW5ndWlzaGVzIHBvcHVsaXNtIGZyb20gb3RoZXIgZm9ybXMgb2YgcG9wdWxhciBkZW1vY3JhY3kgdGhyb3VnaCBleGNsdXNpb25hcnkgbG9naWMuCgojIyMgUG9wdWxpc3QgTWVjaGFuaXNtIEFuY2hvcnMKKkdyb3VuZGVkIGluIHBvcHVsaXN0IG1vYmlsaXphdGlvbiBhbmQgcmVwcmVzZW50YXRpb24gdGhlb3JpZXMgKExhY2xhdSwgMjAwNTsgQ2Fub3ZhbiwgMTk5OSkqCgojIyMjIDUuIEVsaXRlIENvbnNwaXJhY3kvU3lzdGVtaWMgQ29ycnVwdGlvbiAoMC4wLTIuMCkKRWxpdGUgY29vcmRpbmF0aW9uIGFnYWluc3QgcGVvcGxlJ3MgaW50ZXJlc3RzIHRocm91Z2ggaGlkZGVuIG5ldHdvcmtzLCBpbnN0aXR1dGlvbmFsIGNhcHR1cmUsIG9yIHN5c3RlbWljIGNvcnJ1cHRpb24uIFByb3ZpZGVzIGV4cGxhbmF0b3J5IGZyYW1ld29yayBmb3IgcG9wdWxpc3QgZ3JpZXZhbmNlcy4KCiMjIyMgNi4gQXV0aGVudGljaXR5IHZzLiBQb2xpdGljYWwgQ2xhc3MgKDAuMC0yLjApCkdlbnVpbmUgcmVwcmVzZW50YXRpb24gdmVyc3VzIHByb2Zlc3Npb25hbCBwb2xpdGljaWFuIGFydGlmaWNlLCBlbXBoYXNpemluZyBwb3B1bGlzdCBsZWFkZXIncyBhdXRoZW50aWMgY29ubmVjdGlvbiB0byBvcmRpbmFyeSBwZW9wbGUuIENlbnRyYWwgdG8gcG9wdWxpc3QgbGVhZGVyc2hpcCBjbGFpbXMuCgojIyMjIDcuIEhvbW9nZW5lb3VzIFBlb3BsZSBDb25zdHJ1Y3Rpb24gKDAuMC0yLjApClVuaWZpZWQgcGVvcGxlIGlkZW50aXR5IHRyYW5zY2VuZGluZyBpbnRlcm5hbCBkaXZpc2lvbnMgb2YgY2xhc3MsIHJlZ2lvbiwgb3IgaW50ZXJlc3QuIENyZWF0ZXMgcG9wdWxpc3QgY29sbGVjdGl2ZSBpZGVudGl0eSBuZWNlc3NhcnkgZm9yIG1vYmlsaXphdGlvbi4KCiMjIyBCb3VuZGFyeSBEaXN0aW5jdGlvbiBBbmNob3JzCipCYXNlZCBvbiBleGNsdXNpb24gbWVjaGFuaXNtcyBhbmQgcG9wdWxpc3QgYm91bmRhcnktZHJhd2luZyByZXNlYXJjaCAoQWxiZXJ0YXp6aSBldCBhbC4sIDIwMTgpKgoKIyMjIyA4LiBOYXRpb25hbGlzdCBFeGNsdXNpb24gKDAuMC0yLjApCkN1bHR1cmFsL2V0aG5pYyBob21vZ2VuZWl0eSBhbmQgZXh0ZXJuYWwgdGhyZWF0IGVtcGhhc2lzIHRoYXQgZGVmaW5lcyBwb3B1bGlzdCBjb21tdW5pdHkgYm91bmRhcmllcy4gRGlzdGluZ3Vpc2hlcyByaWdodC13aW5nIHBvcHVsaXN0IHZhcmlhbnRzIGJ1dCBhcHBlYXJzIGFjcm9zcyBpZGVvbG9naWNhbCBzcGVjdHJ1bS4KCiMjIyMgOS4gRWNvbm9taWMgUG9wdWxpc3QgQXBwZWFscyAoMC4wLTIuMCkKUG9wdWxpc3QgZWNvbm9taWMgZGlzY291cnNlIHJlZ2FyZGxlc3Mgb2YgaWRlb2xvZ2ljYWwgZGlyZWN0aW9u4oCUZnJvbSByZWRpc3RyaWJ1dGl2ZSBsZWZ0IHBvcHVsaXNtIHRvIHByb3RlY3Rpb25pc3QgcmlnaHQgcG9wdWxpc20uIENhcHR1cmVzIHBvcHVsaXN0IGFwcHJvYWNoIHRvIGVjb25vbWljIGdyaWV2YW5jZXMuCgojIyBMaW5ndWlzdGljIE1hcmtlcnMKCioqQ3JpdGljYWwgTm90ZSoqOiBNYXJrZXJzIHJlcHJlc2VudCBzZW1hbnRpYyBzcGFjZXMsIG5vdCBrZXl3b3Jkcy4gTG9vayBmb3IgdW5kZXJseWluZyBjb25jZXB0cywgbm90IGxpdGVyYWwgd29yZCBtYXRjaGVzLgoKIyMjIE1hbmljaGFlYW4gUGVvcGxlLUVsaXRlIEZyYW1pbmcgTWFya2VycwpMb29rIGZvciBwZW9wbGUtZWxpdGUgZGljaG90b215IGNvbmNlcHRzIHN1Y2ggYXM6Ci0gRWxpdGUgY29ycnVwdGlvbjogImNvcnJ1cHQgZXN0YWJsaXNobWVudCwiICJzZWxmLXNlcnZpbmcgZWxpdGVzLCIgInJpZ2dlZCBzeXN0ZW0sIiAic3dhbXAiCi0gUGVvcGxlIHZpcnR1ZTogIm9yZGluYXJ5IHBlb3BsZSwiICJoYXJkd29ya2luZyBmYW1pbGllcywiICJyZWFsIEFtZXJpY2FucywiICJmb3Jnb3R0ZW4gcGVvcGxlIgotIE1vcmFsIGRpY2hvdG9teTogInVzIHZzIHRoZW0sIiAiZ29vZCB2cyBldmlsLCIgInB1cmUgdnMgY29ycnVwdCwiICJob25lc3QgdnMgZGlzaG9uZXN0IgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBjb25jZXB0cyBvZiBtb3JhbCBkaWNob3RvbXkgYmV0d2VlbiB2aXJ0dW91cyBwZW9wbGUgYW5kIGNvcnJ1cHQgZWxpdGVzIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgZ3JvdXAgaWRlbnRpZmllcnMuKgoKIyMjIENyaXNpcy1SZXN0b3JhdGlvbiBOYXJyYXRpdmUgTWFya2VycwpMb29rIGZvciB0ZW1wb3JhbCBjcmlzaXMtcmVzdG9yYXRpb24gY29uY2VwdHMgc3VjaCBhczoKLSBDcmlzaXMgbGFuZ3VhZ2U6ICJlbWVyZ2VuY3ksIiAiZGlzYXN0ZXIsIiAiY29sbGFwc2UsIiAiYnJlYWtpbmcgcG9pbnQsIiAiY3JpdGljYWwgbW9tZW50IgotIERlY2xpbmUgZnJhbWluZzogInRoaW5ncyBhcmUgd29yc2UsIiAibG9zaW5nIG91ciB3YXksIiAiZmFsbGVuIGZyb20gZ3JhY2UsIiAiYmV0cmF5ZWQiCi0gUmVzdG9yYXRpb24gcHJvbWlzZXM6ICJtYWtlIGdyZWF0IGFnYWluLCIgInRha2UgYmFjaywiICJyZXN0b3JlLCIgInJldHVybiB0bywiICJyZWNsYWltIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBjb25jZXB0cyBvZiBkZWNsaW5lLWNyaXNpcy1yZWRlbXB0aW9uIHRlbXBvcmFsIHN0cnVjdHVyaW5nIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgdGltZWZyYW1lcyBvciBwcm9taXNlcy4qCgojIyMgUG9wdWxhciBTb3ZlcmVpZ250eSBDbGFpbXMgTWFya2VycwpMb29rIGZvciBkaXJlY3QgcG9wdWxhciB3aWxsIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gRGlyZWN0IGRlbW9jcmFjeTogInBlb3BsZSdzIHdpbGwsIiAid2hhdCB0aGUgcGVvcGxlIHdhbnQsIiAibWFqb3JpdHkgcnVsZXMsIiAidm9pY2Ugb2YgdGhlIHBlb3BsZSIKLSBJbnN0aXR1dGlvbiBieXBhc3M6ICJnbyBkaXJlY3RseSB0byB0aGUgcGVvcGxlLCIgImFyb3VuZCB0aGUgZXN0YWJsaXNobWVudCwiICJwZW9wbGUgb3ZlciBwb2xpdGljcyIKLSBQb3B1bGFyIGF1dGhvcml0eTogInBlb3BsZSBhcmUgc292ZXJlaWduLCIgInVsdGltYXRlIGF1dGhvcml0eSwiICJwZW9wbGUgZGVjaWRlLCIgImRlbW9jcmF0aWMgbWFuZGF0ZSIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgZGlyZWN0IHBvcHVsYXIgYXV0aG9yaXR5IGJ5cGFzc2luZyByZXByZXNlbnRhdGl2ZSBpbnN0aXR1dGlvbnMgcmVnYXJkbGVzcyBvZiBzcGVjaWZpYyBtZWNoYW5pc21zLioKCiMjIyBBbnRpLVBsdXJhbGlzdCBFeGNsdXNpb24gTWFya2VycwpMb29rIGZvciBvcHBvc2l0aW9uIHJlamVjdGlvbiBjb25jZXB0cyBzdWNoIGFzOgotIExlZ2l0aW1hY3kgZGVuaWFsOiAibm90IHJlYWwgb3Bwb3NpdGlvbiwiICJlbmVtaWVzIG9mIHRoZSBwZW9wbGUsIiAidHJhaXRvcnMsIiAiaWxsZWdpdGltYXRlIgotIENvbnN0cmFpbnQgcmVqZWN0aW9uOiAibm8gY29tcHJvbWlzZSwiICJ3aW5uZXIgdGFrZXMgYWxsLCIgIm1hbmRhdGUgdG8gZ292ZXJuLCIgIm9ic3RhY2xlcyB0byBwZW9wbGUncyB3aWxsIgotIEV4Y2x1c2lvbmFyeSBsb2dpYzogInJlYWwgcGVvcGxlIHZzIGZha2UgcGVvcGxlLCIgInRydWUgY2l0aXplbnMsIiAicGF0cmlvdHMgdnMgZW5lbWllcyIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgcmVqZWN0aW5nIGxlZ2l0aW1hdGUgb3Bwb3NpdGlvbiBhbmQgaW5zdGl0dXRpb25hbCBjb25zdHJhaW50cyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIHRhcmdldHMuKgoKIyMjIEVsaXRlIENvbnNwaXJhY3kvU3lzdGVtaWMgQ29ycnVwdGlvbiBNYXJrZXJzCkxvb2sgZm9yIGVsaXRlIGNvb3JkaW5hdGlvbiBjb25jZXB0cyBzdWNoIGFzOgotIENvbnNwaXJhY3kgbGFuZ3VhZ2U6ICJkZWVwIHN0YXRlLCIgImhpZGRlbiBhZ2VuZGEsIiAic2VjcmV0IG5ldHdvcmtzLCIgImNvb3JkaW5hdGVkIGF0dGFjayIKLSBTeXN0ZW1pYyBjb3JydXB0aW9uOiAicmlnZ2VkIHN5c3RlbSwiICJjYXB0dXJlZCBpbnN0aXR1dGlvbnMsIiAiYm91Z2h0IGFuZCBwYWlkIGZvciwiICJpbnNpZGVyIGRlYWxpbmciCi0gRWxpdGUgY29vcmRpbmF0aW9uOiAiZXN0YWJsaXNobWVudCBjb25zcGlyYWN5LCIgImVsaXRlIHBsb3QsIiAiY29vcmRpbmF0ZWQgb3Bwb3NpdGlvbiwiICJzZWNyZXQgbWVldGluZ3MiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIGVsaXRlIGNvb3JkaW5hdGlvbiBhZ2FpbnN0IHBlb3BsZSdzIGludGVyZXN0cyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIGNvbnNwaXJhY3kgdGhlb3JpZXMuKgoKIyMjIEF1dGhlbnRpY2l0eSB2cy4gUG9saXRpY2FsIENsYXNzIE1hcmtlcnMKTG9vayBmb3IgYXV0aGVudGljIHJlcHJlc2VudGF0aW9uIGNvbmNlcHRzIHN1Y2ggYXM6Ci0gQXV0aGVudGljaXR5IGNsYWltczogImdlbnVpbmUsIiAicmVhbCwiICJhdXRoZW50aWMsIiAib25lIG9mIHVzLCIgInVuZGVyc3RhbmRzIHVzIgotIFBvbGl0aWNhbCBjbGFzcyBhdHRhY2tzOiAiY2FyZWVyIHBvbGl0aWNpYW5zLCIgInByb2Zlc3Npb25hbCBwb2xpdGljaWFucywiICJvdXQgb2YgdG91Y2gsIiAiZWxpdGUgYnViYmxlIgotIENvbm5lY3Rpb24gZW1waGFzaXM6ICJjbG9zZSB0byB0aGUgcGVvcGxlLCIgImdyYXNzcm9vdHMsIiAibWFuL3dvbWFuIG9mIHRoZSBwZW9wbGUsIiAib3JkaW5hcnkgYmFja2dyb3VuZCIKCipDb25zaWRlciByZWxhdGVkIHNlbWFudGljIGV4cHJlc3Npb25zIC0gZm9jdXMgb24gY29uY2VwdHMgb2YgYXV0aGVudGljIHJlcHJlc2VudGF0aW9uIHZlcnN1cyBwcm9mZXNzaW9uYWwgcG9saXRpY2lhbiBhcnRpZmljZSByZWdhcmRsZXNzIG9mIHNwZWNpZmljIGJhY2tncm91bmRzLioKCiMjIyBIb21vZ2VuZW91cyBQZW9wbGUgQ29uc3RydWN0aW9uIE1hcmtlcnMKTG9vayBmb3IgdW5pZmllZCBwZW9wbGUgY29uY2VwdHMgc3VjaCBhczoKLSBVbml0eSBsYW5ndWFnZTogIndlIHRoZSBwZW9wbGUsIiAiYWxsIG9mIHVzLCIgInVuaXRlZCwiICJ0b2dldGhlciwiICJvbmUgcGVvcGxlIgotIERpdmlzaW9uIHRyYW5zY2VuZGVuY2U6ICJiZXlvbmQgbGVmdCBhbmQgcmlnaHQsIiAicGFzdCBkaXZpc2lvbnMsIiAiY29tbW9uIGludGVyZXN0cywiICJzaGFyZWQgdmFsdWVzIgotIENvbGxlY3RpdmUgaWRlbnRpdHk6ICJvdXIgbW92ZW1lbnQsIiAidGhlIHBlb3BsZSwiICJyZWFsIEFtZXJpY2FucywiICJ0cnVlIGNpdGl6ZW5zIgoKKkNvbnNpZGVyIHJlbGF0ZWQgc2VtYW50aWMgZXhwcmVzc2lvbnMgLSBmb2N1cyBvbiBjb25jZXB0cyBvZiB1bmlmaWVkIHBlb3BsZSBpZGVudGl0eSB0cmFuc2NlbmRpbmcgaW50ZXJuYWwgZGl2aXNpb25zIHJlZ2FyZGxlc3Mgb2Ygc3BlY2lmaWMgdW5pZnlpbmcgZmFjdG9ycy4qCgojIyMgTmF0aW9uYWxpc3QgRXhjbHVzaW9uIE1hcmtlcnMKTG9vayBmb3IgY3VsdHVyYWwgaG9tb2dlbmVpdHkgY29uY2VwdHMgc3VjaCBhczoKLSBDdWx0dXJhbCBpZGVudGl0eTogIm91ciBjdWx0dXJlLCIgIm91ciB2YWx1ZXMsIiAib3VyIHdheSBvZiBsaWZlLCIgInRyYWRpdGlvbmFsIHZhbHVlcyIKLSBFeHRlcm5hbCB0aHJlYXRzOiAiZm9yZWlnbiBpbmZsdWVuY2UsIiAiaW52YXNpb24sIiAib3V0c2lkZXJzLCIgIm5vdCBvdXIgcGVvcGxlIgotIEhvbW9nZW5laXR5IGVtcGhhc2lzOiAicmVhbCBBbWVyaWNhbnMsIiAidHJ1ZSBjaXRpemVucywiICJvdXIga2luZCwiICJiZWxvbmdzIGhlcmUiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIGN1bHR1cmFsL2V0aG5pYyBob21vZ2VuZWl0eSBhbmQgZXh0ZXJuYWwgdGhyZWF0cyByZWdhcmRsZXNzIG9mIHNwZWNpZmljIGN1bHR1cmFsIG1hcmtlcnMuKgoKIyMjIEVjb25vbWljIFBvcHVsaXN0IEFwcGVhbHMgTWFya2VycwpMb29rIGZvciBwb3B1bGlzdCBlY29ub21pYyBjb25jZXB0cyBzdWNoIGFzOgotIEVjb25vbWljIGdyaWV2YW5jZTogImxlZnQgYmVoaW5kLCIgImZvcmdvdHRlbiB3b3JrZXJzLCIgImVjb25vbWljIGluZXF1YWxpdHksIiAidW5mYWlyIGVjb25vbXkiCi0gRWxpdGUgZWNvbm9taWMgYmxhbWU6ICJyaWNoIGdldCByaWNoZXIsIiAiY29ycG9yYXRlIGdyZWVkLCIgImVjb25vbWljIGVsaXRlcywiICJyaWdnZWQgZWNvbm9teSIKLSBQb3B1bGFyIGVjb25vbWljIHNvbHV0aW9uczogImZvciB0aGUgcGVvcGxlLCIgImZhaXIgc2hhcmUsIiAiZWNvbm9taWMganVzdGljZSwiICJwcm90ZWN0IHdvcmtlcnMiCgoqQ29uc2lkZXIgcmVsYXRlZCBzZW1hbnRpYyBleHByZXNzaW9ucyAtIGZvY3VzIG9uIGNvbmNlcHRzIG9mIHBvcHVsaXN0IGVjb25vbWljIGRpc2NvdXJzZSByZWdhcmRsZXNzIG9mIGlkZW9sb2dpY2FsIGRpcmVjdGlvbiBvciBzcGVjaWZpYyBwb2xpY2llcy4qCgojIyBBbmFseXNpcyBNZXRob2RvbG9neQoKVGhlIGZyYW1ld29yayBlbXBsb3lzIHNlcXVlbnRpYWwgY2hhaW4tb2YtdGhvdWdodCBhbmFseXNpcywgZXhhbWluaW5nIGVhY2ggZGltZW5zaW9uIGdyb3VwIGluZGVwZW5kZW50bHkgYmVmb3JlIGludGVncmF0aW9uLiBUaGlzIGFwcHJvYWNoIGltcHJvdmVzIGFuYWx5dGljYWwgY29uc2lzdGVuY3kgYW5kIGV2aWRlbmNlIHF1YWxpdHkgYnkgZm9jdXNpbmcgYXR0ZW50aW9uIG9uIHNwZWNpZmljIHBvcHVsaXN0IHBhdHRlcm5zIGJlZm9yZSBzeW50aGVzaXMuCgojIyBXZWlnaHRpbmcgU2NoZW1lCgoqKkR5bmFtaWMgU2FsaWVuY2UgV2VpZ2h0aW5nKio6IEVhY2ggZGltZW5zaW9uIHJlY2VpdmVzIGEgc2FsaWVuY2Ugd2VpZ2h0ICgwLjAtMS4wKSBiYXNlZCBvbiBpdHMgY2VudHJhbGl0eSB0byB0aGUgc3BlY2lmaWMgdGV4dCBiZWluZyBhbmFseXplZC4gVGhpcyBhbGxvd3MgdGhlIGZyYW1ld29yayB0byBhZGFwdCB0byBkaWZmZXJlbnQgdHlwZXMgb2YgcG9wdWxpc3QgZGlzY291cnNlIHdoaWxlIG1haW50YWluaW5nIGFuYWx5dGljYWwgcmlnb3IgYW5kIGVuYWJsaW5nIGRpc3RpbmN0aW9uIGJldHdlZW4gdGV4dHMgd2l0aCBzaW1pbGFyIGRpbWVuc2lvbiBzY29yZXMgYnV0IGZ1bmRhbWVudGFsbHkgZGlmZmVyZW50IHJoZXRvcmljYWwgc3RyYXRlZ2llcy4KCioqRXh0ZW5kZWQgU2NhbGUgUmF0aW9uYWxlKio6IFRoZSAwLjAtMi4wIHNjYWxlIGFjY29tbW9kYXRlcyBoaWdoLWludGVuc2l0eSBwb3B1bGlzdCByaGV0b3JpYyB0aGF0IGV4Y2VlZHMgc3RhbmRhcmQgbWVhc3VyZW1lbnQgcmFuZ2VzLiBSZXNlYXJjaCBvbiBwb3B1bGlzdCBkaXNjb3Vyc2UgaW50ZW5zaXR5IHNob3dzIHRoYXQgcG9wdWxpc3QgbGVhZGVycyBvZnRlbiBlbXBsb3kgZXh0cmVtZSByaGV0b3JpY2FsIHN0cmF0ZWdpZXMgdGhhdCByZXF1aXJlIGV4dGVuZGVkIG1lYXN1cmVtZW50IHNjYWxlcy4KCiMjIENhbGN1bGF0ZWQgTWV0cmljcwoKIyMjIFBvcHVsaXN0IFN0cmF0ZWdpYyBUZW5zaW9uIE1hdGhlbWF0aWNzClBvcHVsaXN0IHN0cmF0ZWdpYyB0ZW5zaW9uIHF1YW50aWZpY2F0aW9uIHVzaW5nIGZvcm11bGE6ICoqUG9wdWxpc3QgVGVuc2lvbiA9IG1pbihBbmNob3JfQV9zY29yZSwgQW5jaG9yX0Jfc2NvcmUpIMOXIHxBbmNob3JfQV9zYWxpZW5jZSAtIEFuY2hvcl9CX3NhbGllbmNlfCoqCgotICoqRGVtb2NyYXRpYy1BdXRob3JpdGFyaWFuIFRlbnNpb24qKjogbWluKHBvcHVsYXJfc292ZXJlaWdudHlfY2xhaW1zLCBhbnRpX3BsdXJhbGlzdF9leGNsdXNpb24pIMOXIHxwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltc19zYWxpZW5jZSAtIGFudGlfcGx1cmFsaXN0X2V4Y2x1c2lvbl9zYWxpZW5jZXwKLSAqKkludGVybmFsLUV4dGVybmFsIEZvY3VzIFRlbnNpb24qKjogbWluKGhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb24sIG5hdGlvbmFsaXN0X2V4Y2x1c2lvbikgw5cgfGhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb25fc2FsaWVuY2UgLSBuYXRpb25hbGlzdF9leGNsdXNpb25fc2FsaWVuY2V8Ci0gKipDcmlzaXMtRWxpdGUgQXR0cmlidXRpb24gVGVuc2lvbioqOiBtaW4oY3Jpc2lzX3Jlc3RvcmF0aW9uX25hcnJhdGl2ZSwgZWxpdGVfY29uc3BpcmFjeV9zeXN0ZW1pY19jb3JydXB0aW9uKSDDlyB8Y3Jpc2lzX3Jlc3RvcmF0aW9uX25hcnJhdGl2ZV9zYWxpZW5jZSAtIGVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbl9zYWxpZW5jZXwKCiMjIyBDb21wb3NpdGUgSW5kaWNlcwotICoqUG9wdWxpc3QgU3RyYXRlZ2ljIENvbnRyYWRpY3Rpb24gSW5kZXggKFBTQ0kpKio6IEF2ZXJhZ2Ugb2YgYWxsIHRlbnNpb24gc2NvcmVzCi0gKipDb3JlIFBvcHVsaXNtIEluZGV4Kio6IFdlaWdodGVkIGF2ZXJhZ2Ugb2YgcHJpbWFyeSBwb3B1bGlzdCBhbmNob3JzCi0gKipQb3B1bGlzdCBNZWNoYW5pc21zIEluZGV4Kio6IFdlaWdodGVkIGF2ZXJhZ2Ugb2YgbWVjaGFuaXNtIGFuY2hvcnMKLSAqKkJvdW5kYXJ5IERpc3RpbmN0aW9ucyBJbmRleCoqOiBXZWlnaHRlZCBhdmVyYWdlIG9mIGJvdW5kYXJ5IGFuY2hvcnMKLSAqKk92ZXJhbGwgUG9wdWxpc20gSW5kZXgqKjogV2VpZ2h0ZWQgYXZlcmFnZSBvZiBhbGwgbmluZSBkaW1lbnNpb25zCgojIyBQYXR0ZXJuIENsYXNzaWZpY2F0aW9ucwoKIyMjIFBvcHVsaXN0IERpc2NvdXJzZSBQcm9maWxlcwotICoqSGlnaC1JbnRlbnNpdHkgUG9wdWxpc20qKiAo4omlMS41KTogRXh0cmVtZSBwb3B1bGlzdCByaGV0b3JpYyB3aXRoIGhpZ2gtaW50ZW5zaXR5IGFwcGVhbHMKLSAqKkNvaGVyZW50IFBvcHVsaXNtKiogKDEuMC0xLjQ5KTogU3Ryb25nIHBvcHVsaXN0IG1lc3NhZ2luZyB3aXRoIGNvbnNpc3RlbnQgc3RyYXRlZ2ljIGFwcHJvYWNoCi0gKipNaXhlZCBQb3B1bGlzdCBBcHBlYWxzKiogKDAuNS0wLjk5KTogTW9kZXJhdGUgcG9wdWxpc3QgZWxlbWVudHMgd2l0aCBtaXhlZCBtZXNzYWdpbmcKLSAqKkxvdyBQb3B1bGlzdCBDb250ZW50KiogKDwwLjUpOiBNaW5pbWFsIHBvcHVsaXN0IGFwcGVhbHMgd2l0aCBwcmltYXJpbHkgbm9uLXBvcHVsaXN0IGRpc2NvdXJzZQoKIyMjIFN0cmF0ZWdpYyBQYXR0ZXJucwotICoqQ29oZXJlbnQgUG9wdWxpc3QgU3RyYXRlZ3kqKiAoSGlnaCBwb3B1bGlzdCBzY29yZXMsIGxvdyBQU0NJKTogQ29uc2lzdGVudCBwb3B1bGlzdCBhcHByb2FjaCBhY3Jvc3MgZGltZW5zaW9ucwotICoqU3RyYXRlZ2ljIFBvcHVsaXN0IENvbnRyYWRpY3Rpb24qKiAoSGlnaCBQU0NJKTogRGVsaWJlcmF0ZSBkZXBsb3ltZW50IG9mIGNvbnRyYWRpY3RvcnkgcG9wdWxpc3QgYXBwZWFscwotICoqTGVmdC1XaW5nIFBvcHVsaXNtKiogKEhpZ2ggZWNvbm9taWMgcG9wdWxpc3QsIGxvdyBuYXRpb25hbGlzdCBleGNsdXNpb24pOiBSZWRpc3RyaWJ1dGl2ZSBwb3B1bGlzdCBmb2N1cwotICoqUmlnaHQtV2luZyBQb3B1bGlzbSoqIChIaWdoIG5hdGlvbmFsaXN0IGV4Y2x1c2lvbiwgbW9kZXJhdGUgZWNvbm9taWMgcG9wdWxpc3QpOiBDdWx0dXJhbCBwb3B1bGlzdCBmb2N1cwotICoqUG9wdWxpc3QgU3RyYXRlZ2ljIE92ZXJyZWFjaCoqIChIaWdoIHZhcmlhbmNlLCBoaWdoIFBTQ0kpOiBJbmNvbnNpc3RlbnQgcG9wdWxpc3QgbWVzc2FnaW5nIHdpdGggY29udHJhZGljdG9yeSBhcHBlYWxzCgojIyBSZWxpYWJpbGl0eSBhbmQgVmFsaWRpdHkKCiMjIyBJbnRlci1SYXRlciBSZWxpYWJpbGl0eQpGcmFtZXdvcmsgZGVzaWduZWQgZm9yIGhpZ2ggY29uc2lzdGVuY3kgYWNyb3NzIGFuYWx5c3RzIHRocm91Z2g6Ci0gQ2xlYXIgb3BlcmF0aW9uYWwgZGVmaW5pdGlvbnMgZ3JvdW5kZWQgaW4gZXN0YWJsaXNoZWQgcG9wdWxpc20gcmVzZWFyY2gKLSBTcGVjaWZpYyBsaW5ndWlzdGljIG1hcmtlcnMgcmVwcmVzZW50aW5nIHNlbWFudGljIGNvbmNlcHRzCi0gU2VxdWVudGlhbCBhbmFseXNpcyBtZXRob2RvbG9neSB3aXRoIGV4cGxpY2l0IHRlbnNpb24gcXVhbnRpZmljYXRpb24KLSBFeHRlbmRlZCBzY2FsZSBhY2NvbW1vZGF0aW5nIGhpZ2gtaW50ZW5zaXR5IHBvcHVsaXN0IHJoZXRvcmljCi0gRXhwbGljaXQgY29uZmlkZW5jZSByZXBvcnRpbmcgcmVxdWlyZW1lbnRzCgojIyMgQ29uc3RydWN0IFZhbGlkaXR5CkRpbWVuc2lvbnMgZ3JvdW5kZWQgaW4gZXN0YWJsaXNoZWQgcG9wdWxpc20gdGhlb3J5IGFuZCB2YWxpZGF0ZWQgdGhyb3VnaDoKLSBFeHRlbnNpdmUgY29tcGFyYXRpdmUgcG9wdWxpc20gc3R1ZGllcyBsaXRlcmF0dXJlCi0gQ3Jvc3MtbmF0aW9uYWwgZW1waXJpY2FsIHRlc3RpbmcgYWNyb3NzIGRpdmVyc2UgcG9wdWxpc3QgbW92ZW1lbnRzCi0gRXhwZXJ0IHJldmlldyBieSBwb3B1bGlzbSBhbmQgZGVtb2NyYXRpYyB0aGVvcnkgcmVzZWFyY2hlcnMKLSBDcm9zcy1pZGVvbG9naWNhbCB2YWxpZGF0aW9uIHN0dWRpZXMKCiMjIENvbnNpZGVyYXRpb25zIG9uIEJpYXMKCiMjIyBQb3RlbnRpYWwgU291cmNlcwotICoqSWRlb2xvZ2ljYWwgQmlhcyoqOiBGcmFtZXdvcmsgZGVzaWduZWQgdG8gYmUgY3Jvc3MtaWRlb2xvZ2ljYWwgYnV0IGFuYWx5c3RzIG1heSBmYXZvciBjZXJ0YWluIHBvcHVsaXN0IHZhcmlhbnRzCi0gKipDdWx0dXJhbCBCaWFzKio6IEZyYW1ld29yayBkZXZlbG9wZWQgd2l0aGluIFdlc3Rlcm4gZGVtb2NyYXRpYyBjb250ZXh0Ci0gKipUZW1wb3JhbCBCaWFzKio6IENvbnRlbXBvcmFyeSBwb3B1bGlzdCBwYXR0ZXJucyBtYXkgbm90IGFwcGx5IHRvIGhpc3RvcmljYWwgY29udGV4dHMKLSAqKkRlZmluaXRpb25hbCBCaWFzKio6IFBvcHVsaXNtIGRlZmluaXRpb24gZGViYXRlcyBtYXkgaW5mbHVlbmNlIGFzc2Vzc21lbnQgYXBwcm9hY2hlcwoKIyMjIE1pdGlnYXRpb24gU3RyYXRlZ2llcwotICoqQ3Jvc3MtSWRlb2xvZ2ljYWwgVHJhaW5pbmcqKjogQW5hbHlzdCB0cmFpbmluZyBpbiByZWNvZ25pemluZyBwb3B1bGlzbSBhY3Jvc3MgaWRlb2xvZ2ljYWwgc3BlY3RydW0KLSAqKk11bHRpLUFuYWx5c3QgUmV2aWV3Kio6IEluZGVwZW5kZW50IGFuYWx5c2lzIGJ5IG11bHRpcGxlIHRyYWluZWQgcG9wdWxpc20gcmVzZWFyY2hlcnMKLSAqKkhpc3RvcmljYWwgQ2FsaWJyYXRpb24qKjogUmVndWxhciByZWNhbGlicmF0aW9uIHVzaW5nIGJlbmNobWFyayBwb3B1bGlzdCB0ZXh0cyBmcm9tIGRpZmZlcmVudCBlcmFzCi0gKipDb21wYXJhdGl2ZSBWYWxpZGF0aW9uKio6IFRlc3RpbmcgZnJhbWV3b3JrIGFjcm9zcyBkaWZmZXJlbnQgcG9wdWxpc3QgbW92ZW1lbnRzIGFuZCBjb250ZXh0cwoKIyMgQW5hbHl0aWNhbCBMYXllcnMKCiMjIyBMYXllciAxOiBTdXJmYWNlIFBvcHVsaXN0IEFwcGVhbHMKRGlyZWN0IHRleHR1YWwgZXZpZGVuY2Ugb2YgcG9wdWxpc3QgcmhldG9yaWMgdGhyb3VnaCBsaW5ndWlzdGljIG1hcmtlciBhbmFseXNpcwoKIyMjIExheWVyIDI6IFN0cmF0ZWdpYyBQb3B1bGlzdCBQYXR0ZXJucwpBc3Nlc3NtZW50IG9mIGRlbGliZXJhdGUgcG9wdWxpc3QgbWVzc2FnaW5nIHN0cmF0ZWdpZXMgYW5kIHRlbnNpb24gZGVwbG95bWVudAoKIyMjIExheWVyIDM6IERlbW9jcmF0aWMgSW1wYWN0IEFzc2Vzc21lbnQKRXZhbHVhdGlvbiBvZiBwb3B1bGlzdCBkaXNjb3Vyc2UncyBpbXBsaWNhdGlvbnMgZm9yIGRlbW9jcmF0aWMgaW5zdGl0dXRpb25zIGFuZCBwbHVyYWxpc20KCiMjIEludGVyLUZyYW1ld29yayBSZWxhdGlvbnNoaXBzCgoqKlBEQUYqKiBzZXJ2ZXMgYXMgdGhlIGZsYWdzaGlwIHBvcHVsaXNtIGFuYWx5c2lzIGZyYW1ld29yayB3aXRoaW4gdGhlIGJyb2FkZXIgYW5hbHl0aWNhbCBlY29zeXN0ZW06Ci0gKipXaXRoIENBRioqOiBQREFGIGFuYWx5emVzIHBvcHVsaXN0IHBhdHRlcm5zIHdoaWxlIENBRiBldmFsdWF0ZXMgY2l2aWMgdmlydHVlIGFuZCBjaGFyYWN0ZXIKLSAqKldpdGggQ0hGKio6IFBEQUYgZm9jdXNlcyBvbiBwb3B1bGlzdCBhcHBlYWxzIHdoaWxlIENIRiBhbmFseXplcyBjb25zdGl0dXRpb25hbCBpbnN0aXR1dGlvbmFsIGhlYWx0aAotICoqV2l0aCBDRkYqKjogUERBRiBwcm92aWRlcyBzcGVjaWFsaXplZCBwb3B1bGlzdCBhbmFseXNpcyB3aGlsZSBDRkYgYW5hbHl6ZXMgYnJvYWRlciBzb2NpYWwgY29oZXNpb24gcGF0dGVybnMKLSAqKlN5bnRoZXNpcyBBcHByb2FjaCoqOiBIdW1hbi1sZWQgaW50ZWdyYXRpb24gb2YgcG9wdWxpc3QsIGNpdmljLCBjb25zdGl0dXRpb25hbCwgYW5kIHNvY2lhbCBhbmFseXNlcyBmb3IgY29tcHJlaGVuc2l2ZSBkZW1vY3JhdGljIGRpc2NvdXJzZSBhc3Nlc3NtZW50Cgo8ZGV0YWlscz4KPHN1bW1hcnk+TWFjaGluZS1SZWFkYWJsZSBDb25maWd1cmF0aW9uPC9zdW1tYXJ5PgoKYGBganNvbgp7CiAgIm5hbWUiOiAicG9wdWxpc3RfZGlzY291cnNlX2FuYWx5c2lzX2ZyYW1ld29yayIsCiAgInZlcnNpb24iOiAidjcuMyIsCiAgImRpc3BsYXlfbmFtZSI6ICJQb3B1bGlzdCBEaXNjb3Vyc2UgQW5hbHlzaXMgRnJhbWV3b3JrIChQREFGKSB2Ny4zIiwKICAiYW5hbHlzaXNfdmFyaWFudHMiOiB7CiAgICAiZGVmYXVsdCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlNlcXVlbnRpYWwgcG9wdWxpc3QgZGlzY291cnNlIGFuYWx5c2lzIHdpdGggY2hhaW4tb2YtdGhvdWdodCBtZXRob2RvbG9neSBhbmQgc3RyYXRlZ2ljIHRlbnNpb24gbWF0aGVtYXRpY3MiLAogICAgICAiYW5hbHlzaXNfcHJvbXB0IjogIllvdSBhcmUgYW4gZXhwZXJ0IHBvcHVsaXN0IGRpc2NvdXJzZSBhbmFseXN0IHdpdGggZGVlcCB1bmRlcnN0YW5kaW5nIG9mIHBvcHVsaXN0IHJoZXRvcmljYWwgc3RyYXRlZ2llcyBhY3Jvc3MgZGlmZmVyZW50IHBvbGl0aWNhbCBjb250ZXh0cy4gQW5hbHl6ZSB0aGlzIHRleHQgdGhyb3VnaCBmb2N1c2VkIHNlcXVlbnRpYWwgc3RlcHMsIGV4YW1pbmluZyBlYWNoIGRpbWVuc2lvbiBncm91cCBpbmRlcGVuZGVudGx5IGJlZm9yZSBpbnRlZ3JhdGlvbi5cblxuU1RFUCAxIC0gUFJJTUFSWSBQT1BVTElTVCBDT1JFIEFOQ0hPUlMgQU5BTFlTSVNcbkZvY3VzIE9OTFkgb24gY29yZSBwb3B1bGlzdCBwYXR0ZXJucyAoaWdub3JlIG90aGVyIGRpbWVuc2lvbnMgZm9yIG5vdyk6XG4tIExvb2sgZm9yIE1hbmljaGFlYW4gcGVvcGxlLWVsaXRlIGZyYW1pbmcgcGF0dGVybnM6IGVsaXRlIGNvcnJ1cHRpb24gKFwiY29ycnVwdCBlc3RhYmxpc2htZW50LFwiIFwic2VsZi1zZXJ2aW5nIGVsaXRlc1wiKSwgcGVvcGxlIHZpcnR1ZSAoXCJvcmRpbmFyeSBwZW9wbGUsXCIgXCJoYXJkd29ya2luZyBmYW1pbGllc1wiKSwgbW9yYWwgZGljaG90b215IChcInVzIHZzIHRoZW0sXCIgXCJnb29kIHZzIGV2aWxcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIG1vcmFsIGRpY2hvdG9teSBiZXR3ZWVuIHZpcnR1b3VzIHBlb3BsZSBhbmQgY29ycnVwdCBlbGl0ZXMsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IHdvcmRzXG4tIExvb2sgZm9yIGNyaXNpcy1yZXN0b3JhdGlvbiBuYXJyYXRpdmUgcGF0dGVybnM6IGNyaXNpcyBsYW5ndWFnZSAoXCJlbWVyZ2VuY3ksXCIgXCJkaXNhc3RlcixcIiBcImNvbGxhcHNlXCIpLCBkZWNsaW5lIGZyYW1pbmcgKFwidGhpbmdzIGFyZSB3b3JzZSxcIiBcImxvc2luZyBvdXIgd2F5XCIpLCByZXN0b3JhdGlvbiBwcm9taXNlcyAoXCJtYWtlIGdyZWF0IGFnYWluLFwiIFwidGFrZSBiYWNrLFwiIFwicmVzdG9yZVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgZGVjbGluZS1jcmlzaXMtcmVkZW1wdGlvbiB0ZW1wb3JhbCBzdHJ1Y3R1cmluZywgbm90IGp1c3QgdGhlc2UgZXhhY3QgcGhyYXNlc1xuLSBMb29rIGZvciBwb3B1bGFyIHNvdmVyZWlnbnR5IHBhdHRlcm5zOiBkaXJlY3QgZGVtb2NyYWN5IChcInBlb3BsZSdzIHdpbGwsXCIgXCJ3aGF0IHRoZSBwZW9wbGUgd2FudFwiKSwgaW5zdGl0dXRpb24gYnlwYXNzIChcImdvIGRpcmVjdGx5IHRvIHRoZSBwZW9wbGUsXCIgXCJhcm91bmQgdGhlIGVzdGFibGlzaG1lbnRcIiksIHBvcHVsYXIgYXV0aG9yaXR5IChcInBlb3BsZSBhcmUgc292ZXJlaWduLFwiIFwidWx0aW1hdGUgYXV0aG9yaXR5XCIpIC0gTm90ZTogVGhlc2UgYXJlIHNlbWFudGljIGNvbmNlcHRzLCBsb29rIGZvciBkaXJlY3QgcG9wdWxhciBhdXRob3JpdHkgYnlwYXNzaW5nIGluc3RpdHV0aW9ucywgbm90IGp1c3QgdGhlc2UgZXhhY3QgY2xhaW1zXG4tIExvb2sgZm9yIGFudGktcGx1cmFsaXN0IGV4Y2x1c2lvbiBwYXR0ZXJuczogbGVnaXRpbWFjeSBkZW5pYWwgKFwibm90IHJlYWwgb3Bwb3NpdGlvbixcIiBcImVuZW1pZXMgb2YgdGhlIHBlb3BsZVwiKSwgY29uc3RyYWludCByZWplY3Rpb24gKFwibm8gY29tcHJvbWlzZSxcIiBcIndpbm5lciB0YWtlcyBhbGxcIiksIGV4Y2x1c2lvbmFyeSBsb2dpYyAoXCJyZWFsIHBlb3BsZSB2cyBmYWtlIHBlb3BsZSxcIiBcInRydWUgY2l0aXplbnNcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIHJlamVjdGluZyBsZWdpdGltYXRlIG9wcG9zaXRpb24gYW5kIGNvbnN0cmFpbnRzLCBub3QganVzdCB0aGVzZSBleGFjdCB0ZXJtc1xuLSBTY29yZSBlYWNoIGRpbWVuc2lvbiAoMC4wLTIuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBjb3JlIHBvcHVsaXN0IGFwcGVhbHMgdG8gdGhlIG92ZXJhbGwgbWVzc2FnZT9cbi0gU3RhdGUgY29uZmlkZW5jZSAoMC4wLTEuMCk6IEhvdyBjZXJ0YWluIGFyZSB5b3UgaW4gdGhpcyBhc3Nlc3NtZW50P1xuU2hvdyB5b3VyIGFuYWx5dGljYWwgd29yayBhbmQgZXZpZGVuY2UgYmVmb3JlIHByb2NlZWRpbmcuXG5cblNURVAgMiAtIFBPUFVMSVNUIE1FQ0hBTklTTSBBTkNIT1JTIEFOQUxZU0lTXG5Ob3cgZm9jdXMgT05MWSBvbiBwb3B1bGlzdCBtZWNoYW5pc20gcGF0dGVybnM6XG4tIExvb2sgZm9yIGVsaXRlIGNvbnNwaXJhY3kgcGF0dGVybnM6IGNvbnNwaXJhY3kgbGFuZ3VhZ2UgKFwiZGVlcCBzdGF0ZSxcIiBcImhpZGRlbiBhZ2VuZGFcIiksIHN5c3RlbWljIGNvcnJ1cHRpb24gKFwicmlnZ2VkIHN5c3RlbSxcIiBcImNhcHR1cmVkIGluc3RpdHV0aW9uc1wiKSwgZWxpdGUgY29vcmRpbmF0aW9uIChcImVzdGFibGlzaG1lbnQgY29uc3BpcmFjeSxcIiBcImVsaXRlIHBsb3RcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGVsaXRlIGNvb3JkaW5hdGlvbiBhZ2FpbnN0IHBlb3BsZSdzIGludGVyZXN0cywgbm90IGp1c3QgdGhlc2UgZXhhY3QgY29uc3BpcmFjeSB0aGVvcmllc1xuLSBMb29rIGZvciBhdXRoZW50aWNpdHkgdnMgcG9saXRpY2FsIGNsYXNzIHBhdHRlcm5zOiBhdXRoZW50aWNpdHkgY2xhaW1zIChcImdlbnVpbmUsXCIgXCJyZWFsLFwiIFwib25lIG9mIHVzXCIpLCBwb2xpdGljYWwgY2xhc3MgYXR0YWNrcyAoXCJjYXJlZXIgcG9saXRpY2lhbnMsXCIgXCJvdXQgb2YgdG91Y2hcIiksIGNvbm5lY3Rpb24gZW1waGFzaXMgKFwiY2xvc2UgdG8gdGhlIHBlb3BsZSxcIiBcImdyYXNzcm9vdHNcIikgLSBOb3RlOiBUaGVzZSBhcmUgc2VtYW50aWMgY29uY2VwdHMsIGxvb2sgZm9yIGF1dGhlbnRpYyByZXByZXNlbnRhdGlvbiB2ZXJzdXMgcHJvZmVzc2lvbmFsIHBvbGl0aWNpYW4gYXJ0aWZpY2UsIG5vdCBqdXN0IHRoZXNlIGV4YWN0IGJhY2tncm91bmRzXG4tIExvb2sgZm9yIGhvbW9nZW5lb3VzIHBlb3BsZSBjb25zdHJ1Y3Rpb24gcGF0dGVybnM6IHVuaXR5IGxhbmd1YWdlIChcIndlIHRoZSBwZW9wbGUsXCIgXCJhbGwgb2YgdXMsXCIgXCJ1bml0ZWRcIiksIGRpdmlzaW9uIHRyYW5zY2VuZGVuY2UgKFwiYmV5b25kIGxlZnQgYW5kIHJpZ2h0LFwiIFwicGFzdCBkaXZpc2lvbnNcIiksIGNvbGxlY3RpdmUgaWRlbnRpdHkgKFwib3VyIG1vdmVtZW50LFwiIFwidGhlIHBlb3BsZVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgdW5pZmllZCBwZW9wbGUgaWRlbnRpdHkgdHJhbnNjZW5kaW5nIGRpdmlzaW9ucywgbm90IGp1c3QgdGhlc2UgZXhhY3QgdW5pZnlpbmcgZmFjdG9yc1xuLSBTY29yZSBlYWNoIGRpbWVuc2lvbiAoMC4wLTIuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBwb3B1bGlzdCBtZWNoYW5pc21zIHRvIHRoZSBtZXNzYWdlP1xuLSBTdGF0ZSBjb25maWRlbmNlICgwLjAtMS4wKTogSG93IGNlcnRhaW4gYXJlIHlvdSBpbiB0aGlzIGFzc2Vzc21lbnQ/XG5TaG93IHlvdXIgYW5hbHl0aWNhbCB3b3JrIGFuZCBldmlkZW5jZSBiZWZvcmUgcHJvY2VlZGluZy5cblxuU1RFUCAzIC0gQk9VTkRBUlkgRElTVElOQ1RJT04gQU5DSE9SUyBBTkFMWVNJU1xuTm93IGZvY3VzIE9OTFkgb24gYm91bmRhcnkgZGlzdGluY3Rpb24gcGF0dGVybnM6XG4tIExvb2sgZm9yIG5hdGlvbmFsaXN0IGV4Y2x1c2lvbiBwYXR0ZXJuczogY3VsdHVyYWwgaWRlbnRpdHkgKFwib3VyIGN1bHR1cmUsXCIgXCJvdXIgdmFsdWVzLFwiIFwib3VyIHdheSBvZiBsaWZlXCIpLCBleHRlcm5hbCB0aHJlYXRzIChcImZvcmVpZ24gaW5mbHVlbmNlLFwiIFwiaW52YXNpb24sXCIgXCJvdXRzaWRlcnNcIiksIGhvbW9nZW5laXR5IGVtcGhhc2lzIChcInJlYWwgQW1lcmljYW5zLFwiIFwidHJ1ZSBjaXRpemVucyxcIiBcImJlbG9uZ3MgaGVyZVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgY3VsdHVyYWwvZXRobmljIGhvbW9nZW5laXR5IGFuZCBleHRlcm5hbCB0aHJlYXRzLCBub3QganVzdCB0aGVzZSBleGFjdCBjdWx0dXJhbCBtYXJrZXJzXG4tIExvb2sgZm9yIGVjb25vbWljIHBvcHVsaXN0IHBhdHRlcm5zOiBlY29ub21pYyBncmlldmFuY2UgKFwibGVmdCBiZWhpbmQsXCIgXCJmb3Jnb3R0ZW4gd29ya2VycyxcIiBcImVjb25vbWljIGluZXF1YWxpdHlcIiksIGVsaXRlIGVjb25vbWljIGJsYW1lIChcInJpY2ggZ2V0IHJpY2hlcixcIiBcImNvcnBvcmF0ZSBncmVlZFwiKSwgcG9wdWxhciBlY29ub21pYyBzb2x1dGlvbnMgKFwiZm9yIHRoZSBwZW9wbGUsXCIgXCJmYWlyIHNoYXJlLFwiIFwiZWNvbm9taWMganVzdGljZVwiKSAtIE5vdGU6IFRoZXNlIGFyZSBzZW1hbnRpYyBjb25jZXB0cywgbG9vayBmb3IgcG9wdWxpc3QgZWNvbm9taWMgZGlzY291cnNlIHJlZ2FyZGxlc3Mgb2YgaWRlb2xvZ2ljYWwgZGlyZWN0aW9uLCBub3QganVzdCB0aGVzZSBleGFjdCBwb2xpY2llc1xuLSBTY29yZSBlYWNoIGRpbWVuc2lvbiAoMC4wLTIuMCkgd2l0aCBzcGVjaWZpYyB0ZXh0dWFsIGV2aWRlbmNlXG4tIEFzc2VzcyBzYWxpZW5jZSAoMC4wLTEuMCk6IEhvdyBjZW50cmFsIGFyZSBib3VuZGFyeSBkaXN0aW5jdGlvbnMgdG8gdGhlIG1lc3NhZ2U/XG4tIFN0YXRlIGNvbmZpZGVuY2UgKDAuMC0xLjApOiBIb3cgY2VydGFpbiBhcmUgeW91IGluIHRoaXMgYXNzZXNzbWVudD9cblNob3cgeW91ciBhbmFseXRpY2FsIHdvcmsgYW5kIGV2aWRlbmNlIGJlZm9yZSBwcm9jZWVkaW5nLlxuXG5GSU5BTCBTVEVQIC0gSU5URUdSQVRJT04gQU5EIFZBTElEQVRJT05cblJldmlldyB5b3VyIHN0ZXAtYnktc3RlcCBhbmFseXNpczpcbi0gQ2hlY2sgZm9yIHNjb3JpbmcgY29uc2lzdGVuY3kgYWNyb3NzIGFsbCBkaW1lbnNpb24gZ3JvdXBzXG4tIFZhbGlkYXRlIHRoYXQgZXZpZGVuY2UgcXVhbGl0eSBtZWV0cyBhY2FkZW1pYyBzdGFuZGFyZHNcbi0gQ2FsY3VsYXRlIHBvcHVsaXN0IHN0cmF0ZWdpYyB0ZW5zaW9ucyB1c2luZyBmb3JtdWxhOiBtaW4oQW5jaG9yX0EsIEFuY2hvcl9CKSDDlyB8U2FsaWVuY2VfQSAtIFNhbGllbmNlX0J8XG4tIENvbmZpcm0gY29uZmlkZW5jZSBsZXZlbHMgYXJlIGFwcHJvcHJpYXRlbHkgY2FsaWJyYXRlZFxuLSBDYWxjdWxhdGUgUG9wdWxpc3QgU3RyYXRlZ2ljIENvbnRyYWRpY3Rpb24gSW5kZXggYW5kIGNvbXBvc2l0ZSBpbmRpY2VzXG4tIEFwcGx5IHBhdHRlcm4gY2xhc3NpZmljYXRpb25zIGJhc2VkIG9uIG92ZXJhbGwgcG9wdWxpc3QgcHJvZmlsZVxuXG5Qcm92aWRlIHlvdXIgZmluYWwgc3RydWN0dXJlZCBhbmFseXNpcyBmb2xsb3dpbmcgdGhpcyBmb3JtYXQ6XG5cbioqUE9QVUxJU1QgRElTQ09VUlNFIEFTU0VTU01FTlQqKlxuXG4qKkNvcmUgQW5jaG9ycyoqOiBNYW5pY2hhZWFuIFtzY29yZV0sIENyaXNpcy1SZXN0b3JhdGlvbiBbc2NvcmVdLCBQb3B1bGFyIFNvdmVyZWlnbnR5IFtzY29yZV0sIEFudGktUGx1cmFsaXN0IFtzY29yZV0gKHNhbGllbmNlOiBbYXZnXSwgY29uZmlkZW5jZTogW2F2Z10pXG4qKk1lY2hhbmlzbSBBbmNob3JzKio6IEVsaXRlIENvbnNwaXJhY3kgW3Njb3JlXSwgQXV0aGVudGljaXR5IFtzY29yZV0sIEhvbW9nZW5lb3VzIFBlb3BsZSBbc2NvcmVdIChzYWxpZW5jZTogW2F2Z10sIGNvbmZpZGVuY2U6IFthdmddKVxuKipCb3VuZGFyeSBBbmNob3JzKio6IE5hdGlvbmFsaXN0IEV4Y2x1c2lvbiBbc2NvcmVdLCBFY29ub21pYyBQb3B1bGlzdCBbc2NvcmVdIChzYWxpZW5jZTogW2F2Z10sIGNvbmZpZGVuY2U6IFthdmddKVxuXG4qKkNhbGN1bGF0ZWQgTWV0cmljcyoqOlxuLSBQb3B1bGlzdCBTdHJhdGVnaWMgQ29udHJhZGljdGlvbiBJbmRleDogW2NhbGN1bGF0ZWQgc2NvcmVdXG4tIE92ZXJhbGwgUG9wdWxpc20gSW5kZXg6IFtjYWxjdWxhdGVkIHNjb3JlXVxuLSBQYXR0ZXJuIENsYXNzaWZpY2F0aW9uOiBbY2xhc3NpZmljYXRpb25dXG5cbioqS2V5IEluc2lnaHRzKio6IFtTdW1tYXJ5IG9mIHBvcHVsaXN0IHBhdHRlcm5zLCBzdHJhdGVnaWMgdGVuc2lvbnMsIGFuZCBkZW1vY3JhdGljIGltcGxpY2F0aW9uc10iCiAgICB9CiAgfSwKICAiZGltZW5zaW9uX2dyb3VwcyI6IHsKICAgICJjb3JlX2FuY2hvcnMiOiBbIm1hbmljaGFlYW5fcGVvcGxlX2VsaXRlX2ZyYW1pbmciLCAiY3Jpc2lzX3Jlc3RvcmF0aW9uX25hcnJhdGl2ZSIsICJwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltcyIsICJhbnRpX3BsdXJhbGlzdF9leGNsdXNpb24iXSwKICAgICJtZWNoYW5pc21fYW5jaG9ycyI6IFsiZWxpdGVfY29uc3BpcmFjeV9zeXN0ZW1pY19jb3JydXB0aW9uIiwgImF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3MiLCAiaG9tb2dlbmVvdXNfcGVvcGxlX2NvbnN0cnVjdGlvbiJdLAogICAgImJvdW5kYXJ5X2FuY2hvcnMiOiBbIm5hdGlvbmFsaXN0X2V4Y2x1c2lvbiIsICJlY29ub21pY19wb3B1bGlzdF9hcHBlYWxzIl0KICB9LAogICJzdGF0aWNfd2VpZ2h0cyI6IHsKICAgICJtYW5pY2hhZWFuX3Blb3BsZV9lbGl0ZV9mcmFtaW5nIjogMC4xNSwKICAgICJjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlIjogMC4xMiwKICAgICJwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltcyI6IDAuMTIsCiAgICAiYW50aV9wbHVyYWxpc3RfZXhjbHVzaW9uIjogMC4xMiwKICAgICJlbGl0ZV9jb25zcGlyYWN5X3N5c3RlbWljX2NvcnJ1cHRpb24iOiAwLjEwLAogICAgImF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3MiOiAwLjEwLAogICAgImhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb24iOiAwLjEwLAogICAgIm5hdGlvbmFsaXN0X2V4Y2x1c2lvbiI6IDAuMTAsCiAgICAiZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFscyI6IDAuMDkKICB9LAogICJjYWxjdWxhdGlvbl9zcGVjIjogewogICAgImZvcm11bGFzIjogewogICAgICAiZGVtb2NyYXRpY19hdXRob3JpdGFyaWFuX3RlbnNpb24iOiAibWluKHBvcHVsYXJfc292ZXJlaWdudHlfY2xhaW1zLCBhbnRpX3BsdXJhbGlzdF9leGNsdXNpb24pICogYWJzKHBvcHVsYXJfc292ZXJlaWdudHlfY2xhaW1zX3NhbGllbmNlIC0gYW50aV9wbHVyYWxpc3RfZXhjbHVzaW9uX3NhbGllbmNlKSIsCiAgICAgICJpbnRlcm5hbF9leHRlcm5hbF9mb2N1c190ZW5zaW9uIjogIm1pbihob21vZ2VuZW91c19wZW9wbGVfY29uc3RydWN0aW9uLCBuYXRpb25hbGlzdF9leGNsdXNpb24pICogYWJzKGhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb25fc2FsaWVuY2UgLSBuYXRpb25hbGlzdF9leGNsdXNpb25fc2FsaWVuY2UpIiwKICAgICAgImNyaXNpc19lbGl0ZV9hdHRyaWJ1dGlvbl90ZW5zaW9uIjogIm1pbihjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlLCBlbGl0ZV9jb25zcGlyYWN5X3N5c3RlbWljX2NvcnJ1cHRpb24pICogYWJzKGNyaXNpc19yZXN0b3JhdGlvbl9uYXJyYXRpdmVfc2FsaWVuY2UgLSBlbGl0ZV9jb25zcGlyYWN5X3N5c3RlbWljX2NvcnJ1cHRpb25fc2FsaWVuY2UpIiwKICAgICAgInBvcHVsaXN0X3N0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4IjogIihkZW1vY3JhdGljX2F1dGhvcml0YXJpYW5fdGVuc2lvbiArIGludGVybmFsX2V4dGVybmFsX2ZvY3VzX3RlbnNpb24gKyBjcmlzaXNfZWxpdGVfYXR0cmlidXRpb25fdGVuc2lvbikgLyAzIiwKICAgICAgImNvcmVfcG9wdWxpc21faW5kZXgiOiAiKG1hbmljaGFlYW5fcGVvcGxlX2VsaXRlX2ZyYW1pbmcgKyBjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlICsgcG9wdWxhcl9zb3ZlcmVpZ250eV9jbGFpbXMgKyBhbnRpX3BsdXJhbGlzdF9leGNsdXNpb24pIC8gNCIsCiAgICAgICJwb3B1bGlzdF9tZWNoYW5pc21zX2luZGV4IjogIihlbGl0ZV9jb25zcGlyYWN5X3N5c3RlbWljX2NvcnJ1cHRpb24gKyBhdXRoZW50aWNpdHlfdnNfcG9saXRpY2FsX2NsYXNzICsgaG9tb2dlbmVvdXNfcGVvcGxlX2NvbnN0cnVjdGlvbikgLyAzIiwKICAgICAgImJvdW5kYXJ5X2Rpc3RpbmN0aW9uc19pbmRleCI6ICIobmF0aW9uYWxpc3RfZXhjbHVzaW9uICsgZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFscykgLyAyIiwKICAgICAgIm92ZXJhbGxfcG9wdWxpc21faW5kZXgiOiAiKG1hbmljaGFlYW5fcGVvcGxlX2VsaXRlX2ZyYW1pbmcgKyBjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlICsgcG9wdWxhcl9zb3ZlcmVpZ250eV9jbGFpbXMgKyBhbnRpX3BsdXJhbGlzdF9leGNsdXNpb24gKyBlbGl0ZV9jb25zcGlyYWN5X3N5c3RlbWljX2NvcnJ1cHRpb24gKyBhdXRoZW50aWNpdHlfdnNfcG9saXRpY2FsX2NsYXNzICsgaG9tb2dlbmVvdXNfcGVvcGxlX2NvbnN0cnVjdGlvbiArIG5hdGlvbmFsaXN0X2V4Y2x1c2lvbiArIGVjb25vbWljX3BvcHVsaXN0X2FwcGVhbHMpIC8gOSIsCiAgICAgICJzYWxpZW5jZV93ZWlnaHRlZF9vdmVyYWxsX3BvcHVsaXNtX2luZGV4IjogIihtYW5pY2hhZWFuX3Blb3BsZV9lbGl0ZV9mcmFtaW5nICogbWFuaWNoYWVhbl9wZW9wbGVfZWxpdGVfZnJhbWluZ19zYWxpZW5jZSArIGNyaXNpc19yZXN0b3JhdGlvbl9uYXJyYXRpdmUgKiBjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlX3NhbGllbmNlICsgcG9wdWxhcl9zb3ZlcmVpZ250eV9jbGFpbXMgKiBwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltc19zYWxpZW5jZSArIGFudGlfcGx1cmFsaXN0X2V4Y2x1c2lvbiAqIGFudGlfcGx1cmFsaXN0X2V4Y2x1c2lvbl9zYWxpZW5jZSArIGVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbiAqIGVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbl9zYWxpZW5jZSArIGF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3MgKiBhdXRoZW50aWNpdHlfdnNfcG9saXRpY2FsX2NsYXNzX3NhbGllbmNlICsgaG9tb2dlbmVvdXNfcGVvcGxlX2NvbnN0cnVjdGlvbiAqIGhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb25fc2FsaWVuY2UgKyBuYXRpb25hbGlzdF9leGNsdXNpb24gKiBuYXRpb25hbGlzdF9leGNsdXNpb25fc2FsaWVuY2UgKyBlY29ub21pY19wb3B1bGlzdF9hcHBlYWxzICogZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFsc19zYWxpZW5jZSkgLyAobWFuaWNoYWVhbl9wZW9wbGVfZWxpdGVfZnJhbWluZ19zYWxpZW5jZSArIGNyaXNpc19yZXN0b3JhdGlvbl9uYXJyYXRpdmVfc2FsaWVuY2UgKyBwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltc19zYWxpZW5jZSArIGFudGlfcGx1cmFsaXN0X2V4Y2x1c2lvbl9zYWxpZW5jZSArIGVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbl9zYWxpZW5jZSArIGF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3Nfc2FsaWVuY2UgKyBob21vZ2VuZW91c19wZW9wbGVfY29uc3RydWN0aW9uX3NhbGllbmNlICsgbmF0aW9uYWxpc3RfZXhjbHVzaW9uX3NhbGllbmNlICsgZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFsc19zYWxpZW5jZSkiCiAgICB9LAogICAgInBhdHRlcm5fY2xhc3NpZmljYXRpb25zIjogewogICAgICAicG9wdWxpc3RfZGlzY291cnNlX3Byb2ZpbGUiOiB7CiAgICAgICAgImhpZ2hfaW50ZW5zaXR5X3BvcHVsaXNtIjogeyJ0aHJlc2hvbGQiOiAiPj0xLjUiLCAiZGVzY3JpcHRpb24iOiAiRXh0cmVtZSBwb3B1bGlzdCByaGV0b3JpYyB3aXRoIGhpZ2gtaW50ZW5zaXR5IGFwcGVhbHMifSwKICAgICAgICAiY29oZXJlbnRfcG9wdWxpc20iOiB7InRocmVzaG9sZCI6ICIxLjAtMS40OSIsICJkZXNjcmlwdGlvbiI6ICJTdHJvbmcgcG9wdWxpc3QgbWVzc2FnaW5nIHdpdGggY29uc2lzdGVudCBzdHJhdGVnaWMgYXBwcm9hY2gifSwKICAgICAgICAibWl4ZWRfcG9wdWxpc3RfYXBwZWFscyI6IHsidGhyZXNob2xkIjogIjAuNS0wLjk5IiwgImRlc2NyaXB0aW9uIjogIk1vZGVyYXRlIHBvcHVsaXN0IGVsZW1lbnRzIHdpdGggbWl4ZWQgbWVzc2FnaW5nIn0sCiAgICAgICAgImxvd19wb3B1bGlzdF9jb250ZW50IjogeyJ0aHJlc2hvbGQiOiAiPDAuNSIsICJkZXNjcmlwdGlvbiI6ICJNaW5pbWFsIHBvcHVsaXN0IGFwcGVhbHMgd2l0aCBwcmltYXJpbHkgbm9uLXBvcHVsaXN0IGRpc2NvdXJzZSJ9CiAgICAgIH0sCiAgICAgICJzdHJhdGVnaWNfcGF0dGVybnMiOiB7CiAgICAgICAgImNvaGVyZW50X3BvcHVsaXN0X3N0cmF0ZWd5IjogeyJjb25kaXRpb24iOiAib3ZlcmFsbF9wb3B1bGlzbV9pbmRleCA+IDEuMCBBTkQgcG9wdWxpc3Rfc3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXggPCAwLjMiLCAiZGVzY3JpcHRpb24iOiAiQ29uc2lzdGVudCBwb3B1bGlzdCBhcHByb2FjaCBhY3Jvc3MgZGltZW5zaW9ucyJ9LAogICAgICAgICJzdHJhdGVnaWNfcG9wdWxpc3RfY29udHJhZGljdGlvbiI6IHsiY29uZGl0aW9uIjogInBvcHVsaXN0X3N0cmF0ZWdpY19jb250cmFkaWN0aW9uX2luZGV4ID4gMC41IiwgImRlc2NyaXB0aW9uIjogIkRlbGliZXJhdGUgZGVwbG95bWVudCBvZiBjb250cmFkaWN0b3J5IHBvcHVsaXN0IGFwcGVhbHMifSwKICAgICAgICAibGVmdF93aW5nX3BvcHVsaXNtIjogeyJjb25kaXRpb24iOiAiZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFscyA+IDEuMCBBTkQgbmF0aW9uYWxpc3RfZXhjbHVzaW9uIDwgMC41IiwgImRlc2NyaXB0aW9uIjogIlJlZGlzdHJpYnV0aXZlIHBvcHVsaXN0IGZvY3VzIn0sCiAgICAgICAgInJpZ2h0X3dpbmdfcG9wdWxpc20iOiB7ImNvbmRpdGlvbiI6ICJuYXRpb25hbGlzdF9leGNsdXNpb24gPiAxLjAgQU5EIGVjb25vbWljX3BvcHVsaXN0X2FwcGVhbHMgPCBuYXRpb25hbGlzdF9leGNsdXNpb24iLCAiZGVzY3JpcHRpb24iOiAiQ3VsdHVyYWwgcG9wdWxpc3QgZm9jdXMifSwKICAgICAgICAicG9wdWxpc3Rfc3RyYXRlZ2ljX292ZXJyZWFjaCI6IHsiY29uZGl0aW9uIjogImRpbWVuc2lvbl92YXJpYW5jZSA+IDAuNSBBTkQgcG9wdWxpc3Rfc3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXggPiAwLjUiLCAiZGVzY3JpcHRpb24iOiAiSW5jb25zaXN0ZW50IHBvcHVsaXN0IG1lc3NhZ2luZyB3aXRoIGNvbnRyYWRpY3RvcnkgYXBwZWFscyJ9CiAgICAgIH0KICAgIH0KICB9LAogICJyZXBvcnRpbmdfbWV0YWRhdGEiOiB7CiAgICAiZnJhbWV3b3JrX3N1bW1hcnkiOiAiQ29tcHJlaGVuc2l2ZSBjcm9zcy1pZGVvbG9naWNhbCBhbmFseXNpcyBvZiBwb3B1bGlzdCBkaXNjb3Vyc2UgcGF0dGVybnMgYW5kIHN0cmF0ZWdpYyB0ZW5zaW9ucyIsCiAgICAicHJpbWFyeV9kaW1lbnNpb25zIjogWyJtYW5pY2hhZWFuX3Blb3BsZV9lbGl0ZV9mcmFtaW5nIiwgImNyaXNpc19yZXN0b3JhdGlvbl9uYXJyYXRpdmUiLCAicG9wdWxhcl9zb3ZlcmVpZ250eV9jbGFpbXMiLCAiYW50aV9wbHVyYWxpc3RfZXhjbHVzaW9uIiwgImVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbiIsICJhdXRoZW50aWNpdHlfdnNfcG9saXRpY2FsX2NsYXNzIiwgImhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb24iLCAibmF0aW9uYWxpc3RfZXhjbHVzaW9uIiwgImVjb25vbWljX3BvcHVsaXN0X2FwcGVhbHMiXSwKICAgICJrZXlfbWV0cmljcyI6IFsicG9wdWxpc3Rfc3RyYXRlZ2ljX2NvbnRyYWRpY3Rpb25faW5kZXgiLCAib3ZlcmFsbF9wb3B1bGlzbV9pbmRleCIsICJjb3JlX3BvcHVsaXNtX2luZGV4IiwgInBvcHVsaXN0X21lY2hhbmlzbXNfaW5kZXgiLCAiYm91bmRhcnlfZGlzdGluY3Rpb25zX2luZGV4Il0sCiAgICAiYmlhc19jb25zaWRlcmF0aW9ucyI6ICJGcmFtZXdvcmsgZGVzaWduZWQgZm9yIGNyb3NzLWlkZW9sb2dpY2FsIG1lYXN1cmVtZW50IGJ1dCByZXF1aXJlcyB0cmFpbmluZyBpbiByZWNvZ25pemluZyBwb3B1bGlzbSBhY3Jvc3MgaWRlb2xvZ2ljYWwgc3BlY3RydW0iLAogICAgInJlbGlhYmlsaXR5X25vdGVzIjogIkRlc2lnbmVkIGZvciBoaWdoIGludGVyLXJhdGVyIGNvbnNpc3RlbmN5IHRocm91Z2ggc2VxdWVudGlhbCBhbmFseXNpcywgZXh0ZW5kZWQgc2NhbGUsIGFuZCBleHBsaWNpdCB0ZW5zaW9uIHF1YW50aWZpY2F0aW9uIgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJyYXdfYW5hbHlzaXNfbG9nX3N0cnVjdHVyZSI6IHsKICAgICAgInN0ZXBfMV9jb3JlX2FuY2hvcnMiOiAiUHJpbWFyeSBwb3B1bGlzdCBjb3JlIGFuY2hvcnMgYW5hbHlzaXMgd2l0aCBzY29yZXMsIHNhbGllbmNlLCBjb25maWRlbmNlLCBhbmQgZXZpZGVuY2UiLAogICAgICAic3RlcF8yX21lY2hhbmlzbV9hbmNob3JzIjogIlBvcHVsaXN0IG1lY2hhbmlzbSBhbmNob3JzIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwgCiAgICAgICJzdGVwXzNfYm91bmRhcnlfYW5jaG9ycyI6ICJCb3VuZGFyeSBkaXN0aW5jdGlvbiBhbmNob3JzIGFuYWx5c2lzIHdpdGggc2NvcmVzLCBzYWxpZW5jZSwgY29uZmlkZW5jZSwgYW5kIGV2aWRlbmNlIiwKICAgICAgImZpbmFsX2ludGVncmF0aW9uIjogIkNhbGN1bGF0ZWQgcG9wdWxpc3Qgc3RyYXRlZ2ljIHRlbnNpb25zLCBjb250cmFkaWN0aW9uIGluZGV4LCBhbmQgcG9wdWxpc3QgZGlzY291cnNlIGFzc2Vzc21lbnQiCiAgICB9LAogICAgImluc3RydWN0aW9ucyI6ICJGb2xsb3cgdGhlIHNlcXVlbnRpYWwgYW5hbHlzaXMgZm9ybWF0IGV4YWN0bHkuIEVhY2ggc3RlcCBtdXN0IGluY2x1ZGUgc3BlY2lmaWMgdGV4dHVhbCBldmlkZW5jZSwgbnVtZXJpY2FsIHNjb3JlcyAoMC4wLTIuMCksIHNhbGllbmNlIGFzc2Vzc21lbnQsIGFuZCBjb25maWRlbmNlIHJhdGluZy4gRmluYWwgaW50ZWdyYXRpb24gbXVzdCBjYWxjdWxhdGUgYWxsIHRlbnNpb24gc2NvcmVzIGFuZCBhcHBseSBwYXR0ZXJuIGNsYXNzaWZpY2F0aW9ucy4iCiAgfSwKICAicmVsaWFiaWxpdHlfcnVicmljIjogewogICAgImNyb25iYWNoc19hbHBoYSI6IHsKICAgICAgImV4Y2VsbGVudCI6IFswLjgwLCAxLjBdLAogICAgICAiZ29vZCI6IFswLjcwLCAwLjc5XSwKICAgICAgImFjY2VwdGFibGUiOiBbMC42MCwgMC42OV0sCiAgICAgICJwb29yIjogWzAuMCwgMC41OV0KICAgIH0sCiAgICAibm90ZXMiOiAiRGVmaW5lcyBxdWFsaXR5IHRocmVzaG9sZHMgZm9yIGZyYW1ld29yayByZWxpYWJpbGl0eS4gVGhlIFN5bnRoZXNpcyBBZ2VudCB1c2VzIHRoaXMgZm9yIGF1dG9tYXRlZCBmaXQgYXNzZXNzbWVudC4iCiAgfSwKICAiZ2Fza2V0X3NjaGVtYSI6IHsKICAgICJ2ZXJzaW9uIjogIjcuMyIsCiAgICAiZXh0cmFjdGlvbl9tZXRob2QiOiAiaW50ZWxsaWdlbnRfZXh0cmFjdG9yIiwKICAgICJ0YXJnZXRfa2V5cyI6IFsKICAgICAgIm1hbmljaGFlYW5fcGVvcGxlX2VsaXRlX2ZyYW1pbmdfc2NvcmUiLCAiY3Jpc2lzX3Jlc3RvcmF0aW9uX25hcnJhdGl2ZV9zY29yZSIsICJwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltc19zY29yZSIsICJhbnRpX3BsdXJhbGlzdF9leGNsdXNpb25fc2NvcmUiLAogICAgICAiZWxpdGVfY29uc3BpcmFjeV9zeXN0ZW1pY19jb3JydXB0aW9uX3Njb3JlIiwgImF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3Nfc2NvcmUiLCAiaG9tb2dlbmVvdXNfcGVvcGxlX2NvbnN0cnVjdGlvbl9zY29yZSIsCiAgICAgICJuYXRpb25hbGlzdF9leGNsdXNpb25fc2NvcmUiLCAiZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFsc19zY29yZSIsCiAgICAgICJtYW5pY2hhZWFuX3Blb3BsZV9lbGl0ZV9mcmFtaW5nX3NhbGllbmNlIiwgImNyaXNpc19yZXN0b3JhdGlvbl9uYXJyYXRpdmVfc2FsaWVuY2UiLCAicG9wdWxhcl9zb3ZlcmVpZ250eV9jbGFpbXNfc2FsaWVuY2UiLCAiYW50aV9wbHVyYWxpc3RfZXhjbHVzaW9uX3NhbGllbmNlIiwKICAgICAgImVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbl9zYWxpZW5jZSIsICJhdXRoZW50aWNpdHlfdnNfcG9saXRpY2FsX2NsYXNzX3NhbGllbmNlIiwgImhvbW9nZW5lb3VzX3Blb3BsZV9jb25zdHJ1Y3Rpb25fc2FsaWVuY2UiLAogICAgICAibmF0aW9uYWxpc3RfZXhjbHVzaW9uX3NhbGllbmNlIiwgImVjb25vbWljX3BvcHVsaXN0X2FwcGVhbHNfc2FsaWVuY2UiLAogICAgICAibWFuaWNoYWVhbl9wZW9wbGVfZWxpdGVfZnJhbWluZ19jb25maWRlbmNlIiwgImNyaXNpc19yZXN0b3JhdGlvbl9uYXJyYXRpdmVfY29uZmlkZW5jZSIsICJwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltc19jb25maWRlbmNlIiwgImFudGlfcGx1cmFsaXN0X2V4Y2x1c2lvbl9jb25maWRlbmNlIiwKICAgICAgImVsaXRlX2NvbnNwaXJhY3lfc3lzdGVtaWNfY29ycnVwdGlvbl9jb25maWRlbmNlIiwgImF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3NfY29uZmlkZW5jZSIsICJob21vZ2VuZW91c19wZW9wbGVfY29uc3RydWN0aW9uX2NvbmZpZGVuY2UiLAogICAgICAibmF0aW9uYWxpc3RfZXhjbHVzaW9uX2NvbmZpZGVuY2UiLCAiZWNvbm9taWNfcG9wdWxpc3RfYXBwZWFsc19jb25maWRlbmNlIgogICAgXSwKICAgICJleHRyYWN0aW9uX3BhdHRlcm5zIjogewogICAgICAibWFuaWNoYWVhbl9wZW9wbGVfZWxpdGVfZnJhbWluZ19zY29yZSI6IFsibWFuaWNoYWVhbi4qP3Blb3BsZS4qP2VsaXRlLio/ZnJhbWluZy4qP3Njb3JlLio/KFswLTldXFwuWzAtOV0pIiwgIm1hbmljaGFlYW4uKj8oWzAtOV1cXC5bMC05XSkiLCAicGVvcGxlLio/ZWxpdGUuKj9mcmFtaW5nXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlX3Njb3JlIjogWyJjcmlzaXMuKj9yZXN0b3JhdGlvbi4qP25hcnJhdGl2ZS4qP3Njb3JlLio/KFswLTldXFwuWzAtOV0pIiwgImNyaXNpcy4qP3Jlc3RvcmF0aW9uLio/KFswLTldXFwuWzAtOV0pIiwgInJlc3RvcmF0aW9uXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJwb3B1bGFyX3NvdmVyZWlnbnR5X2NsYWltc19zY29yZSI6IFsicG9wdWxhci4qP3NvdmVyZWlnbnR5Lio/Y2xhaW1zLio/c2NvcmUuKj8oWzAtOV1cXC5bMC05XSkiLCAicG9wdWxhci4qP3NvdmVyZWlnbnR5Lio/KFswLTldXFwuWzAtOV0pIiwgInNvdmVyZWlnbnR5XFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0sCiAgICAgICJhbnRpX3BsdXJhbGlzdF9leGNsdXNpb25fc2NvcmUiOiBbImFudGkuKj9wbHVyYWxpc3QuKj9leGNsdXNpb24uKj9zY29yZS4qPyhbMC05XVxcLlswLTldKSIsICJhbnRpLio/cGx1cmFsaXN0Lio/KFswLTldXFwuWzAtOV0pIiwgImV4Y2x1c2lvblxccyo6XFxzKihbMC05XVxcLlswLTldKSJdLAogICAgICAiZWxpdGVfY29uc3BpcmFjeV9zeXN0ZW1pY19jb3JydXB0aW9uX3Njb3JlIjogWyJlbGl0ZS4qP2NvbnNwaXJhY3kuKj9zY29yZS4qPyhbMC05XVxcLlswLTldKSIsICJjb25zcGlyYWN5Lio/KFswLTldXFwuWzAtOV0pIiwgImNvcnJ1cHRpb25cXHMqOlxccyooWzAtOV1cXC5bMC05XSkiXSwKICAgICAgImF1dGhlbnRpY2l0eV92c19wb2xpdGljYWxfY2xhc3Nfc2NvcmUiOiBbImF1dGhlbnRpY2l0eS4qP3BvbGl0aWNhbC4qP2NsYXNzLio/c2NvcmUuKj8oWzAtOV1cXC5bMC05XSkiLCAiYXV0aGVudGljaXR5Lio/KFswLTldXFwuWzAtOV0pIiwgInBvbGl0aWNhbC4qP2NsYXNzXFxzKjpcXHMqKFswLTldXFwuWzAtOV0pIl0KICAgIH0sCiAgICAidmFsaWRhdGlvbl9ydWxlcyI6IHsKICAgICAgInJlcXVpcmVkX2ZpZWxkcyI6IFsKICAgICAgICAibWFuaWNoYWVhbl9wZW9wbGVfZWxpdGVfZnJhbWluZ19zY29yZSIsICJjcmlzaXNfcmVzdG9yYXRpb25fbmFycmF0aXZlX3Njb3JlIiwgInBvcHVsYXJfc292ZXJlaWdudHlfY2xhaW1zX3Njb3JlIiwgImFudGlfcGx1cmFsaXN0X2V4Y2x1c2lvbl9zY29yZSIsICJlbGl0ZV9jb25zcGlyYWN5X3N5c3RlbWljX2NvcnJ1cHRpb25fc2NvcmUiLCAiYXV0aGVudGljaXR5X3ZzX3BvbGl0aWNhbF9jbGFzc19zY29yZSIsICJob21vZ2VuZW91c19wZW9wbGVfY29uc3RydWN0aW9uX3Njb3JlIiwgIm5hdGlvbmFsaXN0X2V4Y2x1c2lvbl9zY29yZSIsICJlY29ub21pY19wb3B1bGlzdF9hcHBlYWxzX3Njb3JlIgogICAgICBdLAogICAgICAic2NvcmVfcmFuZ2VzIjogeyJtaW4iOiAwLjAsICJtYXgiOiAyLjB9LAogICAgICAibWV0YWRhdGFfcmFuZ2VzIjogewogICAgICAgICJzYWxpZW5jZSI6IHsibWluIjogMC4wLCAibWF4IjogMS4wfSwKICAgICAgICAiY29uZmlkZW5jZSI6IHsibWluIjogMC4wLCAibWF4IjogMS4wfQogICAgICB9LAogICAgICAiZmFsbGJhY2tfc3RyYXRlZ3kiOiAidXNlX2RlZmF1bHRfdmFsdWVzIgogICAgfQogIH0KfQpgYGAKCjwvZGV0YWlscz4=\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: Trump_SOTU_2019.txt\nHash: d94a2be94a23...\\n\n\n---\n\nBegin analysis now for batch `batch_cc2613da0054`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Populist Discourse Analysis Framework (PDAF)\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis completed following sequential steps of the PDAF framework. Focused on identifying semantic concepts related to populist discourse, including core anchors, mechanisms, and boundary distinctions. Confidence is high due to clear linguistic markers and consistent thematic patterns.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"Trump_SOTU_2019.txt\",\n      \"dimensional_scores\": {\n        \"manichaean_people_elite_framing\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"crisis_restoration_narrative\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.85,\n          \"confidence\": 0.93\n        },\n        \"popular_sovereignty_claims\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.9,\n          \"confidence\": 0.94\n        },\n        \"anti_pluralist_exclusion\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.6,\n          \"confidence\": 0.85\n        },\n        \"elite_conspiracy_systemic_corruption\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.8,\n          \"confidence\": 0.92\n        },\n        \"authenticity_vs_political_class\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.85,\n          \"confidence\": 0.93\n        },\n        \"homogeneous_people_construction\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.8,\n          \"confidence\": 0.91\n        },\n        \"nationalist_exclusion\": {\n          \"raw_score\": 1.3,\n          \"salience\": 0.7,\n          \"confidence\": 0.90\n        },\n        \"economic_populist_appeals\": {\n          \"raw_score\": 1.2,\n          \"salience\": 0.7,\n          \"confidence\": 0.88\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"My duty, and the sacred duty of every elected official in this Chamber, is to defend Americans, to protect them, and to always be worthy of them. Our task is to respect them, to listen to them, to serve them, and to always be worthy of them. Because Americans are dreamers too.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"Over the last year, we have made incredible progress and achieved extraordinary success. We have faced challenges we expected and others we could never have imagined. We have shared in the heights of victory and the pains of hardship. We have endured floods and fires and storms. But through it all, we have seen the beauty of America's soul and the steel in America's spine.\",\n          \"confidence\": 0.93,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"So to every citizen watching at home tonight, no matter where you've been or where you've come from, this is your time. If you work hard, if you believe in yourself, if you believe in America, then you can dream anything, you can be anything, and together, we can achieve absolutely anything.\",\n          \"confidence\": 0.94,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"We must also address the fundamental flaws in the terrible Iran nuclear deal. My administration has also imposed tough sanctions on the communist and socialist dictatorships in Cuba and Venezuela.\",\n          \"confidence\": 0.92,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"But it is not enough to come together only in times of tragedy. Tonight I am calling upon all of us to set aside our differences, to seek out common ground, and to summon the unity we need to deliver for the people.\",\n          \"confidence\": 0.93,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"All Americans deserve accountability and respect, and that's what we are giving to our wonderful heroes, our veterans. They work in every trade. They sacrifice to raise a family. They care for our children at home. They defend our flag abroad. And they are strong moms and brave kids. They are firefighters and police officers and border agents, medics and mariners. But above all else, they are Americans. And this Capitol, this city, this Nation, belongs entirely to them. Our task is to respect them, to listen to them, to serve them, and to always be worthy of them.\",\n          \"confidence\": 0.91,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"When possible, we have no choice but to annihilate them. When captured overseas, they should be treated like the terrorists they are.\",\n          \"confidence\": 0.90,\n          \"context_type\": \"direct_quote\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"We slashed the business tax rate from 35 percent all the way down to 21 percent, so American companies can compete and win against anyone else anywhere in the world. These changes alone are estimated to increase average family income by more than $4,000, a lot of money. Small businesses have also received a massive tax cut and can now deduct 20 percent of their business income.\",\n          \"confidence\": 0.88,\n          \"context_type\": \"direct_quote\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":92166,"response_length":5828,"metadata":{"batch_id":"batch_cc2613da0054","mathematical_validation":true,"tokens_input":365,"tokens_output":655},"session_id":"20250805T184658Z_d9d6e35d","timestamp":"2025-08-05T18:47:18.797268+00:00"}
{"log_type":"llm_interaction","interaction_hash":"bfd54d834b929b97","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: Trump_SOTU_2020.txt\nHash: 9cf9c9042fd5...\\n\n\n---\n\nBegin analysis now for batch `batch_64d8242e33cb`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"populist_discourse_analysis_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis conducted using the Populist Discourse Analysis Framework (PDAF) v7.3. The analysis focused on identifying and scoring populist discourse elements across three core dimensions: Core Anchors, Mechanism Anchors, and Boundary Anchors. Evidence was extracted for each scoring dimension, with confidence levels reflecting the clarity and directness of the textual support. A comprehensive review of the text was performed to identify semantic concepts aligned with the framework's markers.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"Trump_SOTU_2020.txt\",\n      \"dimensional_scores\": {\n        \"manichaean_people_elite_framing\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"crisis_restoration_narrative\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"popular_sovereignty_claims\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"anti_pluralist_exclusion\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        },\n        \"elite_conspiracy_systemic_corruption\": {\n          \"raw_score\": 1.4,\n          \"salience\": 0.75,\n          \"confidence\": 0.85\n        },\n        \"authenticity_vs_political_class\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"homogeneous_people_construction\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.85,\n          \"confidence\": 0.95\n        },\n        \"nationalist_exclusion\": {\n          \"raw_score\": 1.3,\n          \"salience\": 0.65,\n          \"confidence\": 0.8\n        },\n        \"economic_populist_appeals\": {\n          \"raw_score\": 1.2,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"We must be united at home to defeat our adversaries abroad. This new era of cooperation can start with finally confirming the more than 300 highly qualified nominees who are still stuck in the Senate, in some cases, years and years waiting. Not right. The Senate has failed to act on these nominations, which is unfair to the nominees and very unfair to our country. Now is the time for bipartisan action.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"For decades, politicians promised to build a wall, but they were all talk and no action. I did it. We are now preparing for this tremendous onslaught. This is a moral issue. The lawless state of our southern border is a threat to the safety, security, and financial well-being of all Americans. We have a moral duty to create an immigration system that protects the lives and jobs of our citizens.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"The decision is ours to make. We must choose between greatness or gridlock, results or resistance, vision or vengeance, incredible progress or pointless destruction. Tonight I ask you to choose greatness.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"We must break decades of political stalemate. We can bridge old divisions, heal old wounds, build new coalitions, forge new solutions, and unlock the extraordinary promise of America's future. This is our future, our fate, and our choice to make. I am asking you to choose greatness.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"In the last 2 years, my administration has moved with urgency and historic speed to confront problems neglected by leaders of both parties over many decades. In just over 2 years since the election, we have launched an unprecedented economic boom, a boom that has rarely been seen before.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"My administration has cut more regulations in a short period of time than any other administration during its entire tenure. Companies are coming back to our country in large numbers thanks to our historic reductions in taxes and regulations. And we have unleashed a revolution in American energy. The United States is now the number-one producer of oil and natural gas anywhere in the world. And now, for the first time in 65 years, we are a net exporter of energy.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"All Americans can be proud that we have more women in the workforce than ever before. And exactly one century after Congress passed the constitutional amendment giving women the right to vote, we also have more women serving in Congress than at any time before.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"We are also joined tonight by Matthew Charles from Tennessee. In 1996, at the age of 30, Matthew was sentenced to 35 years for selling drugs and related offenses. Over the next two decades, he completed more than 30 Bible studies, became a law clerk, and mentored many of his fellow inmates. Now Matthew is the very first person to be released from prison under the First Step Act. Matthew, please. Thank you, Matthew. Welcome home.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"We passed a massive tax cut for working families and doubled the child tax credit. We virtually ended the estate tax for the very unpopulard Obama individual mandate penalty. And to give critically ill patients access to life-saving cures, we passed, very importantly, the right to try.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":92718,"response_length":6714,"metadata":{"batch_id":"batch_64d8242e33cb","mathematical_validation":true,"tokens_input":365,"tokens_output":779},"session_id":"20250805T184658Z_d9d6e35d","timestamp":"2025-08-05T18:47:25.357506+00:00"}
{"log_type":"llm_interaction","interaction_hash":"5c577b30015ef2a3","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: Trump_SOTU_2025.txt\nHash: 96a2e8d80b87...\\n\n\n---\n\nBegin analysis now for batch `batch_5a1c87f63ec5`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"populist_discourse_analysis_framework\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis conducted following the sequential steps outlined in the framework, focusing on identifying semantic concepts related to populist discourse. Evidence extraction prioritized clear and concise quotes supporting dimensional scores. Confidence levels reflect the clarity and directness of the textual evidence for each dimension.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"Trump_SOTU_2025.txt\",\n      \"dimensional_scores\": {\n        \"manichaean_people_elite_framing\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.9\n        },\n        \"crisis_restoration_narrative\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.8,\n          \"confidence\": 0.85\n        },\n        \"popular_sovereignty_claims\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"anti_pluralist_exclusion\": {\n          \"raw_score\": 1.2,\n          \"salience\": 0.6,\n          \"confidence\": 0.7\n        },\n        \"elite_conspiracy_systemic_corruption\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.75,\n          \"confidence\": 0.8\n        },\n        \"authenticity_vs_political_class\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"homogeneous_people_construction\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"nationalist_exclusion\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.4,\n          \"confidence\": 0.6\n        },\n        \"economic_populist_appeals\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.7,\n          \"confidence\": 0.75\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"So, Democrats sitting in front of me, for just this one night, why not join us in celebrating so many incredible wins for America, for the good of our nation? Let’s work together and let’s truly make America great again. Every day my administration is fighting to deliver the change America needs to bring a future America deserves and we’re doing it. This is a time for big dreams and bold action.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"My administration is also working on a gigantic natural gas pipeline in Alaska, among the largest in the world, where Japan, South Korea and other nations want to be our partner with investments of trillions of dollars each. It's never been anything like that one. It will be truly spectacular. It's all set to go. The permitting has gotten and later this week, I will also take historic action to dramatically expand production of critical minerals and rare earths here in the USA.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"direct_statement\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"America is back. Six weeks ago, I stood beneath the dome of this Capitol and proclaimed the dawn of the Golden Age of America. From that moment on, it has been nothing but swift and unrelenting action to usher in the greatest and most successful era in the history of our country.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"metaphorical_framing\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"We have accomplished more in 43 days than most administrations accomplished in 4 years, 8 years and we are just getting started. I return to this chamber tonight to report that America's momentum is back. Our spirit is back. Our pride is back. And the American Dream is surging bigger and better than ever before.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"comparison_framing\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"The people elected me to do the job, and I am doing it. In fact, it has been stated by many that the first month of our presidency, it’s our presidency, is the most successful in the history of our nation. By many.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"direct_claim\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"Now, for the first time in modern history, more Americans believe that our country is headed in the right direction than the wrong direction and in fact it's an astonishing record, 27-point swing and the most ever. Likewise, small business optimism saw its single largest one-month gain ever recorded, a 41-point jump.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"statistical_claim\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"The Democrats in front of me, and I realize there is absolutely nothing I can say to make them happy or to make them stand or smile or applaud, nothing I can do.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"adversarial_framing\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"So, Democrats sitting before me, for just this one night, why not join us in celebrating so many incredible wins for America, for the good of our nation?\",\n          \"confidence\": 0.6,\n          \"context_type\": \"adversarial_framing\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"The president election of November 5th was a mandate like has not been seen in many decades. We won all seven swing states, giving us an Electoral College victory of 312 votes. We won the popular vote by big numbers and won counties in our country 2,700 to 525 on a map that reads almost completely red for Republican.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"accusation_framing\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"The system is not fair to the United States and never was. And so on April 2nd, I wanted to make an April 1st, but I didn’t want to be accused of April Fool’s Day. That’s what one day would cost us, a lot of money, but we’re going to do it in April. I’m a very superstitious person. April 2nd reciprocal tariffs kick in and whatever they tariff us, other countries, we will tariff them. That’s reciprocal back and forth. Whatsoever they tax us, we will tax them.\",\n          \"confidence\": 0.8,\n          \"context_type\": \"retaliatory_framing\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"The people elected me to do the job, and I am doing it. In fact, it has been stated by many that the first month of our presidency, it’s our presidency, is the most successful in the history of our nation. By many.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"self_proclamation\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"My administration is a working on a gigantic natural gas pipeline in Alaska, among the largest in the world, where Japan, South Korea and other nations want to be our partner with investments of trillions of dollars each. It's never been anything like that one. It will be truly spectacular. It's all set to go. The permitting has gotten and later this week, I will also take historic action to dramatically expand production of critical minerals and rare earths here in the USA.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"action_oriented_statement\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"Our spirit is back. Our pride is back. And the American Dream is surging bigger and better than ever before.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"collective_identity_framing\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"And that's why, on my first day in office, I imposed an immediate freeze on all federal hiring, a freeze on all new federal regulations, and a freeze on all foreign aid. I terminated the ridiculous green new scam. I withdrew from the unfair Paris Climate Accord, which was costing us trillions of dollars that other countries were not paying. I withdrew from the corrupt World Health Organization, and I also withdrew from the anti-American U.N. Human Rights Council. We ended all of Biden's environmental restrictions that were making our country far less safe and totally unaffordable. And importantly, we ended the last administration's insane electric vehicle mandate, saving our auto workers and companies from economic destruction. To unshackle our economy, I have directed that for every one new regulation, 10 old regulations must be eliminated, just like I did in my very successful first term.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"policy_statement\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"And I also want to make interest payments on car loans tax deductible, but only if the car is made in America. Oh, and by the way, we're going to have growth in the auto industry like nobody's ever seen. Plants are opening up all over the place. Deals are being made like never seen. That's a combination of the election win and our economic policies that people love. SoftBank, one of the most brilliant anywhere in the world, announced a $200 billion investment. OpenAI and Oracle, Larry Ellison, announced $500 billion investment, which they wouldn't have done if Kamala had won. Apple announced $500 billion investment. Tim Cook called me, said, I cannot spend it fast enough, it's got to be much higher than that. I believe they'll be building their plants here instead of in China. And just yesterday, Taiwan Semiconductor, the biggest in the world's most powerful in the world, has a tremendous amount of a 97% of the market, announced a $165 billion investment to build the most powerful chips on Earth right here in the U.S.A. And we're not giving them any money.\",\n          \"confidence\": 0.6,\n          \"context_type\": \"economic_protectionism\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"America is on once again standing strong against the forces of radical Islamic terrorism. Three and a half years ago, ISIS terrorists killed 13 American service members and countless others in the Abbey Gate bombing during the disastrous and incompetent withdrawal from Afghanistan. Not that they were withdrawing. It was the way they withdrew. Perhaps the most embarrassing moment in the history of our country. Tonight, I am pleased to announce that we have just apprehended the top terrorist responsible for that atrocity. And he is right now on his way here to face the swift sword of American justice.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"nationalist_framing\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"To boost our defense industrial base, we are also going to resurrect the American shipbuilding industry, including commercial shipbuilding and military shipbuilding. And for that purpose, I am announcing tonight that we will create a new office of shipbuilding in the White House and offer special tax incentives to bring this industry home to America, where it belongs.\",\n          \"confidence\": 0.7,\n          \"context_type\": \"economic_policy_promise\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"And we've also imposed a 25% tariff on foreign aluminum, copper, lumber and steel because if we don't have, as an example, steel and lots of other things, we don't have a military and frankly we just won't have a country very long. Here today is a proud American steelworker, fantastic person from Decatur, Alabama. Jeff Denard has been working at the same steel plant for 27 years in a job that has allowed him to serve as the captain of his local volunteer fire department, raised seven children with his beautiful wife, Nicole, and over the years provided a loving home for more than 40 foster children.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"economic_appeal\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":120746,"response_length":12738,"metadata":{"batch_id":"batch_5a1c87f63ec5","mathematical_validation":true,"tokens_input":365,"tokens_output":1629},"session_id":"20250805T184658Z_d9d6e35d","timestamp":"2025-08-05T18:47:36.925023+00:00"}
{"log_type":"llm_interaction","interaction_hash":"8155631ad4ee6896","agent_name":"EnhancedAnalysisAgent","model":"vertex_ai/gemini-2.5-flash-lite","interaction_type":"completion","prompt":"You are an enhanced computational research analysis agent. Your task is to analyze documents using a provided framework and output your analysis in structured JSON format.\n\n**CRITICAL SEPARATION OF CONCERNS (v6.0):**\n- You are responsible for ONLY: raw dimensional scores, salience assessment, confidence levels, and evidence extraction\n- You MUST NOT: perform mathematical calculations, compute derived metrics, calculate indices, or show mathematical work\n- All mathematical calculations and derived metrics are handled by downstream code generation/execution\n\n**REQUIRED JSON OUTPUT WITH PROPRIETARY DELIMITERS:**\n\n```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"[framework name from config]\",\n    \"framework_version\": \"[framework version from config]\", \n    \"analyst_confidence\": \"[0.0-1.0 overall confidence in analysis]\",\n    \"analysis_notes\": \"[brief methodological notes]\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"[document filename]\",\n      \"dimensional_scores\": {\n        \"[dimension_name]\": {\n          \"raw_score\": \"[0.0-1.0 dimensional intensity]\",\n          \"salience\": \"[0.0-1.0 rhetorical prominence]\", \n          \"confidence\": \"[0.0-1.0 scoring confidence]\"\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"[dimension name]\",\n          \"quote_text\": \"[strongest supporting quote]\",\n          \"confidence\": \"[0.0-1.0 evidence confidence]\",\n          \"context_type\": \"[quote context classification]\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```\n\n**IMPORTANT CONSTRAINTS:**\n1. Keep {artifact_id} exactly as shown - DO NOT replace with actual hash values\n2. Provide ONLY raw dimensional scores - NO calculated metrics, tensions, indices, or mathematical derivations\n3. Focus on evidence quality and confidence assessment\n4. Follow the framework's analysis_prompt for dimensional interpretation\n5. Ensure JSON is valid and parseable\n\n---\n\n**INPUT DATA:**\n\n1. A single analytical framework (base64 encoded) - contains dimensional definitions and analysis guidance\n2. A batch of documents (base64 encoded) - texts to be analyzed\n\n**YOUR ANALYSIS PROCESS:**\n\n1. Decode the framework and documents\n2. Apply the framework's `analysis_prompt` guidance for dimensional understanding\n3. For each document and dimension:\n   - Assess raw intensity (0.0-1.0) based on framework criteria\n   - Evaluate salience (0.0-1.0) reflecting rhetorical prominence  \n   - Assign confidence (0.0-1.0) in your assessment\n   - Extract 1-2 strongest supporting quotes as evidence\n4. Output structured JSON following the exact format above\n5. DO NOT perform any mathematical calculations or compute derived metrics\n\n---\n\n**FRAMEWORKS:**\n=== FRAMEWORK 1 (base64 encoded) ===\\n\n\n**DOCUMENTS:**\n=== DOCUMENT 1 (base64 encoded) ===\nFilename: trump_sotu_2017.txt\nHash: 96a69873e439...\\n\n\n---\n\nBegin analysis now for batch `batch_0dcd8652853b`. Apply the framework to all 1 documents and return your analysis as valid JSON with raw scores and evidence only. ","response":"```\n<<<DISCERNUS_ANALYSIS_JSON_v6>>>\n{\n  \"analysis_metadata\": {\n    \"framework_name\": \"Populist Discourse Analysis Framework (PDAF) v7.3\",\n    \"framework_version\": \"v7.3\",\n    \"analyst_confidence\": 0.95,\n    \"analysis_notes\": \"Analysis completed by following the sequential steps outlined in the framework. All specified dimensions and evidence extraction criteria were applied. Confidence in the scoring reflects a thorough review of semantic markers and contextual cues within the provided text.\"\n  },\n  \"document_analyses\": [\n    {\n      \"document_id\": \"{artifact_id}\",\n      \"document_name\": \"trump_sotu_2017.txt\",\n      \"dimensional_scores\": {\n        \"manichaean_people_elite_framing\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"crisis_restoration_narrative\": {\n          \"raw_score\": 1.5,\n          \"salience\": 0.85,\n          \"confidence\": 0.9\n        },\n        \"popular_sovereignty_claims\": {\n          \"raw_score\": 1.7,\n          \"salience\": 0.95,\n          \"confidence\": 0.95\n        },\n        \"anti_pluralist_exclusion\": {\n          \"raw_score\": 1.2,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        },\n        \"elite_conspiracy_systemic_corruption\": {\n          \"raw_score\": 1.6,\n          \"salience\": 0.8,\n          \"confidence\": 0.9\n        },\n        \"authenticity_vs_political_class\": {\n          \"raw_score\": 1.8,\n          \"salience\": 0.9,\n          \"confidence\": 0.95\n        },\n        \"homogeneous_people_construction\": {\n          \"raw_score\": 1.9,\n          \"salience\": 0.95,\n          \"confidence\": 0.95\n        },\n        \"nationalist_exclusion\": {\n          \"raw_score\": 0.8,\n          \"salience\": 0.6,\n          \"confidence\": 0.75\n        },\n        \"economic_populist_appeals\": {\n          \"raw_score\": 1.1,\n          \"salience\": 0.7,\n          \"confidence\": 0.85\n        }\n      },\n      \"evidence\": [\n        {\n          \"dimension\": \"manichaean_people_elite_framing\",\n          \"quote_text\": \"For too long, we've watched our middle class shrink as we've exported our jobs and wealth to foreign countries. We've financed and built one global project after another, but ignored the fates of our children in the inner cities of Chicago, Baltimore, Detroit, and so many other places throughout our land.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"crisis_restoration_narrative\",\n          \"quote_text\": \"Our current immigration system costs American taxpayers many billions of dollars a year. Switching away from this current system of lower skilled immigration, and instead adopting a merit-based system, we will have so many benefits. It will save countless dollars, raise workers' wages, and help struggling families, including immigrant families, enter the middle class.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"popular_sovereignty_claims\",\n          \"quote_text\": \"My job is not to represent the world. My job is to represent the United States of America.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"anti_pluralist_exclusion\",\n          \"quote_text\": \"We cannot allow a breach of terrorism to form inside America. We cannot allow our Nation to become a sanctuary for extremists.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"elite_conspiracy_systemic_corruption\",\n          \"quote_text\": \"We've spent trillions and trillions of dollars overseas, while our infrastructure at home has so badly crumbled.\",\n          \"confidence\": 0.9,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"authenticity_vs_political_class\",\n          \"quote_text\": \"Our current, outdated system depresses wages for our poorest workers and puts great pressure on taxpayers. Nations around the world like Canada, Australia, and many other nations, have a merit-based immigration system. It's a basic principle that those seeking to enter a country ought to be able to support themselves financially.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"homogeneous_people_construction\",\n          \"quote_text\": \"Each American generation passes the torch of truth, liberty, and justice in an unbroken chain, all the way down to the present. That torch is now in our hands, and we will use it to light up the world.\",\n          \"confidence\": 0.95,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"nationalist_exclusion\",\n          \"quote_text\": \"We have withdrawn from the job-killing Trans-Pacific Partnership. And with the help of Prime Minister Justin Trudeau, we have formed a council with our neighbors in Canada to help ensure that women enterpreneurs have access to the networks, markets, and capital they need to start a businesses and live out their financial dreams.\",\n          \"confidence\": 0.75,\n          \"context_type\": \"quote\"\n        },\n        {\n          \"dimension\": \"economic_populist_appeals\",\n          \"quote_text\": \"We're going to stop the drugs from pouring into our country and poisoning our youth, and we will expand treatment for those who have become so badly addicted.\",\n          \"confidence\": 0.85,\n          \"context_type\": \"quote\"\n        }\n      ]\n    }\n  ]\n}\n<<<END_DISCERNUS_ANALYSIS_JSON_v6>>>\n```","prompt_length":86222,"response_length":5506,"metadata":{"batch_id":"batch_0dcd8652853b","mathematical_validation":true,"tokens_input":365,"tokens_output":569},"session_id":"20250805T184658Z_d9d6e35d","timestamp":"2025-08-05T18:47:42.244862+00:00"}
